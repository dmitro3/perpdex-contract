{
  "address": "0xc8188FC150f81727B7c6F1ece3BBAc21F62832C8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbolArg",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "exchangeArg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceFeedBaseArg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceFeedQuoteArg",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivOverflow",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "value",
          "type": "uint32"
        }
      ],
      "name": "FundingMaxElapsedSecChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "FundingMaxPremiumRatioChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "fundingRateX96",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "elapsedSec",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "premiumX96",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "markPriceX96",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cumBasePerLiquidityX96",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cumQuotePerLiquidityX96",
          "type": "uint256"
        }
      ],
      "name": "FundingPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "value",
          "type": "uint32"
        }
      ],
      "name": "FundingRolloverSecChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isBid",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "LimitOrderCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isBid",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceX96",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "LimitOrderCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "LiquidityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "PoolFeeRatioChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "normalOrderRatio",
          "type": "uint24"
        },
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "liquidationRatio",
          "type": "uint24"
        },
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "emaNormalOrderRatio",
          "type": "uint24"
        },
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "emaLiquidationRatio",
          "type": "uint24"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "emaSec",
          "type": "uint32"
        }
      ],
      "name": "PriceLimitConfigChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isBaseToQuote",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isExactInput",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oppositeAmount",
          "type": "uint256"
        }
      ],
      "name": "Swapped",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "baseShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteBalance",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseBalancePerShareX96",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isBid",
          "type": "bool"
        },
        {
          "internalType": "uint40",
          "name": "orderId",
          "type": "uint40"
        }
      ],
      "name": "cancelLimitOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isBid",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceX96",
          "type": "uint256"
        }
      ],
      "name": "createLimitOrder",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "orderId",
          "type": "uint40"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchange",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "prevIndexPriceBase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "prevIndexPriceQuote",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "prevIndexPriceTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingMaxElapsedSec",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingMaxPremiumRatio",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingRolloverSec",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCumDeleveragedPerLiquidityX96",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isBid",
          "type": "bool"
        },
        {
          "internalType": "uint40",
          "name": "orderId",
          "type": "uint40"
        }
      ],
      "name": "getLimitOrderExecution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "executionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "executedBase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "executedQuote",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cumBasePerLiquidityX96",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cumQuotePerLiquidityX96",
          "type": "uint256"
        }
      ],
      "name": "getLiquidityDeleveraged",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "getLiquidityValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarkPriceX96",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getShareMarkPriceX96",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isBaseToQuote",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isExactInput",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isLiquidation",
          "type": "bool"
        }
      ],
      "name": "maxSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolFeeRatio",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cumBasePerLiquidityX96",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cumQuotePerLiquidityX96",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseBalancePerShareX96",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isBaseToQuote",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isExactInput",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLiquidation",
          "type": "bool"
        }
      ],
      "name": "previewSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "oppositeAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeedBase",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeedQuote",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceLimitConfig",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "normalOrderRatio",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "liquidationRatio",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "emaNormalOrderRatio",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "emaLiquidationRatio",
          "type": "uint24"
        },
        {
          "internalType": "uint32",
          "name": "emaSec",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceLimitInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "referencePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "referenceTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "emaPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "value",
          "type": "uint32"
        }
      ],
      "name": "setFundingMaxElapsedSec",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "setFundingMaxPremiumRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "value",
          "type": "uint32"
        }
      ],
      "name": "setFundingRolloverSec",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "setPoolFeeRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint24",
              "name": "normalOrderRatio",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "liquidationRatio",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "emaNormalOrderRatio",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "emaLiquidationRatio",
              "type": "uint24"
            },
            {
              "internalType": "uint32",
              "name": "emaSec",
              "type": "uint32"
            }
          ],
          "internalType": "struct MarketStructs.PriceLimitConfig",
          "name": "value",
          "type": "tuple"
        }
      ],
      "name": "setPriceLimitConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isBaseToQuote",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isExactInput",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLiquidation",
          "type": "bool"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "oppositeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "basePartial",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quotePartial",
              "type": "uint256"
            },
            {
              "internalType": "uint40",
              "name": "partialKey",
              "type": "uint40"
            }
          ],
          "internalType": "struct IPerpdexMarketMinimum.SwapResponse",
          "name": "response",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa4624b543aba913a1dfbe17a36bd06f32450e00671ac661d21e0b4239b891144",
  "receipt": {
    "to": null,
    "from": "0x4B78eCe4AA1be3495713199380635537C5fB2326",
    "contractAddress": "0xc8188FC150f81727B7c6F1ece3BBAc21F62832C8",
    "transactionIndex": 1,
    "gasUsed": "4834057",
    "logsBloom": "0x
    "blockHash": "0xc9effb8be73999dd1a223b2793d8ed69c18d5bf9766404588d6c40ad022af551",
    "transactionHash": "0xa4624b543aba913a1dfbe17a36bd06f32450e00671ac661d21e0b4239b891144",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 2001175,
        "transactionHash": "0xa4624b543aba913a1dfbe17a36bd06f32450e00671ac661d21e0b4239b891144",
        "address": "0xc8188FC150f81727B7c6F1ece3BBAc21F62832C8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004b78ece4aa1be3495713199380635537c5fb2326"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc9effb8be73999dd1a223b2793d8ed69c18d5bf9766404588d6c40ad022af551"
      }
    ],
    "blockNumber": 2001175,
    "cumulativeGasUsed": "5595872",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "BTC",
    "0xc5c784ACAcE2531744d7Ed7AFC9624A3ec803D28",
    "0x3864c8A38ad0BD644DBF7b71Ba2443Ab07Eb534F",
    "0x486422E06cae127ED59998C52e7188dBED73d362"
  ],
  "numDeployments": 5,
  "solcInputHash": "8642eae312eb2b97d831fbc7e7d45b89",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbolArg\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"exchangeArg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceFeedBaseArg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceFeedQuoteArg\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivOverflow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"value\",\"type\":\"uint32\"}],\"name\":\"FundingMaxElapsedSecChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"FundingMaxPremiumRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fundingRateX96\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"elapsedSec\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"premiumX96\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"markPriceX96\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cumBasePerLiquidityX96\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cumQuotePerLiquidityX96\",\"type\":\"uint256\"}],\"name\":\"FundingPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"value\",\"type\":\"uint32\"}],\"name\":\"FundingRolloverSecChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"LimitOrderCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceX96\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"LimitOrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"PoolFeeRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"normalOrderRatio\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"liquidationRatio\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"emaNormalOrderRatio\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"emaLiquidationRatio\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"emaSec\",\"type\":\"uint32\"}],\"name\":\"PriceLimitConfigChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBaseToQuote\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExactInput\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oppositeAmount\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteBalance\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseBalancePerShareX96\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"internalType\":\"uint40\",\"name\":\"orderId\",\"type\":\"uint40\"}],\"name\":\"cancelLimitOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceX96\",\"type\":\"uint256\"}],\"name\":\"createLimitOrder\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"orderId\",\"type\":\"uint40\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"prevIndexPriceBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevIndexPriceQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevIndexPriceTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingMaxElapsedSec\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingMaxPremiumRatio\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingRolloverSec\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCumDeleveragedPerLiquidityX96\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"internalType\":\"uint40\",\"name\":\"orderId\",\"type\":\"uint40\"}],\"name\":\"getLimitOrderExecution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executedBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executedQuote\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumBasePerLiquidityX96\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumQuotePerLiquidityX96\",\"type\":\"uint256\"}],\"name\":\"getLiquidityDeleveraged\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"getLiquidityValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarkPriceX96\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getShareMarkPriceX96\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isBaseToQuote\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isExactInput\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isLiquidation\",\"type\":\"bool\"}],\"name\":\"maxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFeeRatio\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumBasePerLiquidityX96\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumQuotePerLiquidityX96\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseBalancePerShareX96\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isBaseToQuote\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isExactInput\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLiquidation\",\"type\":\"bool\"}],\"name\":\"previewSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"oppositeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeedBase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeedQuote\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceLimitConfig\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"normalOrderRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"liquidationRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"emaNormalOrderRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"emaLiquidationRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"emaSec\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceLimitInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"referencePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referenceTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"emaPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"value\",\"type\":\"uint32\"}],\"name\":\"setFundingMaxElapsedSec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"setFundingMaxPremiumRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"value\",\"type\":\"uint32\"}],\"name\":\"setFundingRolloverSec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"setPoolFeeRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint24\",\"name\":\"normalOrderRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"liquidationRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"emaNormalOrderRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"emaLiquidationRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"emaSec\",\"type\":\"uint32\"}],\"internalType\":\"struct MarketStructs.PriceLimitConfig\",\"name\":\"value\",\"type\":\"tuple\"}],\"name\":\"setPriceLimitConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isBaseToQuote\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isExactInput\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLiquidation\",\"type\":\"bool\"}],\"name\":\"swap\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"oppositeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basePartial\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quotePartial\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"partialKey\",\"type\":\"uint40\"}],\"internalType\":\"struct IPerpdexMarketMinimum.SwapResponse\",\"name\":\"response\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"PRBMath__MulDivOverflow(uint256,uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PerpdexMarket.sol\":\"PerpdexMarket\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \\u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248) {\\n        require(value >= type(int248).min && value <= type(int248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return int248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240) {\\n        require(value >= type(int240).min && value <= type(int240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return int240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232) {\\n        require(value >= type(int232).min && value <= type(int232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return int232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224) {\\n        require(value >= type(int224).min && value <= type(int224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return int224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216) {\\n        require(value >= type(int216).min && value <= type(int216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return int216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208) {\\n        require(value >= type(int208).min && value <= type(int208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return int208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200) {\\n        require(value >= type(int200).min && value <= type(int200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return int200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192) {\\n        require(value >= type(int192).min && value <= type(int192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return int192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184) {\\n        require(value >= type(int184).min && value <= type(int184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return int184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176) {\\n        require(value >= type(int176).min && value <= type(int176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return int176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168) {\\n        require(value >= type(int168).min && value <= type(int168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return int168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160) {\\n        require(value >= type(int160).min && value <= type(int160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return int160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152) {\\n        require(value >= type(int152).min && value <= type(int152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return int152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144) {\\n        require(value >= type(int144).min && value <= type(int144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return int144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136) {\\n        require(value >= type(int136).min && value <= type(int136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return int136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120) {\\n        require(value >= type(int120).min && value <= type(int120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return int120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112) {\\n        require(value >= type(int112).min && value <= type(int112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return int112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104) {\\n        require(value >= type(int104).min && value <= type(int104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return int104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96) {\\n        require(value >= type(int96).min && value <= type(int96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return int96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88) {\\n        require(value >= type(int88).min && value <= type(int88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return int88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80) {\\n        require(value >= type(int80).min && value <= type(int80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return int80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72) {\\n        require(value >= type(int72).min && value <= type(int72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return int72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56) {\\n        require(value >= type(int56).min && value <= type(int56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return int56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48) {\\n        require(value >= type(int48).min && value <= type(int48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return int48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40) {\\n        require(value >= type(int40).min && value <= type(int40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return int40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24) {\\n        require(value >= type(int24).min && value <= type(int24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return int24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x02686c31ccb9ee77a299fa5f47327af5271f251a707a0e24f321957166ff0434\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        return a + b;\\n    }\\n}\\n\",\"keccak256\":\"0x62f53f262fabbbc6d8ab49488d8fce36370351aff2b8d3898d499d68995a71c2\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"contracts/PerpdexMarket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { IPerpdexMarket } from \\\"./interfaces/IPerpdexMarket.sol\\\";\\nimport { MarketStructs } from \\\"./lib/MarketStructs.sol\\\";\\nimport { FundingLibrary } from \\\"./lib/FundingLibrary.sol\\\";\\nimport { PoolLibrary } from \\\"./lib/PoolLibrary.sol\\\";\\nimport { PriceLimitLibrary } from \\\"./lib/PriceLimitLibrary.sol\\\";\\nimport { OrderBookLibrary } from \\\"./lib/OrderBookLibrary.sol\\\";\\n\\ncontract PerpdexMarket is IPerpdexMarket, ReentrancyGuard, Ownable {\\n    using Address for address;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n\\n    event PoolFeeRatioChanged(uint24 value);\\n    event FundingMaxPremiumRatioChanged(uint24 value);\\n    event FundingMaxElapsedSecChanged(uint32 value);\\n    event FundingRolloverSecChanged(uint32 value);\\n    event PriceLimitConfigChanged(\\n        uint24 normalOrderRatio,\\n        uint24 liquidationRatio,\\n        uint24 emaNormalOrderRatio,\\n        uint24 emaLiquidationRatio,\\n        uint32 emaSec\\n    );\\n\\n    string public override symbol;\\n    address public immutable override exchange;\\n    address public immutable priceFeedBase;\\n    address public immutable priceFeedQuote;\\n\\n    MarketStructs.PoolInfo public poolInfo;\\n    MarketStructs.FundingInfo public fundingInfo;\\n    MarketStructs.PriceLimitInfo public priceLimitInfo;\\n    MarketStructs.OrderBookInfo orderBookInfo;\\n\\n    uint24 public poolFeeRatio = 3e3;\\n    uint24 public fundingMaxPremiumRatio = 1e4;\\n    uint32 public fundingMaxElapsedSec = 1 days;\\n    uint32 public fundingRolloverSec = 1 days;\\n    MarketStructs.PriceLimitConfig public priceLimitConfig =\\n        MarketStructs.PriceLimitConfig({\\n            normalOrderRatio: 5e4,\\n            liquidationRatio: 10e4,\\n            emaNormalOrderRatio: 20e4,\\n            emaLiquidationRatio: 25e4,\\n            emaSec: 5 minutes\\n        });\\n\\n    modifier onlyExchange() {\\n        _onlyExchange();\\n        _;\\n    }\\n\\n    constructor(\\n        string memory symbolArg,\\n        address exchangeArg,\\n        address priceFeedBaseArg,\\n        address priceFeedQuoteArg\\n    ) {\\n        require(priceFeedBaseArg == address(0) || priceFeedBaseArg.isContract(), \\\"PM_C: base price feed invalid\\\");\\n        require(priceFeedQuoteArg == address(0) || priceFeedQuoteArg.isContract(), \\\"PM_C: quote price feed invalid\\\");\\n\\n        symbol = symbolArg;\\n        exchange = exchangeArg;\\n        priceFeedBase = priceFeedBaseArg;\\n        priceFeedQuote = priceFeedQuoteArg;\\n\\n        FundingLibrary.initializeFunding(fundingInfo);\\n        PoolLibrary.initializePool(poolInfo);\\n    }\\n\\n    function swap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        bool isLiquidation\\n    ) external override onlyExchange nonReentrant returns (SwapResponse memory response) {\\n        (uint256 maxAmount, MarketStructs.PriceLimitInfo memory updated) =\\n            _doMaxSwap(isBaseToQuote, isExactInput, isLiquidation);\\n        require(amount <= maxAmount, \\\"PM_S: too large amount\\\");\\n\\n        OrderBookLibrary.SwapResponse memory swapResponse;\\n        if (isBaseToQuote) {\\n            swapResponse = OrderBookLibrary.swap(\\n                orderBookInfo,\\n                OrderBookLibrary.PreviewSwapParams({\\n                    isBaseToQuote: isBaseToQuote,\\n                    isExactInput: isExactInput,\\n                    amount: amount,\\n                    noRevert: false,\\n                    baseBalancePerShareX96: poolInfo.baseBalancePerShareX96\\n                }),\\n                poolMaxSwap,\\n                _poolSwap\\n            );\\n        } else {\\n            swapResponse = OrderBookLibrary.swap(\\n                orderBookInfo,\\n                OrderBookLibrary.PreviewSwapParams({\\n                    isBaseToQuote: isBaseToQuote,\\n                    isExactInput: isExactInput,\\n                    amount: amount,\\n                    noRevert: false,\\n                    baseBalancePerShareX96: poolInfo.baseBalancePerShareX96\\n                }),\\n                poolMaxSwap,\\n                _poolSwap\\n            );\\n        }\\n        response = SwapResponse({\\n            oppositeAmount: swapResponse.oppositeAmount,\\n            basePartial: swapResponse.basePartial,\\n            quotePartial: swapResponse.quotePartial,\\n            partialKey: swapResponse.partialKey\\n        });\\n\\n        PriceLimitLibrary.update(priceLimitInfo, updated);\\n\\n        emit Swapped(isBaseToQuote, isExactInput, amount, response.oppositeAmount);\\n\\n        _processFunding();\\n    }\\n\\n    function _poolSwap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount\\n    ) private returns (uint256) {\\n        return\\n            PoolLibrary.swap(\\n                poolInfo,\\n                PoolLibrary.SwapParams({\\n                    isBaseToQuote: isBaseToQuote,\\n                    isExactInput: isExactInput,\\n                    amount: amount,\\n                    feeRatio: poolFeeRatio\\n                })\\n            );\\n    }\\n\\n    function addLiquidity(uint256 baseShare, uint256 quoteBalance)\\n        external\\n        override\\n        onlyExchange\\n        nonReentrant\\n        returns (\\n            uint256 base,\\n            uint256 quote,\\n            uint256 liquidity\\n        )\\n    {\\n        if (poolInfo.totalLiquidity == 0) {\\n            FundingLibrary.validateInitialLiquidityPrice(priceFeedBase, priceFeedQuote, baseShare, quoteBalance);\\n        }\\n\\n        (base, quote, liquidity) = PoolLibrary.addLiquidity(\\n            poolInfo,\\n            PoolLibrary.AddLiquidityParams({ base: baseShare, quote: quoteBalance })\\n        );\\n        emit LiquidityAdded(base, quote, liquidity);\\n\\n        _processFunding();\\n    }\\n\\n    function removeLiquidity(uint256 liquidity)\\n        external\\n        override\\n        onlyExchange\\n        nonReentrant\\n        returns (uint256 base, uint256 quote)\\n    {\\n        (base, quote) = PoolLibrary.removeLiquidity(\\n            poolInfo,\\n            PoolLibrary.RemoveLiquidityParams({ liquidity: liquidity })\\n        );\\n        emit LiquidityRemoved(base, quote, liquidity);\\n\\n        _processFunding();\\n    }\\n\\n    function createLimitOrder(\\n        bool isBid,\\n        uint256 base,\\n        uint256 priceX96\\n    ) external override onlyExchange nonReentrant returns (uint40 orderId) {\\n        uint256 markPrice = getMarkPriceX96();\\n\\n        if (isBid) {\\n            require(priceX96 <= markPrice, \\\"PM_CLO: post only bid\\\");\\n        } else {\\n            require(priceX96 >= markPrice, \\\"PM_CLO: post only ask\\\");\\n        }\\n        orderId = OrderBookLibrary.createOrder(orderBookInfo, isBid, base, priceX96);\\n        emit LimitOrderCreated(isBid, base, priceX96, orderId);\\n    }\\n\\n    function cancelLimitOrder(bool isBid, uint40 orderId) external override onlyExchange nonReentrant {\\n        OrderBookLibrary.cancelOrder(orderBookInfo, isBid, orderId);\\n        emit LimitOrderCanceled(isBid, orderId);\\n    }\\n\\n    function setPoolFeeRatio(uint24 value) external onlyOwner nonReentrant {\\n        require(value <= 5e4, \\\"PM_SPFR: too large\\\");\\n        poolFeeRatio = value;\\n        emit PoolFeeRatioChanged(value);\\n    }\\n\\n    function setFundingMaxPremiumRatio(uint24 value) external onlyOwner nonReentrant {\\n        require(value <= 1e5, \\\"PM_SFMPR: too large\\\");\\n        fundingMaxPremiumRatio = value;\\n        emit FundingMaxPremiumRatioChanged(value);\\n    }\\n\\n    function setFundingMaxElapsedSec(uint32 value) external onlyOwner nonReentrant {\\n        require(value <= 7 days, \\\"PM_SFMES: too large\\\");\\n        fundingMaxElapsedSec = value;\\n        emit FundingMaxElapsedSecChanged(value);\\n    }\\n\\n    function setFundingRolloverSec(uint32 value) external onlyOwner nonReentrant {\\n        require(value <= 7 days, \\\"PM_SFRS: too large\\\");\\n        require(value >= 1 hours, \\\"PM_SFRS: too small\\\");\\n        fundingRolloverSec = value;\\n        emit FundingRolloverSecChanged(value);\\n    }\\n\\n    function setPriceLimitConfig(MarketStructs.PriceLimitConfig calldata value) external onlyOwner nonReentrant {\\n        require(value.liquidationRatio <= 5e5, \\\"PE_SPLC: too large liquidation\\\");\\n        require(value.normalOrderRatio <= value.liquidationRatio, \\\"PE_SPLC: invalid\\\");\\n        require(value.emaLiquidationRatio < 1e6, \\\"PE_SPLC: ema too large liq\\\");\\n        require(value.emaNormalOrderRatio <= value.emaLiquidationRatio, \\\"PE_SPLC: ema invalid\\\");\\n        priceLimitConfig = value;\\n        emit PriceLimitConfigChanged(\\n            value.normalOrderRatio,\\n            value.liquidationRatio,\\n            value.emaNormalOrderRatio,\\n            value.emaLiquidationRatio,\\n            value.emaSec\\n        );\\n    }\\n\\n    function previewSwap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        bool isLiquidation\\n    ) external view override returns (uint256 oppositeAmount) {\\n        (uint256 maxAmount, ) = _doMaxSwap(isBaseToQuote, isExactInput, isLiquidation);\\n        require(amount <= maxAmount, \\\"PM_PS: too large amount\\\");\\n\\n        OrderBookLibrary.PreviewSwapResponse memory response =\\n            OrderBookLibrary.previewSwap(\\n                isBaseToQuote ? orderBookInfo.bid : orderBookInfo.ask,\\n                OrderBookLibrary.PreviewSwapParams({\\n                    isBaseToQuote: isBaseToQuote,\\n                    isExactInput: isExactInput,\\n                    amount: amount,\\n                    noRevert: false,\\n                    baseBalancePerShareX96: poolInfo.baseBalancePerShareX96\\n                }),\\n                poolMaxSwap\\n            );\\n\\n        oppositeAmount = PoolLibrary.previewSwap(\\n            poolInfo.base,\\n            poolInfo.quote,\\n            PoolLibrary.SwapParams({\\n                isBaseToQuote: isBaseToQuote,\\n                isExactInput: isExactInput,\\n                amount: amount,\\n                feeRatio: poolFeeRatio\\n            }),\\n            false\\n        );\\n        bool isOppositeBase = isBaseToQuote != isExactInput;\\n        if (isOppositeBase) {\\n            oppositeAmount += response.baseFull + response.basePartial;\\n        } else {\\n            oppositeAmount += response.quoteFull + response.quotePartial;\\n        }\\n    }\\n\\n    function poolMaxSwap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 sharePriceX96\\n    ) private view returns (uint256) {\\n        return\\n            PoolLibrary.maxSwap(\\n                poolInfo.base,\\n                poolInfo.quote,\\n                isBaseToQuote,\\n                isExactInput,\\n                poolFeeRatio,\\n                sharePriceX96\\n            );\\n    }\\n\\n    function maxSwap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        bool isLiquidation\\n    ) external view override returns (uint256 amount) {\\n        (amount, ) = _doMaxSwap(isBaseToQuote, isExactInput, isLiquidation);\\n    }\\n\\n    function getShareMarkPriceX96() public view override returns (uint256) {\\n        if (poolInfo.base == 0) return 0;\\n        return PoolLibrary.getShareMarkPriceX96(poolInfo.base, poolInfo.quote);\\n    }\\n\\n    function getLiquidityValue(uint256 liquidity) external view override returns (uint256, uint256) {\\n        return PoolLibrary.getLiquidityValue(poolInfo, liquidity);\\n    }\\n\\n    function getLiquidityDeleveraged(\\n        uint256 liquidity,\\n        uint256 cumBasePerLiquidityX96,\\n        uint256 cumQuotePerLiquidityX96\\n    ) external view override returns (int256, int256) {\\n        return\\n            PoolLibrary.getLiquidityDeleveraged(\\n                poolInfo.cumBasePerLiquidityX96,\\n                poolInfo.cumQuotePerLiquidityX96,\\n                liquidity,\\n                cumBasePerLiquidityX96,\\n                cumQuotePerLiquidityX96\\n            );\\n    }\\n\\n    function getCumDeleveragedPerLiquidityX96() external view override returns (uint256, uint256) {\\n        return (poolInfo.cumBasePerLiquidityX96, poolInfo.cumQuotePerLiquidityX96);\\n    }\\n\\n    function baseBalancePerShareX96() external view override returns (uint256) {\\n        return poolInfo.baseBalancePerShareX96;\\n    }\\n\\n    function getMarkPriceX96() public view override returns (uint256) {\\n        if (poolInfo.base == 0) return 0;\\n        return PoolLibrary.getMarkPriceX96(poolInfo.base, poolInfo.quote, poolInfo.baseBalancePerShareX96);\\n    }\\n\\n    function getLimitOrderExecution(bool isBid, uint40 orderId)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 executionId,\\n            uint256 executedBase,\\n            uint256 executedQuote\\n        )\\n    {\\n        return OrderBookLibrary.getOrderExecution(orderBookInfo, isBid, orderId);\\n    }\\n\\n    function _processFunding() internal {\\n        uint256 markPriceX96 = getMarkPriceX96();\\n        (int256 fundingRateX96, uint32 elapsedSec, int256 premiumX96) =\\n            FundingLibrary.processFunding(\\n                fundingInfo,\\n                FundingLibrary.ProcessFundingParams({\\n                    priceFeedBase: priceFeedBase,\\n                    priceFeedQuote: priceFeedQuote,\\n                    markPriceX96: markPriceX96,\\n                    maxPremiumRatio: fundingMaxPremiumRatio,\\n                    maxElapsedSec: fundingMaxElapsedSec,\\n                    rolloverSec: fundingRolloverSec\\n                })\\n            );\\n        if (fundingRateX96 == 0) return;\\n\\n        PoolLibrary.applyFunding(poolInfo, fundingRateX96);\\n        emit FundingPaid(\\n            fundingRateX96,\\n            elapsedSec,\\n            premiumX96,\\n            markPriceX96,\\n            poolInfo.cumBasePerLiquidityX96,\\n            poolInfo.cumQuotePerLiquidityX96\\n        );\\n    }\\n\\n    function _doMaxSwap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        bool isLiquidation\\n    ) private view returns (uint256 amount, MarketStructs.PriceLimitInfo memory updated) {\\n        if (poolInfo.totalLiquidity == 0) return (0, updated);\\n\\n        uint256 sharePriceBeforeX96 = getShareMarkPriceX96();\\n        updated = PriceLimitLibrary.updateDry(priceLimitInfo, priceLimitConfig, sharePriceBeforeX96);\\n\\n        uint256 sharePriceBound =\\n            PriceLimitLibrary.priceBound(\\n                updated.referencePrice,\\n                updated.emaPrice,\\n                priceLimitConfig,\\n                isLiquidation,\\n                !isBaseToQuote\\n            );\\n        amount = PoolLibrary.maxSwap(\\n            poolInfo.base,\\n            poolInfo.quote,\\n            isBaseToQuote,\\n            isExactInput,\\n            poolFeeRatio,\\n            sharePriceBound\\n        );\\n\\n        amount += OrderBookLibrary.maxSwap(\\n            isBaseToQuote ? orderBookInfo.bid : orderBookInfo.ask,\\n            isBaseToQuote,\\n            isExactInput,\\n            sharePriceBound,\\n            poolInfo.baseBalancePerShareX96\\n        );\\n    }\\n\\n    // to reduce contract size\\n    function _onlyExchange() private view {\\n        require(exchange == msg.sender, \\\"PM_OE: caller is not exchange\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x7e0d068b4a2b02653ea58ff99cae31e891ef19f914151e583ad0cd9c493da5b3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/amm/uniswap_v2/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2f19685a17fccce181f4cd2ac066e9867a2042935a82a11727080b0798f2dc0a\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IPerpdexMarket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { IPerpdexMarketMinimum } from \\\"./IPerpdexMarketMinimum.sol\\\";\\n\\ninterface IPerpdexMarket is IPerpdexMarketMinimum {\\n    event FundingPaid(\\n        int256 fundingRateX96,\\n        uint32 elapsedSec,\\n        int256 premiumX96,\\n        uint256 markPriceX96,\\n        uint256 cumBasePerLiquidityX96,\\n        uint256 cumQuotePerLiquidityX96\\n    );\\n    event LiquidityAdded(uint256 base, uint256 quote, uint256 liquidity);\\n    event LiquidityRemoved(uint256 base, uint256 quote, uint256 liquidity);\\n    event Swapped(bool isBaseToQuote, bool isExactInput, uint256 amount, uint256 oppositeAmount);\\n    event LimitOrderCreated(bool isBid, uint256 base, uint256 priceX96, uint256 orderId);\\n    event LimitOrderCanceled(bool isBid, uint256 orderId);\\n\\n    // getters\\n\\n    function symbol() external view returns (string memory);\\n\\n    function getMarkPriceX96() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x570e2b5236d9b0a277191cb0455585ae338389ddbd4b520d1f172b983ea57b50\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IPerpdexMarketMinimum.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\ninterface IPerpdexMarketMinimum {\\n    struct SwapResponse {\\n        uint256 oppositeAmount;\\n        uint256 basePartial;\\n        uint256 quotePartial;\\n        uint40 partialKey;\\n    }\\n\\n    function swap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        bool isLiquidation\\n    ) external returns (SwapResponse memory response);\\n\\n    function addLiquidity(uint256 baseShare, uint256 quoteBalance)\\n        external\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function removeLiquidity(uint256 liquidity) external returns (uint256 baseShare, uint256 quoteBalance);\\n\\n    function createLimitOrder(\\n        bool isBid,\\n        uint256 baseShare,\\n        uint256 priceX96\\n    ) external returns (uint40 orderId);\\n\\n    function cancelLimitOrder(bool isBid, uint40 orderId) external;\\n\\n    // getters\\n\\n    function previewSwap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        bool isLiquidation\\n    ) external view returns (uint256);\\n\\n    function maxSwap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        bool isLiquidation\\n    ) external view returns (uint256 amount);\\n\\n    function exchange() external view returns (address);\\n\\n    function getShareMarkPriceX96() external view returns (uint256);\\n\\n    function getLiquidityValue(uint256 liquidity) external view returns (uint256 baseShare, uint256 quoteBalance);\\n\\n    function getLiquidityDeleveraged(\\n        uint256 liquidity,\\n        uint256 cumBasePerLiquidityX96,\\n        uint256 cumQuotePerLiquidityX96\\n    ) external view returns (int256, int256);\\n\\n    function getCumDeleveragedPerLiquidityX96() external view returns (uint256, uint256);\\n\\n    function baseBalancePerShareX96() external view returns (uint256);\\n\\n    function getLimitOrderExecution(bool isBid, uint40 orderId)\\n        external\\n        view\\n        returns (\\n            uint256 executionId,\\n            uint256 executedBase,\\n            uint256 executedQuote\\n        );\\n}\\n\",\"keccak256\":\"0x27e848c26e6973457d945eea3bb2050dec81ae26644f07c6ed93eae8b8b2a27c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IPerpdexPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\n\\ninterface IPerpdexPriceFeed {\\n    function decimals() external view returns (uint8);\\n\\n    /// @dev Returns the index price of the token.\\n    function getPrice() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x250f4b4f299e0257a3d99af442048c2bb9a2c61774ddabff11a2bae3d9553c15\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { PRBMath } from \\\"prb-math/contracts/PRBMath.sol\\\";\\n\\nlibrary FullMath {\\n    // Credit to Uniswap Labs under MIT license\\n    // https://github.com/Uniswap/v3-core/blob/412d9b236a1e75a98568d49b1aeb21e3a1430544/contracts/libraries/FullMath.sol\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max, \\\"FM_MDRU: overflow\\\");\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5954a98eafb2c37da038321b50dcb5ee4f2930c400f70549291fc88ceb69cb56\",\"license\":\"MIT\"},\"contracts/lib/FundingLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { Math } from \\\"../amm/uniswap_v2/libraries/Math.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { MarketStructs } from \\\"./MarketStructs.sol\\\";\\nimport { IPerpdexPriceFeed } from \\\"../interfaces/IPerpdexPriceFeed.sol\\\";\\nimport { PRBMath } from \\\"prb-math/contracts/PRBMath.sol\\\";\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\n\\nlibrary FundingLibrary {\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    struct ProcessFundingParams {\\n        address priceFeedBase;\\n        address priceFeedQuote;\\n        uint256 markPriceX96;\\n        uint24 maxPremiumRatio;\\n        uint32 maxElapsedSec;\\n        uint32 rolloverSec;\\n    }\\n\\n    uint8 public constant MAX_DECIMALS = 77; // 10^MAX_DECIMALS < 2^256\\n\\n    function initializeFunding(MarketStructs.FundingInfo storage fundingInfo) internal {\\n        fundingInfo.prevIndexPriceTimestamp = block.timestamp;\\n    }\\n\\n    // must not revert even if priceFeed is malicious\\n    function processFunding(MarketStructs.FundingInfo storage fundingInfo, ProcessFundingParams memory params)\\n        internal\\n        returns (\\n            int256 fundingRateX96,\\n            uint32 elapsedSec,\\n            int256 premiumX96\\n        )\\n    {\\n        uint256 currentTimestamp = block.timestamp;\\n        uint256 elapsedSec256 = currentTimestamp.sub(fundingInfo.prevIndexPriceTimestamp);\\n        if (elapsedSec256 == 0) return (0, 0, 0);\\n\\n        uint256 indexPriceBase = _getIndexPriceSafe(params.priceFeedBase);\\n        uint256 indexPriceQuote = _getIndexPriceSafe(params.priceFeedQuote);\\n        uint8 decimalsBase = _getDecimalsSafe(params.priceFeedBase);\\n        uint8 decimalsQuote = _getDecimalsSafe(params.priceFeedQuote);\\n        if (\\n            (fundingInfo.prevIndexPriceBase == indexPriceBase && fundingInfo.prevIndexPriceQuote == indexPriceQuote) ||\\n            indexPriceBase == 0 ||\\n            indexPriceQuote == 0 ||\\n            decimalsBase > MAX_DECIMALS ||\\n            decimalsQuote > MAX_DECIMALS\\n        ) {\\n            return (0, 0, 0);\\n        }\\n\\n        elapsedSec256 = Math.min(elapsedSec256, params.maxElapsedSec);\\n        elapsedSec = elapsedSec256.toUint32();\\n\\n        premiumX96 = _calcPremiumX96(decimalsBase, decimalsQuote, indexPriceBase, indexPriceQuote, params.markPriceX96);\\n\\n        int256 maxPremiumX96 = FixedPoint96.Q96.mulRatio(params.maxPremiumRatio).toInt256();\\n        premiumX96 = (-maxPremiumX96).max(maxPremiumX96.min(premiumX96));\\n        fundingRateX96 = premiumX96.mulDiv(elapsedSec256.toInt256(), params.rolloverSec);\\n\\n        fundingInfo.prevIndexPriceBase = indexPriceBase;\\n        fundingInfo.prevIndexPriceQuote = indexPriceQuote;\\n        fundingInfo.prevIndexPriceTimestamp = currentTimestamp;\\n    }\\n\\n    function validateInitialLiquidityPrice(\\n        address priceFeedBase,\\n        address priceFeedQuote,\\n        uint256 base,\\n        uint256 quote\\n    ) internal view {\\n        uint256 indexPriceBase = _getIndexPriceSafe(priceFeedBase);\\n        uint256 indexPriceQuote = _getIndexPriceSafe(priceFeedQuote);\\n        require(indexPriceBase > 0, \\\"FL_VILP: invalid base price\\\");\\n        require(indexPriceQuote > 0, \\\"FL_VILP: invalid quote price\\\");\\n        uint8 decimalsBase = _getDecimalsSafe(priceFeedBase);\\n        uint8 decimalsQuote = _getDecimalsSafe(priceFeedQuote);\\n        require(decimalsBase <= MAX_DECIMALS, \\\"FL_VILP: invalid base decimals\\\");\\n        require(decimalsQuote <= MAX_DECIMALS, \\\"FL_VILP: invalid quote decimals\\\");\\n\\n        uint256 markPriceX96 = PRBMath.mulDiv(quote, FixedPoint96.Q96, base);\\n        int256 premiumX96 = _calcPremiumX96(decimalsBase, decimalsQuote, indexPriceBase, indexPriceQuote, markPriceX96);\\n\\n        require(premiumX96.abs() <= FixedPoint96.Q96.mulRatio(1e5), \\\"FL_VILP: too far from index\\\");\\n    }\\n\\n    function _getIndexPriceSafe(address priceFeed) private view returns (uint256) {\\n        if (priceFeed == address(0)) return 1; // indicate valid\\n\\n        bytes memory payload = abi.encodeWithSignature(\\\"getPrice()\\\");\\n        (bool success, bytes memory data) = address(priceFeed).staticcall(payload);\\n        if (!success) return 0; // invalid\\n\\n        return abi.decode(data, (uint256));\\n    }\\n\\n    function _getDecimalsSafe(address priceFeed) private view returns (uint8) {\\n        if (priceFeed == address(0)) return 0; // indicate valid\\n\\n        bytes memory payload = abi.encodeWithSignature(\\\"decimals()\\\");\\n        (bool success, bytes memory data) = address(priceFeed).staticcall(payload);\\n        if (!success) return 255; // invalid\\n\\n        return abi.decode(data, (uint8));\\n    }\\n\\n    // TODO: must not revert\\n    function _calcPremiumX96(\\n        uint8 decimalsBase,\\n        uint8 decimalsQuote,\\n        uint256 indexPriceBase,\\n        uint256 indexPriceQuote,\\n        uint256 markPriceX96\\n    ) private pure returns (int256 premiumX96) {\\n        uint256 priceRatioX96 = markPriceX96;\\n\\n        if (decimalsBase != 0 || indexPriceBase != 1) {\\n            priceRatioX96 = PRBMath.mulDiv(priceRatioX96, 10**decimalsBase, indexPriceBase);\\n        }\\n        if (decimalsQuote != 0 || indexPriceQuote != 1) {\\n            priceRatioX96 = PRBMath.mulDiv(priceRatioX96, indexPriceQuote, 10**decimalsQuote);\\n        }\\n\\n        premiumX96 = priceRatioX96.toInt256().sub(FixedPoint96.Q96.toInt256());\\n    }\\n}\\n\",\"keccak256\":\"0xce58bb8ff1346c1e8636f7e5829a4624387833ee674ba462d23e9a56678d24e9\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/MarketStructs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\n\\nimport {\\n    BokkyPooBahsRedBlackTreeLibrary as RBTreeLibrary\\n} from \\\"../../deps/BokkyPooBahsRedBlackTreeLibrary/contracts/BokkyPooBahsRedBlackTreeLibrary.sol\\\";\\n\\nlibrary MarketStructs {\\n    struct FundingInfo {\\n        uint256 prevIndexPriceBase;\\n        uint256 prevIndexPriceQuote;\\n        uint256 prevIndexPriceTimestamp;\\n    }\\n\\n    struct PoolInfo {\\n        uint256 base;\\n        uint256 quote;\\n        uint256 totalLiquidity;\\n        uint256 cumBasePerLiquidityX96;\\n        uint256 cumQuotePerLiquidityX96;\\n        uint256 baseBalancePerShareX96;\\n    }\\n\\n    struct PriceLimitInfo {\\n        uint256 referencePrice;\\n        uint256 referenceTimestamp;\\n        uint256 emaPrice;\\n    }\\n\\n    struct PriceLimitConfig {\\n        uint24 normalOrderRatio;\\n        uint24 liquidationRatio;\\n        uint24 emaNormalOrderRatio;\\n        uint24 emaLiquidationRatio;\\n        uint32 emaSec;\\n    }\\n\\n    struct OrderInfo {\\n        uint256 base;\\n        uint256 baseSum;\\n        uint256 quoteSum;\\n        uint48 executionId;\\n    }\\n\\n    struct OrderBookSideInfo {\\n        RBTreeLibrary.Tree tree;\\n        mapping(uint40 => OrderInfo) orderInfos;\\n        uint40 seqKey;\\n    }\\n\\n    struct ExecutionInfo {\\n        uint256 baseBalancePerShareX96;\\n    }\\n\\n    struct OrderBookInfo {\\n        OrderBookSideInfo ask;\\n        OrderBookSideInfo bid;\\n        uint48 seqExecutionId;\\n        mapping(uint48 => ExecutionInfo) executionInfos;\\n    }\\n}\\n\",\"keccak256\":\"0xec8a9fa9aeca0611f8b48fe761461e8182d9562e2fb9e7b3557e1023e4e6192e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/OrderBookLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { Math } from \\\"../amm/uniswap_v2/libraries/Math.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { MarketStructs } from \\\"./MarketStructs.sol\\\";\\nimport { PRBMath } from \\\"prb-math/contracts/PRBMath.sol\\\";\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { FullMath } from \\\"./FullMath.sol\\\";\\nimport {\\n    BokkyPooBahsRedBlackTreeLibrary as RBTreeLibrary\\n} from \\\"../../deps/BokkyPooBahsRedBlackTreeLibrary/contracts/BokkyPooBahsRedBlackTreeLibrary.sol\\\";\\n\\nlibrary OrderBookLibrary {\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n    using RBTreeLibrary for RBTreeLibrary.Tree;\\n\\n    struct SwapResponse {\\n        uint256 oppositeAmount;\\n        uint256 basePartial;\\n        uint256 quotePartial;\\n        uint40 partialKey;\\n    }\\n\\n    struct PreviewSwapResponse {\\n        uint256 amountPool;\\n        uint256 baseFull;\\n        uint256 quoteFull;\\n        uint256 basePartial;\\n        uint256 quotePartial;\\n        uint40 fullLastKey;\\n        uint40 partialKey;\\n    }\\n\\n    function createOrder(\\n        MarketStructs.OrderBookInfo storage orderBookInfo,\\n        bool isBid,\\n        uint256 base,\\n        uint256 priceX96\\n    ) public returns (uint40) {\\n        require(base > 0, \\\"OBL_CO: base is zero\\\");\\n        require(priceX96 > 0, \\\"OBL_CO: price is zero\\\");\\n        MarketStructs.OrderBookSideInfo storage info = isBid ? orderBookInfo.bid : orderBookInfo.ask;\\n        uint40 key = info.seqKey + 1;\\n        info.seqKey = key;\\n        info.orderInfos[key].base = base; // before insert for aggregation\\n        uint128 userData = makeUserData(priceX96);\\n        uint256 slot = getSlot(orderBookInfo);\\n        if (isBid) {\\n            info.tree.insert(key, userData, lessThanBid, aggregateBid, slot);\\n        } else {\\n            info.tree.insert(key, userData, lessThanAsk, aggregateAsk, slot);\\n        }\\n        return key;\\n    }\\n\\n    function cancelOrder(\\n        MarketStructs.OrderBookInfo storage orderBookInfo,\\n        bool isBid,\\n        uint40 key\\n    ) public {\\n        MarketStructs.OrderBookSideInfo storage info = isBid ? orderBookInfo.bid : orderBookInfo.ask;\\n        require(isFullyExecuted(info, key) == 0, \\\"already fully executed\\\");\\n        uint256 slot = getSlot(orderBookInfo);\\n        if (isBid) {\\n            info.tree.remove(key, aggregateBid, slot);\\n        } else {\\n            info.tree.remove(key, aggregateAsk, slot);\\n        }\\n        delete info.orderInfos[key];\\n    }\\n\\n    function getOrderExecution(\\n        MarketStructs.OrderBookInfo storage orderBookInfo,\\n        bool isBid,\\n        uint40 key\\n    )\\n        public\\n        view\\n        returns (\\n            uint48 executionId,\\n            uint256 executedBase,\\n            uint256 executedQuote\\n        )\\n    {\\n        MarketStructs.OrderBookSideInfo storage info = isBid ? orderBookInfo.bid : orderBookInfo.ask;\\n        executionId = isFullyExecuted(info, key);\\n        if (executionId == 0) return (0, 0, 0);\\n\\n        executedBase = info.orderInfos[key].base;\\n        // rounding error occurs, but it is negligible.\\n        executedQuote = PRBMath.mulDiv(\\n            _getQuote(info, key),\\n            orderBookInfo.executionInfos[executionId].baseBalancePerShareX96,\\n            FixedPoint96.Q96\\n        );\\n    }\\n\\n    function isFullyExecuted(MarketStructs.OrderBookSideInfo storage info, uint40 key) private view returns (uint48) {\\n        require(info.tree.exists(key), \\\"OBL_IE: not exist\\\");\\n        while (key != 0 && key != info.tree.root) {\\n            if (info.orderInfos[key].executionId != 0) {\\n                return info.orderInfos[key].executionId;\\n            }\\n            key = info.tree.nodes[key].parent;\\n        }\\n        return 0;\\n    }\\n\\n    function makeUserData(uint256 priceX96) internal pure returns (uint128) {\\n        return priceX96.toUint128();\\n    }\\n\\n    function userDataToPriceX96(uint128 userData) internal pure returns (uint128) {\\n        return userData;\\n    }\\n\\n    function lessThan(\\n        RBTreeLibrary.Tree storage tree,\\n        bool isBid,\\n        uint40 key0,\\n        uint40 key1\\n    ) private view returns (bool) {\\n        uint128 price0 = userDataToPriceX96(tree.nodes[key0].userData);\\n        uint128 price1 = userDataToPriceX96(tree.nodes[key1].userData);\\n        if (price0 == price1) {\\n            return key0 < key1; // time priority\\n        }\\n        // price priority\\n        return isBid ? price0 > price1 : price0 < price1;\\n    }\\n\\n    function lessThanAsk(\\n        uint40 key0,\\n        uint40 key1,\\n        uint256 slot\\n    ) private view returns (bool) {\\n        MarketStructs.OrderBookInfo storage info = getOrderBookInfoFromSlot(slot);\\n        return lessThan(info.ask.tree, false, key0, key1);\\n    }\\n\\n    function lessThanBid(\\n        uint40 key0,\\n        uint40 key1,\\n        uint256 slot\\n    ) private view returns (bool) {\\n        MarketStructs.OrderBookInfo storage info = getOrderBookInfoFromSlot(slot);\\n        return lessThan(info.bid.tree, true, key0, key1);\\n    }\\n\\n    function aggregate(MarketStructs.OrderBookSideInfo storage info, uint40 key) private returns (bool stop) {\\n        uint256 prevBaseSum = info.orderInfos[key].baseSum;\\n        uint256 prevQuoteSum = info.orderInfos[key].quoteSum;\\n        uint40 left = info.tree.nodes[key].left;\\n        uint40 right = info.tree.nodes[key].right;\\n\\n        uint256 baseSum = info.orderInfos[left].baseSum + info.orderInfos[right].baseSum + info.orderInfos[key].base;\\n        uint256 quoteSum = info.orderInfos[left].quoteSum + info.orderInfos[right].quoteSum + _getQuote(info, key);\\n\\n        stop = baseSum == prevBaseSum && quoteSum == prevQuoteSum;\\n        if (!stop) {\\n            info.orderInfos[key].baseSum = baseSum;\\n            info.orderInfos[key].quoteSum = quoteSum;\\n        }\\n    }\\n\\n    function aggregateAsk(uint40 key, uint256 slot) private returns (bool stop) {\\n        MarketStructs.OrderBookInfo storage info = getOrderBookInfoFromSlot(slot);\\n        return aggregate(info.ask, key);\\n    }\\n\\n    function aggregateBid(uint40 key, uint256 slot) private returns (bool stop) {\\n        MarketStructs.OrderBookInfo storage info = getOrderBookInfoFromSlot(slot);\\n        return aggregate(info.bid, key);\\n    }\\n\\n    function subtreeRemoved(\\n        MarketStructs.OrderBookSideInfo storage info,\\n        MarketStructs.OrderBookInfo storage orderBookInfo,\\n        uint40 key\\n    ) private {\\n        info.orderInfos[key].executionId = orderBookInfo.seqExecutionId;\\n    }\\n\\n    function subtreeRemovedAsk(uint40 key, uint256 slot) private {\\n        MarketStructs.OrderBookInfo storage info = getOrderBookInfoFromSlot(slot);\\n        return subtreeRemoved(info.ask, info, key);\\n    }\\n\\n    function subtreeRemovedBid(uint40 key, uint256 slot) private {\\n        MarketStructs.OrderBookInfo storage info = getOrderBookInfoFromSlot(slot);\\n        return subtreeRemoved(info.bid, info, key);\\n    }\\n\\n    function _getQuote(MarketStructs.OrderBookSideInfo storage info, uint40 key) private view returns (uint256) {\\n        uint128 priceX96 = userDataToPriceX96(info.tree.nodes[key].userData);\\n        return PRBMath.mulDiv(info.orderInfos[key].base, priceX96, FixedPoint96.Q96);\\n    }\\n\\n    function swap(\\n        MarketStructs.OrderBookInfo storage orderBookInfo,\\n        PreviewSwapParams memory params,\\n        function(bool, bool, uint256) view returns (uint256) maxSwapArg,\\n        function(bool, bool, uint256) returns (uint256) swap\\n    ) internal returns (SwapResponse memory swapResponse) {\\n        MarketStructs.OrderBookSideInfo storage info = params.isBaseToQuote ? orderBookInfo.bid : orderBookInfo.ask;\\n        PreviewSwapResponse memory response = previewSwap(info, params, maxSwapArg);\\n\\n        if (response.amountPool > 0) {\\n            swapResponse.oppositeAmount += swap(params.isBaseToQuote, params.isExactInput, response.amountPool);\\n        }\\n\\n        bool isBase = params.isBaseToQuote == params.isExactInput;\\n        uint256 slot = getSlot(orderBookInfo);\\n\\n        if (response.fullLastKey != 0) {\\n            orderBookInfo.seqExecutionId += 1;\\n            orderBookInfo.executionInfos[orderBookInfo.seqExecutionId] = MarketStructs.ExecutionInfo({\\n                baseBalancePerShareX96: params.baseBalancePerShareX96\\n            });\\n            if (params.isBaseToQuote) {\\n                info.tree.removeLeft(response.fullLastKey, lessThanBid, aggregateBid, subtreeRemovedBid, slot);\\n            } else {\\n                info.tree.removeLeft(response.fullLastKey, lessThanAsk, aggregateAsk, subtreeRemovedAsk, slot);\\n            }\\n\\n            swapResponse.oppositeAmount += isBase ? response.quoteFull : response.baseFull;\\n        } else {\\n            require(response.baseFull == 0, \\\"never occur\\\");\\n            require(response.quoteFull == 0, \\\"never occur\\\");\\n        }\\n\\n        if (response.partialKey != 0) {\\n            info.orderInfos[response.partialKey].base -= response.basePartial; // result > 0\\n            info.tree.aggregateRecursively(\\n                response.partialKey,\\n                params.isBaseToQuote ? aggregateBid : aggregateAsk,\\n                slot\\n            );\\n\\n            swapResponse.oppositeAmount += isBase ? response.quotePartial : response.basePartial;\\n            swapResponse.basePartial = response.basePartial;\\n            swapResponse.quotePartial = response.quotePartial;\\n            swapResponse.partialKey = response.partialKey;\\n        } else {\\n            require(response.basePartial == 0, \\\"never occur\\\");\\n            require(response.quotePartial == 0, \\\"never occur\\\");\\n        }\\n    }\\n\\n    // to avoid stack too deep\\n    struct PreviewSwapParams {\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n        uint256 amount;\\n        bool noRevert;\\n        uint256 baseBalancePerShareX96;\\n    }\\n\\n    // to avoid stack too deep\\n    struct PreviewSwapLocalVars {\\n        uint128 priceX96;\\n        uint256 sharePriceX96;\\n        uint256 amountPool;\\n        uint40 left;\\n        uint40 right;\\n        uint256 leftBaseSum;\\n        uint256 leftQuoteSum;\\n        uint256 rightBaseSum;\\n        uint256 rightQuoteSum;\\n    }\\n\\n    function previewSwap(\\n        MarketStructs.OrderBookSideInfo storage info,\\n        PreviewSwapParams memory params,\\n        function(bool, bool, uint256) view returns (uint256) maxSwapArg\\n    ) internal view returns (PreviewSwapResponse memory response) {\\n        bool isBase = params.isBaseToQuote == params.isExactInput;\\n        uint40 key = info.tree.root;\\n        uint256 baseSum;\\n        uint256 quoteSum;\\n\\n        while (key != 0) {\\n            PreviewSwapLocalVars memory vars;\\n            vars.priceX96 = userDataToPriceX96(info.tree.nodes[key].userData);\\n            vars.sharePriceX96 = PRBMath.mulDiv(vars.priceX96, params.baseBalancePerShareX96, FixedPoint96.Q96);\\n            vars.amountPool = maxSwapArg(params.isBaseToQuote, params.isExactInput, vars.sharePriceX96);\\n\\n            // key - right is more gas efficient than left + key\\n            vars.left = info.tree.nodes[key].left;\\n            vars.right = info.tree.nodes[key].right;\\n            vars.leftBaseSum = baseSum + info.orderInfos[vars.left].baseSum;\\n            vars.leftQuoteSum = quoteSum + info.orderInfos[vars.left].quoteSum;\\n\\n            uint256 rangeLeft =\\n                (\\n                    isBase\\n                        ? vars.leftBaseSum\\n                        : PRBMath.mulDiv(vars.leftQuoteSum, params.baseBalancePerShareX96, FixedPoint96.Q96)\\n                ) + vars.amountPool;\\n            if (params.amount <= rangeLeft) {\\n                if (vars.left == 0) {\\n                    response.fullLastKey = info.tree.prev(key);\\n                }\\n                key = vars.left;\\n                continue;\\n            }\\n\\n            vars.rightBaseSum = baseSum + (info.orderInfos[key].baseSum - info.orderInfos[vars.right].baseSum);\\n            vars.rightQuoteSum = quoteSum + (info.orderInfos[key].quoteSum - info.orderInfos[vars.right].quoteSum);\\n\\n            uint256 rangeRight =\\n                (\\n                    isBase\\n                        ? vars.rightBaseSum\\n                        : PRBMath.mulDiv(vars.rightQuoteSum, params.baseBalancePerShareX96, FixedPoint96.Q96)\\n                ) + vars.amountPool;\\n            if (params.amount < rangeRight) {\\n                response.amountPool = vars.amountPool;\\n                response.baseFull = vars.leftBaseSum;\\n                response.quoteFull = PRBMath.mulDiv(vars.leftQuoteSum, params.baseBalancePerShareX96, FixedPoint96.Q96);\\n                if (isBase) {\\n                    response.basePartial = params.amount - rangeLeft; // < info.orderInfos[key].base\\n                    response.quotePartial = PRBMath.mulDiv(response.basePartial, vars.sharePriceX96, FixedPoint96.Q96);\\n                } else {\\n                    response.quotePartial = params.amount - rangeLeft;\\n                    response.basePartial = PRBMath.mulDiv(response.quotePartial, FixedPoint96.Q96, vars.sharePriceX96);\\n                    // round to fit order size\\n                    response.basePartial = Math.min(response.basePartial, info.orderInfos[key].base - 1);\\n                }\\n                response.fullLastKey = info.tree.prev(key);\\n                response.partialKey = key;\\n                return response;\\n            }\\n\\n            {\\n                baseSum = vars.rightBaseSum;\\n                quoteSum = vars.rightQuoteSum;\\n                if (vars.right == 0) {\\n                    response.fullLastKey = key;\\n                }\\n                key = vars.right;\\n            }\\n        }\\n\\n        response.baseFull = baseSum;\\n        response.quoteFull = PRBMath.mulDiv(quoteSum, params.baseBalancePerShareX96, FixedPoint96.Q96);\\n        response.amountPool = params.amount - (isBase ? response.baseFull : response.quoteFull);\\n    }\\n\\n    function maxSwap(\\n        MarketStructs.OrderBookSideInfo storage info,\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 sharePriceBoundX96,\\n        uint256 baseBalancePerShareX96\\n    ) public view returns (uint256 amount) {\\n        uint256 priceBoundX96 = PRBMath.mulDiv(sharePriceBoundX96, FixedPoint96.Q96, baseBalancePerShareX96);\\n        bool isBid = isBaseToQuote;\\n        bool isBase = isBaseToQuote == isExactInput;\\n        uint40 key = info.tree.root;\\n\\n        while (key != 0) {\\n            uint128 price = userDataToPriceX96(info.tree.nodes[key].userData);\\n            uint40 left = info.tree.nodes[key].left;\\n            if (isBid ? price >= priceBoundX96 : price <= priceBoundX96) {\\n                // key - right is more gas efficient than left + key\\n                uint40 right = info.tree.nodes[key].right;\\n                amount += isBase\\n                    ? info.orderInfos[key].baseSum - info.orderInfos[right].baseSum\\n                    : info.orderInfos[key].quoteSum - info.orderInfos[right].quoteSum;\\n                key = right;\\n            } else {\\n                key = left;\\n            }\\n        }\\n\\n        if (!isBase) {\\n            // share * price * baseBalancePerShareX96 = share * share_price\\n            amount = PRBMath.mulDiv(amount, baseBalancePerShareX96, FixedPoint96.Q96);\\n        }\\n    }\\n\\n    function getSlot(MarketStructs.OrderBookInfo storage d) private pure returns (uint256 slot) {\\n        assembly {\\n            slot := d.slot\\n        }\\n    }\\n\\n    function getOrderBookInfoFromSlot(uint256 slot) private pure returns (MarketStructs.OrderBookInfo storage d) {\\n        assembly {\\n            d.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x086027cfd94ea9108499f77bca631606a42a61fbd08994a3b076c18953467c0f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PerpMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { PRBMath } from \\\"prb-math/contracts/PRBMath.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\nimport { FullMath } from \\\"./FullMath.sol\\\";\\n\\nlibrary PerpMath {\\n    using SafeCast for int256;\\n    using SignedSafeMath for int256;\\n    using SafeMath for uint256;\\n\\n    function formatSqrtPriceX96ToPriceX96(uint160 sqrtPriceX96) internal pure returns (uint256) {\\n        return PRBMath.mulDiv(sqrtPriceX96, sqrtPriceX96, FixedPoint96.Q96);\\n    }\\n\\n    function formatX10_18ToX96(uint256 valueX10_18) internal pure returns (uint256) {\\n        return PRBMath.mulDiv(valueX10_18, FixedPoint96.Q96, 1 ether);\\n    }\\n\\n    function formatX96ToX10_18(uint256 valueX96) internal pure returns (uint256) {\\n        return PRBMath.mulDiv(valueX96, 1 ether, FixedPoint96.Q96);\\n    }\\n\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function abs(int256 value) internal pure returns (uint256) {\\n        return value >= 0 ? value.toUint256() : neg256(value).toUint256();\\n    }\\n\\n    function neg256(int256 a) internal pure returns (int256) {\\n        require(a > -2**255, \\\"PerpMath: inversion overflow\\\");\\n        return -a;\\n    }\\n\\n    function neg256(uint256 a) internal pure returns (int256) {\\n        return -SafeCast.toInt256(a);\\n    }\\n\\n    function divBy10_18(int256 value) internal pure returns (int256) {\\n        // no overflow here\\n        return value / (1 ether);\\n    }\\n\\n    function divBy10_18(uint256 value) internal pure returns (uint256) {\\n        // no overflow here\\n        return value / (1 ether);\\n    }\\n\\n    function subRatio(uint24 a, uint24 b) internal pure returns (uint24) {\\n        require(b <= a, \\\"PerpMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    function mulRatio(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return PRBMath.mulDiv(value, ratio, 1e6);\\n    }\\n\\n    function divRatio(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return PRBMath.mulDiv(value, 1e6, ratio);\\n    }\\n\\n    function divRatioRoundingUp(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return FullMath.mulDivRoundingUp(value, 1e6, ratio);\\n    }\\n\\n    /// @param denominator cannot be 0 and is checked in PRBMath.mulDiv()\\n    function mulDiv(\\n        int256 a,\\n        int256 b,\\n        uint256 denominator\\n    ) internal pure returns (int256 result) {\\n        uint256 unsignedA = a < 0 ? uint256(neg256(a)) : uint256(a);\\n        uint256 unsignedB = b < 0 ? uint256(neg256(b)) : uint256(b);\\n        bool negative = ((a < 0 && b > 0) || (a > 0 && b < 0)) ? true : false;\\n\\n        uint256 unsignedResult = PRBMath.mulDiv(unsignedA, unsignedB, denominator);\\n\\n        result = negative ? neg256(unsignedResult) : SafeCast.toInt256(unsignedResult);\\n\\n        return result;\\n    }\\n\\n    function sign(int256 value) internal pure returns (int256) {\\n        return value > 0 ? int256(1) : (value < 0 ? int256(-1) : int256(0));\\n    }\\n}\\n\",\"keccak256\":\"0x861b474b56120c73317b276c50f7633f0fa0f8ce6572f73c6f4ec397ec4814c2\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PoolLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { Math } from \\\"../amm/uniswap_v2/libraries/Math.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { MarketStructs } from \\\"./MarketStructs.sol\\\";\\nimport { PRBMath } from \\\"prb-math/contracts/PRBMath.sol\\\";\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { FullMath } from \\\"./FullMath.sol\\\";\\n\\nlibrary PoolLibrary {\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    struct SwapParams {\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n        uint24 feeRatio;\\n        uint256 amount;\\n    }\\n\\n    struct AddLiquidityParams {\\n        uint256 base;\\n        uint256 quote;\\n    }\\n\\n    struct RemoveLiquidityParams {\\n        uint256 liquidity;\\n    }\\n\\n    uint256 public constant MINIMUM_LIQUIDITY = 1e3;\\n\\n    function initializePool(MarketStructs.PoolInfo storage poolInfo) internal {\\n        poolInfo.baseBalancePerShareX96 = FixedPoint96.Q96;\\n    }\\n\\n    // underestimate deleveraged tokens\\n    function applyFunding(MarketStructs.PoolInfo storage poolInfo, int256 fundingRateX96) internal {\\n        if (fundingRateX96 == 0) return;\\n\\n        uint256 frAbs = fundingRateX96.abs();\\n\\n        if (fundingRateX96 > 0) {\\n            uint256 poolQuote = poolInfo.quote;\\n            uint256 deleveratedQuote = PRBMath.mulDiv(poolQuote, frAbs, FixedPoint96.Q96);\\n            poolInfo.quote = poolQuote.sub(deleveratedQuote);\\n            poolInfo.cumQuotePerLiquidityX96 = poolInfo.cumQuotePerLiquidityX96.add(\\n                PRBMath.mulDiv(deleveratedQuote, FixedPoint96.Q96, poolInfo.totalLiquidity)\\n            );\\n        } else {\\n            uint256 poolBase = poolInfo.base;\\n            uint256 deleveratedBase = PRBMath.mulDiv(poolBase, frAbs, FixedPoint96.Q96.add(frAbs));\\n            poolInfo.base = poolBase.sub(deleveratedBase);\\n            poolInfo.cumBasePerLiquidityX96 = poolInfo.cumBasePerLiquidityX96.add(\\n                PRBMath.mulDiv(deleveratedBase, FixedPoint96.Q96, poolInfo.totalLiquidity)\\n            );\\n        }\\n\\n        poolInfo.baseBalancePerShareX96 = PRBMath.mulDiv(\\n            poolInfo.baseBalancePerShareX96,\\n            FixedPoint96.Q96.toInt256().sub(fundingRateX96).toUint256(),\\n            FixedPoint96.Q96\\n        );\\n    }\\n\\n    function swap(MarketStructs.PoolInfo storage poolInfo, SwapParams memory params)\\n        internal\\n        returns (uint256 oppositeAmount)\\n    {\\n        oppositeAmount = previewSwap(poolInfo.base, poolInfo.quote, params, false);\\n        (poolInfo.base, poolInfo.quote) = calcPoolAfter(\\n            params.isBaseToQuote,\\n            params.isExactInput,\\n            poolInfo.base,\\n            poolInfo.quote,\\n            params.amount,\\n            oppositeAmount\\n        );\\n    }\\n\\n    function calcPoolAfter(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 base,\\n        uint256 quote,\\n        uint256 amount,\\n        uint256 oppositeAmount\\n    ) internal pure returns (uint256 baseAfter, uint256 quoteAfter) {\\n        if (isExactInput) {\\n            if (isBaseToQuote) {\\n                baseAfter = base.add(amount);\\n                quoteAfter = quote.sub(oppositeAmount);\\n            } else {\\n                baseAfter = base.sub(oppositeAmount);\\n                quoteAfter = quote.add(amount);\\n            }\\n        } else {\\n            if (isBaseToQuote) {\\n                baseAfter = base.add(oppositeAmount);\\n                quoteAfter = quote.sub(amount);\\n            } else {\\n                baseAfter = base.sub(amount);\\n                quoteAfter = quote.add(oppositeAmount);\\n            }\\n        }\\n    }\\n\\n    function addLiquidity(MarketStructs.PoolInfo storage poolInfo, AddLiquidityParams memory params)\\n        internal\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 poolTotalLiquidity = poolInfo.totalLiquidity;\\n        uint256 liquidity;\\n\\n        if (poolTotalLiquidity == 0) {\\n            uint256 totalLiquidity = Math.sqrt(params.base.mul(params.quote));\\n            liquidity = totalLiquidity.sub(MINIMUM_LIQUIDITY);\\n            require(params.base > 0 && params.quote > 0 && liquidity > 0, \\\"PL_AL: initial liquidity zero\\\");\\n\\n            poolInfo.base = params.base;\\n            poolInfo.quote = params.quote;\\n            poolInfo.totalLiquidity = totalLiquidity;\\n            return (params.base, params.quote, liquidity);\\n        }\\n\\n        uint256 poolBase = poolInfo.base;\\n        uint256 poolQuote = poolInfo.quote;\\n\\n        uint256 base = Math.min(params.base, PRBMath.mulDiv(params.quote, poolBase, poolQuote));\\n        uint256 quote = Math.min(params.quote, PRBMath.mulDiv(params.base, poolQuote, poolBase));\\n        liquidity = Math.min(\\n            PRBMath.mulDiv(base, poolTotalLiquidity, poolBase),\\n            PRBMath.mulDiv(quote, poolTotalLiquidity, poolQuote)\\n        );\\n        require(base > 0 && quote > 0 && liquidity > 0, \\\"PL_AL: liquidity zero\\\");\\n\\n        poolInfo.base = poolBase.add(base);\\n        poolInfo.quote = poolQuote.add(quote);\\n        poolInfo.totalLiquidity = poolTotalLiquidity.add(liquidity);\\n\\n        return (base, quote, liquidity);\\n    }\\n\\n    function removeLiquidity(MarketStructs.PoolInfo storage poolInfo, RemoveLiquidityParams memory params)\\n        internal\\n        returns (uint256, uint256)\\n    {\\n        uint256 poolBase = poolInfo.base;\\n        uint256 poolQuote = poolInfo.quote;\\n        uint256 poolTotalLiquidity = poolInfo.totalLiquidity;\\n        uint256 base = PRBMath.mulDiv(params.liquidity, poolBase, poolTotalLiquidity);\\n        uint256 quote = PRBMath.mulDiv(params.liquidity, poolQuote, poolTotalLiquidity);\\n        require(base > 0 && quote > 0, \\\"PL_RL: output is zero\\\");\\n        poolInfo.base = poolBase.sub(base);\\n        poolInfo.quote = poolQuote.sub(quote);\\n        uint256 totalLiquidity = poolTotalLiquidity.sub(params.liquidity);\\n        require(totalLiquidity >= MINIMUM_LIQUIDITY, \\\"PL_RL: min liquidity\\\");\\n        poolInfo.totalLiquidity = totalLiquidity;\\n        return (base, quote);\\n    }\\n\\n    function getLiquidityValue(MarketStructs.PoolInfo storage poolInfo, uint256 liquidity)\\n        internal\\n        view\\n        returns (uint256, uint256)\\n    {\\n        return (\\n            PRBMath.mulDiv(liquidity, poolInfo.base, poolInfo.totalLiquidity),\\n            PRBMath.mulDiv(liquidity, poolInfo.quote, poolInfo.totalLiquidity)\\n        );\\n    }\\n\\n    function previewSwap(\\n        uint256 base,\\n        uint256 quote,\\n        SwapParams memory params,\\n        bool noRevert\\n    ) internal pure returns (uint256 output) {\\n        uint24 oneSubFeeRatio = PerpMath.subRatio(1e6, params.feeRatio);\\n\\n        if (params.isExactInput) {\\n            uint256 amountSubFee = params.amount.mulRatio(oneSubFeeRatio);\\n            if (params.isBaseToQuote) {\\n                // output = quote.sub(FullMath.mulDivRoundingUp(base, quote, base.add(amountSubFee)));\\n                output = PRBMath.mulDiv(quote, amountSubFee, base.add(amountSubFee));\\n            } else {\\n                // output = base.sub(FullMath.mulDivRoundingUp(base, quote, quote.add(amountSubFee)));\\n                output = PRBMath.mulDiv(base, amountSubFee, quote.add(amountSubFee));\\n            }\\n        } else {\\n            if (params.isBaseToQuote) {\\n                // output = FullMath.mulDivRoundingUp(base, quote, quote.sub(params.amount)).sub(base);\\n                output = FullMath.mulDivRoundingUp(base, params.amount, quote.sub(params.amount));\\n            } else {\\n                // output = FullMath.mulDivRoundingUp(base, quote, base.sub(params.amount)).sub(quote);\\n                output = FullMath.mulDivRoundingUp(quote, params.amount, base.sub(params.amount));\\n            }\\n            output = output.divRatioRoundingUp(oneSubFeeRatio);\\n        }\\n        if (!noRevert) {\\n            require(output > 0, \\\"PL_SD: output is zero\\\");\\n        }\\n    }\\n\\n    function _solveQuadratic(uint256 b, uint256 cNeg) private pure returns (uint256) {\\n        return Math.sqrt(b.mul(b).add(cNeg.mul(4))).sub(b).div(2);\\n    }\\n\\n    // must not revert\\n    function maxSwap(\\n        uint256 base,\\n        uint256 quote,\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint24 feeRatio,\\n        uint256 priceBoundX96\\n    ) internal pure returns (uint256 output) {\\n        uint24 oneSubFeeRatio = PerpMath.subRatio(1e6, feeRatio);\\n        uint256 k = base.mul(quote);\\n\\n        if (isBaseToQuote) {\\n            uint256 kDivP = PRBMath.mulDiv(k, FixedPoint96.Q96, priceBoundX96);\\n            uint256 baseSqr = base.mul(base);\\n            if (kDivP <= baseSqr) return 0;\\n            uint256 cNeg = kDivP.sub(baseSqr);\\n            uint256 b = base.add(base.mulRatio(oneSubFeeRatio));\\n            output = _solveQuadratic(b.divRatio(oneSubFeeRatio), cNeg.divRatio(oneSubFeeRatio));\\n        } else {\\n            // https://www.wolframalpha.com/input?i=%28x+%2B+a%29+*+%28x+%2B+a+*+%281+-+f%29%29+%3D+kp+solve+a\\n            uint256 kp = PRBMath.mulDiv(k, priceBoundX96, FixedPoint96.Q96);\\n            uint256 quoteSqr = quote.mul(quote);\\n            if (kp <= quoteSqr) return 0;\\n            uint256 cNeg = kp.sub(quoteSqr);\\n            uint256 b = quote.add(quote.mulRatio(oneSubFeeRatio));\\n            output = _solveQuadratic(b.divRatio(oneSubFeeRatio), cNeg.divRatio(oneSubFeeRatio));\\n        }\\n        if (!isExactInput) {\\n            output = previewSwap(\\n                base,\\n                quote,\\n                SwapParams({ isBaseToQuote: isBaseToQuote, isExactInput: true, feeRatio: feeRatio, amount: output }),\\n                true\\n            );\\n        }\\n    }\\n\\n    function getMarkPriceX96(\\n        uint256 base,\\n        uint256 quote,\\n        uint256 baseBalancePerShareX96\\n    ) internal pure returns (uint256) {\\n        return PRBMath.mulDiv(getShareMarkPriceX96(base, quote), FixedPoint96.Q96, baseBalancePerShareX96);\\n    }\\n\\n    function getShareMarkPriceX96(uint256 base, uint256 quote) internal pure returns (uint256) {\\n        return PRBMath.mulDiv(quote, FixedPoint96.Q96, base);\\n    }\\n\\n    function getLiquidityDeleveraged(\\n        uint256 poolCumBasePerLiquidityX96,\\n        uint256 poolCumQuotePerLiquidityX96,\\n        uint256 liquidity,\\n        uint256 cumBasePerLiquidityX96,\\n        uint256 cumQuotePerLiquidityX96\\n    ) internal pure returns (int256, int256) {\\n        int256 basePerLiquidityX96 = poolCumBasePerLiquidityX96.toInt256().sub(cumBasePerLiquidityX96.toInt256());\\n        int256 quotePerLiquidityX96 = poolCumQuotePerLiquidityX96.toInt256().sub(cumQuotePerLiquidityX96.toInt256());\\n\\n        return (\\n            liquidity.toInt256().mulDiv(basePerLiquidityX96, FixedPoint96.Q96),\\n            liquidity.toInt256().mulDiv(quotePerLiquidityX96, FixedPoint96.Q96)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xa826faed245dfb10797861dda85ab932ae30a65be8d8041024339d2706de1df9\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PriceLimitLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { PRBMath } from \\\"prb-math/contracts/PRBMath.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { MarketStructs } from \\\"./MarketStructs.sol\\\";\\n\\nlibrary PriceLimitLibrary {\\n    using PerpMath for uint256;\\n    using SafeMath for uint256;\\n\\n    function update(MarketStructs.PriceLimitInfo storage priceLimitInfo, MarketStructs.PriceLimitInfo memory value)\\n        internal\\n    {\\n        if (value.referenceTimestamp == 0) return;\\n        priceLimitInfo.referencePrice = value.referencePrice;\\n        priceLimitInfo.referenceTimestamp = value.referenceTimestamp;\\n        priceLimitInfo.emaPrice = value.emaPrice;\\n    }\\n\\n    // referenceTimestamp == 0 indicates not updated\\n    function updateDry(\\n        MarketStructs.PriceLimitInfo storage priceLimitInfo,\\n        MarketStructs.PriceLimitConfig storage config,\\n        uint256 price\\n    ) internal view returns (MarketStructs.PriceLimitInfo memory updated) {\\n        uint256 currentTimestamp = block.timestamp;\\n        uint256 refTimestamp = priceLimitInfo.referenceTimestamp;\\n        if (currentTimestamp <= refTimestamp) {\\n            updated.referencePrice = priceLimitInfo.referencePrice;\\n            updated.emaPrice = priceLimitInfo.emaPrice;\\n            return updated;\\n        }\\n\\n        uint256 elapsed = currentTimestamp.sub(refTimestamp);\\n\\n        if (priceLimitInfo.referencePrice == 0) {\\n            updated.emaPrice = price;\\n        } else {\\n            uint32 emaSec = config.emaSec;\\n            uint256 denominator = elapsed.add(emaSec);\\n            updated.emaPrice = PRBMath.mulDiv(priceLimitInfo.emaPrice, emaSec, denominator).add(\\n                PRBMath.mulDiv(price, elapsed, denominator)\\n            );\\n        }\\n\\n        updated.referencePrice = price;\\n        updated.referenceTimestamp = currentTimestamp;\\n    }\\n\\n    function priceBound(\\n        uint256 referencePrice,\\n        uint256 emaPrice,\\n        MarketStructs.PriceLimitConfig storage config,\\n        bool isLiquidation,\\n        bool isUpperBound\\n    ) internal view returns (uint256 price) {\\n        uint256 referenceRange =\\n            referencePrice.mulRatio(isLiquidation ? config.liquidationRatio : config.normalOrderRatio);\\n        uint256 emaRange = emaPrice.mulRatio(isLiquidation ? config.emaLiquidationRatio : config.emaNormalOrderRatio);\\n\\n        if (isUpperBound) {\\n            return Math.min(referencePrice.add(referenceRange), emaPrice.add(emaRange));\\n        } else {\\n            return Math.max(referencePrice.sub(referenceRange), emaPrice.sub(emaRange));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x743d84ab9e3849ada9b7066db1f36c082f7c343e0a4ecb3ef0518880da80c1f3\",\"license\":\"GPL-3.0-or-later\"},\"deps/BokkyPooBahsRedBlackTreeLibrary/contracts/BokkyPooBahsRedBlackTreeLibrary.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's Red-Black Tree Library v1.0-pre-release-a\\n//\\n// A Solidity Red-Black Tree binary search library to store and access a sorted\\n// list of unsigned integer data. The Red-Black algorithm rebalances the binary\\n// search tree, resulting in O(log n) insert, remove and search time (and ~gas)\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsRedBlackTreeLibrary\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2020. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary BokkyPooBahsRedBlackTreeLibrary {\\n    struct Node {\\n        uint40 parent;\\n        uint40 left;\\n        uint40 right;\\n        bool red;\\n        uint128 userData; // use freely. this is for gas efficiency\\n    }\\n\\n    struct Tree {\\n        uint40 root;\\n        mapping(uint40 => Node) nodes;\\n    }\\n\\n    uint40 private constant EMPTY = 0;\\n\\n    function first(Tree storage self) internal view returns (uint40 _key) {\\n        _key = self.root;\\n        if (_key != EMPTY) {\\n            _key = treeMinimum(self, self.root);\\n        }\\n    }\\n\\n    function last(Tree storage self) internal view returns (uint40 _key) {\\n        _key = self.root;\\n        if (_key != EMPTY) {\\n            _key = treeMaximum(self, self.root);\\n        }\\n    }\\n\\n    function next(Tree storage self, uint40 target)\\n        internal\\n        view\\n        returns (uint40 cursor)\\n    {\\n        require(target != EMPTY, \\\"RBTL_N: target is empty\\\");\\n        if (self.nodes[target].right != EMPTY) {\\n            cursor = treeMinimum(self, self.nodes[target].right);\\n        } else {\\n            cursor = self.nodes[target].parent;\\n            while (cursor != EMPTY && target == self.nodes[cursor].right) {\\n                target = cursor;\\n                cursor = self.nodes[cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function prev(Tree storage self, uint40 target)\\n        internal\\n        view\\n        returns (uint40 cursor)\\n    {\\n        require(target != EMPTY, \\\"RBTL_P: target is empty\\\");\\n        if (self.nodes[target].left != EMPTY) {\\n            cursor = treeMaximum(self, self.nodes[target].left);\\n        } else {\\n            cursor = self.nodes[target].parent;\\n            while (cursor != EMPTY && target == self.nodes[cursor].left) {\\n                target = cursor;\\n                cursor = self.nodes[cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function exists(Tree storage self, uint40 key)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return\\n            (key != EMPTY) &&\\n            ((key == self.root) || (self.nodes[key].parent != EMPTY));\\n    }\\n\\n    function isEmpty(uint40 key) internal pure returns (bool) {\\n        return key == EMPTY;\\n    }\\n\\n    function getEmpty() internal pure returns (uint256) {\\n        return EMPTY;\\n    }\\n\\n    function getNode(Tree storage self, uint40 key)\\n        internal\\n        view\\n        returns (\\n            uint40 _returnKey,\\n            uint40 _parent,\\n            uint40 _left,\\n            uint40 _right,\\n            bool _red\\n        )\\n    {\\n        require(exists(self, key), \\\"RBTL_GN: key not exist\\\");\\n        return (\\n            key,\\n            self.nodes[key].parent,\\n            self.nodes[key].left,\\n            self.nodes[key].right,\\n            self.nodes[key].red\\n        );\\n    }\\n\\n    function insert(\\n        Tree storage self,\\n        uint40 key,\\n        uint128 userData,\\n        function(uint40, uint40, uint256) view returns (bool) lessThan,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) internal {\\n        require(key != EMPTY, \\\"RBTL_I: key is empty\\\");\\n        require(!exists(self, key), \\\"RBTL_I: key already exists\\\");\\n        uint40 cursor = EMPTY;\\n        uint40 probe = self.root;\\n        self.nodes[key] = Node({\\n            parent: EMPTY,\\n            left: EMPTY,\\n            right: EMPTY,\\n            red: true,\\n            userData: userData\\n        });\\n        while (probe != EMPTY) {\\n            cursor = probe;\\n            if (lessThan(key, probe, data)) {\\n                probe = self.nodes[probe].left;\\n            } else {\\n                probe = self.nodes[probe].right;\\n            }\\n        }\\n        self.nodes[key].parent = cursor;\\n        if (cursor == EMPTY) {\\n            self.root = key;\\n        } else if (lessThan(key, cursor, data)) {\\n            self.nodes[cursor].left = key;\\n        } else {\\n            self.nodes[cursor].right = key;\\n        }\\n        aggregateRecursively(self, key, aggregate, data);\\n        insertFixup(self, key, aggregate, data);\\n    }\\n\\n    function remove(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) internal {\\n        require(key != EMPTY, \\\"RBTL_R: key is empty\\\");\\n        require(exists(self, key), \\\"RBTL_R: key not exist\\\");\\n        uint40 probe;\\n        uint40 cursor;\\n        if (self.nodes[key].left == EMPTY || self.nodes[key].right == EMPTY) {\\n            cursor = key;\\n        } else {\\n            cursor = self.nodes[key].right;\\n            while (self.nodes[cursor].left != EMPTY) {\\n                cursor = self.nodes[cursor].left;\\n            }\\n        }\\n        if (self.nodes[cursor].left != EMPTY) {\\n            probe = self.nodes[cursor].left;\\n        } else {\\n            probe = self.nodes[cursor].right;\\n        }\\n        uint40 yParent = self.nodes[cursor].parent;\\n        self.nodes[probe].parent = yParent;\\n        if (yParent != EMPTY) {\\n            if (cursor == self.nodes[yParent].left) {\\n                self.nodes[yParent].left = probe;\\n            } else {\\n                self.nodes[yParent].right = probe;\\n            }\\n        } else {\\n            self.root = probe;\\n        }\\n        bool doFixup = !self.nodes[cursor].red;\\n        if (cursor != key) {\\n            replaceParent(self, cursor, key);\\n            self.nodes[cursor].left = self.nodes[key].left;\\n            self.nodes[self.nodes[cursor].left].parent = cursor;\\n            self.nodes[cursor].right = self.nodes[key].right;\\n            self.nodes[self.nodes[cursor].right].parent = cursor;\\n            self.nodes[cursor].red = self.nodes[key].red;\\n            (cursor, key) = (key, cursor);\\n            aggregateRecursively(self, key, aggregate, data);\\n        }\\n        if (doFixup) {\\n            removeFixup(self, probe, aggregate, data);\\n        }\\n        aggregateRecursively(self, yParent, aggregate, data);\\n\\n        // Fixed a bug that caused the parent of empty nodes to be non-zero.\\n        // TODO: Fix it the right way.\\n        if (probe == EMPTY) {\\n            self.nodes[probe].parent = EMPTY;\\n        }\\n    }\\n\\n    // https://arxiv.org/pdf/1602.02120.pdf\\n    // changes from original\\n    // - handle empty\\n    // - handle parent\\n    // - change root to black\\n\\n    // to avoid stack too deep\\n    struct JoinParams {\\n        uint40 left;\\n        uint40 key;\\n        uint40 right;\\n        uint8 leftBlackHeight;\\n        uint8 rightBlackHeight;\\n        uint256 data;\\n    }\\n\\n    // destructive func\\n    function joinRight(\\n        Tree storage self,\\n        JoinParams memory params,\\n        function(uint40, uint256) returns (bool) aggregate\\n    ) private returns (uint40, uint8) {\\n        if (\\n            !self.nodes[params.left].red &&\\n            params.leftBlackHeight == params.rightBlackHeight\\n        ) {\\n            self.nodes[params.key].red = true;\\n            self.nodes[params.key].left = params.left;\\n            self.nodes[params.key].right = params.right;\\n            aggregate(params.key, params.data);\\n            return (params.key, params.leftBlackHeight);\\n        }\\n\\n        (uint40 t, ) = joinRight(\\n            self,\\n            JoinParams({\\n                left: self.nodes[params.left].right,\\n                key: params.key,\\n                right: params.right,\\n                leftBlackHeight: params.leftBlackHeight -\\n                    (self.nodes[params.left].red ? 0 : 1),\\n                rightBlackHeight: params.rightBlackHeight,\\n                data: params.data\\n            }),\\n            aggregate\\n        );\\n        self.nodes[params.left].right = t;\\n        self.nodes[params.left].parent = EMPTY;\\n        aggregate(params.left, params.data);\\n\\n        if (\\n            !self.nodes[params.left].red &&\\n            self.nodes[t].red &&\\n            self.nodes[self.nodes[t].right].red\\n        ) {\\n            self.nodes[self.nodes[t].right].red = false;\\n            rotateLeft(self, params.left, aggregate, params.data);\\n            return (t, params.leftBlackHeight);\\n            //            return (self.nodes[params.left].parent, tBlackHeight + 1); // TODO: replace with t\\n        }\\n        return (params.left, params.leftBlackHeight);\\n        //        return (params.left, tBlackHeight + (self.nodes[params.left].red ? 0 : 1));\\n    }\\n\\n    // destructive func\\n    function joinLeft(\\n        Tree storage self,\\n        JoinParams memory params,\\n        function(uint40, uint256) returns (bool) aggregate\\n    ) internal returns (uint40 resultKey) {\\n        if (\\n            !self.nodes[params.right].red &&\\n            params.leftBlackHeight == params.rightBlackHeight\\n        ) {\\n            self.nodes[params.key].red = true;\\n            self.nodes[params.key].left = params.left;\\n            self.nodes[params.key].right = params.right;\\n            if (params.left != EMPTY) {\\n                self.nodes[params.left].parent = params.key;\\n            }\\n            if (params.right != EMPTY) {\\n                self.nodes[params.right].parent = params.key;\\n            }\\n            aggregate(params.key, params.data);\\n            return params.key;\\n        }\\n\\n        uint40 t = joinLeft(\\n            self,\\n            JoinParams({\\n                left: params.left,\\n                key: params.key,\\n                right: self.nodes[params.right].left,\\n                leftBlackHeight: params.leftBlackHeight,\\n                rightBlackHeight: params.rightBlackHeight -\\n                    (self.nodes[params.right].red ? 0 : 1),\\n                data: params.data\\n            }),\\n            aggregate\\n        );\\n        self.nodes[params.right].left = t;\\n        self.nodes[params.right].parent = EMPTY;\\n        if (t != EMPTY) {\\n            self.nodes[t].parent = params.right;\\n        }\\n        aggregate(params.right, params.data);\\n\\n        if (\\n            !self.nodes[params.right].red &&\\n            self.nodes[t].red &&\\n            self.nodes[self.nodes[t].left].red\\n        ) {\\n            self.nodes[self.nodes[t].left].red = false;\\n            rotateRight(self, params.right, aggregate, params.data);\\n            return t;\\n        }\\n        return params.right;\\n    }\\n\\n    // destructive func\\n    function join(\\n        Tree storage self,\\n        uint40 left,\\n        uint40 key,\\n        uint40 right,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint8 leftBlackHeight,\\n        uint8 rightBlackHeight,\\n        uint256 data\\n    ) private returns (uint40 t, uint8 tBlackHeight) {\\n        if (leftBlackHeight > rightBlackHeight) {\\n            (t, tBlackHeight) = joinRight(\\n                self,\\n                JoinParams({\\n                    left: left,\\n                    key: key,\\n                    right: right,\\n                    leftBlackHeight: leftBlackHeight,\\n                    rightBlackHeight: rightBlackHeight,\\n                    data: data\\n                }),\\n                aggregate\\n            );\\n            tBlackHeight = leftBlackHeight;\\n            if (self.nodes[t].red && self.nodes[self.nodes[t].right].red) {\\n                self.nodes[t].red = false;\\n                tBlackHeight += 1;\\n            }\\n        } else if (leftBlackHeight < rightBlackHeight) {\\n            t = joinLeft(\\n                self,\\n                JoinParams({\\n                    left: left,\\n                    key: key,\\n                    right: right,\\n                    leftBlackHeight: leftBlackHeight,\\n                    rightBlackHeight: rightBlackHeight,\\n                    data: data\\n                }),\\n                aggregate\\n            );\\n            tBlackHeight = rightBlackHeight;\\n            if (self.nodes[t].red && self.nodes[self.nodes[t].left].red) {\\n                self.nodes[t].red = false;\\n                tBlackHeight += 1;\\n            }\\n        } else {\\n            bool red = !self.nodes[left].red && !self.nodes[right].red;\\n            self.nodes[key].red = red;\\n            self.nodes[key].left = left;\\n            self.nodes[key].right = right;\\n            aggregate(key, data);\\n            (t, tBlackHeight) = (key, leftBlackHeight + (red ? 0 : 1));\\n        }\\n    }\\n\\n    struct SplitParams {\\n        uint40 t;\\n        uint40 key;\\n        uint8 blackHeight;\\n        uint256 data;\\n    }\\n\\n    // destructive func\\n    function splitRight(\\n        Tree storage self,\\n        SplitParams memory params,\\n        function(uint40, uint40, uint256) returns (bool) lessThan,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        function(uint40, uint256) subtreeRemoved\\n    ) private returns (uint40 resultKey, uint8 resultBlackHeight) {\\n        if (params.t == EMPTY) return (EMPTY, params.blackHeight);\\n        params.blackHeight -= (self.nodes[params.t].red ? 0 : 1);\\n        if (params.key == params.t) {\\n            subtreeRemoved(params.t, params.data);\\n            return (self.nodes[params.t].right, params.blackHeight);\\n        }\\n        if (lessThan(params.key, params.t, params.data)) {\\n            (uint40 r, uint8 rBlackHeight) = splitRight(\\n                self,\\n                SplitParams({\\n                    t: self.nodes[params.t].left,\\n                    key: params.key,\\n                    blackHeight: params.blackHeight,\\n                    data: params.data\\n                }),\\n                lessThan,\\n                aggregate,\\n                subtreeRemoved\\n            );\\n            return\\n                join(\\n                    self,\\n                    r,\\n                    params.t,\\n                    self.nodes[params.t].right,\\n                    aggregate,\\n                    rBlackHeight,\\n                    params.blackHeight,\\n                    params.data\\n                );\\n        } else {\\n            subtreeRemoved(params.t, params.data);\\n            return\\n                splitRight(\\n                    self,\\n                    SplitParams({\\n                        t: self.nodes[params.t].right,\\n                        key: params.key,\\n                        blackHeight: params.blackHeight,\\n                        data: params.data\\n                    }),\\n                    lessThan,\\n                    aggregate,\\n                    subtreeRemoved\\n                );\\n        }\\n    }\\n\\n    function removeLeft(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint40, uint256) returns (bool) lessThan,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        function(uint40, uint256) subtreeRemoved,\\n        uint256 data\\n    ) internal {\\n        require(key != EMPTY, \\\"RBTL_RL: key is empty\\\");\\n        require(exists(self, key), \\\"RBTL_RL: key not exist\\\");\\n        (self.root, ) = splitRight(\\n            self,\\n            SplitParams({t: self.root, key: key, blackHeight: 128, data: data}),\\n            lessThan,\\n            aggregate,\\n            subtreeRemoved\\n        );\\n        self.nodes[self.root].parent = EMPTY;\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function aggregateRecursively(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) internal {\\n        while (key != EMPTY) {\\n            if (aggregate(key, data)) return;\\n            key = self.nodes[key].parent;\\n        }\\n    }\\n\\n    function treeMinimum(Tree storage self, uint40 key)\\n        private\\n        view\\n        returns (uint40)\\n    {\\n        while (self.nodes[key].left != EMPTY) {\\n            key = self.nodes[key].left;\\n        }\\n        return key;\\n    }\\n\\n    function treeMaximum(Tree storage self, uint40 key)\\n        private\\n        view\\n        returns (uint40)\\n    {\\n        while (self.nodes[key].right != EMPTY) {\\n            key = self.nodes[key].right;\\n        }\\n        return key;\\n    }\\n\\n    function rotateLeft(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) private {\\n        uint40 cursor = self.nodes[key].right;\\n        uint40 keyParent = self.nodes[key].parent;\\n        uint40 cursorLeft = self.nodes[cursor].left;\\n        self.nodes[key].right = cursorLeft;\\n        if (cursorLeft != EMPTY) {\\n            self.nodes[cursorLeft].parent = key;\\n        }\\n        self.nodes[cursor].parent = keyParent;\\n        if (keyParent == EMPTY) {\\n            self.root = cursor;\\n        } else if (key == self.nodes[keyParent].left) {\\n            self.nodes[keyParent].left = cursor;\\n        } else {\\n            self.nodes[keyParent].right = cursor;\\n        }\\n        self.nodes[cursor].left = key;\\n        self.nodes[key].parent = cursor;\\n        aggregate(key, data);\\n        aggregate(cursor, data);\\n    }\\n\\n    function rotateRight(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) private {\\n        uint40 cursor = self.nodes[key].left;\\n        uint40 keyParent = self.nodes[key].parent;\\n        uint40 cursorRight = self.nodes[cursor].right;\\n        self.nodes[key].left = cursorRight;\\n        if (cursorRight != EMPTY) {\\n            self.nodes[cursorRight].parent = key;\\n        }\\n        self.nodes[cursor].parent = keyParent;\\n        if (keyParent == EMPTY) {\\n            self.root = cursor;\\n        } else if (key == self.nodes[keyParent].right) {\\n            self.nodes[keyParent].right = cursor;\\n        } else {\\n            self.nodes[keyParent].left = cursor;\\n        }\\n        self.nodes[cursor].right = key;\\n        self.nodes[key].parent = cursor;\\n        aggregate(key, data);\\n        aggregate(cursor, data);\\n    }\\n\\n    function insertFixup(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) private {\\n        uint40 cursor;\\n        while (key != self.root && self.nodes[self.nodes[key].parent].red) {\\n            uint40 keyParent = self.nodes[key].parent;\\n            if (keyParent == self.nodes[self.nodes[keyParent].parent].left) {\\n                cursor = self.nodes[self.nodes[keyParent].parent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    key = self.nodes[keyParent].parent;\\n                } else {\\n                    if (key == self.nodes[keyParent].right) {\\n                        key = keyParent;\\n                        rotateLeft(self, key, aggregate, data);\\n                    }\\n                    keyParent = self.nodes[key].parent;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    rotateRight(\\n                        self,\\n                        self.nodes[keyParent].parent,\\n                        aggregate,\\n                        data\\n                    );\\n                }\\n            } else {\\n                cursor = self.nodes[self.nodes[keyParent].parent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    key = self.nodes[keyParent].parent;\\n                } else {\\n                    if (key == self.nodes[keyParent].left) {\\n                        key = keyParent;\\n                        rotateRight(self, key, aggregate, data);\\n                    }\\n                    keyParent = self.nodes[key].parent;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    rotateLeft(\\n                        self,\\n                        self.nodes[keyParent].parent,\\n                        aggregate,\\n                        data\\n                    );\\n                }\\n            }\\n        }\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function replaceParent(\\n        Tree storage self,\\n        uint40 a,\\n        uint40 b\\n    ) private {\\n        uint40 bParent = self.nodes[b].parent;\\n        self.nodes[a].parent = bParent;\\n        if (bParent == EMPTY) {\\n            self.root = a;\\n        } else {\\n            if (b == self.nodes[bParent].left) {\\n                self.nodes[bParent].left = a;\\n            } else {\\n                self.nodes[bParent].right = a;\\n            }\\n        }\\n    }\\n\\n    function removeFixup(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) private {\\n        uint40 cursor;\\n        while (key != self.root && !self.nodes[key].red) {\\n            uint40 keyParent = self.nodes[key].parent;\\n            if (key == self.nodes[keyParent].left) {\\n                cursor = self.nodes[keyParent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[keyParent].red = true;\\n                    rotateLeft(self, keyParent, aggregate, data);\\n                    cursor = self.nodes[keyParent].right;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].left].red &&\\n                    !self.nodes[self.nodes[cursor].right].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    key = keyParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].right].red) {\\n                        self.nodes[self.nodes[cursor].left].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateRight(self, cursor, aggregate, data);\\n                        cursor = self.nodes[keyParent].right;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[keyParent].red;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[cursor].right].red = false;\\n                    rotateLeft(self, keyParent, aggregate, data);\\n                    key = self.root;\\n                }\\n            } else {\\n                cursor = self.nodes[keyParent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[keyParent].red = true;\\n                    rotateRight(self, keyParent, aggregate, data);\\n                    cursor = self.nodes[keyParent].left;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].right].red &&\\n                    !self.nodes[self.nodes[cursor].left].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    key = keyParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].left].red) {\\n                        self.nodes[self.nodes[cursor].right].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateLeft(self, cursor, aggregate, data);\\n                        cursor = self.nodes[keyParent].left;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[keyParent].red;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[cursor].left].red = false;\\n                    rotateRight(self, keyParent, aggregate, data);\\n                    key = self.root;\\n                }\\n            }\\n        }\\n        self.nodes[key].red = false;\\n    }\\n}\\n// ----------------------------------------------------------------------------\\n// End - BokkyPooBah's Red-Black Tree Library\\n// ----------------------------------------------------------------------------\\n\",\"keccak256\":\"0xcd1e5d70b48e4c611fd4b863d8413eb8000db92c875f0a2ccb60b7c374e03d7f\"},\"prb-math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xed164c95012964f5e125b5d2b2d00471a4bdee4def618cd1fcf341d196011b61\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x601980546001600160701b0319166c01518000015180002710000bb817905561018060405261c35060e052620186a06101005262030d40610120526203d0906101405261012c61016052601a80546001600160801b0319166d012c03d090030d400186a000c3501790553480156200007657600080fd5b50604051620058463803806200584683398101604081905262000099916200036c565b6001600055620000a93362000213565b6001600160a01b0382161580620000da5750620000da826001600160a01b03166200026560201b620015a91760201c565b6200012c5760405162461bcd60e51b815260206004820152601d60248201527f504d5f433a2062617365207072696365206665656420696e76616c696400000060448201526064015b60405180910390fd5b6001600160a01b03811615806200015d57506200015d816001600160a01b03166200026560201b620015a91760201c565b620001ab5760405162461bcd60e51b815260206004820152601e60248201527f504d5f433a2071756f7465207072696365206665656420696e76616c69640000604482015260640162000123565b8351620001c090600290602087019062000293565b506001600160a01b0383811660805282811660a052811660c052620001f2600962000274602090811b620015b817901c565b6200020960036200027d60201b620015c11760201c565b50505050620004bf565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b03163b151590565b42600290910155565b6c01000000000000000000000000600590910155565b828054620002a19062000482565b90600052602060002090601f016020900481019282620002c5576000855562000310565b82601f10620002e057805160ff191683800117855562000310565b8280016001018555821562000310579182015b8281111562000310578251825591602001919060010190620002f3565b506200031e92915062000322565b5090565b5b808211156200031e576000815560010162000323565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200036757600080fd5b919050565b600080600080608085870312156200038357600080fd5b84516001600160401b03808211156200039b57600080fd5b818701915087601f830112620003b057600080fd5b815181811115620003c557620003c562000339565b604051601f8201601f19908116603f01168101908382118183101715620003f057620003f062000339565b81604052828152602093508a848487010111156200040d57600080fd5b600091505b8282101562000431578482018401518183018501529083019062000412565b82821115620004435760008484830101525b9750620004559150508782016200034f565b9450505062000467604086016200034f565b915062000477606086016200034f565b905092959194509250565b600181811c908216806200049757607f821691505b60208210811415620004b957634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c051615334620005126000396000818161020b0152818161109401526121c90152600081816104380152818161107301526121a40152600081816105300152611d5901526153346000f3fe608060405234801561001057600080fd5b50600436106101c65760003560e01c806385aaa397116100fa5780639cd441da1161009d5780639cd441da146104f25780639d67bf0314610505578063c9ca629b14610518578063d2f7265a1461052b578063dba4915314610552578063e7a4993114610564578063e8fa204f14610577578063f22897521461058a578063f2fde38b1461059557600080fd5b806385aaa3971461045a57806388e27dfb146104875780638da5cb5b146104965780638ee8fe5d146104a7578063933c7979146104af5780639482de1a146104c257806395d89b41146104ca5780639c8f9f23146104df57600080fd5b80636346f32e1161016d5780636346f32e14610322578063715018a6146103715780637452fadd1461037957806374f25689146103815780637640482f146103945780637661ce13146103bc578063796c20b7146103d357806380796d55146103e6578063823f2b041461043357600080fd5b806301e0df12146101cb57806306f429b8146101e05780630e06e4d014610206578063186f181e1461024557806323c8346a146102715780633aa3e6501461028457806356f55170146102ae5780635a2f3d09146102d7575b600080fd5b6101de6101d9366004614b83565b6105a8565b005b6101f36101ee366004614bb0565b61067f565b6040519081526020015b60405180910390f35b61022d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101fd565b60195461025c90600160501b900463ffffffff1681565b60405163ffffffff90911681526020016101fd565b6101de61027f366004614c10565b6107c4565b60195461029a906301000000900462ffffff1681565b60405162ffffff90911681526020016101fd565b6102c16102bc366004614c47565b6108b7565b60405164ffffffffff90911681526020016101fd565b6003546004546005546006546007546008546102f595949392919086565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0016101fd565b601a546103609062ffffff8082169163010000008104821691600160301b8204811691600160481b810490911690600160601b900463ffffffff1685565b6040516101fd959493929190614c7a565b6101de610a7a565b6101f3610a8e565b6101de61038f366004614b83565b610ab7565b6103a76103a2366004614cae565b610b87565b604080519283526020830191909152016101fd565b60195461025c90600160301b900463ffffffff1681565b6101de6103e1366004614cd9565b610b9e565b6103f96103f4366004614bb0565b610cbd565b6040516101fd919081518152602080830151908201526040808301519082015260609182015164ffffffffff169181019190915260800190565b61022d7f000000000000000000000000000000000000000000000000000000000000000081565b600c54600d54600e5461046c92919083565b604080519384526020840192909252908201526060016101fd565b60195461029a9062ffffff1681565b6001546001600160a01b031661022d565b6101f3610eb7565b6103a76104bd366004614cf6565b610ed7565b6008546101f3565b6104d2610efd565b6040516101fd9190614d4e565b6103a76104ed366004614cae565b610f8b565b61046c610500366004614d81565b611032565b6101de610513366004614cd9565b611139565b61046c610526366004614c10565b61120f565b61022d7f000000000000000000000000000000000000000000000000000000000000000081565b600954600a54600b5461046c92919083565b6101de610572366004614da3565b6112b7565b6101f3610585366004614db5565b61151a565b6006546007546103a7565b6101de6105a3366004614df8565b611530565b6105b06115ce565b600260005414156105dc5760405162461bcd60e51b81526004016105d390614e21565b60405180910390fd5b600260005561c35062ffffff8216111561062d5760405162461bcd60e51b8152602060048201526012602482015271504d5f535046523a20746f6f206c6172676560701b60448201526064016105d3565b6019805462ffffff191662ffffff83169081179091556040519081527ff02c81debd01d238f7814ac27bec8a7970b5271dc47842a419737b1ae313ca0f906020015b60405180910390a1506001600055565b60008061068d868685611628565b509050808411156106da5760405162461bcd60e51b8152602060048201526017602482015276141357d414ce881d1bdbc81b185c99d948185b5bdd5b9d604a1b60448201526064016105d3565b6000610722876106eb57600f6106ee565b60135b6040805160a0810182528a15158152891515602082015290810188905260006060820152600854608082015261177161179c565b600354600454604080516080810182528b151581528a1515602082015260195462ffffff169181019190915260608101899052929350610763926000611c4e565b92508615158615151480159061079857816060015182602001516107879190614e6e565b6107919085614e6e565b93506107b9565b816080015182604001516107ac9190614e6e565b6107b69085614e6e565b93505b505050949350505050565b6107cc611d57565b600260005414156107ef5760405162461bcd60e51b81526004016105d390614e21565b6002600055604051632ec0b78b60e11b8152600f6004820152821515602482015264ffffffffff8216604482015273f2f4343C128c133f539b2Ac5D80Ed851C328513190635d816f169060640160006040518083038186803b15801561085457600080fd5b505af4158015610868573d6000803e3d6000fd5b505060408051851515815264ffffffffff851660208201527ff61aa5333bf001aa89f4bfa6ccaf123eec86eada7fd1c6c366227102507f89cd935001905060405180910390a150506001600055565b60006108c1611d57565b600260005414156108e45760405162461bcd60e51b81526004016105d390614e21565b600260009081556108f3610a8e565b9050841561094857808311156109435760405162461bcd60e51b8152602060048201526015602482015274141357d0d313ce881c1bdcdd081bdb9b1e48189a59605a1b60448201526064016105d3565b610990565b808310156109905760405162461bcd60e51b8152602060048201526015602482015274504d5f434c4f3a20706f7374206f6e6c792061736b60581b60448201526064016105d3565b6040516383818a6f60e01b8152600f60048201528515156024820152604481018590526064810184905273f2f4343C128c133f539b2Ac5D80Ed851C3285131906383818a6f90608401602060405180830381865af41580156109f6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1a9190614e86565b6040805187151581526020810187905290810185905264ffffffffff821660608201529092507f7f6ce27b6803b5b961a441dac0f55de214751acfb64178849efb01fdb71c620b9060800160405180910390a15060016000559392505050565b610a826115ce565b610a8c6000611dcf565b565b600354600090610a9e5750600090565b600354600454600854610ab2929190611e21565b905090565b610abf6115ce565b60026000541415610ae25760405162461bcd60e51b81526004016105d390614e21565b6002600055620186a062ffffff82161115610b355760405162461bcd60e51b8152602060048201526013602482015272504d5f53464d50523a20746f6f206c6172676560681b60448201526064016105d3565b6019805465ffffff0000001916630100000062ffffff8416908102919091179091556040519081527f55647f4dd43ac173f04e53a506df46454012316d82fb04a9c1dbd8e0f21f8f769060200161066f565b600080610b95600384611e3b565b91509150915091565b610ba66115ce565b60026000541415610bc95760405162461bcd60e51b81526004016105d390614e21565b600260005562093a8063ffffffff82161115610c1c5760405162461bcd60e51b8152602060048201526012602482015271504d5f534652533a20746f6f206c6172676560701b60448201526064016105d3565b610e108163ffffffff161015610c695760405162461bcd60e51b8152602060048201526012602482015271141357d4d19494ce881d1bdbc81cdb585b1b60721b60448201526064016105d3565b6019805463ffffffff60501b1916600160501b63ffffffff8416908102919091179091556040519081527fa703b265f29064a106acd6473c258e009bff9ac0bfd63b6f5ca4b712a25c85169060200161066f565b610cef6040518060800160405280600081526020016000815260200160008152602001600064ffffffffff1681525090565b610cf7611d57565b60026000541415610d1a5760405162461bcd60e51b81526004016105d390614e21565b6002600090815580610d2d878786611628565b9150915081851115610d7a5760405162461bcd60e51b8152602060048201526016602482015275141357d4ce881d1bdbc81b185c99d948185b5bdd5b9d60521b60448201526064016105d3565b610d82614b43565b8715610dcd576040805160a08101825289151581528815156020820152908101879052600060608201526008546080820152610dc690600f90611771611e6f611eab565b9050610e0e565b6040805160a08101825289151581528815156020820152908101879052600060608201526008546080820152610e0b90600f90611771611e6f611eab565b90505b6040518060800160405280826000015181526020018260200151815260200182604001518152602001826060015164ffffffffff168152509350610e53600c8361215f565b8351604080518a1515815289151560208201528082018990526060810192909252517fdedf81f778c63a97f5a04bfeae9e0e04f18d283b04d930ea7b6af78b6eb50b769181900360800190a1610ea7612186565b5050600160005550949350505050565b600354600090610ec75750600090565b600354600454610ab291906122c5565b600080610ef060038001546003600401548787876122df565b915091505b935093915050565b60028054610f0a90614ea3565b80601f0160208091040260200160405190810160405280929190818152602001828054610f3690614ea3565b8015610f835780601f10610f5857610100808354040283529160200191610f83565b820191906000526020600020905b815481529060010190602001808311610f6657829003601f168201915b505050505081565b600080610f96611d57565b60026000541415610fb95760405162461bcd60e51b81526004016105d390614e21565b60026000556040805160208101909152838152610fd89060039061234d565b604080518381526020810183905290810186905291935091507f0bb89aa54ed6940a7e7167bd262b2400d63945045ceff1a52a05f2601ed215f19060600160405180910390a1611026612186565b60016000559092909150565b600080600061103f611d57565b600260005414156110625760405162461bcd60e51b81526004016105d390614e21565b60026000556005546110ba576110ba7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008787612464565b6110d96003604051806040016040528088815260200187815250612678565b604080518481526020810184905290810182905292955090935091507fd7f28048575eead8851d024ead087913957dfb4fd1a02b4d1573f5352a5a2be39060600160405180910390a161112a612186565b60016000819055509250925092565b6111416115ce565b600260005414156111645760405162461bcd60e51b81526004016105d390614e21565b600260005562093a8063ffffffff821611156111b85760405162461bcd60e51b8152602060048201526013602482015272504d5f53464d45533a20746f6f206c6172676560681b60448201526064016105d3565b6019805469ffffffff0000000000001916600160301b63ffffffff8416908102919091179091556040519081527f5b18da8898c1e492e6bc631eec59d143ebba7f31ca794b668f0bfa9b0d9892939060200161066f565b6040516399d5040960e01b8152600f6004820152821515602482015264ffffffffff821660448201526000908190819073f2f4343C128c133f539b2Ac5D80Ed851C3285131906399d5040990606401606060405180830381865af415801561127b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129f9190614ed8565b65ffffffffffff9092169450925090505b9250925092565b6112bf6115ce565b600260005414156112e25760405162461bcd60e51b81526004016105d390614e21565b60026000556207a1206112fb6040830160208401614b83565b62ffffff16111561134e5760405162461bcd60e51b815260206004820152601e60248201527f50455f53504c433a20746f6f206c61726765206c69717569646174696f6e000060448201526064016105d3565b61135e6040820160208301614b83565b62ffffff166113706020830183614b83565b62ffffff1611156113b65760405162461bcd60e51b815260206004820152601060248201526f141157d4d41310ce881a5b9d985b1a5960821b60448201526064016105d3565b620f42406113ca6080830160608401614b83565b62ffffff161061141c5760405162461bcd60e51b815260206004820152601a60248201527f50455f53504c433a20656d6120746f6f206c61726765206c697100000000000060448201526064016105d3565b61142c6080820160608301614b83565b62ffffff166114416060830160408401614b83565b62ffffff16111561148b5760405162461bcd60e51b8152602060048201526014602482015273141157d4d41310ce88195b58481a5b9d985b1a5960621b60448201526064016105d3565b80601a6114988282614f27565b507fbe7eee05a638b28e8473a6f87ae310d3123f8a2a7561ce96e140f76125f7461290506114c96020830183614b83565b6114d96040840160208501614b83565b6114e96060850160408601614b83565b6114f96080860160608701614b83565b61150960a0870160808801614cd9565b60405161066f959493929190614c7a565b6000611527848484611628565b50949350505050565b6115386115ce565b6001600160a01b03811661159d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105d3565b6115a681611dcf565b50565b6001600160a01b03163b151590565b42600290910155565b600160601b600590910155565b6001546001600160a01b03163314610a8c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105d3565b600061164e60405180606001604052806000815260200160008152602001600081525090565b60055461165e5760009150610ef5565b6000611668610eb7565b9050611677600c601a8361283d565b9150600061169283600001518460400151601a888b1561290c565b6003546004546019549293506116b1928a908a9062ffffff16866129ba565b935073f2f4343C128c133f539b2Ac5D80Ed851C328513163b2041ed9886116d957600f6116dc565b60135b60085460405160e084901b6001600160e01b031916815260048101929092528a15156024830152891515604483015260648201859052608482015260a401602060405180830381865af4158015611737573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175b9190615013565b6117659085614e6e565b93505050935093915050565b6003546004546019546000926117929290918790879062ffffff16876129ba565b90505b9392505050565b6117ea6040518060e001604052806000815260200160008152602001600081526020016000815260200160008152602001600064ffffffffff168152602001600064ffffffffff1681525090565b602083015183518554911515901515149064ffffffffff166000805b64ffffffffff831615611bfc5761187960405180610120016040528060006001600160801b031681526020016000815260200160008152602001600064ffffffffff168152602001600064ffffffffff168152602001600081526020016000815260200160008152602001600081525090565b64ffffffffff8416600090815260018a016020526040902054600160801b90046001600160801b031680825260808901516118b99190600160601b612b1d565b60208083018290528951908a01516118d49263ffffffff8b16565b60408083019190915264ffffffffff80861660008181526001808e01602081815286842054600160281b8104871660608a01908152958552918152600160501b909104851660808801529251909316815260028d0190915291909120015461193c9084614e6e565b60a0820152606081015164ffffffffff1660009081526002808b016020526040909120015461196b9083614e6e565b60c0820152604081015160009086611999576119948360c001518b60800151600160601b612b1d565b61199f565b8260a001515b6119a99190614e6e565b9050808960400151116119e957606082015164ffffffffff166119dd576119d08a86612beb565b64ffffffffff1660a08801525b50606001519250611806565b608082015164ffffffffff908116600090815260028c016020526040808220600190810154938916835291200154611a21919061502c565b611a2b9085614e6e565b60e0830152608082015164ffffffffff90811660009081526002808d01602052604080832082015493891683529091200154611a67919061502c565b611a719084614e6e565b610100830152604082015160009087611aa157611a9c8461010001518c60800151600160601b612b1d565b611aa7565b8360e001515b611ab19190614e6e565b9050808a604001511015611bbe576040830151885260a0830151602089015260c083015160808b0151611ae99190600160601b612b1d565b60408901528615611b2957818a60400151611b04919061502c565b606089018190526020840151611b1f9190600160601b612b1d565b6080890152611b91565b818a60400151611b39919061502c565b608089018190526020840151611b559190600160601b90612b1d565b6060890181905264ffffffffff8716600090815260028d016020526040902054611b8b9190611b869060019061502c565b612d14565b60608901525b611b9b8b87612beb565b64ffffffffff90811660a08a01529590951660c088015250611795945050505050565b8260e0015194508261010001519350826080015164ffffffffff1660001415611bef5764ffffffffff861660a08901525b5050608001519250611806565b602085018290526080870151611c18908290600160601b612b1d565b604086015283611c2c578460400151611c32565b84602001515b8760400151611c41919061502c565b8552505050509392505050565b600080611c62620f42408560400151612d2a565b9050836020015115611cbd576060840151600090611c809083612d90565b855190915015611ca557611c9e8682611c998a82612da5565b612b1d565b9250611cb7565b611cb48782611c998982612da5565b92505b50611d0a565b835115611ce5576060840151611cde908790611cd98882612db1565b612dbd565b9150611cfd565b6060840151611cfa908690611cd98982612db1565b91505b611d078282612e34565b91505b8261152757600082116115275760405162461bcd60e51b8152602060048201526015602482015274504c5f53443a206f7574707574206973207a65726f60581b60448201526064016105d3565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314610a8c5760405162461bcd60e51b815260206004820152601d60248201527f504d5f4f453a2063616c6c6572206973206e6f742065786368616e676500000060448201526064016105d3565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000611792611e3085856122c5565b600160601b84612b1d565b600080611e518385600001548660020154612b1d565b611e648486600101548760020154612b1d565b915091509250929050565b604080516080810182528415158152831515602082015260195462ffffff16918101919091526060810182905260009061179290600390612e49565b611eb3614b43565b8351600090611ec25785611ec7565b856004015b90506000611ed682878761179c565b805190915015611f0b57855160208701518251611ef892919063ffffffff8816565b83518490611f07908390614e6e565b9052505b602086015186511515901515146000611f218990565b90508260a0015164ffffffffff1660001461200e5760088901805460019190600090611f5690849065ffffffffffff16615043565b82546101009290920a65ffffffffffff818102199093169183160217909155604080516020808201835260808d0151825260088e0154909316600090815260098e0190935291209051905550875115611fc85760a0830151611fc3908590612e8c612e9f612eb786612ecb565b611fe2565b60a0830151611fe2908590612ff0612fff61300c86612ecb565b81611ff1578260200151611ff7565b82604001515b85518690612006908390614e6e565b905250612052565b6020830151156120305760405162461bcd60e51b81526004016105d39061506d565b6040830151156120525760405162461bcd60e51b81526004016105d39061506d565b60c083015164ffffffffff161561210f57606083015160c084015164ffffffffff1660009081526002860160205260408120805490919061209490849061502c565b909155505060c083015188516120be91906120b157612fff6120b5565b612e9f5b86919084613018565b816120cd5782606001516120d3565b82608001515b855186906120e2908390614e6e565b90525060608084015160208701526080840151604087015260c084015164ffffffffff1690860152612153565b6060830151156121315760405162461bcd60e51b81526004016105d39061506d565b6080830151156121535760405162461bcd60e51b81526004016105d39061506d565b50505050949350505050565b602081015161216c575050565b805182556020810151600183015560400151600290910155565b6000612190610a8e565b6040805160c0810182526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f000000000000000000000000000000000000000000000000000000000000000016602082015290810182905260195462ffffff6301000000820416606083015263ffffffff600160301b820481166080840152600160501b9091041660a08201529091506000908190819061223f90600990613066565b92509250925082600014156122545750505050565b61225f6003846131ff565b6006546007546040805186815263ffffffff8616602082015290810184905260608101879052608081019290925260a08201527f318daee0b48d1f6a0542d8cdd35e2593d88c4fb01708f4781609494206d070519060c00160405180910390a150505050565b60006122d682600160601b85612b1d565b90505b92915050565b60008060006122ff6122f086613300565b6122f98a613300565b9061336e565b9050600061230f6122f086613300565b905061232a82600160601b6123238a613300565b919061337a565b61233c82600160601b6123238b613300565b9350935050505b9550959350505050565b81546001830154600284015483516000938493909290918490612371908584612b1d565b9050600061238488600001518585612b1d565b90506000821180156123965750600081115b6123da5760405162461bcd60e51b8152602060048201526015602482015274504c5f524c3a206f7574707574206973207a65726f60581b60448201526064016105d3565b6123e48583612db1565b89556123f08482612db1565b60018a01558751600090612405908590612db1565b90506103e88110156124505760405162461bcd60e51b8152602060048201526014602482015273504c5f524c3a206d696e206c697175696469747960601b60448201526064016105d3565b60028a015590955093505050509250929050565b600061246f8561341e565b9050600061247c8561341e565b9050600082116124ce5760405162461bcd60e51b815260206004820152601b60248201527f464c5f56494c503a20696e76616c69642062617365207072696365000000000060448201526064016105d3565b6000811161251e5760405162461bcd60e51b815260206004820152601c60248201527f464c5f56494c503a20696e76616c69642071756f74652070726963650000000060448201526064016105d3565b6000612529876134e4565b90506000612536876134e4565b9050604d60ff8316111561258c5760405162461bcd60e51b815260206004820152601e60248201527f464c5f56494c503a20696e76616c6964206261736520646563696d616c73000060448201526064016105d3565b604d60ff821611156125e05760405162461bcd60e51b815260206004820152601f60248201527f464c5f56494c503a20696e76616c69642071756f746520646563696d616c730060448201526064016105d3565b60006125f186600160601b89612b1d565b9050600061260284848888866135aa565b9050612615600160601b620186a0612d90565b61261e8261362a565b111561266c5760405162461bcd60e51b815260206004820152601b60248201527f464c5f56494c503a20746f6f206661722066726f6d20696e646578000000000060448201526064016105d3565b50505050505050505050565b600282015460009081908190818161274957602086015186516000916126a6916126a19161364e565b61365a565b90506126b4816103e8612db1565b8751909250158015906126cb575060008760200151115b80156126d75750600082115b6127235760405162461bcd60e51b815260206004820152601d60248201527f504c5f414c3a20696e697469616c206c6971756964697479207a65726f00000060448201526064016105d3565b8651808955602088015160018a0181905560028a01929092559550935091506112b09050565b865460018801548751602089015160009161276991611b86908686612b1d565b905060006127848a60200151611b868c600001518688612b1d565b905061279f612794838887612b1d565b611b86838987612b1d565b94506000821180156127b15750600081115b80156127bd5750600085115b6128015760405162461bcd60e51b8152602060048201526015602482015274504c5f414c3a206c6971756964697479207a65726f60581b60448201526064016105d3565b61280b8483612da5565b8b556128178382612da5565b60018c01556128268686612da5565b60028c015590975095509193505050509250925092565b61286160405180606001604052806000815260200160008152602001600081525090565b600184015442908082116128845750508354815260028401546040820152611795565b60006128908383612db1565b87549091506128a557604084018590526128fb565b855463ffffffff600160601b9091048116906000906128c89084908490612da516565b90506128f36128d8888584612b1d565b6128ed8b600201548563ffffffff1685612b1d565b90612da5565b604087015250505b505082825260208201529392505050565b6000806129398461292357855462ffffff16612932565b85546301000000900462ffffff165b8890612d90565b9050600061296d85612958578654600160301b900462ffffff16612932565b86548890600160481b900462ffffff16612d90565b905083156129955761298c6129828984612da5565b611b868984612da5565b925050506129b1565b61298c6129a28984612db1565b6129ac8984612db1565b6136ca565b95945050505050565b6000806129ca620f424085612d2a565b905060006129d8898961364e565b90508615612a625760006129f182600160601b87612b1d565b905060006129ff8b8061364e565b9050808211612a15576000945050505050612b13565b6000612a218383612db1565b90506000612a39612a328e88612d90565b8e90612da5565b9050612a57612a4882886136da565b612a5284896136da565b6136ef565b965050505050612ad1565b6000612a738286600160601b612b1d565b90506000612a818a8061364e565b9050808211612a97576000945050505050612b13565b6000612aa38383612db1565b90506000612abb612ab48d88612d90565b8d90612da5565b9050612aca612a4882886136da565b9650505050505b85612b1057612b0d898960405180608001604052808b151581526020016001151581526020018962ffffff168152602001878152506001611c4e565b92505b50505b9695505050505050565b600080806000198587098587029250828110838203039150508060001415612b5857838281612b4e57612b4e615092565b0492505050611795565b838110612b8257604051631dcf306360e21b815260048101829052602481018590526044016105d3565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b600064ffffffffff8216612c3b5760405162461bcd60e51b81526020600482015260176024820152765242544c5f503a2074617267657420697320656d70747960481b60448201526064016105d3565b64ffffffffff8281166000908152600185016020526040902054600160281b90041615612c965764ffffffffff8083166000908152600185016020526040902054612c8f918591600160281b900416613721565b90506122d9565b5064ffffffffff8082166000908152600184016020526040902054165b64ffffffffff811615801590612cec575064ffffffffff8181166000908152600185016020526040902054600160281b90048116908316145b156122d95764ffffffffff808216600090815260018501602052604090205491925016612cb3565b6000818310612d2357816122d6565b5090919050565b60008262ffffff168262ffffff161115612d865760405162461bcd60e51b815260206004820152601e60248201527f506572704d6174683a207375627472616374696f6e206f766572666c6f77000060448201526064016105d3565b6122d682846150a8565b60006122d6838362ffffff16620f4240612b1d565b60006122d68284614e6e565b60006122d6828461502c565b6000612dca848484612b1d565b905060008280612ddc57612ddc615092565b8486091115611795576000198110612e2a5760405162461bcd60e51b8152602060048201526011602482015270464d5f4d4452553a206f766572666c6f7760781b60448201526064016105d3565b806129b1816150cc565b60006122d683620f42408462ffffff16612dbd565b6000612e6083600001548460010154846000611c4e565b82516020840151855460018701546060870151949550612e809486613775565b60018501559092555090565b6000816129b160048201600187876137f7565b600081612eaf600482018561388d565b949350505050565b80612ec660048201828561399c565b505050565b64ffffffffff8516612f175760405162461bcd60e51b81526020600482015260156024820152745242544c5f524c3a206b657920697320656d70747960581b60448201526064016105d3565b612f2186866139dd565b612f665760405162461bcd60e51b81526020600482015260166024820152751490951317d4930e881ad95e481b9bdd08195e1a5cdd60521b60448201526064016105d3565b6040805160808082018352885464ffffffffff9081168352881660208301529181019190915260608101829052612fa1908790868686613a28565b50865464ffffffffff91821664ffffffffff19918216811789556000908152600189016020526040808220805490931690925597549091168752909520805460ff60781b191690555050505050565b6000816129b1818387876137f7565b600081612eaf818561388d565b80612ec681808561399c565b64ffffffffff8316156130605761303383828463ffffffff16565b1561303d57613060565b64ffffffffff928316600090815260018501602052604090205490921691613018565b50505050565b6000806000804290506000613088876002015483612db190919063ffffffff16565b9050806130a157600080600094509450945050506112b0565b60006130b0876000015161341e565b905060006130c1886020015161341e565b905060006130d289600001516134e4565b905060006130e38a602001516134e4565b8b54909150841480156130f95750828b60010154145b80613102575083155b8061310b575082155b806131195750604d60ff8316115b806131275750604d60ff8216115b156131425760008060009850985098505050505050506112b0565b613156858b6080015163ffffffff16612d14565b945061316185613c57565b9750613174828286868e604001516135aa565b9650600061319b6131968c60600151600160601b612d9090919063ffffffff16565b613300565b90506131b96131aa828a613cbc565b6131b3836150e7565b90613ccb565b97506131e26131c787613300565b8c60a0015163ffffffff168a61337a9092919063ffffffff16565b948c55505050600189015560028801929092555092509250925092565b80613208575050565b60006132138261362a565b9050600082131561327657600183015460006132348284600160601b612b1d565b90506132408282612db1565b856001018190555061326961325e82600160601b8860020154612b1d565b600487015490612da5565b6004860155506132c89050565b8254600061328d8284611c99600160601b82612da5565b90506132998282612db1565b855560028501546132c0906132b5908390600160601b90612b1d565b600387015490612da5565b600386015550505b6132f383600501546132e96132e4856122f9600160601b613300565b613cdb565b600160601b612b1d565b8360050181905550505050565b60006001600160ff1b0382111561336a5760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b60648201526084016105d3565b5090565b60006122d68284615104565b6000806000851261338b5784613394565b61339485613d2d565b905060008085126133a557846133ae565b6133ae85613d2d565b9050600080871280156133c15750600086135b806133d757506000871380156133d75750600086125b6133e25760006133e5565b60015b905060006133f4848488612b1d565b9050816134095761340481613300565b613412565b61341281613d8b565b98975050505050505050565b60006001600160a01b03821661343657506001919050565b60408051600481526024810182526020810180516001600160e01b0316634c6afee560e11b179052905160009081906001600160a01b0386169061347b908590615143565b600060405180830381855afa9150503d80600081146134b6576040519150601f19603f3d011682016040523d82523d6000602084013e6134bb565b606091505b5091509150816134d057506000949350505050565b808060200190518101906129b19190615013565b60006001600160a01b0382166134fc57506000919050565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b179052905160009081906001600160a01b03861690613541908590615143565b600060405180830381855afa9150503d806000811461357c576040519150601f19603f3d011682016040523d82523d6000602084013e613581565b606091505b509150915081613596575060ff949350505050565b808060200190518101906129b1919061515f565b60008160ff87161515806135bf575084600114155b156135dc576135d9816135d389600a615266565b87612b1d565b90505b60ff86161515806135ee575083600114155b15613606576136038185611c9989600a615266565b90505b61361f613616600160601b613300565b6122f983613300565b979650505050505050565b600080821215613645576136406132e483613d2d565b6122d9565b6122d982613cdb565b60006122d68284615275565b600060038211156136bb5750806000613674600283615294565b61367f906001614e6e565b90505b818110156136b55790508060028161369a8186615294565b6136a49190614e6e565b6136ae9190615294565b9050613682565b50919050565b81156136c5575060015b919050565b600081831015612d2357816122d6565b60006122d683620f42408462ffffff16612b1d565b60006122d6600261371b856137156126a161370b88600461364e565b6128ed8a8061364e565b90612db1565b90613d9f565b60005b64ffffffffff8281166000908152600185016020526040902054600160501b900416156136b55764ffffffffff9182166000908152600184016020526040902054600160501b900490911690613724565b60008086156137b75787156137a15761378e8685612da5565b915061379a8584612db1565b90506137ec565b6137ab8684612db1565b915061379a8585612da5565b87156137d3576137c78684612da5565b915061379a8585612db1565b6137dd8685612db1565b91506137e98584612da5565b90505b965096945050505050565b64ffffffffff828116600090815260018601602052604080822054928416825281205490916001600160801b03600160801b91829004811692919091041680821415613857578364ffffffffff168564ffffffffff161092505050612eaf565b8561387657806001600160801b0316826001600160801b03161061361f565b6001600160801b0390811691161195945050505050565b64ffffffffff808216600090815260028085016020818152604080852060018082015495820154818b01855283882054959094529054600160501b85048816808852838820830154600160281b909604909816808852928720909101549596949592949193919287926138ff91614e6e565b6139099190614e6e565b905060006139178989613dab565b64ffffffffff80851660009081526002808d016020526040808320820154938916835290912001546139499190614e6e565b6139539190614e6e565b9050858214801561396357508481145b9650866139905764ffffffffff881660009081526002808b01602052604090912060018101849055018190555b50505050505092915050565b60089091015464ffffffffff909116600090815260029092016020526040909120600301805465ffffffffffff191665ffffffffffff909216919091179055565b600064ffffffffff8216158015906122d65750825464ffffffffff838116911614806122d657505064ffffffffff908116600090815260019290920160205260409091205416151590565b8351600090819064ffffffffff16613a495750506040840151600090612343565b855164ffffffffff166000908152600188016020526040902054600160781b900460ff16613a78576001613a7b565b60005b86604001818151613a8c91906152b6565b60ff169052508551602087015164ffffffffff90811691161415613af557613ac0866000015187606001518563ffffffff16565b5050835164ffffffffff9081166000908152600187016020526040908190205490860151600160501b90910490911690612343565b613b108660200151876000015188606001518863ffffffff16565b15613bd45760408051608081018252875164ffffffffff908116600090815260018b01602090815284822054600160281b900483168452808b0151909216918301919091528883015160ff1692820192909252606080890151908201528190613b7d908a90898989613a28565b895164ffffffffff808216600090815260018e0160205260409081902054908d015160608e0151959750939550613bc9948e94889493600160501b909304909216918c91889190613df2565b935093505050612343565b613bea866000015187606001518563ffffffff16565b60408051608081018252875164ffffffffff908116600090815260018b0160209081529084902054600160501b900482168352808a0151909116908201528782015160ff169181019190915260608088015190820152613c4e908890878787613a28565b91509150612343565b600063ffffffff82111561336a5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b60648201526084016105d3565b6000818312612d2357816122d6565b600081831215612d2357816122d6565b60008082121561336a5760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f73697469766560448201526064016105d3565b6000600160ff1b8213613d825760405162461bcd60e51b815260206004820152601c60248201527f506572704d6174683a20696e76657273696f6e206f766572666c6f770000000060448201526064016105d3565b6122d9826150e7565b6000613d9682613300565b6122d9906150e7565b60006122d68284615294565b64ffffffffff8116600090815260018301602090815260408083205460028601909252822054600160801b9091046001600160801b031690612eaf9082600160601b612b1d565b6000808360ff168560ff161115613ef657613e558a6040518060c001604052808c64ffffffffff1681526020018b64ffffffffff1681526020018a64ffffffffff1681526020018860ff1681526020018760ff16815260200186815250886140e6565b5064ffffffffff8116600090815260018c016020526040902054909250859150600160781b900460ff168015613eba575064ffffffffff828116600090815260018c01602052604080822054600160501b900490921681522054600160781b900460ff165b15613ef15764ffffffffff821660009081526001808c016020526040909120805460ff60781b19169055613eee90826152d9565b90505b6140d9565b8360ff168560ff161015613fed57613f568a6040518060c001604052808c64ffffffffff1681526020018b64ffffffffff1681526020018a64ffffffffff1681526020018860ff1681526020018760ff16815260200186815250886143dc565b64ffffffffff8116600090815260018c016020526040902054909250849150600160781b900460ff168015613eba575064ffffffffff828116600090815260018c01602052604080822054600160281b900490921681522054600160781b900460ff1615613ef15764ffffffffff821660009081526001808c016020526040909120805460ff60781b19169055613eee90826152d9565b64ffffffffff8916600090815260018b016020526040812054600160781b900460ff1615801561403d575064ffffffffff8816600090815260018c016020526040902054600160781b900460ff16155b64ffffffffff8a8116600090815260018e016020526040902080546fff0000000000ffffffffff00000000001916600160781b8415150264ffffffffff60281b191617600160281b8e8416021764ffffffffff60501b1916600160501b928c169290920291909117905590506140b7898563ffffffff8a16565b5088816140c55760016140c8565b60005b6140d290886152d9565b9093509150505b9850989650505050505050565b815164ffffffffff1660009081526001840160205260408120548190600160781b900460ff161580156141265750836080015160ff16846060015160ff16145b156141d8576020808501805164ffffffffff9081166000908152600189019093526040808420805460ff60781b1916600160781b17905587518351831685528185208054918416600160281b0264ffffffffff60281b19909216919091179055808801518351831685529320805493909116600160501b0264ffffffffff60501b19909316929092179091555160a08501516141c6919063ffffffff8616565b50505060208201516060830151610ef5565b6040805160c081018252855164ffffffffff908116600090815260018901602081815285832054600160501b900484168552808a01518416818601528986015184168587015289519093168252909152918220546142819188916060820190600160781b900460ff1661424c57600161424f565b60005b896060015161425e91906152b6565b60ff168152602001886080015160ff1681526020018860a00151815250866140e6565b50855164ffffffffff9081166000908152600189016020526040808220805464ffffffffff60501b1916600160501b868616021790558851909216815220805464ffffffffff19169055855160a08701519192506142e29163ffffffff8716565b50845164ffffffffff166000908152600187016020526040902054600160781b900460ff16158015614333575064ffffffffff81166000908152600187016020526040902054600160781b900460ff165b801561436e575064ffffffffff818116600090815260018801602052604080822054600160501b900490921681522054600160781b900460ff165b156143c95764ffffffffff808216600090815260018801602052604080822054600160501b9004909216815220805460ff60781b19169055845160a08601516143ba918891879061479a565b60608501519092509050610ef5565b5050825160609093015192949293505050565b60408281015164ffffffffff1660009081526001850160205290812054600160781b900460ff1615801561441d5750826080015160ff16836060015160ff16145b15614552576020808401805164ffffffffff9081166000908152600188019093526040808420805460ff60781b1916600160781b17905586518351831685528185208054918416600160281b0264ffffffffff60281b19909216919091179055808701519251821684529092208054918316600160501b0264ffffffffff60501b19909216919091179055835116156144e757602083810151845164ffffffffff9081166000908152600188019093526040909220805464ffffffffff1916929091169190911790555b604083015164ffffffffff16156145305760208381015160408086015164ffffffffff9081166000908152600189019094529220805464ffffffffff1916929091169190911790555b61454683602001518460a001518463ffffffff16565b50506020820151611795565b6040805160c081018252845164ffffffffff908116825260208087015182168184015286840180518316600090815260018a0180845286822054600160281b90048516868801526060808b015160ff90811691880191909152925190941681529290915292812054909261460492889290916080830191600160781b9004166145dc5760016145df565b60005b88608001516145ee91906152b6565b60ff1681526020018760a00151815250856143dc565b6040858101805164ffffffffff908116600090815260018a01602052838120805464ffffffffff60281b1916600160281b878516908102919091179091559251909116815291909120805464ffffffffff19169055909150156146955760408481015164ffffffffff83811660009081526001890160205292909220805464ffffffffff1916929091169190911790555b6146ab84604001518560a001518563ffffffff16565b5060408481015164ffffffffff166000908152600187016020522054600160781b900460ff161580156146fd575064ffffffffff81166000908152600186016020526040902054600160781b900460ff165b8015614738575064ffffffffff818116600090815260018701602052604080822054600160281b900490921681522054600160781b900460ff165b1561478e5764ffffffffff808216600090815260018701602052604080822054600160281b90049092168152819020805460ff60781b1916905584015160a0850151614787918791869061497b565b9050611795565b50505060400151919050565b64ffffffffff80841660008181526001870160205260408082208054600160501b80820487168086529385205495909452600160281b909404851692830264ffffffffff60501b19851617905592919091169080156148205764ffffffffff81811660009081526001890160205260409020805464ffffffffff19169188169190911790555b64ffffffffff83811660009081526001890160205260409020805464ffffffffff1916918416918217905561486957865464ffffffffff191664ffffffffff8416178755614909565b64ffffffffff8281166000908152600189016020526040902054600160281b9004811690871614156148d15764ffffffffff808316600090815260018901602052604090208054918516600160281b0264ffffffffff60281b19909216919091179055614909565b64ffffffffff808316600090815260018901602052604090208054918516600160501b0264ffffffffff60501b199092169190911790555b64ffffffffff838116600081815260018a016020526040808220805464ffffffffff60281b1916600160281b958c1695860217905592815291909120805464ffffffffff19169091179055614962868563ffffffff8816565b5061497183858763ffffffff16565b5050505050505050565b64ffffffffff80841660008181526001870160205260408082208054600160281b80820487168086529385205495909452600160501b909404851692830264ffffffffff60281b1985161790559291909116908015614a015764ffffffffff81811660009081526001890160205260409020805464ffffffffff19169188169190911790555b64ffffffffff83811660009081526001890160205260409020805464ffffffffff19169184169182179055614a4a57865464ffffffffff191664ffffffffff8416178755614aea565b64ffffffffff8281166000908152600189016020526040902054600160501b900481169087161415614ab25764ffffffffff808316600090815260018901602052604090208054918516600160501b0264ffffffffff60501b19909216919091179055614aea565b64ffffffffff808316600090815260018901602052604090208054918516600160281b0264ffffffffff60281b199092169190911790555b64ffffffffff838116600081815260018a016020526040808220805464ffffffffff60501b1916600160501b958c1695860217905592815291909120805464ffffffffff19169091179055614962868563ffffffff8816565b6040518060800160405280600081526020016000815260200160008152602001600064ffffffffff1681525090565b62ffffff811681146115a657600080fd5b600060208284031215614b9557600080fd5b813561179581614b72565b803580151581146136c557600080fd5b60008060008060808587031215614bc657600080fd5b614bcf85614ba0565b9350614bdd60208601614ba0565b925060408501359150614bf260608601614ba0565b905092959194509250565b64ffffffffff811681146115a657600080fd5b60008060408385031215614c2357600080fd5b614c2c83614ba0565b91506020830135614c3c81614bfd565b809150509250929050565b600080600060608486031215614c5c57600080fd5b614c6584614ba0565b95602085013595506040909401359392505050565b62ffffff958616815293851660208501529184166040840152909216606082015263ffffffff909116608082015260a00190565b600060208284031215614cc057600080fd5b5035919050565b63ffffffff811681146115a657600080fd5b600060208284031215614ceb57600080fd5b813561179581614cc7565b600080600060608486031215614d0b57600080fd5b505081359360208301359350604090920135919050565b60005b83811015614d3d578181015183820152602001614d25565b838111156130605750506000910152565b6020815260008251806020840152614d6d816040850160208701614d22565b601f01601f19169190910160400192915050565b60008060408385031215614d9457600080fd5b50508035926020909101359150565b600060a082840312156136b557600080fd5b600080600060608486031215614dca57600080fd5b614dd384614ba0565b9250614de160208501614ba0565b9150614def60408501614ba0565b90509250925092565b600060208284031215614e0a57600080fd5b81356001600160a01b038116811461179557600080fd5b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115614e8157614e81614e58565b500190565b600060208284031215614e9857600080fd5b815161179581614bfd565b600181811c90821680614eb757607f821691505b602082108114156136b557634e487b7160e01b600052602260045260246000fd5b600080600060608486031215614eed57600080fd5b835165ffffffffffff81168114614f0357600080fd5b602085015160409095015190969495509392505050565b600081356122d981614cc7565b8135614f3281614b72565b62ffffff8116905081548162ffffff1982161783556020840135614f5581614b72565b65ffffff0000008160181b169050808365ffffffffffff198416171784556040850135614f8181614b72565b68ffffff0000000000008160301b1690508368ffffffffffffffffff1984161793508084831717855560608601359250614fba83614b72565b62ffffff60481b1993909316179190911760489190911b62ffffff60481b1617815561500f614feb60808401614f1a565b82805463ffffffff60601b191660609290921b63ffffffff60601b16919091179055565b5050565b60006020828403121561502557600080fd5b5051919050565b60008282101561503e5761503e614e58565b500390565b600065ffffffffffff80831681851680830382111561506457615064614e58565b01949350505050565b6020808252600b908201526a3732bb32b91037b1b1bab960a91b604082015260600190565b634e487b7160e01b600052601260045260246000fd5b600062ffffff838116908316818110156150c4576150c4614e58565b039392505050565b60006000198214156150e0576150e0614e58565b5060010190565b6000600160ff1b8214156150fd576150fd614e58565b5060000390565b60008083128015600160ff1b85018412161561512257615122614e58565b6001600160ff1b038401831381161561513d5761513d614e58565b50500390565b60008251615155818460208701614d22565b9190910192915050565b60006020828403121561517157600080fd5b815160ff8116811461179557600080fd5b600181815b808511156151bd5781600019048211156151a3576151a3614e58565b808516156151b057918102915b93841c9390800290615187565b509250929050565b6000826151d4575060016122d9565b816151e1575060006122d9565b81600181146151f757600281146152015761521d565b60019150506122d9565b60ff84111561521257615212614e58565b50506001821b6122d9565b5060208310610133831016604e8410600b8410161715615240575081810a6122d9565b61524a8383615182565b806000190482111561525e5761525e614e58565b029392505050565b60006122d660ff8416836151c5565b600081600019048311821515161561528f5761528f614e58565b500290565b6000826152b157634e487b7160e01b600052601260045260246000fd5b500490565b600060ff821660ff8416808210156152d0576152d0614e58565b90039392505050565b600060ff821660ff84168060ff038211156152f6576152f6614e58565b01939250505056fea2646970667358221220cd07535cb951730646c9e1932174200f9d9f54c97050fb369dc063886b25397664736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c65760003560e01c806385aaa397116100fa5780639cd441da1161009d5780639cd441da146104f25780639d67bf0314610505578063c9ca629b14610518578063d2f7265a1461052b578063dba4915314610552578063e7a4993114610564578063e8fa204f14610577578063f22897521461058a578063f2fde38b1461059557600080fd5b806385aaa3971461045a57806388e27dfb146104875780638da5cb5b146104965780638ee8fe5d146104a7578063933c7979146104af5780639482de1a146104c257806395d89b41146104ca5780639c8f9f23146104df57600080fd5b80636346f32e1161016d5780636346f32e14610322578063715018a6146103715780637452fadd1461037957806374f25689146103815780637640482f146103945780637661ce13146103bc578063796c20b7146103d357806380796d55146103e6578063823f2b041461043357600080fd5b806301e0df12146101cb57806306f429b8146101e05780630e06e4d014610206578063186f181e1461024557806323c8346a146102715780633aa3e6501461028457806356f55170146102ae5780635a2f3d09146102d7575b600080fd5b6101de6101d9366004614b83565b6105a8565b005b6101f36101ee366004614bb0565b61067f565b6040519081526020015b60405180910390f35b61022d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101fd565b60195461025c90600160501b900463ffffffff1681565b60405163ffffffff90911681526020016101fd565b6101de61027f366004614c10565b6107c4565b60195461029a906301000000900462ffffff1681565b60405162ffffff90911681526020016101fd565b6102c16102bc366004614c47565b6108b7565b60405164ffffffffff90911681526020016101fd565b6003546004546005546006546007546008546102f595949392919086565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0016101fd565b601a546103609062ffffff8082169163010000008104821691600160301b8204811691600160481b810490911690600160601b900463ffffffff1685565b6040516101fd959493929190614c7a565b6101de610a7a565b6101f3610a8e565b6101de61038f366004614b83565b610ab7565b6103a76103a2366004614cae565b610b87565b604080519283526020830191909152016101fd565b60195461025c90600160301b900463ffffffff1681565b6101de6103e1366004614cd9565b610b9e565b6103f96103f4366004614bb0565b610cbd565b6040516101fd919081518152602080830151908201526040808301519082015260609182015164ffffffffff169181019190915260800190565b61022d7f000000000000000000000000000000000000000000000000000000000000000081565b600c54600d54600e5461046c92919083565b604080519384526020840192909252908201526060016101fd565b60195461029a9062ffffff1681565b6001546001600160a01b031661022d565b6101f3610eb7565b6103a76104bd366004614cf6565b610ed7565b6008546101f3565b6104d2610efd565b6040516101fd9190614d4e565b6103a76104ed366004614cae565b610f8b565b61046c610500366004614d81565b611032565b6101de610513366004614cd9565b611139565b61046c610526366004614c10565b61120f565b61022d7f000000000000000000000000000000000000000000000000000000000000000081565b600954600a54600b5461046c92919083565b6101de610572366004614da3565b6112b7565b6101f3610585366004614db5565b61151a565b6006546007546103a7565b6101de6105a3366004614df8565b611530565b6105b06115ce565b600260005414156105dc5760405162461bcd60e51b81526004016105d390614e21565b60405180910390fd5b600260005561c35062ffffff8216111561062d5760405162461bcd60e51b8152602060048201526012602482015271504d5f535046523a20746f6f206c6172676560701b60448201526064016105d3565b6019805462ffffff191662ffffff83169081179091556040519081527ff02c81debd01d238f7814ac27bec8a7970b5271dc47842a419737b1ae313ca0f906020015b60405180910390a1506001600055565b60008061068d868685611628565b509050808411156106da5760405162461bcd60e51b8152602060048201526017602482015276141357d414ce881d1bdbc81b185c99d948185b5bdd5b9d604a1b60448201526064016105d3565b6000610722876106eb57600f6106ee565b60135b6040805160a0810182528a15158152891515602082015290810188905260006060820152600854608082015261177161179c565b600354600454604080516080810182528b151581528a1515602082015260195462ffffff169181019190915260608101899052929350610763926000611c4e565b92508615158615151480159061079857816060015182602001516107879190614e6e565b6107919085614e6e565b93506107b9565b816080015182604001516107ac9190614e6e565b6107b69085614e6e565b93505b505050949350505050565b6107cc611d57565b600260005414156107ef5760405162461bcd60e51b81526004016105d390614e21565b6002600055604051632ec0b78b60e11b8152600f6004820152821515602482015264ffffffffff8216604482015273__$52dce10bb0994e0b74d4a2856cc70476a1$__90635d816f169060640160006040518083038186803b15801561085457600080fd5b505af4158015610868573d6000803e3d6000fd5b505060408051851515815264ffffffffff851660208201527ff61aa5333bf001aa89f4bfa6ccaf123eec86eada7fd1c6c366227102507f89cd935001905060405180910390a150506001600055565b60006108c1611d57565b600260005414156108e45760405162461bcd60e51b81526004016105d390614e21565b600260009081556108f3610a8e565b9050841561094857808311156109435760405162461bcd60e51b8152602060048201526015602482015274141357d0d313ce881c1bdcdd081bdb9b1e48189a59605a1b60448201526064016105d3565b610990565b808310156109905760405162461bcd60e51b8152602060048201526015602482015274504d5f434c4f3a20706f7374206f6e6c792061736b60581b60448201526064016105d3565b6040516383818a6f60e01b8152600f60048201528515156024820152604481018590526064810184905273__$52dce10bb0994e0b74d4a2856cc70476a1$__906383818a6f90608401602060405180830381865af41580156109f6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1a9190614e86565b6040805187151581526020810187905290810185905264ffffffffff821660608201529092507f7f6ce27b6803b5b961a441dac0f55de214751acfb64178849efb01fdb71c620b9060800160405180910390a15060016000559392505050565b610a826115ce565b610a8c6000611dcf565b565b600354600090610a9e5750600090565b600354600454600854610ab2929190611e21565b905090565b610abf6115ce565b60026000541415610ae25760405162461bcd60e51b81526004016105d390614e21565b6002600055620186a062ffffff82161115610b355760405162461bcd60e51b8152602060048201526013602482015272504d5f53464d50523a20746f6f206c6172676560681b60448201526064016105d3565b6019805465ffffff0000001916630100000062ffffff8416908102919091179091556040519081527f55647f4dd43ac173f04e53a506df46454012316d82fb04a9c1dbd8e0f21f8f769060200161066f565b600080610b95600384611e3b565b91509150915091565b610ba66115ce565b60026000541415610bc95760405162461bcd60e51b81526004016105d390614e21565b600260005562093a8063ffffffff82161115610c1c5760405162461bcd60e51b8152602060048201526012602482015271504d5f534652533a20746f6f206c6172676560701b60448201526064016105d3565b610e108163ffffffff161015610c695760405162461bcd60e51b8152602060048201526012602482015271141357d4d19494ce881d1bdbc81cdb585b1b60721b60448201526064016105d3565b6019805463ffffffff60501b1916600160501b63ffffffff8416908102919091179091556040519081527fa703b265f29064a106acd6473c258e009bff9ac0bfd63b6f5ca4b712a25c85169060200161066f565b610cef6040518060800160405280600081526020016000815260200160008152602001600064ffffffffff1681525090565b610cf7611d57565b60026000541415610d1a5760405162461bcd60e51b81526004016105d390614e21565b6002600090815580610d2d878786611628565b9150915081851115610d7a5760405162461bcd60e51b8152602060048201526016602482015275141357d4ce881d1bdbc81b185c99d948185b5bdd5b9d60521b60448201526064016105d3565b610d82614b43565b8715610dcd576040805160a08101825289151581528815156020820152908101879052600060608201526008546080820152610dc690600f90611771611e6f611eab565b9050610e0e565b6040805160a08101825289151581528815156020820152908101879052600060608201526008546080820152610e0b90600f90611771611e6f611eab565b90505b6040518060800160405280826000015181526020018260200151815260200182604001518152602001826060015164ffffffffff168152509350610e53600c8361215f565b8351604080518a1515815289151560208201528082018990526060810192909252517fdedf81f778c63a97f5a04bfeae9e0e04f18d283b04d930ea7b6af78b6eb50b769181900360800190a1610ea7612186565b5050600160005550949350505050565b600354600090610ec75750600090565b600354600454610ab291906122c5565b600080610ef060038001546003600401548787876122df565b915091505b935093915050565b60028054610f0a90614ea3565b80601f0160208091040260200160405190810160405280929190818152602001828054610f3690614ea3565b8015610f835780601f10610f5857610100808354040283529160200191610f83565b820191906000526020600020905b815481529060010190602001808311610f6657829003601f168201915b505050505081565b600080610f96611d57565b60026000541415610fb95760405162461bcd60e51b81526004016105d390614e21565b60026000556040805160208101909152838152610fd89060039061234d565b604080518381526020810183905290810186905291935091507f0bb89aa54ed6940a7e7167bd262b2400d63945045ceff1a52a05f2601ed215f19060600160405180910390a1611026612186565b60016000559092909150565b600080600061103f611d57565b600260005414156110625760405162461bcd60e51b81526004016105d390614e21565b60026000556005546110ba576110ba7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008787612464565b6110d96003604051806040016040528088815260200187815250612678565b604080518481526020810184905290810182905292955090935091507fd7f28048575eead8851d024ead087913957dfb4fd1a02b4d1573f5352a5a2be39060600160405180910390a161112a612186565b60016000819055509250925092565b6111416115ce565b600260005414156111645760405162461bcd60e51b81526004016105d390614e21565b600260005562093a8063ffffffff821611156111b85760405162461bcd60e51b8152602060048201526013602482015272504d5f53464d45533a20746f6f206c6172676560681b60448201526064016105d3565b6019805469ffffffff0000000000001916600160301b63ffffffff8416908102919091179091556040519081527f5b18da8898c1e492e6bc631eec59d143ebba7f31ca794b668f0bfa9b0d9892939060200161066f565b6040516399d5040960e01b8152600f6004820152821515602482015264ffffffffff821660448201526000908190819073__$52dce10bb0994e0b74d4a2856cc70476a1$__906399d5040990606401606060405180830381865af415801561127b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129f9190614ed8565b65ffffffffffff9092169450925090505b9250925092565b6112bf6115ce565b600260005414156112e25760405162461bcd60e51b81526004016105d390614e21565b60026000556207a1206112fb6040830160208401614b83565b62ffffff16111561134e5760405162461bcd60e51b815260206004820152601e60248201527f50455f53504c433a20746f6f206c61726765206c69717569646174696f6e000060448201526064016105d3565b61135e6040820160208301614b83565b62ffffff166113706020830183614b83565b62ffffff1611156113b65760405162461bcd60e51b815260206004820152601060248201526f141157d4d41310ce881a5b9d985b1a5960821b60448201526064016105d3565b620f42406113ca6080830160608401614b83565b62ffffff161061141c5760405162461bcd60e51b815260206004820152601a60248201527f50455f53504c433a20656d6120746f6f206c61726765206c697100000000000060448201526064016105d3565b61142c6080820160608301614b83565b62ffffff166114416060830160408401614b83565b62ffffff16111561148b5760405162461bcd60e51b8152602060048201526014602482015273141157d4d41310ce88195b58481a5b9d985b1a5960621b60448201526064016105d3565b80601a6114988282614f27565b507fbe7eee05a638b28e8473a6f87ae310d3123f8a2a7561ce96e140f76125f7461290506114c96020830183614b83565b6114d96040840160208501614b83565b6114e96060850160408601614b83565b6114f96080860160608701614b83565b61150960a0870160808801614cd9565b60405161066f959493929190614c7a565b6000611527848484611628565b50949350505050565b6115386115ce565b6001600160a01b03811661159d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105d3565b6115a681611dcf565b50565b6001600160a01b03163b151590565b42600290910155565b600160601b600590910155565b6001546001600160a01b03163314610a8c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105d3565b600061164e60405180606001604052806000815260200160008152602001600081525090565b60055461165e5760009150610ef5565b6000611668610eb7565b9050611677600c601a8361283d565b9150600061169283600001518460400151601a888b1561290c565b6003546004546019549293506116b1928a908a9062ffffff16866129ba565b935073__$52dce10bb0994e0b74d4a2856cc70476a1$__63b2041ed9886116d957600f6116dc565b60135b60085460405160e084901b6001600160e01b031916815260048101929092528a15156024830152891515604483015260648201859052608482015260a401602060405180830381865af4158015611737573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175b9190615013565b6117659085614e6e565b93505050935093915050565b6003546004546019546000926117929290918790879062ffffff16876129ba565b90505b9392505050565b6117ea6040518060e001604052806000815260200160008152602001600081526020016000815260200160008152602001600064ffffffffff168152602001600064ffffffffff1681525090565b602083015183518554911515901515149064ffffffffff166000805b64ffffffffff831615611bfc5761187960405180610120016040528060006001600160801b031681526020016000815260200160008152602001600064ffffffffff168152602001600064ffffffffff168152602001600081526020016000815260200160008152602001600081525090565b64ffffffffff8416600090815260018a016020526040902054600160801b90046001600160801b031680825260808901516118b99190600160601b612b1d565b60208083018290528951908a01516118d49263ffffffff8b16565b60408083019190915264ffffffffff80861660008181526001808e01602081815286842054600160281b8104871660608a01908152958552918152600160501b909104851660808801529251909316815260028d0190915291909120015461193c9084614e6e565b60a0820152606081015164ffffffffff1660009081526002808b016020526040909120015461196b9083614e6e565b60c0820152604081015160009086611999576119948360c001518b60800151600160601b612b1d565b61199f565b8260a001515b6119a99190614e6e565b9050808960400151116119e957606082015164ffffffffff166119dd576119d08a86612beb565b64ffffffffff1660a08801525b50606001519250611806565b608082015164ffffffffff908116600090815260028c016020526040808220600190810154938916835291200154611a21919061502c565b611a2b9085614e6e565b60e0830152608082015164ffffffffff90811660009081526002808d01602052604080832082015493891683529091200154611a67919061502c565b611a719084614e6e565b610100830152604082015160009087611aa157611a9c8461010001518c60800151600160601b612b1d565b611aa7565b8360e001515b611ab19190614e6e565b9050808a604001511015611bbe576040830151885260a0830151602089015260c083015160808b0151611ae99190600160601b612b1d565b60408901528615611b2957818a60400151611b04919061502c565b606089018190526020840151611b1f9190600160601b612b1d565b6080890152611b91565b818a60400151611b39919061502c565b608089018190526020840151611b559190600160601b90612b1d565b6060890181905264ffffffffff8716600090815260028d016020526040902054611b8b9190611b869060019061502c565b612d14565b60608901525b611b9b8b87612beb565b64ffffffffff90811660a08a01529590951660c088015250611795945050505050565b8260e0015194508261010001519350826080015164ffffffffff1660001415611bef5764ffffffffff861660a08901525b5050608001519250611806565b602085018290526080870151611c18908290600160601b612b1d565b604086015283611c2c578460400151611c32565b84602001515b8760400151611c41919061502c565b8552505050509392505050565b600080611c62620f42408560400151612d2a565b9050836020015115611cbd576060840151600090611c809083612d90565b855190915015611ca557611c9e8682611c998a82612da5565b612b1d565b9250611cb7565b611cb48782611c998982612da5565b92505b50611d0a565b835115611ce5576060840151611cde908790611cd98882612db1565b612dbd565b9150611cfd565b6060840151611cfa908690611cd98982612db1565b91505b611d078282612e34565b91505b8261152757600082116115275760405162461bcd60e51b8152602060048201526015602482015274504c5f53443a206f7574707574206973207a65726f60581b60448201526064016105d3565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314610a8c5760405162461bcd60e51b815260206004820152601d60248201527f504d5f4f453a2063616c6c6572206973206e6f742065786368616e676500000060448201526064016105d3565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000611792611e3085856122c5565b600160601b84612b1d565b600080611e518385600001548660020154612b1d565b611e648486600101548760020154612b1d565b915091509250929050565b604080516080810182528415158152831515602082015260195462ffffff16918101919091526060810182905260009061179290600390612e49565b611eb3614b43565b8351600090611ec25785611ec7565b856004015b90506000611ed682878761179c565b805190915015611f0b57855160208701518251611ef892919063ffffffff8816565b83518490611f07908390614e6e565b9052505b602086015186511515901515146000611f218990565b90508260a0015164ffffffffff1660001461200e5760088901805460019190600090611f5690849065ffffffffffff16615043565b82546101009290920a65ffffffffffff818102199093169183160217909155604080516020808201835260808d0151825260088e0154909316600090815260098e0190935291209051905550875115611fc85760a0830151611fc3908590612e8c612e9f612eb786612ecb565b611fe2565b60a0830151611fe2908590612ff0612fff61300c86612ecb565b81611ff1578260200151611ff7565b82604001515b85518690612006908390614e6e565b905250612052565b6020830151156120305760405162461bcd60e51b81526004016105d39061506d565b6040830151156120525760405162461bcd60e51b81526004016105d39061506d565b60c083015164ffffffffff161561210f57606083015160c084015164ffffffffff1660009081526002860160205260408120805490919061209490849061502c565b909155505060c083015188516120be91906120b157612fff6120b5565b612e9f5b86919084613018565b816120cd5782606001516120d3565b82608001515b855186906120e2908390614e6e565b90525060608084015160208701526080840151604087015260c084015164ffffffffff1690860152612153565b6060830151156121315760405162461bcd60e51b81526004016105d39061506d565b6080830151156121535760405162461bcd60e51b81526004016105d39061506d565b50505050949350505050565b602081015161216c575050565b805182556020810151600183015560400151600290910155565b6000612190610a8e565b6040805160c0810182526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f000000000000000000000000000000000000000000000000000000000000000016602082015290810182905260195462ffffff6301000000820416606083015263ffffffff600160301b820481166080840152600160501b9091041660a08201529091506000908190819061223f90600990613066565b92509250925082600014156122545750505050565b61225f6003846131ff565b6006546007546040805186815263ffffffff8616602082015290810184905260608101879052608081019290925260a08201527f318daee0b48d1f6a0542d8cdd35e2593d88c4fb01708f4781609494206d070519060c00160405180910390a150505050565b60006122d682600160601b85612b1d565b90505b92915050565b60008060006122ff6122f086613300565b6122f98a613300565b9061336e565b9050600061230f6122f086613300565b905061232a82600160601b6123238a613300565b919061337a565b61233c82600160601b6123238b613300565b9350935050505b9550959350505050565b81546001830154600284015483516000938493909290918490612371908584612b1d565b9050600061238488600001518585612b1d565b90506000821180156123965750600081115b6123da5760405162461bcd60e51b8152602060048201526015602482015274504c5f524c3a206f7574707574206973207a65726f60581b60448201526064016105d3565b6123e48583612db1565b89556123f08482612db1565b60018a01558751600090612405908590612db1565b90506103e88110156124505760405162461bcd60e51b8152602060048201526014602482015273504c5f524c3a206d696e206c697175696469747960601b60448201526064016105d3565b60028a015590955093505050509250929050565b600061246f8561341e565b9050600061247c8561341e565b9050600082116124ce5760405162461bcd60e51b815260206004820152601b60248201527f464c5f56494c503a20696e76616c69642062617365207072696365000000000060448201526064016105d3565b6000811161251e5760405162461bcd60e51b815260206004820152601c60248201527f464c5f56494c503a20696e76616c69642071756f74652070726963650000000060448201526064016105d3565b6000612529876134e4565b90506000612536876134e4565b9050604d60ff8316111561258c5760405162461bcd60e51b815260206004820152601e60248201527f464c5f56494c503a20696e76616c6964206261736520646563696d616c73000060448201526064016105d3565b604d60ff821611156125e05760405162461bcd60e51b815260206004820152601f60248201527f464c5f56494c503a20696e76616c69642071756f746520646563696d616c730060448201526064016105d3565b60006125f186600160601b89612b1d565b9050600061260284848888866135aa565b9050612615600160601b620186a0612d90565b61261e8261362a565b111561266c5760405162461bcd60e51b815260206004820152601b60248201527f464c5f56494c503a20746f6f206661722066726f6d20696e646578000000000060448201526064016105d3565b50505050505050505050565b600282015460009081908190818161274957602086015186516000916126a6916126a19161364e565b61365a565b90506126b4816103e8612db1565b8751909250158015906126cb575060008760200151115b80156126d75750600082115b6127235760405162461bcd60e51b815260206004820152601d60248201527f504c5f414c3a20696e697469616c206c6971756964697479207a65726f00000060448201526064016105d3565b8651808955602088015160018a0181905560028a01929092559550935091506112b09050565b865460018801548751602089015160009161276991611b86908686612b1d565b905060006127848a60200151611b868c600001518688612b1d565b905061279f612794838887612b1d565b611b86838987612b1d565b94506000821180156127b15750600081115b80156127bd5750600085115b6128015760405162461bcd60e51b8152602060048201526015602482015274504c5f414c3a206c6971756964697479207a65726f60581b60448201526064016105d3565b61280b8483612da5565b8b556128178382612da5565b60018c01556128268686612da5565b60028c015590975095509193505050509250925092565b61286160405180606001604052806000815260200160008152602001600081525090565b600184015442908082116128845750508354815260028401546040820152611795565b60006128908383612db1565b87549091506128a557604084018590526128fb565b855463ffffffff600160601b9091048116906000906128c89084908490612da516565b90506128f36128d8888584612b1d565b6128ed8b600201548563ffffffff1685612b1d565b90612da5565b604087015250505b505082825260208201529392505050565b6000806129398461292357855462ffffff16612932565b85546301000000900462ffffff165b8890612d90565b9050600061296d85612958578654600160301b900462ffffff16612932565b86548890600160481b900462ffffff16612d90565b905083156129955761298c6129828984612da5565b611b868984612da5565b925050506129b1565b61298c6129a28984612db1565b6129ac8984612db1565b6136ca565b95945050505050565b6000806129ca620f424085612d2a565b905060006129d8898961364e565b90508615612a625760006129f182600160601b87612b1d565b905060006129ff8b8061364e565b9050808211612a15576000945050505050612b13565b6000612a218383612db1565b90506000612a39612a328e88612d90565b8e90612da5565b9050612a57612a4882886136da565b612a5284896136da565b6136ef565b965050505050612ad1565b6000612a738286600160601b612b1d565b90506000612a818a8061364e565b9050808211612a97576000945050505050612b13565b6000612aa38383612db1565b90506000612abb612ab48d88612d90565b8d90612da5565b9050612aca612a4882886136da565b9650505050505b85612b1057612b0d898960405180608001604052808b151581526020016001151581526020018962ffffff168152602001878152506001611c4e565b92505b50505b9695505050505050565b600080806000198587098587029250828110838203039150508060001415612b5857838281612b4e57612b4e615092565b0492505050611795565b838110612b8257604051631dcf306360e21b815260048101829052602481018590526044016105d3565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b600064ffffffffff8216612c3b5760405162461bcd60e51b81526020600482015260176024820152765242544c5f503a2074617267657420697320656d70747960481b60448201526064016105d3565b64ffffffffff8281166000908152600185016020526040902054600160281b90041615612c965764ffffffffff8083166000908152600185016020526040902054612c8f918591600160281b900416613721565b90506122d9565b5064ffffffffff8082166000908152600184016020526040902054165b64ffffffffff811615801590612cec575064ffffffffff8181166000908152600185016020526040902054600160281b90048116908316145b156122d95764ffffffffff808216600090815260018501602052604090205491925016612cb3565b6000818310612d2357816122d6565b5090919050565b60008262ffffff168262ffffff161115612d865760405162461bcd60e51b815260206004820152601e60248201527f506572704d6174683a207375627472616374696f6e206f766572666c6f77000060448201526064016105d3565b6122d682846150a8565b60006122d6838362ffffff16620f4240612b1d565b60006122d68284614e6e565b60006122d6828461502c565b6000612dca848484612b1d565b905060008280612ddc57612ddc615092565b8486091115611795576000198110612e2a5760405162461bcd60e51b8152602060048201526011602482015270464d5f4d4452553a206f766572666c6f7760781b60448201526064016105d3565b806129b1816150cc565b60006122d683620f42408462ffffff16612dbd565b6000612e6083600001548460010154846000611c4e565b82516020840151855460018701546060870151949550612e809486613775565b60018501559092555090565b6000816129b160048201600187876137f7565b600081612eaf600482018561388d565b949350505050565b80612ec660048201828561399c565b505050565b64ffffffffff8516612f175760405162461bcd60e51b81526020600482015260156024820152745242544c5f524c3a206b657920697320656d70747960581b60448201526064016105d3565b612f2186866139dd565b612f665760405162461bcd60e51b81526020600482015260166024820152751490951317d4930e881ad95e481b9bdd08195e1a5cdd60521b60448201526064016105d3565b6040805160808082018352885464ffffffffff9081168352881660208301529181019190915260608101829052612fa1908790868686613a28565b50865464ffffffffff91821664ffffffffff19918216811789556000908152600189016020526040808220805490931690925597549091168752909520805460ff60781b191690555050505050565b6000816129b1818387876137f7565b600081612eaf818561388d565b80612ec681808561399c565b64ffffffffff8316156130605761303383828463ffffffff16565b1561303d57613060565b64ffffffffff928316600090815260018501602052604090205490921691613018565b50505050565b6000806000804290506000613088876002015483612db190919063ffffffff16565b9050806130a157600080600094509450945050506112b0565b60006130b0876000015161341e565b905060006130c1886020015161341e565b905060006130d289600001516134e4565b905060006130e38a602001516134e4565b8b54909150841480156130f95750828b60010154145b80613102575083155b8061310b575082155b806131195750604d60ff8316115b806131275750604d60ff8216115b156131425760008060009850985098505050505050506112b0565b613156858b6080015163ffffffff16612d14565b945061316185613c57565b9750613174828286868e604001516135aa565b9650600061319b6131968c60600151600160601b612d9090919063ffffffff16565b613300565b90506131b96131aa828a613cbc565b6131b3836150e7565b90613ccb565b97506131e26131c787613300565b8c60a0015163ffffffff168a61337a9092919063ffffffff16565b948c55505050600189015560028801929092555092509250925092565b80613208575050565b60006132138261362a565b9050600082131561327657600183015460006132348284600160601b612b1d565b90506132408282612db1565b856001018190555061326961325e82600160601b8860020154612b1d565b600487015490612da5565b6004860155506132c89050565b8254600061328d8284611c99600160601b82612da5565b90506132998282612db1565b855560028501546132c0906132b5908390600160601b90612b1d565b600387015490612da5565b600386015550505b6132f383600501546132e96132e4856122f9600160601b613300565b613cdb565b600160601b612b1d565b8360050181905550505050565b60006001600160ff1b0382111561336a5760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b60648201526084016105d3565b5090565b60006122d68284615104565b6000806000851261338b5784613394565b61339485613d2d565b905060008085126133a557846133ae565b6133ae85613d2d565b9050600080871280156133c15750600086135b806133d757506000871380156133d75750600086125b6133e25760006133e5565b60015b905060006133f4848488612b1d565b9050816134095761340481613300565b613412565b61341281613d8b565b98975050505050505050565b60006001600160a01b03821661343657506001919050565b60408051600481526024810182526020810180516001600160e01b0316634c6afee560e11b179052905160009081906001600160a01b0386169061347b908590615143565b600060405180830381855afa9150503d80600081146134b6576040519150601f19603f3d011682016040523d82523d6000602084013e6134bb565b606091505b5091509150816134d057506000949350505050565b808060200190518101906129b19190615013565b60006001600160a01b0382166134fc57506000919050565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b179052905160009081906001600160a01b03861690613541908590615143565b600060405180830381855afa9150503d806000811461357c576040519150601f19603f3d011682016040523d82523d6000602084013e613581565b606091505b509150915081613596575060ff949350505050565b808060200190518101906129b1919061515f565b60008160ff87161515806135bf575084600114155b156135dc576135d9816135d389600a615266565b87612b1d565b90505b60ff86161515806135ee575083600114155b15613606576136038185611c9989600a615266565b90505b61361f613616600160601b613300565b6122f983613300565b979650505050505050565b600080821215613645576136406132e483613d2d565b6122d9565b6122d982613cdb565b60006122d68284615275565b600060038211156136bb5750806000613674600283615294565b61367f906001614e6e565b90505b818110156136b55790508060028161369a8186615294565b6136a49190614e6e565b6136ae9190615294565b9050613682565b50919050565b81156136c5575060015b919050565b600081831015612d2357816122d6565b60006122d683620f42408462ffffff16612b1d565b60006122d6600261371b856137156126a161370b88600461364e565b6128ed8a8061364e565b90612db1565b90613d9f565b60005b64ffffffffff8281166000908152600185016020526040902054600160501b900416156136b55764ffffffffff9182166000908152600184016020526040902054600160501b900490911690613724565b60008086156137b75787156137a15761378e8685612da5565b915061379a8584612db1565b90506137ec565b6137ab8684612db1565b915061379a8585612da5565b87156137d3576137c78684612da5565b915061379a8585612db1565b6137dd8685612db1565b91506137e98584612da5565b90505b965096945050505050565b64ffffffffff828116600090815260018601602052604080822054928416825281205490916001600160801b03600160801b91829004811692919091041680821415613857578364ffffffffff168564ffffffffff161092505050612eaf565b8561387657806001600160801b0316826001600160801b03161061361f565b6001600160801b0390811691161195945050505050565b64ffffffffff808216600090815260028085016020818152604080852060018082015495820154818b01855283882054959094529054600160501b85048816808852838820830154600160281b909604909816808852928720909101549596949592949193919287926138ff91614e6e565b6139099190614e6e565b905060006139178989613dab565b64ffffffffff80851660009081526002808d016020526040808320820154938916835290912001546139499190614e6e565b6139539190614e6e565b9050858214801561396357508481145b9650866139905764ffffffffff881660009081526002808b01602052604090912060018101849055018190555b50505050505092915050565b60089091015464ffffffffff909116600090815260029092016020526040909120600301805465ffffffffffff191665ffffffffffff909216919091179055565b600064ffffffffff8216158015906122d65750825464ffffffffff838116911614806122d657505064ffffffffff908116600090815260019290920160205260409091205416151590565b8351600090819064ffffffffff16613a495750506040840151600090612343565b855164ffffffffff166000908152600188016020526040902054600160781b900460ff16613a78576001613a7b565b60005b86604001818151613a8c91906152b6565b60ff169052508551602087015164ffffffffff90811691161415613af557613ac0866000015187606001518563ffffffff16565b5050835164ffffffffff9081166000908152600187016020526040908190205490860151600160501b90910490911690612343565b613b108660200151876000015188606001518863ffffffff16565b15613bd45760408051608081018252875164ffffffffff908116600090815260018b01602090815284822054600160281b900483168452808b0151909216918301919091528883015160ff1692820192909252606080890151908201528190613b7d908a90898989613a28565b895164ffffffffff808216600090815260018e0160205260409081902054908d015160608e0151959750939550613bc9948e94889493600160501b909304909216918c91889190613df2565b935093505050612343565b613bea866000015187606001518563ffffffff16565b60408051608081018252875164ffffffffff908116600090815260018b0160209081529084902054600160501b900482168352808a0151909116908201528782015160ff169181019190915260608088015190820152613c4e908890878787613a28565b91509150612343565b600063ffffffff82111561336a5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b60648201526084016105d3565b6000818312612d2357816122d6565b600081831215612d2357816122d6565b60008082121561336a5760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f73697469766560448201526064016105d3565b6000600160ff1b8213613d825760405162461bcd60e51b815260206004820152601c60248201527f506572704d6174683a20696e76657273696f6e206f766572666c6f770000000060448201526064016105d3565b6122d9826150e7565b6000613d9682613300565b6122d9906150e7565b60006122d68284615294565b64ffffffffff8116600090815260018301602090815260408083205460028601909252822054600160801b9091046001600160801b031690612eaf9082600160601b612b1d565b6000808360ff168560ff161115613ef657613e558a6040518060c001604052808c64ffffffffff1681526020018b64ffffffffff1681526020018a64ffffffffff1681526020018860ff1681526020018760ff16815260200186815250886140e6565b5064ffffffffff8116600090815260018c016020526040902054909250859150600160781b900460ff168015613eba575064ffffffffff828116600090815260018c01602052604080822054600160501b900490921681522054600160781b900460ff165b15613ef15764ffffffffff821660009081526001808c016020526040909120805460ff60781b19169055613eee90826152d9565b90505b6140d9565b8360ff168560ff161015613fed57613f568a6040518060c001604052808c64ffffffffff1681526020018b64ffffffffff1681526020018a64ffffffffff1681526020018860ff1681526020018760ff16815260200186815250886143dc565b64ffffffffff8116600090815260018c016020526040902054909250849150600160781b900460ff168015613eba575064ffffffffff828116600090815260018c01602052604080822054600160281b900490921681522054600160781b900460ff1615613ef15764ffffffffff821660009081526001808c016020526040909120805460ff60781b19169055613eee90826152d9565b64ffffffffff8916600090815260018b016020526040812054600160781b900460ff1615801561403d575064ffffffffff8816600090815260018c016020526040902054600160781b900460ff16155b64ffffffffff8a8116600090815260018e016020526040902080546fff0000000000ffffffffff00000000001916600160781b8415150264ffffffffff60281b191617600160281b8e8416021764ffffffffff60501b1916600160501b928c169290920291909117905590506140b7898563ffffffff8a16565b5088816140c55760016140c8565b60005b6140d290886152d9565b9093509150505b9850989650505050505050565b815164ffffffffff1660009081526001840160205260408120548190600160781b900460ff161580156141265750836080015160ff16846060015160ff16145b156141d8576020808501805164ffffffffff9081166000908152600189019093526040808420805460ff60781b1916600160781b17905587518351831685528185208054918416600160281b0264ffffffffff60281b19909216919091179055808801518351831685529320805493909116600160501b0264ffffffffff60501b19909316929092179091555160a08501516141c6919063ffffffff8616565b50505060208201516060830151610ef5565b6040805160c081018252855164ffffffffff908116600090815260018901602081815285832054600160501b900484168552808a01518416818601528986015184168587015289519093168252909152918220546142819188916060820190600160781b900460ff1661424c57600161424f565b60005b896060015161425e91906152b6565b60ff168152602001886080015160ff1681526020018860a00151815250866140e6565b50855164ffffffffff9081166000908152600189016020526040808220805464ffffffffff60501b1916600160501b868616021790558851909216815220805464ffffffffff19169055855160a08701519192506142e29163ffffffff8716565b50845164ffffffffff166000908152600187016020526040902054600160781b900460ff16158015614333575064ffffffffff81166000908152600187016020526040902054600160781b900460ff165b801561436e575064ffffffffff818116600090815260018801602052604080822054600160501b900490921681522054600160781b900460ff165b156143c95764ffffffffff808216600090815260018801602052604080822054600160501b9004909216815220805460ff60781b19169055845160a08601516143ba918891879061479a565b60608501519092509050610ef5565b5050825160609093015192949293505050565b60408281015164ffffffffff1660009081526001850160205290812054600160781b900460ff1615801561441d5750826080015160ff16836060015160ff16145b15614552576020808401805164ffffffffff9081166000908152600188019093526040808420805460ff60781b1916600160781b17905586518351831685528185208054918416600160281b0264ffffffffff60281b19909216919091179055808701519251821684529092208054918316600160501b0264ffffffffff60501b19909216919091179055835116156144e757602083810151845164ffffffffff9081166000908152600188019093526040909220805464ffffffffff1916929091169190911790555b604083015164ffffffffff16156145305760208381015160408086015164ffffffffff9081166000908152600189019094529220805464ffffffffff1916929091169190911790555b61454683602001518460a001518463ffffffff16565b50506020820151611795565b6040805160c081018252845164ffffffffff908116825260208087015182168184015286840180518316600090815260018a0180845286822054600160281b90048516868801526060808b015160ff90811691880191909152925190941681529290915292812054909261460492889290916080830191600160781b9004166145dc5760016145df565b60005b88608001516145ee91906152b6565b60ff1681526020018760a00151815250856143dc565b6040858101805164ffffffffff908116600090815260018a01602052838120805464ffffffffff60281b1916600160281b878516908102919091179091559251909116815291909120805464ffffffffff19169055909150156146955760408481015164ffffffffff83811660009081526001890160205292909220805464ffffffffff1916929091169190911790555b6146ab84604001518560a001518563ffffffff16565b5060408481015164ffffffffff166000908152600187016020522054600160781b900460ff161580156146fd575064ffffffffff81166000908152600186016020526040902054600160781b900460ff165b8015614738575064ffffffffff818116600090815260018701602052604080822054600160281b900490921681522054600160781b900460ff165b1561478e5764ffffffffff808216600090815260018701602052604080822054600160281b90049092168152819020805460ff60781b1916905584015160a0850151614787918791869061497b565b9050611795565b50505060400151919050565b64ffffffffff80841660008181526001870160205260408082208054600160501b80820487168086529385205495909452600160281b909404851692830264ffffffffff60501b19851617905592919091169080156148205764ffffffffff81811660009081526001890160205260409020805464ffffffffff19169188169190911790555b64ffffffffff83811660009081526001890160205260409020805464ffffffffff1916918416918217905561486957865464ffffffffff191664ffffffffff8416178755614909565b64ffffffffff8281166000908152600189016020526040902054600160281b9004811690871614156148d15764ffffffffff808316600090815260018901602052604090208054918516600160281b0264ffffffffff60281b19909216919091179055614909565b64ffffffffff808316600090815260018901602052604090208054918516600160501b0264ffffffffff60501b199092169190911790555b64ffffffffff838116600081815260018a016020526040808220805464ffffffffff60281b1916600160281b958c1695860217905592815291909120805464ffffffffff19169091179055614962868563ffffffff8816565b5061497183858763ffffffff16565b5050505050505050565b64ffffffffff80841660008181526001870160205260408082208054600160281b80820487168086529385205495909452600160501b909404851692830264ffffffffff60281b1985161790559291909116908015614a015764ffffffffff81811660009081526001890160205260409020805464ffffffffff19169188169190911790555b64ffffffffff83811660009081526001890160205260409020805464ffffffffff19169184169182179055614a4a57865464ffffffffff191664ffffffffff8416178755614aea565b64ffffffffff8281166000908152600189016020526040902054600160501b900481169087161415614ab25764ffffffffff808316600090815260018901602052604090208054918516600160501b0264ffffffffff60501b19909216919091179055614aea565b64ffffffffff808316600090815260018901602052604090208054918516600160281b0264ffffffffff60281b199092169190911790555b64ffffffffff838116600081815260018a016020526040808220805464ffffffffff60501b1916600160501b958c1695860217905592815291909120805464ffffffffff19169091179055614962868563ffffffff8816565b6040518060800160405280600081526020016000815260200160008152602001600064ffffffffff1681525090565b62ffffff811681146115a657600080fd5b600060208284031215614b9557600080fd5b813561179581614b72565b803580151581146136c557600080fd5b60008060008060808587031215614bc657600080fd5b614bcf85614ba0565b9350614bdd60208601614ba0565b925060408501359150614bf260608601614ba0565b905092959194509250565b64ffffffffff811681146115a657600080fd5b60008060408385031215614c2357600080fd5b614c2c83614ba0565b91506020830135614c3c81614bfd565b809150509250929050565b600080600060608486031215614c5c57600080fd5b614c6584614ba0565b95602085013595506040909401359392505050565b62ffffff958616815293851660208501529184166040840152909216606082015263ffffffff909116608082015260a00190565b600060208284031215614cc057600080fd5b5035919050565b63ffffffff811681146115a657600080fd5b600060208284031215614ceb57600080fd5b813561179581614cc7565b600080600060608486031215614d0b57600080fd5b505081359360208301359350604090920135919050565b60005b83811015614d3d578181015183820152602001614d25565b838111156130605750506000910152565b6020815260008251806020840152614d6d816040850160208701614d22565b601f01601f19169190910160400192915050565b60008060408385031215614d9457600080fd5b50508035926020909101359150565b600060a082840312156136b557600080fd5b600080600060608486031215614dca57600080fd5b614dd384614ba0565b9250614de160208501614ba0565b9150614def60408501614ba0565b90509250925092565b600060208284031215614e0a57600080fd5b81356001600160a01b038116811461179557600080fd5b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115614e8157614e81614e58565b500190565b600060208284031215614e9857600080fd5b815161179581614bfd565b600181811c90821680614eb757607f821691505b602082108114156136b557634e487b7160e01b600052602260045260246000fd5b600080600060608486031215614eed57600080fd5b835165ffffffffffff81168114614f0357600080fd5b602085015160409095015190969495509392505050565b600081356122d981614cc7565b8135614f3281614b72565b62ffffff8116905081548162ffffff1982161783556020840135614f5581614b72565b65ffffff0000008160181b169050808365ffffffffffff198416171784556040850135614f8181614b72565b68ffffff0000000000008160301b1690508368ffffffffffffffffff1984161793508084831717855560608601359250614fba83614b72565b62ffffff60481b1993909316179190911760489190911b62ffffff60481b1617815561500f614feb60808401614f1a565b82805463ffffffff60601b191660609290921b63ffffffff60601b16919091179055565b5050565b60006020828403121561502557600080fd5b5051919050565b60008282101561503e5761503e614e58565b500390565b600065ffffffffffff80831681851680830382111561506457615064614e58565b01949350505050565b6020808252600b908201526a3732bb32b91037b1b1bab960a91b604082015260600190565b634e487b7160e01b600052601260045260246000fd5b600062ffffff838116908316818110156150c4576150c4614e58565b039392505050565b60006000198214156150e0576150e0614e58565b5060010190565b6000600160ff1b8214156150fd576150fd614e58565b5060000390565b60008083128015600160ff1b85018412161561512257615122614e58565b6001600160ff1b038401831381161561513d5761513d614e58565b50500390565b60008251615155818460208701614d22565b9190910192915050565b60006020828403121561517157600080fd5b815160ff8116811461179557600080fd5b600181815b808511156151bd5781600019048211156151a3576151a3614e58565b808516156151b057918102915b93841c9390800290615187565b509250929050565b6000826151d4575060016122d9565b816151e1575060006122d9565b81600181146151f757600281146152015761521d565b60019150506122d9565b60ff84111561521257615212614e58565b50506001821b6122d9565b5060208310610133831016604e8410600b8410161715615240575081810a6122d9565b61524a8383615182565b806000190482111561525e5761525e614e58565b029392505050565b60006122d660ff8416836151c5565b600081600019048311821515161561528f5761528f614e58565b500290565b6000826152b157634e487b7160e01b600052601260045260246000fd5b500490565b600060ff821660ff8416808210156152d0576152d0614e58565b90039392505050565b600060ff821660ff84168060ff038211156152f6576152f6614e58565b01939250505056fea2646970667358221220cd07535cb951730646c9e1932174200f9d9f54c97050fb369dc063886b25397664736f6c634300080c0033",
  "libraries": {
    "OrderBookLibrary": "0xf2f4343C128c133f539b2Ac5D80Ed851C3285131"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "PRBMath__MulDivOverflow(uint256,uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 925,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 550,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 7627,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 7637,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "poolInfo",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(PoolInfo)12633_storage"
      },
      {
        "astId": 7640,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "fundingInfo",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(FundingInfo)12620_storage"
      },
      {
        "astId": 7643,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "priceLimitInfo",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(PriceLimitInfo)12640_storage"
      },
      {
        "astId": 7646,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "orderBookInfo",
        "offset": 0,
        "slot": "15",
        "type": "t_struct(OrderBookInfo)12688_storage"
      },
      {
        "astId": 7649,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "poolFeeRatio",
        "offset": 0,
        "slot": "25",
        "type": "t_uint24"
      },
      {
        "astId": 7652,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "fundingMaxPremiumRatio",
        "offset": 3,
        "slot": "25",
        "type": "t_uint24"
      },
      {
        "astId": 7655,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "fundingMaxElapsedSec",
        "offset": 6,
        "slot": "25",
        "type": "t_uint32"
      },
      {
        "astId": 7658,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "fundingRolloverSec",
        "offset": 10,
        "slot": "25",
        "type": "t_uint32"
      },
      {
        "astId": 7669,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "priceLimitConfig",
        "offset": 0,
        "slot": "26",
        "type": "t_struct(PriceLimitConfig)12651_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint40,t_struct(Node)19263_storage)": {
        "encoding": "mapping",
        "key": "t_uint40",
        "label": "mapping(uint40 => struct BokkyPooBahsRedBlackTreeLibrary.Node)",
        "numberOfBytes": "32",
        "value": "t_struct(Node)19263_storage"
      },
      "t_mapping(t_uint40,t_struct(OrderInfo)12660_storage)": {
        "encoding": "mapping",
        "key": "t_uint40",
        "label": "mapping(uint40 => struct MarketStructs.OrderInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(OrderInfo)12660_storage"
      },
      "t_mapping(t_uint48,t_struct(ExecutionInfo)12674_storage)": {
        "encoding": "mapping",
        "key": "t_uint48",
        "label": "mapping(uint48 => struct MarketStructs.ExecutionInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(ExecutionInfo)12674_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ExecutionInfo)12674_storage": {
        "encoding": "inplace",
        "label": "struct MarketStructs.ExecutionInfo",
        "members": [
          {
            "astId": 12673,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "baseBalancePerShareX96",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(FundingInfo)12620_storage": {
        "encoding": "inplace",
        "label": "struct MarketStructs.FundingInfo",
        "members": [
          {
            "astId": 12615,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "prevIndexPriceBase",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12617,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "prevIndexPriceQuote",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12619,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "prevIndexPriceTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Node)19263_storage": {
        "encoding": "inplace",
        "label": "struct BokkyPooBahsRedBlackTreeLibrary.Node",
        "members": [
          {
            "astId": 19254,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "parent",
            "offset": 0,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 19256,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "left",
            "offset": 5,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 19258,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "right",
            "offset": 10,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 19260,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "red",
            "offset": 15,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 19262,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "userData",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(OrderBookInfo)12688_storage": {
        "encoding": "inplace",
        "label": "struct MarketStructs.OrderBookInfo",
        "members": [
          {
            "astId": 12677,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "ask",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(OrderBookSideInfo)12671_storage"
          },
          {
            "astId": 12680,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "bid",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(OrderBookSideInfo)12671_storage"
          },
          {
            "astId": 12682,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "seqExecutionId",
            "offset": 0,
            "slot": "8",
            "type": "t_uint48"
          },
          {
            "astId": 12687,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "executionInfos",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint48,t_struct(ExecutionInfo)12674_storage)"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(OrderBookSideInfo)12671_storage": {
        "encoding": "inplace",
        "label": "struct MarketStructs.OrderBookSideInfo",
        "members": [
          {
            "astId": 12663,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "tree",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Tree)19271_storage"
          },
          {
            "astId": 12668,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "orderInfos",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint40,t_struct(OrderInfo)12660_storage)"
          },
          {
            "astId": 12670,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "seqKey",
            "offset": 0,
            "slot": "3",
            "type": "t_uint40"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(OrderInfo)12660_storage": {
        "encoding": "inplace",
        "label": "struct MarketStructs.OrderInfo",
        "members": [
          {
            "astId": 12653,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "base",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12655,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "baseSum",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12657,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "quoteSum",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 12659,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "executionId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint48"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(PoolInfo)12633_storage": {
        "encoding": "inplace",
        "label": "struct MarketStructs.PoolInfo",
        "members": [
          {
            "astId": 12622,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "base",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12624,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "quote",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12626,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "totalLiquidity",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 12628,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "cumBasePerLiquidityX96",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 12630,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "cumQuotePerLiquidityX96",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 12632,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "baseBalancePerShareX96",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(PriceLimitConfig)12651_storage": {
        "encoding": "inplace",
        "label": "struct MarketStructs.PriceLimitConfig",
        "members": [
          {
            "astId": 12642,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "normalOrderRatio",
            "offset": 0,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 12644,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "liquidationRatio",
            "offset": 3,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 12646,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "emaNormalOrderRatio",
            "offset": 6,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 12648,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "emaLiquidationRatio",
            "offset": 9,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 12650,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "emaSec",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PriceLimitInfo)12640_storage": {
        "encoding": "inplace",
        "label": "struct MarketStructs.PriceLimitInfo",
        "members": [
          {
            "astId": 12635,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "referencePrice",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12637,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "referenceTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12639,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "emaPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Tree)19271_storage": {
        "encoding": "inplace",
        "label": "struct BokkyPooBahsRedBlackTreeLibrary.Tree",
        "members": [
          {
            "astId": 19265,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "root",
            "offset": 0,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 19270,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "nodes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint40,t_struct(Node)19263_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      }
    }
  }
}