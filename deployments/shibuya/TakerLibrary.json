{
  "address": "0xDf4D877c5e1067BA130bf97bF7a194a9B9a92940",
  "abi": [],
  "transactionHash": "0xb1fd49af1840fb48aaea7c6a69d0a718e6f3c4bfc2fb1a6c6d0c46072f7e1002",
  "receipt": {
    "to": null,
    "from": "0x4B78eCe4AA1be3495713199380635537C5fB2326",
    "contractAddress": "0xDf4D877c5e1067BA130bf97bF7a194a9B9a92940",
    "transactionIndex": 2,
    "gasUsed": "2049253",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x6f4c927e94d9e220fac7361e065f2bfc544321118b29ad7b0463b49d764131b7",
    "transactionHash": "0xb1fd49af1840fb48aaea7c6a69d0a718e6f3c4bfc2fb1a6c6d0c46072f7e1002",
    "logs": [],
    "blockNumber": 1500829,
    "cumulativeGasUsed": "2525425",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "977f5517db98087ef69dbaacf732ad99",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/TakerLibrary.sol\":\"TakerLibrary\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x0dd1e9b19801e3e7d900fbf4182d81e1afd23ad7be39504e33df6bbcba91d724\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMathUpgradeable {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xe391db37b722a67addfa9fce3101edf44ba68e2e12ae6fd74d68677b04ffd5a8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xd17ac7e1d8f83d20d80e652adfed83da122f3a3c7b69fefa2985d85aebf0a3e9\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/libraries/Babylonian.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.4.0;\\n\\n// computes square roots using the babylonian method\\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\\nlibrary Babylonian {\\n    // credit for this implementation goes to\\n    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\\n        // however that code costs significantly more gas\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) {\\n            xx >>= 128;\\n            r <<= 64;\\n        }\\n        if (xx >= 0x10000000000000000) {\\n            xx >>= 64;\\n            r <<= 32;\\n        }\\n        if (xx >= 0x100000000) {\\n            xx >>= 32;\\n            r <<= 16;\\n        }\\n        if (xx >= 0x10000) {\\n            xx >>= 16;\\n            r <<= 8;\\n        }\\n        if (xx >= 0x100) {\\n            xx >>= 8;\\n            r <<= 4;\\n        }\\n        if (xx >= 0x10) {\\n            xx >>= 4;\\n            r <<= 2;\\n        }\\n        if (xx >= 0x8) {\\n            r <<= 1;\\n        }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return (r < r1 ? r : r1);\\n    }\\n}\\n\",\"keccak256\":\"0xeb1c2a281a00f4660775f75ccfa1e51fbe1d75f86aeb9d0d297151ecdb900177\",\"license\":\"GPL-3.0-or-later\"},\"@uniswap/lib/contracts/libraries/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.5.0;\\n\\nlibrary BitMath {\\n    // returns the 0 indexed position of the most significant bit of the input x\\n    // s.t. x >= 2**msb and x < 2**(msb+1)\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0, 'BitMath::mostSignificantBit: zero');\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n\\n    // returns the 0 indexed position of the least significant bit of the input x\\n    // s.t. (x & 2**lsb) != 0 and (x & (2**(lsb) - 1)) == 0)\\n    // i.e. the bit at the index is set and the mask of all lower bits is 0\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0, 'BitMath::leastSignificantBit: zero');\\n\\n        r = 255;\\n        if (x & uint128(-1) > 0) {\\n            r -= 128;\\n        } else {\\n            x >>= 128;\\n        }\\n        if (x & uint64(-1) > 0) {\\n            r -= 64;\\n        } else {\\n            x >>= 64;\\n        }\\n        if (x & uint32(-1) > 0) {\\n            r -= 32;\\n        } else {\\n            x >>= 32;\\n        }\\n        if (x & uint16(-1) > 0) {\\n            r -= 16;\\n        } else {\\n            x >>= 16;\\n        }\\n        if (x & uint8(-1) > 0) {\\n            r -= 8;\\n        } else {\\n            x >>= 8;\\n        }\\n        if (x & 0xf > 0) {\\n            r -= 4;\\n        } else {\\n            x >>= 4;\\n        }\\n        if (x & 0x3 > 0) {\\n            r -= 2;\\n        } else {\\n            x >>= 2;\\n        }\\n        if (x & 0x1 > 0) r -= 1;\\n    }\\n}\\n\",\"keccak256\":\"0x19f84d5268286794b44939ec0d85b3c6f59e133f826cdbd9e40112fc94919bb7\",\"license\":\"GPL-3.0-or-later\"},\"@uniswap/lib/contracts/libraries/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.4.0;\\n\\nimport './FullMath.sol';\\nimport './Babylonian.sol';\\nimport './BitMath.sol';\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // range: [0, 2**144 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq144x112 {\\n        uint256 _x;\\n    }\\n\\n    uint8 public constant RESOLUTION = 112;\\n    uint256 public constant Q112 = 0x10000000000000000000000000000; // 2**112\\n    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000; // 2**224\\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\\n        return uq112x112(uint224(x) << RESOLUTION);\\n    }\\n\\n    // encodes a uint144 as a UQ144x112\\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\\n        return uq144x112(uint256(x) << RESOLUTION);\\n    }\\n\\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\n        return uint112(self._x >> RESOLUTION);\\n    }\\n\\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\\n        return uint144(self._x >> RESOLUTION);\\n    }\\n\\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\\n    // reverts on overflow\\n    function mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {\\n        uint256 z = 0;\\n        require(y == 0 || (z = self._x * y) / y == self._x, 'FixedPoint::mul: overflow');\\n        return uq144x112(z);\\n    }\\n\\n    // multiply a UQ112x112 by an int and decode, returning an int\\n    // reverts on overflow\\n    function muli(uq112x112 memory self, int256 y) internal pure returns (int256) {\\n        uint256 z = FullMath.mulDiv(self._x, uint256(y < 0 ? -y : y), Q112);\\n        require(z < 2**255, 'FixedPoint::muli: overflow');\\n        return y < 0 ? -int256(z) : int256(z);\\n    }\\n\\n    // multiply a UQ112x112 by a UQ112x112, returning a UQ112x112\\n    // lossy\\n    function muluq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\\n        if (self._x == 0 || other._x == 0) {\\n            return uq112x112(0);\\n        }\\n        uint112 upper_self = uint112(self._x >> RESOLUTION); // * 2^0\\n        uint112 lower_self = uint112(self._x & LOWER_MASK); // * 2^-112\\n        uint112 upper_other = uint112(other._x >> RESOLUTION); // * 2^0\\n        uint112 lower_other = uint112(other._x & LOWER_MASK); // * 2^-112\\n\\n        // partial products\\n        uint224 upper = uint224(upper_self) * upper_other; // * 2^0\\n        uint224 lower = uint224(lower_self) * lower_other; // * 2^-224\\n        uint224 uppers_lowero = uint224(upper_self) * lower_other; // * 2^-112\\n        uint224 uppero_lowers = uint224(upper_other) * lower_self; // * 2^-112\\n\\n        // so the bit shift does not overflow\\n        require(upper <= uint112(-1), 'FixedPoint::muluq: upper overflow');\\n\\n        // this cannot exceed 256 bits, all values are 224 bits\\n        uint256 sum = uint256(upper << RESOLUTION) + uppers_lowero + uppero_lowers + (lower >> RESOLUTION);\\n\\n        // so the cast does not overflow\\n        require(sum <= uint224(-1), 'FixedPoint::muluq: sum overflow');\\n\\n        return uq112x112(uint224(sum));\\n    }\\n\\n    // divide a UQ112x112 by a UQ112x112, returning a UQ112x112\\n    function divuq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\\n        require(other._x > 0, 'FixedPoint::divuq: division by zero');\\n        if (self._x == other._x) {\\n            return uq112x112(uint224(Q112));\\n        }\\n        if (self._x <= uint144(-1)) {\\n            uint256 value = (uint256(self._x) << RESOLUTION) / other._x;\\n            require(value <= uint224(-1), 'FixedPoint::divuq: overflow');\\n            return uq112x112(uint224(value));\\n        }\\n\\n        uint256 result = FullMath.mulDiv(Q112, self._x, other._x);\\n        require(result <= uint224(-1), 'FixedPoint::divuq: overflow');\\n        return uq112x112(uint224(result));\\n    }\\n\\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\\n    // can be lossy\\n    function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, 'FixedPoint::fraction: division by zero');\\n        if (numerator == 0) return FixedPoint.uq112x112(0);\\n\\n        if (numerator <= uint144(-1)) {\\n            uint256 result = (numerator << RESOLUTION) / denominator;\\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\\n            return uq112x112(uint224(result));\\n        } else {\\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\\n            return uq112x112(uint224(result));\\n        }\\n    }\\n\\n    // take the reciprocal of a UQ112x112\\n    // reverts on overflow\\n    // lossy\\n    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        require(self._x != 0, 'FixedPoint::reciprocal: reciprocal of zero');\\n        require(self._x != 1, 'FixedPoint::reciprocal: overflow');\\n        return uq112x112(uint224(Q224 / self._x));\\n    }\\n\\n    // square root of a UQ112x112\\n    // lossy between 0/1 and 40 bits\\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        if (self._x <= uint144(-1)) {\\n            return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << 112)));\\n        }\\n\\n        uint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\\n        safeShiftBits -= safeShiftBits % 2;\\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << safeShiftBits) << ((112 - safeShiftBits) / 2)));\\n    }\\n}\\n\",\"keccak256\":\"0xc3a39b8a11715cea45ad9f67f50e4e4c33778c1124acd59e90daf064c9a93974\",\"license\":\"GPL-3.0-or-later\"},\"@uniswap/lib/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-4.0\\npragma solidity >=0.4.0;\\n\\n// taken from https://medium.com/coinmonks/math-in-solidity-part-3-percents-and-proportions-4db014e080b1\\n// license is CC-BY-4.0\\nlibrary FullMath {\\n    function fullMul(uint256 x, uint256 y) internal pure returns (uint256 l, uint256 h) {\\n        uint256 mm = mulmod(x, y, uint256(-1));\\n        l = x * y;\\n        h = mm - l;\\n        if (mm < l) h -= 1;\\n    }\\n\\n    function fullDiv(\\n        uint256 l,\\n        uint256 h,\\n        uint256 d\\n    ) private pure returns (uint256) {\\n        uint256 pow2 = d & -d;\\n        d /= pow2;\\n        l /= pow2;\\n        l += h * ((-pow2) / pow2 + 1);\\n        uint256 r = 1;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        return l * r;\\n    }\\n\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 d\\n    ) internal pure returns (uint256) {\\n        (uint256 l, uint256 h) = fullMul(x, y);\\n\\n        uint256 mm = mulmod(x, y, d);\\n        if (mm > l) h -= 1;\\n        l -= mm;\\n\\n        if (h == 0) return l / d;\\n\\n        require(h < d, 'FullMath: FULLDIV_OVERFLOW');\\n        return fullDiv(l, h, d);\\n    }\\n}\\n\",\"keccak256\":\"0xc4ffcf28169f73fc9fdd1f82345d6d4fcccf3fd5aea83c133437c25e4e0950a9\",\"license\":\"CC-BY-4.0\"},\"@uniswap/lib/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\",\"keccak256\":\"0xaff99b54915f57e2a4e71b8d15afd4ee425410e5a6f45c07517ae1beb806f8bd\",\"license\":\"GPL-3.0-or-later\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe511530871deaef86692cea9adb6076d26d7b47fd4815ce51af52af981026057\",\"license\":\"MIT\"},\"contracts/amm/uniswap_v2/interfaces/IUniswapV2ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\n\\ninterface IUniswapV2ERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf7f66fa0c7e7a72b876f5c5b84fbd8f76319e3988f90b0e5028f5c2fffc4f1cb\",\"license\":\"GPL-3.0-or-later\"},\"contracts/amm/uniswap_v2/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xa748246c5ad4d8ddf600dc01c73dcbfd632c047505d645270eca8ebbc072ec65\",\"license\":\"GPL-3.0-or-later\"},\"contracts/amm/uniswap_v2/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\n\\nimport \\\"./IUniswapV2ERC20.sol\\\";\\n\\ninterface IUniswapV2Pair is IUniswapV2ERC20 {\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x78967564b44fd7f48e0ac5db93da0789b5184910116d2a73007adcf2e0c6e434\",\"license\":\"GPL-3.0-or-later\"},\"contracts/amm/uniswap_v2/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe77f3770b9e458f6fd64a82af61d05614d85940acc24cfe448295a74742eed21\",\"license\":\"GPL-3.0-or-later\"},\"contracts/amm/uniswap_v2_periphery/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x34fc5b4d5480d71d5638185c987b85cabb4d5616e45c17dd37d9b12f5ce838e3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/amm/uniswap_v2_periphery/libraries/UniswapV2Library.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary UniswapV2Library {\\n    using SafeMath for uint256;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex\\\"ff\\\",\\n                        factory,\\n                        keccak256(abi.encodePacked(token0, token1)),\\n                        hex\\\"2e0018e0e4c091ec924c34a4bd44e84e31e4382cb803fe09673ed92d9bb530ea\\\" // init code hash\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n        require(reserveA > 0 && reserveB > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 amountInWithFee = amountIn.mul(997);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i], path[i + 1]);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i - 1], path[i]);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x79b4cba8bd48e9310914a95e64b7a861e50695eb855e43184c46ce0b0f54a030\",\"license\":\"GPL-3.0-or-later\"},\"contracts/amm/uniswap_v2_periphery/libraries/UniswapV2LiquidityMathLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/Babylonian.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/FullMath.sol\\\";\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./UniswapV2Library.sol\\\";\\n\\n// library containing some math for dealing with the liquidity shares of a pair, e.g. computing their exact value\\n// in terms of the underlying tokens\\nlibrary UniswapV2LiquidityMathLibrary {\\n    using SafeMath for uint256;\\n\\n    // computes the direction and magnitude of the profit-maximizing trade\\n    function computeProfitMaximizingTrade(\\n        uint256 truePriceTokenA,\\n        uint256 truePriceTokenB,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (bool aToB, uint256 amountIn) {\\n        aToB = FullMath.mulDiv(reserveA, truePriceTokenB, reserveB) < truePriceTokenA;\\n\\n        uint256 invariant = reserveA.mul(reserveB);\\n\\n        uint256 leftSide =\\n            Babylonian.sqrt(\\n                FullMath.mulDiv(\\n                    invariant.mul(1000),\\n                    aToB ? truePriceTokenA : truePriceTokenB,\\n                    (aToB ? truePriceTokenB : truePriceTokenA).mul(997)\\n                )\\n            );\\n        uint256 rightSide = (aToB ? reserveA.mul(1000) : reserveB.mul(1000)) / 997;\\n\\n        if (leftSide < rightSide) return (false, 0);\\n\\n        // compute the amount that must be sent to move the price to the profit-maximizing price\\n        amountIn = leftSide.sub(rightSide);\\n    }\\n\\n    // gets the reserves after an arbitrage moves the price\\n    // to the profit-maximizing ratio given an externally observed true price\\n    function getReservesAfterArbitrage(\\n        address factory,\\n        address tokenA,\\n        address tokenB,\\n        uint256 truePriceTokenA,\\n        uint256 truePriceTokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        // first get reserves before the swap\\n        (reserveA, reserveB) = UniswapV2Library.getReserves(factory, tokenA, tokenB);\\n\\n        require(reserveA > 0 && reserveB > 0, \\\"UniswapV2ArbitrageLibrary: ZERO_PAIR_RESERVES\\\");\\n\\n        // then compute how much to swap to arb to the true price\\n        (bool aToB, uint256 amountIn) =\\n            computeProfitMaximizingTrade(truePriceTokenA, truePriceTokenB, reserveA, reserveB);\\n\\n        if (amountIn == 0) {\\n            return (reserveA, reserveB);\\n        }\\n\\n        // now affect the trade to the reserves\\n        if (aToB) {\\n            uint256 amountOut = UniswapV2Library.getAmountOut(amountIn, reserveA, reserveB);\\n            reserveA += amountIn;\\n            reserveB -= amountOut;\\n        } else {\\n            uint256 amountOut = UniswapV2Library.getAmountOut(amountIn, reserveB, reserveA);\\n            reserveB += amountIn;\\n            reserveA -= amountOut;\\n        }\\n    }\\n\\n    // computes liquidity value given all the parameters of the pair\\n    function computeLiquidityValue(\\n        uint256 reservesA,\\n        uint256 reservesB,\\n        uint256 totalSupply,\\n        uint256 liquidityAmount,\\n        bool feeOn,\\n        uint256 kLast\\n    ) internal pure returns (uint256 tokenAAmount, uint256 tokenBAmount) {\\n        if (feeOn && kLast > 0) {\\n            uint256 rootK = Babylonian.sqrt(reservesA.mul(reservesB));\\n            uint256 rootKLast = Babylonian.sqrt(kLast);\\n            if (rootK > rootKLast) {\\n                uint256 numerator1 = totalSupply;\\n                uint256 numerator2 = rootK.sub(rootKLast);\\n                uint256 denominator = rootK.mul(5).add(rootKLast);\\n                uint256 feeLiquidity = FullMath.mulDiv(numerator1, numerator2, denominator);\\n                totalSupply = totalSupply.add(feeLiquidity);\\n            }\\n        }\\n        return (reservesA.mul(liquidityAmount) / totalSupply, reservesB.mul(liquidityAmount) / totalSupply);\\n    }\\n\\n    // get all current parameters from the pair and compute value of a liquidity amount\\n    // **note this is subject to manipulation, e.g. sandwich attacks**. prefer passing a manipulation resistant price to\\n    // #getLiquidityValueAfterArbitrageToPrice\\n    function getLiquidityValue(\\n        address factory,\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidityAmount\\n    ) internal view returns (uint256 tokenAAmount, uint256 tokenBAmount) {\\n        (uint256 reservesA, uint256 reservesB) = UniswapV2Library.getReserves(factory, tokenA, tokenB);\\n        IUniswapV2Pair pair = IUniswapV2Pair(UniswapV2Library.pairFor(factory, tokenA, tokenB));\\n        bool feeOn = IUniswapV2Factory(factory).feeTo() != address(0);\\n        uint256 kLast = feeOn ? pair.kLast() : 0;\\n        uint256 totalSupply = pair.totalSupply();\\n        return computeLiquidityValue(reservesA, reservesB, totalSupply, liquidityAmount, feeOn, kLast);\\n    }\\n\\n    // given two tokens, tokenA and tokenB, and their \\\"true price\\\",\\n    // i.e. the observed ratio of value of token A to token B,\\n    // and a liquidity amount, returns the value of the liquidity in terms of tokenA and tokenB\\n    function getLiquidityValueAfterArbitrageToPrice(\\n        address factory,\\n        address tokenA,\\n        address tokenB,\\n        uint256 truePriceTokenA,\\n        uint256 truePriceTokenB,\\n        uint256 liquidityAmount\\n    ) internal view returns (uint256 tokenAAmount, uint256 tokenBAmount) {\\n        bool feeOn = IUniswapV2Factory(factory).feeTo() != address(0);\\n        IUniswapV2Pair pair = IUniswapV2Pair(UniswapV2Library.pairFor(factory, tokenA, tokenB));\\n        uint256 kLast = feeOn ? pair.kLast() : 0;\\n        uint256 totalSupply = pair.totalSupply();\\n\\n        // this also checks that totalSupply > 0\\n        require(totalSupply >= liquidityAmount && liquidityAmount > 0, \\\"ComputeLiquidityValue: LIQUIDITY_AMOUNT\\\");\\n\\n        (uint256 reservesA, uint256 reservesB) =\\n            getReservesAfterArbitrage(factory, tokenA, tokenB, truePriceTokenA, truePriceTokenB);\\n\\n        return computeLiquidityValue(reservesA, reservesB, totalSupply, liquidityAmount, feeOn, kLast);\\n    }\\n}\\n\",\"keccak256\":\"0x41b42c35823861c70cf72122dad35565ce4cdf9cbc5a324d86cf4e2f014ff692\",\"license\":\"GPL-3.0-or-later\"},\"contracts/amm/uniswap_v2_periphery/libraries/UniswapV2OracleLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/FixedPoint.sol\\\";\\n\\n// library with helper methods for oracles that are concerned with computing average prices\\nlibrary UniswapV2OracleLibrary {\\n    using FixedPoint for *;\\n\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n    function currentBlockTimestamp() internal view returns (uint32) {\\n        return uint32(block.timestamp % 2**32);\\n    }\\n\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices(address pair)\\n        internal\\n        view\\n        returns (\\n            uint256 price0Cumulative,\\n            uint256 price1Cumulative,\\n            uint32 blockTimestamp\\n        )\\n    {\\n        blockTimestamp = currentBlockTimestamp();\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\n        if (blockTimestampLast != blockTimestamp) {\\n            // subtraction overflow is desired\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n            // addition overflow is desired\\n            // counterfactual\\n            price0Cumulative += uint256(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\n            // counterfactual\\n            price1Cumulative += uint256(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8d693a2204eb1f325e1bdbe0aef29076c54c722422afaa7b251d73d8b3e1c016\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IBaseTokenNew.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\n\\ninterface IBaseTokenNew {\\n    function shareToBalance(uint256 share) external view returns (uint256);\\n\\n    function balanceToShare(uint256 balance) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xff7550c9e984e455220244f37b4d46f1fd8da3b568bdb49f2134d72a0d727433\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/AccountLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\nimport { FullMath } from \\\"@uniswap/lib/contracts/libraries/FullMath.sol\\\";\\nimport { PerpSafeCast } from \\\"./PerpSafeCast.sol\\\";\\nimport { UniswapV2Broker } from \\\"./UniswapV2Broker.sol\\\";\\nimport { BaseTokenLibrary } from \\\"./BaseTokenLibrary.sol\\\";\\nimport \\\"./PerpdexStructs.sol\\\";\\n\\n// https://help.ftx.com/hc/en-us/articles/360024780511-Complete-Futures-Specs\\nlibrary AccountLibrary {\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using PerpSafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    function getTotalAccountValue(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address poolFactory,\\n        address quoteToken\\n    ) public view returns (int256) {\\n        address[] storage baseTokens = accountInfo.baseTokens;\\n        int256 accountValue = accountInfo.vaultInfo.collateralBalance;\\n        uint256 length = baseTokens.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            accountValue = accountValue.add(getPositionNotional(accountInfo, poolFactory, baseTokens[i], quoteToken));\\n            // TODO: implement\\n            //            accountValue = accountValue.add(getPositionNotional(accountInfo, baseTokens[i]));\\n        }\\n        return accountValue;\\n    }\\n\\n    function getPositionSize(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address poolFactory,\\n        address baseToken,\\n        address quoteToken\\n    ) public view returns (int256) {\\n        PerpdexStructs.MakerInfo storage makerInfo = accountInfo.makerInfo[baseToken];\\n        int256 baseShare = accountInfo.takerInfo[baseToken].baseBalanceShare.sub(makerInfo.baseDebtShare.toInt256());\\n        (uint256 basePool, uint256 quotePool) =\\n            UniswapV2Broker.getLiquidityValue(poolFactory, baseToken, quoteToken, makerInfo.liquidity);\\n        return BaseTokenLibrary.shareToBalance(baseToken, baseShare).add(basePool.toInt256());\\n    }\\n\\n    function getPositionNotional(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address poolFactory,\\n        address baseToken,\\n        address quoteToken\\n    ) public view returns (int256) {\\n        int256 positionSize = getPositionSize(accountInfo, poolFactory, baseToken, quoteToken);\\n        uint256 priceX96 = UniswapV2Broker.getMarkPriceX96(poolFactory, baseToken, quoteToken);\\n        return positionSize.mulDiv(priceX96.toInt256(), FixedPoint96.Q96);\\n    }\\n\\n    function getTotalPositionNotional(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address poolFactory,\\n        address quoteToken\\n    ) public view returns (uint256) {\\n        address[] storage baseTokens = accountInfo.baseTokens;\\n        uint256 totalPositionNotional;\\n        uint256 length = baseTokens.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            uint256 positionNotional = getPositionNotional(accountInfo, poolFactory, baseTokens[i], quoteToken).abs();\\n            totalPositionNotional = totalPositionNotional.add(positionNotional);\\n        }\\n        return totalPositionNotional;\\n    }\\n\\n    function getOpenPositionSize(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address poolFactory,\\n        address baseToken,\\n        address quoteToken\\n    ) public view returns (uint256) {\\n        PerpdexStructs.MakerInfo storage makerInfo = accountInfo.makerInfo[baseToken];\\n        (uint256 basePool, uint256 quotePool) =\\n            UniswapV2Broker.getLiquidityValue(poolFactory, baseToken, quoteToken, makerInfo.liquidity);\\n        return getPositionSize(accountInfo, poolFactory, baseToken, quoteToken).abs().add(basePool);\\n    }\\n\\n    function getOpenPositionNotional(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address poolFactory,\\n        address baseToken,\\n        address quoteToken\\n    ) public view returns (uint256) {\\n        uint256 positionSize = getOpenPositionSize(accountInfo, poolFactory, baseToken, quoteToken);\\n        uint256 priceX96 = UniswapV2Broker.getMarkPriceX96(poolFactory, baseToken, quoteToken);\\n        return FullMath.mulDiv(positionSize, priceX96, FixedPoint96.Q96);\\n    }\\n\\n    function getTotalOpenPositionNotional(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address poolFactory,\\n        address quoteToken\\n    ) public view returns (uint256) {\\n        address[] storage baseTokens = accountInfo.baseTokens;\\n        uint256 totalOpenPositionNotional;\\n        uint256 length = baseTokens.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            uint256 positionNotional = getOpenPositionNotional(accountInfo, poolFactory, baseTokens[i], quoteToken);\\n            totalOpenPositionNotional = totalOpenPositionNotional.add(positionNotional);\\n        }\\n        return totalOpenPositionNotional;\\n    }\\n\\n    // always true when hasEnoughMaintenanceMargin is true\\n    function hasEnoughMaintenanceMargin(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address poolFactory,\\n        address quoteToken,\\n        uint24 mmRatio\\n    ) public view returns (bool) {\\n        int256 accountValue = getTotalAccountValue(accountInfo, poolFactory, quoteToken);\\n        uint256 totalPositionNotional = getTotalPositionNotional(accountInfo, poolFactory, quoteToken);\\n        return accountValue >= totalPositionNotional.mulRatio(mmRatio).toInt256();\\n    }\\n\\n    function hasEnoughInitialMargin(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address poolFactory,\\n        address quoteToken,\\n        uint24 imRatio\\n    ) public view returns (bool) {\\n        int256 accountValue = getTotalAccountValue(accountInfo, poolFactory, quoteToken);\\n        uint256 totalOpenPositionNotional = getTotalOpenPositionNotional(accountInfo, poolFactory, quoteToken);\\n        return\\n            accountValue.min(accountInfo.vaultInfo.collateralBalance) >=\\n            totalOpenPositionNotional.mulRatio(imRatio).toInt256();\\n    }\\n\\n    function updateBaseTokens(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address baseToken,\\n        uint8 maxMarketsPerAccount\\n    ) public {\\n        bool enabled =\\n            accountInfo.takerInfo[baseToken].baseBalanceShare != 0 || accountInfo.makerInfo[baseToken].liquidity != 0;\\n        address[] storage baseTokens = accountInfo.baseTokens;\\n        uint256 length = baseTokens.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            if (baseTokens[i] == baseToken) {\\n                if (!enabled) {\\n                    baseTokens[i] = baseTokens[length - 1];\\n                    baseTokens.pop();\\n                }\\n                return;\\n            }\\n        }\\n        baseTokens.push(baseToken);\\n        require(baseTokens.length <= maxMarketsPerAccount);\\n    }\\n}\\n\",\"keccak256\":\"0x9ad80629b6d2c890b0270884015a570d3ee0563ced9cebd9f1294726cca8e4fc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/BaseTokenLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nimport { IBaseTokenNew } from \\\"../interface/IBaseTokenNew.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { PerpSafeCast } from \\\"./PerpSafeCast.sol\\\";\\n\\n// internal\\nlibrary BaseTokenLibrary {\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using PerpSafeCast for uint256;\\n\\n    function balanceToShare(address baseToken, int256 balance) internal view returns (int256) {\\n        uint256 shareAbs = IBaseTokenNew(baseToken).balanceToShare(balance.abs());\\n        return balance < 0 ? shareAbs.neg256() : shareAbs.toInt256();\\n    }\\n\\n    function shareToBalance(address baseToken, int256 share) internal view returns (int256) {\\n        uint256 balanceAbs = IBaseTokenNew(baseToken).shareToBalance(share.abs());\\n        return share < 0 ? balanceAbs.neg256() : balanceAbs.toInt256();\\n    }\\n}\\n\",\"keccak256\":\"0xe6fce07ad01d778a292d84a76fcc37611b4ebe42119f4138a07c130b4d1b8c75\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PerpMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { FullMath } from \\\"@uniswap/v3-core/contracts/libraries/FullMath.sol\\\";\\nimport { PerpSafeCast } from \\\"./PerpSafeCast.sol\\\";\\nimport { SafeMathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport { SignedSafeMathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol\\\";\\n\\nlibrary PerpMath {\\n    using PerpSafeCast for int256;\\n    using SignedSafeMathUpgradeable for int256;\\n    using SafeMathUpgradeable for uint256;\\n\\n    function formatSqrtPriceX96ToPriceX96(uint160 sqrtPriceX96) internal pure returns (uint256) {\\n        return FullMath.mulDiv(sqrtPriceX96, sqrtPriceX96, FixedPoint96.Q96);\\n    }\\n\\n    function formatX10_18ToX96(uint256 valueX10_18) internal pure returns (uint256) {\\n        return FullMath.mulDiv(valueX10_18, FixedPoint96.Q96, 1 ether);\\n    }\\n\\n    function formatX96ToX10_18(uint256 valueX96) internal pure returns (uint256) {\\n        return FullMath.mulDiv(valueX96, 1 ether, FixedPoint96.Q96);\\n    }\\n\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function abs(int256 value) internal pure returns (uint256) {\\n        return value >= 0 ? value.toUint256() : neg256(value).toUint256();\\n    }\\n\\n    function neg256(int256 a) internal pure returns (int256) {\\n        require(a > -2**255, \\\"PerpMath: inversion overflow\\\");\\n        return -a;\\n    }\\n\\n    function neg256(uint256 a) internal pure returns (int256) {\\n        return -PerpSafeCast.toInt256(a);\\n    }\\n\\n    function neg128(int128 a) internal pure returns (int128) {\\n        require(a > -2**127, \\\"PerpMath: inversion overflow\\\");\\n        return -a;\\n    }\\n\\n    function neg128(uint128 a) internal pure returns (int128) {\\n        return -PerpSafeCast.toInt128(a);\\n    }\\n\\n    function divBy10_18(int256 value) internal pure returns (int256) {\\n        // no overflow here\\n        return value / (1 ether);\\n    }\\n\\n    function divBy10_18(uint256 value) internal pure returns (uint256) {\\n        // no overflow here\\n        return value / (1 ether);\\n    }\\n\\n    function subRatio(uint24 a, uint24 b) internal pure returns (uint24) {\\n        require(b <= a, \\\"PerpMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    function mulRatio(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return FullMath.mulDiv(value, ratio, 1e6);\\n    }\\n\\n    function divRatio(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return FullMath.mulDiv(value, 1e6, ratio);\\n    }\\n\\n    /// @param denominator cannot be 0 and is checked in FullMath.mulDiv()\\n    function mulDiv(\\n        int256 a,\\n        int256 b,\\n        uint256 denominator\\n    ) internal pure returns (int256 result) {\\n        uint256 unsignedA = a < 0 ? uint256(neg256(a)) : uint256(a);\\n        uint256 unsignedB = b < 0 ? uint256(neg256(b)) : uint256(b);\\n        bool negative = ((a < 0 && b > 0) || (a > 0 && b < 0)) ? true : false;\\n\\n        uint256 unsignedResult = FullMath.mulDiv(unsignedA, unsignedB, denominator);\\n\\n        result = negative ? neg256(unsignedResult) : PerpSafeCast.toInt256(unsignedResult);\\n\\n        return result;\\n    }\\n\\n    function sign(int256 value) internal pure returns (int256) {\\n        return value > 0 ? 1 : (value < 0 ? -1 : int256(0));\\n    }\\n}\\n\",\"keccak256\":\"0xe4d7752bfc35e9b67fd81b7485a880f5e76c2744ff7f984204180ca5dea99d9f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PerpSafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev copy from \\\"@openzeppelin/contracts-upgradeable/utils/SafeCastUpgradeable.sol\\\"\\n * and rename to avoid naming conflict with uniswap\\n */\\nlibrary PerpSafeCast {\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128 returnValue) {\\n        require(((returnValue = uint128(value)) == value), \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64 returnValue) {\\n        require(((returnValue = uint64(value)) == value), \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32 returnValue) {\\n        require(((returnValue = uint32(value)) == value), \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16 returnValue) {\\n        require(((returnValue = uint16(value)) == value), \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8 returnValue) {\\n        require(((returnValue = uint8(value)) == value), \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 returnValue) {\\n        require(((returnValue = int128(value)) == value), \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 returnValue) {\\n        require(((returnValue = int64(value)) == value), \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 returnValue) {\\n        require(((returnValue = int32(value)) == value), \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 returnValue) {\\n        require(((returnValue = int16(value)) == value), \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 returnValue) {\\n        require(((returnValue = int8(value)) == value), \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from int256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0 and into 24 bit.\\n     */\\n    function toUint24(int256 value) internal pure returns (uint24 returnValue) {\\n        require(\\n            ((returnValue = uint24(value)) == value),\\n            \\\"SafeCast: value must be positive or value doesn't fit in an 24 bits\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 returnValue) {\\n        require(((returnValue = int24(value)) == value), \\\"SafeCast: value doesn't fit in an 24 bits\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x6aba2cd6fe208ea413e3e087540ab092c2f3e9455e317de485bd82a81769e381\",\"license\":\"MIT\"},\"contracts/lib/PerpdexStructs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nlibrary PerpdexStructs {\\n    struct TakerInfo {\\n        int256 baseBalanceShare;\\n        int256 quoteBalance;\\n    }\\n\\n    struct MakerInfo {\\n        uint256 baseDebtShare;\\n        uint256 quoteDebt;\\n        uint256 liquidity;\\n    }\\n\\n    struct VaultInfo {\\n        int256 collateralBalance;\\n    }\\n\\n    struct AccountInfo {\\n        // base token\\n        mapping(address => TakerInfo) takerInfo;\\n        // base token\\n        mapping(address => MakerInfo) makerInfo;\\n        VaultInfo vaultInfo;\\n        address[] baseTokens;\\n    }\\n\\n    struct InsuranceFundInfo {\\n        int256 balance;\\n    }\\n\\n    struct PriceLimitInfo {\\n        uint256 referencePrice;\\n        uint256 referenceTimestamp;\\n    }\\n\\n    struct PriceLimitConfig {\\n        uint24 priceLimitNormalOrderRatio;\\n        uint24 priceLimitLiquidationRatio;\\n    }\\n}\\n\",\"keccak256\":\"0x49ee43fe5ba33f6807dea4305550d94f5f6d762bd42e748112712bb7acc08922\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PriceLimitLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport \\\"./PerpdexStructs.sol\\\";\\n\\n// internal\\nlibrary PriceLimitLibrary {\\n    using PerpMath for uint256;\\n    using SafeMath for uint256;\\n\\n    function isNormalOrderAllowed(\\n        PerpdexStructs.PriceLimitInfo storage priceLimitInfo,\\n        PerpdexStructs.PriceLimitConfig calldata config,\\n        uint256 price\\n    ) internal view returns (bool) {\\n        return _isWithinPriceLimit(priceLimitInfo.referencePrice, price, config.priceLimitNormalOrderRatio);\\n    }\\n\\n    function isLiquidationAllowed(\\n        PerpdexStructs.PriceLimitInfo storage priceLimitInfo,\\n        PerpdexStructs.PriceLimitConfig calldata config,\\n        uint256 price\\n    ) internal view returns (bool) {\\n        return _isWithinPriceLimit(priceLimitInfo.referencePrice, price, config.priceLimitLiquidationRatio);\\n    }\\n\\n    // should call before all price changes\\n    function update(PerpdexStructs.PriceLimitInfo storage priceLimitInfo, uint256 price) internal {\\n        if (priceLimitInfo.referenceTimestamp < block.timestamp) {\\n            priceLimitInfo.referencePrice = price;\\n            priceLimitInfo.referenceTimestamp = block.timestamp;\\n        }\\n    }\\n\\n    function _isWithinPriceLimit(\\n        uint256 referencePrice,\\n        uint256 price,\\n        uint24 priceLimitRatio\\n    ) private pure returns (bool) {\\n        uint256 maxChange = referencePrice.mulRatio(priceLimitRatio);\\n        uint256 upperBound = referencePrice.add(maxChange);\\n        uint256 lowerBound = referencePrice.sub(maxChange);\\n        return (lowerBound <= price && price <= upperBound);\\n    }\\n}\\n\",\"keccak256\":\"0x136729fca15cac4ce528076064e32b8fbe994b903efc268b6dc341b3497c9bcf\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/TakerLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\nimport { UniswapV2Broker } from \\\"./UniswapV2Broker.sol\\\";\\nimport { IBaseTokenNew } from \\\"../interface/IBaseTokenNew.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { PerpSafeCast } from \\\"./PerpSafeCast.sol\\\";\\nimport { BaseTokenLibrary } from \\\"./BaseTokenLibrary.sol\\\";\\nimport \\\"./PerpdexStructs.sol\\\";\\nimport \\\"./AccountLibrary.sol\\\";\\nimport \\\"./PriceLimitLibrary.sol\\\";\\n\\nlibrary TakerLibrary {\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using PerpSafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    struct OpenPositionParams {\\n        address baseToken;\\n        address quoteToken;\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n        uint256 amount;\\n        uint256 oppositeAmountBound;\\n        uint256 deadline;\\n        address poolFactory;\\n        PerpdexStructs.PriceLimitConfig priceLimitConfig;\\n        bool isBaseTokenAllowed;\\n        uint24 mmRatio;\\n        uint24 imRatio;\\n        uint8 maxMarketsPerAccount;\\n    }\\n\\n    struct OpenPositionResponse {\\n        int256 exchangedBase;\\n        int256 exchangedQuote;\\n        int256 realizedPnL;\\n        uint256 priceAfterX96;\\n    }\\n\\n    struct LiquidateParams {\\n        address baseToken;\\n        address quoteToken;\\n        uint256 amount;\\n        uint256 oppositeAmountBound;\\n        uint256 deadline;\\n        address poolFactory;\\n        PerpdexStructs.PriceLimitConfig priceLimitConfig;\\n        uint24 mmRatio;\\n        uint24 liquidationRewardRatio;\\n        uint8 maxMarketsPerAccount;\\n    }\\n\\n    struct LiquidateResponse {\\n        int256 exchangedBase;\\n        int256 exchangedQuote;\\n        int256 realizedPnL;\\n        uint256 priceAfterX96;\\n    }\\n\\n    modifier checkDeadline(uint256 deadline) {\\n        require(block.timestamp <= deadline, \\\"CH_TE\\\");\\n        _;\\n    }\\n\\n    function openPosition(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        PerpdexStructs.PriceLimitInfo storage priceLimitInfo,\\n        OpenPositionParams calldata params\\n    ) public checkDeadline(params.deadline) returns (OpenPositionResponse memory) {\\n        require(\\n            !AccountLibrary.hasEnoughMaintenanceMargin(\\n                accountInfo,\\n                params.poolFactory,\\n                params.quoteToken,\\n                params.mmRatio\\n            )\\n        );\\n\\n        (int256 exchangedBase, int256 exchangedQuote, int256 realizedPnL) =\\n            _doSwap(\\n                accountInfo,\\n                priceLimitInfo,\\n                params.poolFactory,\\n                params.baseToken,\\n                params.quoteToken,\\n                params.isBaseToQuote,\\n                params.isExactInput,\\n                params.amount,\\n                params.maxMarketsPerAccount\\n            );\\n\\n        if (!params.isBaseTokenAllowed) {\\n            require(accountInfo.takerInfo[params.baseToken].baseBalanceShare.sign() * exchangedBase.sign() <= 0);\\n        }\\n\\n        uint256 priceAfterX96 = _getPriceX96(params.poolFactory, params.baseToken, params.quoteToken);\\n        require(PriceLimitLibrary.isNormalOrderAllowed(priceLimitInfo, params.priceLimitConfig, priceAfterX96));\\n\\n        require(\\n            AccountLibrary.hasEnoughInitialMargin(accountInfo, params.poolFactory, params.quoteToken, params.imRatio)\\n        );\\n\\n        return\\n            OpenPositionResponse({\\n                exchangedBase: exchangedBase,\\n                exchangedQuote: exchangedQuote,\\n                realizedPnL: realizedPnL,\\n                priceAfterX96: priceAfterX96\\n            });\\n    }\\n\\n    function liquidate(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        PerpdexStructs.AccountInfo storage liquidatorAccountInfo,\\n        PerpdexStructs.PriceLimitInfo storage priceLimitInfo,\\n        PerpdexStructs.InsuranceFundInfo storage insuranceFundInfo,\\n        LiquidateParams calldata params\\n    ) public checkDeadline(params.deadline) returns (LiquidateResponse memory) {\\n        require(\\n            !AccountLibrary.hasEnoughMaintenanceMargin(\\n                accountInfo,\\n                params.poolFactory,\\n                params.quoteToken,\\n                params.mmRatio\\n            )\\n        );\\n\\n        bool isLong;\\n        {\\n            PerpdexStructs.TakerInfo storage takerInfo = accountInfo.takerInfo[params.baseToken];\\n            isLong = takerInfo.baseBalanceShare > 0 ? true : false;\\n            require(params.amount <= IBaseTokenNew(params.baseToken).shareToBalance(takerInfo.baseBalanceShare.abs()));\\n        }\\n\\n        (int256 exchangedBase, int256 exchangedQuote, int256 realizedPnL) =\\n            _doSwap(\\n                accountInfo,\\n                priceLimitInfo,\\n                params.poolFactory,\\n                params.baseToken,\\n                params.quoteToken,\\n                isLong, // isBaseToQuote,\\n                isLong, // isExactInput,\\n                params.amount,\\n                params.maxMarketsPerAccount\\n            );\\n\\n        uint256 priceAfterX96 = _getPriceX96(params.poolFactory, params.baseToken, params.quoteToken);\\n        require(PriceLimitLibrary.isLiquidationAllowed(priceLimitInfo, params.priceLimitConfig, priceAfterX96));\\n\\n        _processLiquidationFee(\\n            accountInfo.vaultInfo,\\n            liquidatorAccountInfo.vaultInfo,\\n            insuranceFundInfo,\\n            params.mmRatio,\\n            params.liquidationRewardRatio,\\n            exchangedQuote.abs()\\n        );\\n\\n        return\\n            LiquidateResponse({\\n                exchangedBase: exchangedBase,\\n                exchangedQuote: exchangedQuote,\\n                realizedPnL: realizedPnL,\\n                priceAfterX96: priceAfterX96\\n            });\\n    }\\n\\n    function addToTakerBalance(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address baseToken,\\n        int256 baseBalance,\\n        int256 quoteBalance,\\n        int256 quoteFee,\\n        uint8 maxMarketsPerAccount\\n    ) public returns (int256) {\\n        require(baseBalance.sign() * quoteBalance.sign() == -1);\\n\\n        int256 baseShare = BaseTokenLibrary.balanceToShare(baseToken, baseBalance);\\n        PerpdexStructs.TakerInfo storage takerInfo = accountInfo.takerInfo[baseToken];\\n\\n        int256 realizedPnL;\\n\\n        if (takerInfo.baseBalanceShare.sign() * baseShare.sign() == -1) {\\n            uint256 FULLY_CLOSED_RATIO = 1e18;\\n            uint256 closedRatio =\\n                FullMath.mulDiv(baseShare.abs(), FULLY_CLOSED_RATIO, takerInfo.baseBalanceShare.abs());\\n\\n            if (closedRatio <= FULLY_CLOSED_RATIO) {\\n                int256 reducedOpenNotional = takerInfo.quoteBalance.mulDiv(closedRatio.toInt256(), FULLY_CLOSED_RATIO);\\n                realizedPnL = quoteBalance.add(reducedOpenNotional).add(quoteFee);\\n            } else {\\n                int256 closedPositionNotional = quoteBalance.mulDiv(int256(FULLY_CLOSED_RATIO), closedRatio);\\n                realizedPnL = takerInfo.quoteBalance.add(closedPositionNotional).add(quoteFee);\\n            }\\n        } else {\\n            realizedPnL = quoteFee;\\n        }\\n\\n        takerInfo.baseBalanceShare = takerInfo.baseBalanceShare.add(baseShare);\\n        takerInfo.quoteBalance = takerInfo.quoteBalance.add(quoteBalance).add(quoteFee).sub(realizedPnL);\\n        accountInfo.vaultInfo.collateralBalance = accountInfo.vaultInfo.collateralBalance.add(realizedPnL);\\n\\n        AccountLibrary.updateBaseTokens(accountInfo, baseToken, maxMarketsPerAccount);\\n\\n        return realizedPnL;\\n    }\\n\\n    function _getPriceX96(\\n        address poolFactory,\\n        address baseToken,\\n        address quoteToken\\n    ) private returns (uint256) {\\n        return UniswapV2Broker.getMarkPriceX96(poolFactory, baseToken, quoteToken);\\n    }\\n\\n    function _doSwap(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        PerpdexStructs.PriceLimitInfo storage priceLimitInfo,\\n        address poolFactory,\\n        address baseToken,\\n        address quoteToken,\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        uint8 maxMarketsPerAccount\\n    )\\n        private\\n        returns (\\n            int256,\\n            int256,\\n            int256\\n        )\\n    {\\n        {\\n            uint256 priceBeforeX96 = _getPriceX96(poolFactory, baseToken, quoteToken);\\n            PriceLimitLibrary.update(priceLimitInfo, priceBeforeX96);\\n        }\\n\\n        int256 exchangedPositionSize;\\n        int256 exchangedPositionNotional;\\n\\n        {\\n            UniswapV2Broker.SwapResponse memory response =\\n                UniswapV2Broker.swap(\\n                    UniswapV2Broker.SwapParams(\\n                        poolFactory,\\n                        baseToken,\\n                        quoteToken,\\n                        address(this), // recipient\\n                        isBaseToQuote,\\n                        isExactInput,\\n                        amount // amount\\n                    )\\n                );\\n\\n            if (isBaseToQuote) {\\n                // short: exchangedPositionSize <= 0 && exchangedPositionNotional >= 0\\n                exchangedPositionSize = response.base.neg256();\\n                exchangedPositionNotional = response.quote.toInt256();\\n            } else {\\n                // long: exchangedPositionSize >= 0 && exchangedPositionNotional <= 0\\n                exchangedPositionSize = response.base.toInt256();\\n                exchangedPositionNotional = response.quote.neg256();\\n            }\\n        }\\n\\n        int256 realizedPnL =\\n            addToTakerBalance(\\n                accountInfo,\\n                baseToken,\\n                exchangedPositionSize,\\n                exchangedPositionNotional,\\n                0,\\n                maxMarketsPerAccount\\n            );\\n\\n        return (exchangedPositionSize, exchangedPositionNotional, realizedPnL);\\n    }\\n\\n    function _processLiquidationFee(\\n        PerpdexStructs.VaultInfo storage vaultInfo,\\n        PerpdexStructs.VaultInfo storage liquidatorVaultInfo,\\n        PerpdexStructs.InsuranceFundInfo storage insuranceFundInfo,\\n        uint24 mmRatio,\\n        uint24 liquidatorRewardRatio,\\n        uint256 exchangedQuote\\n    ) private returns (uint256) {\\n        uint256 penalty = exchangedQuote.mulRatio(mmRatio);\\n        uint256 liquidatorReward = penalty.mulRatio(liquidatorRewardRatio);\\n        uint256 insuranceFundReward = penalty.sub(liquidatorReward);\\n\\n        vaultInfo.collateralBalance = vaultInfo.collateralBalance.sub(penalty.toInt256());\\n        liquidatorVaultInfo.collateralBalance = liquidatorVaultInfo.collateralBalance.add(liquidatorReward.toInt256());\\n        insuranceFundInfo.balance = insuranceFundInfo.balance.add(insuranceFundReward.toInt256());\\n\\n        return penalty;\\n    }\\n}\\n\",\"keccak256\":\"0x4a0e7c6ce9e36e7e3f714bffbd303d2c6d8daf5f3ea602f81c8d5ba735e3fc5c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/UniswapV2Broker.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\nimport { IUniswapV2Pair } from \\\"../amm/uniswap_v2/interfaces/IUniswapV2Pair.sol\\\";\\nimport { IUniswapV2Factory } from \\\"../amm/uniswap_v2/interfaces/IUniswapV2Factory.sol\\\";\\nimport { UniswapV2LiquidityMathLibrary } from \\\"../amm/uniswap_v2_periphery/libraries/UniswapV2LiquidityMathLibrary.sol\\\";\\nimport { UniswapV2OracleLibrary } from \\\"../amm/uniswap_v2_periphery/libraries/UniswapV2OracleLibrary.sol\\\";\\nimport { UniswapV2Library } from \\\"../amm/uniswap_v2_periphery/libraries/UniswapV2Library.sol\\\";\\nimport { Math } from \\\"../amm/uniswap_v2/libraries/Math.sol\\\";\\nimport { FullMath } from \\\"@uniswap/v3-core/contracts/libraries/FullMath.sol\\\";\\nimport { PerpSafeCast } from \\\"./PerpSafeCast.sol\\\";\\nimport { SafeMathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport { PerpMath } from \\\"../lib/PerpMath.sol\\\";\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\n\\n/**\\n * Uniswap's v2 pool: token0 & token1\\n * -> token0's price = token1 / token0\\n * Our system: base & quote\\n * -> base's price = quote / base\\n * Thus, we require that (base, quote) = (token0, token1) is always true for convenience\\n */\\nlibrary UniswapV2Broker {\\n    using SafeMathUpgradeable for uint256;\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using PerpSafeCast for uint256;\\n    using PerpSafeCast for int256;\\n\\n    //\\n    // STRUCT\\n    //\\n\\n    struct AddLiquidityParams {\\n        address factory;\\n        address baseToken;\\n        address quoteToken;\\n        uint256 base;\\n        uint256 quote;\\n        address to;\\n    }\\n\\n    struct AddLiquidityResponse {\\n        uint256 base;\\n        uint256 quote;\\n        uint256 liquidity;\\n    }\\n\\n    struct RemoveLiquidityParams {\\n        address factory;\\n        address baseToken;\\n        address quoteToken;\\n        address recipient;\\n        uint256 liquidity;\\n    }\\n\\n    /// @param base amount of base token received from burning the liquidity (excl. fee)\\n    /// @param quote amount of quote token received from burning the liquidity (excl. fee)\\n    struct RemoveLiquidityResponse {\\n        uint256 base;\\n        uint256 quote;\\n    }\\n\\n    struct SwapParams {\\n        address factory;\\n        address baseToken;\\n        address quoteToken;\\n        address recipient;\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n        uint256 amount;\\n    }\\n\\n    struct SwapResponse {\\n        uint256 base;\\n        uint256 quote;\\n    }\\n\\n    //\\n    // CONSTANT\\n    //\\n\\n    //\\n    // INTERNAL NON-VIEW\\n    //\\n\\n    function addLiquidity(AddLiquidityParams memory params) internal returns (AddLiquidityResponse memory) {\\n        (uint256 amountBase, uint256 amountQuote, uint256 liquidity) =\\n            _addLiquidity(\\n                params.factory,\\n                params.baseToken, // tokenA\\n                params.quoteToken, // tokenB\\n                params.base, // amountADesired\\n                params.quote, // amountBDesired\\n                1, // amountAMin\\n                1, // amountBMin\\n                address(params.to), // to\\n                block.timestamp // deadline\\n            );\\n\\n        return AddLiquidityResponse({ base: amountBase, quote: amountQuote, liquidity: liquidity });\\n    }\\n\\n    function removeLiquidity(RemoveLiquidityParams memory params) internal returns (RemoveLiquidityResponse memory) {\\n        (uint256 amountBase, uint256 amountQuote) =\\n            _removeLiquidity(\\n                params.factory,\\n                params.baseToken, // tokenA,\\n                params.quoteToken, // tokenB,\\n                params.liquidity, // liquidity,\\n                1, // amountAMin,\\n                1, // amountBMin,\\n                params.recipient, // to,\\n                block.timestamp // deadline\\n            );\\n\\n        return RemoveLiquidityResponse({ base: amountBase, quote: amountQuote });\\n    }\\n\\n    function swap(SwapParams memory params) internal returns (SwapResponse memory response) {\\n        uint256 amountIn;\\n        address[] memory path = new address[](2);\\n        uint256[] memory amounts;\\n\\n        if (params.isBaseToQuote) {\\n            path[0] = params.baseToken;\\n            path[1] = params.quoteToken;\\n        } else {\\n            path[0] = params.quoteToken;\\n            path[1] = params.baseToken;\\n        }\\n\\n        if (params.isExactInput) {\\n            amounts = _swapExactTokensForTokens(\\n                params.factory,\\n                params.amount, // amountIn\\n                1, // amountOutMin\\n                path, // path\\n                params.recipient, // to\\n                block.timestamp // deadline\\n            );\\n        } else {\\n            amounts = _swapTokensForExactTokens(\\n                params.factory,\\n                params.amount, // amountOut\\n                type(uint256).max, // amountInMax\\n                path, // path\\n                params.recipient, // to\\n                block.timestamp // deadline\\n            );\\n        }\\n\\n        if (params.isBaseToQuote) {\\n            return SwapResponse(amounts[0], amounts[1]);\\n        } else {\\n            return SwapResponse(amounts[1], amounts[0]);\\n        }\\n    }\\n\\n    //\\n    // INTERNAL VIEW\\n    //\\n\\n    function getLiquidityValue(\\n        address factory,\\n        address baseToken,\\n        address quoteToken,\\n        uint256 liquidityAmount\\n    ) internal view returns (uint256 baseAmount, uint256 quoteAmount) {\\n        // based on UniswapV2LiquidityMathLibrary.getLiquidityValue\\n\\n        (uint256 reservesA, uint256 reservesB) = UniswapV2Library.getReserves(factory, baseToken, quoteToken);\\n        if (reservesA == 0 || reservesB == 0) {\\n            return (0, 0);\\n        }\\n\\n        IUniswapV2Pair pair = IUniswapV2Pair(UniswapV2Library.pairFor(factory, baseToken, quoteToken));\\n        bool feeOn = IUniswapV2Factory(factory).feeTo() != address(0);\\n        uint256 kLast = feeOn ? pair.kLast() : 0;\\n        uint256 totalSupply = pair.totalSupply();\\n        return\\n            UniswapV2LiquidityMathLibrary.computeLiquidityValue(\\n                reservesA,\\n                reservesB,\\n                totalSupply,\\n                liquidityAmount,\\n                feeOn,\\n                kLast\\n            );\\n    }\\n\\n    function getMarkPriceX96(\\n        address factory,\\n        address baseToken,\\n        address quoteToken\\n    ) internal view returns (uint256 markPrice) {\\n        (uint256 baseAmount, uint256 quoteAmount) = UniswapV2Library.getReserves(factory, baseToken, quoteToken);\\n        return FullMath.mulDiv(quoteAmount, FixedPoint96.Q96, baseAmount);\\n    }\\n\\n    function getSqrtMarkPriceX96(\\n        address factory,\\n        address baseToken,\\n        address quoteToken\\n    ) internal view returns (uint160 sqrtMarkPrice) {\\n        (uint256 baseAmount, uint256 quoteAmount) = UniswapV2Library.getReserves(factory, baseToken, quoteToken);\\n        return uint160(Math.sqrt(FullMath.mulDiv(quoteAmount, FixedPoint96.Q96 * FixedPoint96.Q96, baseAmount)));\\n    }\\n\\n    function getCurrentCumulativePrice(\\n        address factory,\\n        address baseToken,\\n        address quoteToken\\n    ) internal view returns (uint256 priceCumulative, uint32 blockTimestamp) {\\n        address pair = IUniswapV2Factory(factory).getPair(baseToken, quoteToken);\\n        uint256 price0Cumulative;\\n        uint256 price1Cumulative;\\n        if (IUniswapV2Pair(pair).price0CumulativeLast() == 0) {\\n            priceCumulative = 0;\\n            blockTimestamp = 0;\\n        } else {\\n            (price0Cumulative, price1Cumulative, blockTimestamp) = UniswapV2OracleLibrary.currentCumulativePrices(pair);\\n            priceCumulative = IUniswapV2Pair(pair).token0() == baseToken ? price0Cumulative : price1Cumulative;\\n        }\\n    }\\n\\n    //\\n    // PRIVATE NON-VIEW\\n    //\\n\\n    // copied from UniswapV2Router02\\n    // modified to transfer tokens from \\\"to\\\" param\\n\\n    modifier ensure(uint256 deadline) {\\n        require(deadline >= block.timestamp, \\\"UniswapV2Router: EXPIRED\\\");\\n        _;\\n    }\\n\\n    // **** ADD LIQUIDITY ****\\n    function _doAddLiquidity(\\n        address factory,\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin\\n    ) private returns (uint256 amountA, uint256 amountB) {\\n        // create the pair if it doesn't exist yet\\n        if (IUniswapV2Factory(factory).getPair(tokenA, tokenB) == address(0)) {\\n            IUniswapV2Factory(factory).createPair(tokenA, tokenB);\\n        }\\n        (uint256 reserveA, uint256 reserveB) = UniswapV2Library.getReserves(factory, tokenA, tokenB);\\n        if (reserveA == 0 && reserveB == 0) {\\n            (amountA, amountB) = (amountADesired, amountBDesired);\\n        } else {\\n            uint256 amountBOptimal = UniswapV2Library.quote(amountADesired, reserveA, reserveB);\\n            if (amountBOptimal <= amountBDesired) {\\n                require(amountBOptimal >= amountBMin, \\\"UniswapV2Router: INSUFFICIENT_B_AMOUNT\\\");\\n                (amountA, amountB) = (amountADesired, amountBOptimal);\\n            } else {\\n                uint256 amountAOptimal = UniswapV2Library.quote(amountBDesired, reserveB, reserveA);\\n                assert(amountAOptimal <= amountADesired);\\n                require(amountAOptimal >= amountAMin, \\\"UniswapV2Router: INSUFFICIENT_A_AMOUNT\\\");\\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\\n            }\\n        }\\n    }\\n\\n    function _addLiquidity(\\n        address factory,\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        private\\n        ensure(deadline)\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        )\\n    {\\n        (amountA, amountB) = _doAddLiquidity(\\n            factory,\\n            tokenA,\\n            tokenB,\\n            amountADesired,\\n            amountBDesired,\\n            amountAMin,\\n            amountBMin\\n        );\\n        address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);\\n        TransferHelper.safeTransferFrom(tokenA, to, pair, amountA);\\n        TransferHelper.safeTransferFrom(tokenB, to, pair, amountB);\\n        liquidity = IUniswapV2Pair(pair).mint(to);\\n    }\\n\\n    // **** REMOVE LIQUIDITY ****\\n    function _removeLiquidity(\\n        address factory,\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) private ensure(deadline) returns (uint256 amountA, uint256 amountB) {\\n        address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);\\n        IUniswapV2Pair(pair).transferFrom(to, pair, liquidity); // send liquidity to pair\\n        (uint256 amount0, uint256 amount1) = IUniswapV2Pair(pair).burn(to);\\n        (address token0, ) = UniswapV2Library.sortTokens(tokenA, tokenB);\\n        (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\\n        require(amountA >= amountAMin, \\\"UniswapV2Router: INSUFFICIENT_A_AMOUNT\\\");\\n        require(amountB >= amountBMin, \\\"UniswapV2Router: INSUFFICIENT_B_AMOUNT\\\");\\n    }\\n\\n    // **** SWAP ****\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swap(\\n        address factory,\\n        uint256[] memory amounts,\\n        address[] memory path,\\n        address _to\\n    ) private {\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0, ) = UniswapV2Library.sortTokens(input, output);\\n            uint256 amountOut = amounts[i + 1];\\n            (uint256 amount0Out, uint256 amount1Out) =\\n                input == token0 ? (uint256(0), amountOut) : (amountOut, uint256(0));\\n            address to = i < path.length - 2 ? UniswapV2Library.pairFor(factory, output, path[i + 2]) : _to;\\n            IUniswapV2Pair(UniswapV2Library.pairFor(factory, input, output)).swap(\\n                amount0Out,\\n                amount1Out,\\n                to,\\n                new bytes(0)\\n            );\\n        }\\n    }\\n\\n    function _swapExactTokensForTokens(\\n        address factory,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        address to,\\n        uint256 deadline\\n    ) private ensure(deadline) returns (uint256[] memory amounts) {\\n        amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path);\\n        require(amounts[amounts.length - 1] >= amountOutMin, \\\"UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        TransferHelper.safeTransferFrom(path[0], to, UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]);\\n        _swap(factory, amounts, path, to);\\n    }\\n\\n    function _swapTokensForExactTokens(\\n        address factory,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] memory path,\\n        address to,\\n        uint256 deadline\\n    ) private ensure(deadline) returns (uint256[] memory amounts) {\\n        amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);\\n        require(amounts[0] <= amountInMax, \\\"UniswapV2Router: EXCESSIVE_INPUT_AMOUNT\\\");\\n        TransferHelper.safeTransferFrom(path[0], to, UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]);\\n        _swap(factory, amounts, path, to);\\n    }\\n\\n    //\\n    // PRIVATE VIEW\\n    //\\n}\\n\",\"keccak256\":\"0x7318442249d9ad7e44e564a2bec699563dafa8898340008fcf680054184bf306\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x61241e610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c80639377114414610050578063967d86f01461008657806397ec6101146100a6575b600080fd5b81801561005c57600080fd5b5061007061006b366004611f96565b6100d3565b60405161007d9190612216565b60405180910390f35b81801561009257600080fd5b506100706100a1366004611feb565b6103d6565b8180156100b257600080fd5b506100c66100c1366004611f3f565b6106dc565b60405161007d91906120a7565b6100db611e83565b8160800135804211156101095760405162461bcd60e51b815260040161010090612119565b60405180910390fd5b73f485d7478cCeA7ff7FDbE78957E73216CADBaC6063a67766f08861013460c0870160a08801611eed565b6101446040880160208901611eed565b61015661012089016101008a0161202c565b6040518563ffffffff1660e01b815260040161017594939291906121ca565b60206040518083038186803b15801561018d57600080fd5b505af41580156101a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c59190611f23565b156101cf57600080fd5b60008088816101e16020880188611eed565b6001600160a01b03166001600160a01b0316815260200190815260200160002090506000816000015413610216576000610219565b60015b91506102286020860186611eed565b6001600160a01b0316638195510561024383600001546108a7565b6040518263ffffffff1660e01b815260040161025f91906120a7565b60206040518083038186803b15801561027757600080fd5b505afa15801561028b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102af919061204f565b856040013511156102bf57600080fd5b50600080806103168b8a6102d960c08b0160a08c01611eed565b6102e660208c018c611eed565b6102f660408d0160208e01611eed565b898a8e604001358f6101400160208101906103119190612067565b6108d8565b91945092509050600061035461033260c08a0160a08b01611eed565b61033f60208b018b611eed565b61034f60408c0160208d01611eed565b6109cc565b90506103648a8960c001836109e3565b61036d57600080fd5b6103ab6002808e01908d018b61038b6101208d016101008e0161202c565b61039d6101408e016101208f0161202c565b6103a6896108a7565b610a02565b5060408051608081018252948552602085019390935291830152606082015298975050505050505050565b6103de611e83565b8160c00135804211156104035760405162461bcd60e51b815260040161010090612119565b73f485d7478cCeA7ff7FDbE78957E73216CADBaC6063a67766f08661042f610100870160e08801611eed565b61043f6040880160208901611eed565b61045161018089016101608a0161202c565b6040518563ffffffff1660e01b815260040161047094939291906121ca565b60206040518083038186803b15801561048857600080fd5b505af415801561049c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c09190611f23565b156104ca57600080fd5b6000808061053a88886104e46101008a0160e08b01611eed565b6104f160208b018b611eed565b61050160408c0160208d01611eed565b61051160608d0160408e01611f07565b61052160808e0160608f01611f07565b8d608001358e6101a00160208101906103119190612067565b9194509250905061055361016087016101408801611f07565b6105a057600061056284610a7c565b6105948a600061057560208c018c611eed565b6001600160a01b03168152602081019190915260400160002054610a7c565b0213156105a057600080fd5b60006105d36105b6610100890160e08a01611eed565b6105c360208a018a611eed565b61034f60408b0160208c01611eed565b90506105e488886101000183610aa4565b6105ed57600080fd5b73f485d7478cCeA7ff7FDbE78957E73216CADBaC6063b5f1ec8e8a6106196101008b0160e08c01611eed565b61062960408c0160208d01611eed565b61063b6101a08d016101808e0161202c565b6040518563ffffffff1660e01b815260040161065a94939291906121ca565b60206040518083038186803b15801561067257600080fd5b505af4158015610686573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106aa9190611f23565b6106b357600080fd5b60408051608081018252948552602085019390935291830152606082015291505b509392505050565b60006106e784610a7c565b6106f086610a7c565b02600019146106fe57600080fd5b600061070a8787610abb565b6001600160a01b038816600090815260208a90526040812091925061072e83610a7c565b825461073990610a7c565b0260001914156107e357670de0b6b3a7640000600061076d61075a866108a7565b8361076887600001546108a7565b610b61565b90508181116107ae57600061079061078483610c1a565b60018701549085610c66565b90506107a6896107a08c84610d0a565b90610d0a565b9350506107dc565b60006107bb8a8484610c66565b90506107d8896107a0838860010154610d0a90919063ffffffff16565b9350505b50506107e6565b50845b81546107f29084610d0a565b8255600182015461081590829061080f9089906107a0908c610d0a565b90610d6f565b600183015560028a01546108299082610d0a565b60028b015560405163ab49ea0560e01b815273f485d7478cCeA7ff7FDbE78957E73216CADBaC609063ab49ea0590610869908d908d908a906004016121f4565b60006040518083038186803b15801561088157600080fd5b505af4158015610895573d6000803e3d6000fd5b50929c9b505050505050505050505050565b6000808212156108c7576108c26108bd83610dd4565b610e00565b6108d0565b6108d082610e00565b90505b919050565b6000806000806108e98b8b8b6109cc565b90506108f58c82610e57565b50600080600061095e6040518060e001604052808f6001600160a01b031681526020018e6001600160a01b031681526020018d6001600160a01b03168152602001306001600160a01b031681526020018c151581526020018b151581526020018a815250610e71565b9050891561098757805161097190611046565b92506109808160200151610c1a565b91506109a4565b805161099290610c1a565b92506109a18160200151611046565b91505b5060006109b68f8d858560008c6106dc565b929f919e50919c509a5050505050505050505050565b60006109d984848461105a565b90505b9392505050565b82546000906109d990836109fd604087016020880161202c565b611087565b600080610a0f83866110ca565b90506000610a1d82866110ca565b90506000610a2b83836110df565b9050610a41610a3984610c1a565b8b5490610d6f565b8a55610a57610a4f83610c1a565b8a5490610d0a565b8955610a6d610a6582610c1a565b895490610d0a565b90975550979650505050505050565b6000808213610a9c5760008212610a945760006108c2565b6000196108d0565b506001919050565b82546000906109d990836109fd602087018761202c565b600080836001600160a01b0316631363bdd3610ad6856108a7565b6040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610b0a57600080fd5b505afa158015610b1e573d6000803e3d6000fd5b505050506040513d6020811015610b3457600080fd5b5051905060008312610b4e57610b4981610c1a565b610b57565b610b5781611046565b9150505b92915050565b6000806000610b70868661113c565b9150915060008480610b7e57fe5b868809905082811115610b92576001820391505b918290039181610bb057848381610ba557fe5b0493505050506109dc565b848210610c04576040805162461bcd60e51b815260206004820152601a60248201527f46756c6c4d6174683a2046554c4c4449565f4f564552464c4f57000000000000604482015290519081900360640190fd5b610c0f838387611169565b979650505050505050565b60006001600160ff1b03821115610c625760405162461bcd60e51b81526004018080602001828103825260288152602001806123726028913960400191505060405180910390fd5b5090565b60008060008512610c775784610c80565b610c8085610dd4565b90506000808512610c915784610c9a565b610c9a85610dd4565b905060008087128015610cad5750600086135b80610cc35750600087138015610cc35750600086125b610cce576000610cd1565b60015b90506000610ce08484886111d9565b905081610cf557610cf081610c1a565b610cfe565b610cfe81611046565b98975050505050505050565b6000828201818312801590610d1f5750838112155b80610d345750600083128015610d3457508381125b6109dc5760405162461bcd60e51b81526004018080602001828103825260218152602001806123046021913960400191505060405180910390fd5b6000818303818312801590610d845750838113155b80610d995750600083128015610d9957508381135b6109dc5760405162461bcd60e51b815260040180806020018281038252602481526020018061239a6024913960400191505060405180910390fd5b6000600160ff1b8213610df95760405162461bcd60e51b8152600401610100906120e2565b5060000390565b600080821215610c62576040805162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f736974697665604482015290519081900360640190fd5b4282600101541015610e6d578082554260018301555b5050565b610e79611eab565b604080516002808252606082018352600092839291906020830190803683370190505090506060846080015115610f1357846020015182600081518110610ebc57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050846040015182600181518110610eee57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050610f78565b846040015182600081518110610f2557fe5b60200260200101906001600160a01b031690816001600160a01b031681525050846020015182600181518110610f5757fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b8460a0015115610fa457610f9d85600001518660c00151600185896060015142611288565b9050610fc3565b610fc085600001518660c001516000198589606001514261136c565b90505b84608001511561101457604051806040016040528082600081518110610fe557fe5b6020026020010151815260200182600181518110610fff57fe5b602002602001015181525093505050506108d3565b60405180604001604052808260018151811061102c57fe5b6020026020010151815260200182600081518110610fff57fe5b600061105182610c1a565b60000392915050565b600080600061106a8686866113d0565b9150915061107d81600160601b846111d9565b9695505050505050565b60008061109485846110ca565b905060006110a28683611497565b905060006110b087846110df565b9050858111158015610c0f57505090931115949350505050565b60006109dc838362ffffff16620f42406111d9565b600082821115611136576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000808060001984860990508385029250828103915082811015611161576001820391505b509250929050565b6000818103821680838161117957fe5b04925080858161118557fe5b04945080816000038161119457fe5b60028581038087028203028087028203028087028203028087028203028087028203028087028203029586029003909402930460010193909302939093010292915050565b600080806000198587098686029250828110908390030390508061120f576000841161120457600080fd5b5082900490506109dc565b80841161121b57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b606081428110156112ab5760405162461bcd60e51b8152600401610100906120b0565b6112b68888876114f1565b915085826001845103815181106112c957fe5b602002602001015110156112ef5760405162461bcd60e51b81526004016101009061217f565b611355856000815181106112ff57fe5b60200260200101518561133b8b8960008151811061131957fe5b60200260200101518a60018151811061132e57fe5b6020026020010151611635565b8560008151811061134857fe5b60200260200101516116f5565b61136188838787611851565b509695505050505050565b6060814281101561138f5760405162461bcd60e51b8152600401610100906120b0565b61139a8888876119c5565b915085826000815181106113aa57fe5b602002602001015111156112ef5760405162461bcd60e51b815260040161010090612138565b60008060006113df8585611afd565b5090506000806113f0888888611635565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561142857600080fd5b505afa15801561143c573d6000803e3d6000fd5b505050506040513d606081101561145257600080fd5b5080516020909101516001600160701b0391821693501690506001600160a01b0387811690841614611485578082611488565b81815b90999098509650505050505050565b6000828201838110156109dc576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b606060028251101561154a576040805162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a20494e56414c49445f504154480000604482015290519081900360640190fd5b815167ffffffffffffffff8111801561156257600080fd5b5060405190808252806020026020018201604052801561158c578160200160208202803683370190505b509050828160008151811061159d57fe5b60200260200101818152505060005b60018351038110156106d4576000806115ef878685815181106115cb57fe5b60200260200101518786600101815181106115e257fe5b60200260200101516113d0565b9150915061161184848151811061160257fe5b60200260200101518383611bdb565b84846001018151811061162057fe5b602090810291909101015250506001016115ac565b60008060006116448585611afd565b604080516bffffffffffffffffffffffff19606094851b811660208084019190915293851b81166034830152825160288184030181526048830184528051908501206001600160f81b031960688401529a90941b9093166069840152607d8301989098527f2e0018e0e4c091ec924c34a4bd44e84e31e4382cb803fe09673ed92d9bb530ea609d808401919091528851808403909101815260bd909201909752805196019590952095945050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b178152925182516000948594938a169392918291908083835b602083106117795780518252601f19909201916020918201910161175a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146117db576040519150601f19603f3d011682016040523d82523d6000602084013e6117e0565b606091505b509150915081801561180e57508051158061180e575080806020019051602081101561180b57600080fd5b50515b6118495760405162461bcd60e51b81526004018080602001828103825260318152602001806122d36031913960400191505060405180910390fd5b505050505050565b60005b60018351038110156119be5760008084838151811061186f57fe5b602002602001015185846001018151811061188657fe5b602002602001015191509150600061189e8383611afd565b50905060008785600101815181106118b257fe5b60200260200101519050600080836001600160a01b0316866001600160a01b0316146118e0578260006118e4565b6000835b91509150600060028a510388106118fb578861190f565b61190f8c878c8b6002018151811061132e57fe5b905061191c8c8888611635565b6001600160a01b031663022c0d9f84848460006040519080825280601f01601f191660200182016040528015611959576020820181803683370190505b506040518563ffffffff1660e01b81526004016119799493929190612224565b600060405180830381600087803b15801561199357600080fd5b505af11580156119a7573d6000803e3d6000fd5b505060019099019850611854975050505050505050565b5050505050565b6060600282511015611a1e576040805162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a20494e56414c49445f504154480000604482015290519081900360640190fd5b815167ffffffffffffffff81118015611a3657600080fd5b50604051908082528060200260200182016040528015611a60578160200160208202803683370190505b5090508281600183510381518110611a7457fe5b60209081029190910101528151600019015b80156106d457600080611ab687866001860381518110611aa257fe5b60200260200101518786815181106115e257fe5b91509150611ad8848481518110611ac957fe5b60200260200101518383611cb3565b846001850381518110611ae757fe5b6020908102919091010152505060001901611a86565b600080826001600160a01b0316846001600160a01b03161415611b515760405162461bcd60e51b81526004018080602001828103825260258152602001806123256025913960400191505060405180910390fd5b826001600160a01b0316846001600160a01b031610611b71578284611b74565b83835b90925090506001600160a01b038216611bd4576040805162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f414444524553530000604482015290519081900360640190fd5b9250929050565b6000808411611c1b5760405162461bcd60e51b815260040180806020018281038252602b8152602001806123be602b913960400191505060405180910390fd5b600083118015611c2b5750600082115b611c665760405162461bcd60e51b815260040180806020018281038252602881526020018061234a6028913960400191505060405180910390fd5b6000611c74856103e5611d81565b90506000611c828285611d81565b90506000611c9c83611c96886103e8611d81565b90611de4565b9050808281611ca757fe5b04979650505050505050565b6000808411611cf35760405162461bcd60e51b815260040180806020018281038252602c8152602001806122a7602c913960400191505060405180910390fd5b600083118015611d035750600082115b611d3e5760405162461bcd60e51b815260040180806020018281038252602881526020018061234a6028913960400191505060405180910390fd5b6000611d566103e8611d508688611d81565b90611d81565b90506000611d6a6103e5611d508689611e33565b905061107d6001828481611d7a57fe5b0490611de4565b6000811580611d9c57505080820282828281611d9957fe5b04145b610b5b576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015290519081900360640190fd5b80820182811015610b5b576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015290519081900360640190fd5b80820382811115610b5b576040805162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015290519081900360640190fd5b6040518060800160405280600081526020016000815260200160008152602001600081525090565b604051806040016040528060008152602001600081525090565b80356001600160a01b03811681146108d357600080fd5b803560ff811681146108d357600080fd5b600060208284031215611efe578081fd5b6109dc82611ec5565b600060208284031215611f18578081fd5b81356109dc81612295565b600060208284031215611f34578081fd5b81516109dc81612295565b60008060008060008060c08789031215611f57578182fd5b86359550611f6760208801611ec5565b9450604087013593506060870135925060808701359150611f8a60a08801611edc565b90509295509295509295565b60008060008060008587036101e0811215611faf578182fd5b86359550602087013594506040870135935060608701359250610160607f1982011215611fda578182fd5b506080860190509295509295909350565b6000806000838503610200811215612001578384fd5b84359350602085013592506101c0603f198201121561201e578182fd5b506040840190509250925092565b60006020828403121561203d578081fd5b813562ffffff811681146109dc578182fd5b600060208284031215612060578081fd5b5051919050565b600060208284031215612078578081fd5b6109dc82611edc565b805182526020810151602083015260408101516040830152606081015160608301525050565b90815260200190565b602080825260189082015277155b9a5cddd85c158c949bdd5d195c8e881156141254915160421b604082015260600190565b6020808252601c908201527f506572704d6174683a20696e76657273696f6e206f766572666c6f7700000000604082015260600190565b60208082526005908201526443485f544560d81b604082015260600190565b60208082526027908201527f556e69737761705632526f757465723a204558434553534956455f494e50555460408201526617d05353d5539560ca1b606082015260800190565b6020808252602b908201527f556e69737761705632526f757465723a20494e53554646494349454e545f4f5560408201526a1514155517d05353d5539560aa1b606082015260800190565b9384526001600160a01b0392831660208501529116604083015262ffffff16606082015260800190565b9283526001600160a01b0391909116602083015260ff16604082015260600190565b60808101610b5b8284612081565b60008582526020858184015260018060a01b0385166040840152608060608401528351806080850152825b8181101561226b5785810183015185820160a00152820161224f565b8181111561227c578360a083870101525b50601f01601f19169290920160a0019695505050505050565b80151581146122a357600080fd5b5056fe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e545472616e7366657248656c7065723a3a7472616e7366657246726f6d3a207472616e7366657246726f6d206661696c65645369676e6564536166654d6174683a206164646974696f6e206f766572666c6f77556e697377617056324c6962726172793a204944454e544943414c5f414444524553534553556e697377617056324c6962726172793a20494e53554646494349454e545f4c495155494449545953616665436173743a2076616c756520646f65736e27742066697420696e20616e20696e743235365369676e6564536166654d6174683a207375627472616374696f6e206f766572666c6f77556e697377617056324c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e54a2646970667358221220dfc2a2d5f3ee4849e18db81bb850139fe54ca47dd38e4d8e00fc1840f914a00d64736f6c63430007060033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c80639377114414610050578063967d86f01461008657806397ec6101146100a6575b600080fd5b81801561005c57600080fd5b5061007061006b366004611f96565b6100d3565b60405161007d9190612216565b60405180910390f35b81801561009257600080fd5b506100706100a1366004611feb565b6103d6565b8180156100b257600080fd5b506100c66100c1366004611f3f565b6106dc565b60405161007d91906120a7565b6100db611e83565b8160800135804211156101095760405162461bcd60e51b815260040161010090612119565b60405180910390fd5b73__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__63a67766f08861013460c0870160a08801611eed565b6101446040880160208901611eed565b61015661012089016101008a0161202c565b6040518563ffffffff1660e01b815260040161017594939291906121ca565b60206040518083038186803b15801561018d57600080fd5b505af41580156101a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c59190611f23565b156101cf57600080fd5b60008088816101e16020880188611eed565b6001600160a01b03166001600160a01b0316815260200190815260200160002090506000816000015413610216576000610219565b60015b91506102286020860186611eed565b6001600160a01b0316638195510561024383600001546108a7565b6040518263ffffffff1660e01b815260040161025f91906120a7565b60206040518083038186803b15801561027757600080fd5b505afa15801561028b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102af919061204f565b856040013511156102bf57600080fd5b50600080806103168b8a6102d960c08b0160a08c01611eed565b6102e660208c018c611eed565b6102f660408d0160208e01611eed565b898a8e604001358f6101400160208101906103119190612067565b6108d8565b91945092509050600061035461033260c08a0160a08b01611eed565b61033f60208b018b611eed565b61034f60408c0160208d01611eed565b6109cc565b90506103648a8960c001836109e3565b61036d57600080fd5b6103ab6002808e01908d018b61038b6101208d016101008e0161202c565b61039d6101408e016101208f0161202c565b6103a6896108a7565b610a02565b5060408051608081018252948552602085019390935291830152606082015298975050505050505050565b6103de611e83565b8160c00135804211156104035760405162461bcd60e51b815260040161010090612119565b73__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__63a67766f08661042f610100870160e08801611eed565b61043f6040880160208901611eed565b61045161018089016101608a0161202c565b6040518563ffffffff1660e01b815260040161047094939291906121ca565b60206040518083038186803b15801561048857600080fd5b505af415801561049c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c09190611f23565b156104ca57600080fd5b6000808061053a88886104e46101008a0160e08b01611eed565b6104f160208b018b611eed565b61050160408c0160208d01611eed565b61051160608d0160408e01611f07565b61052160808e0160608f01611f07565b8d608001358e6101a00160208101906103119190612067565b9194509250905061055361016087016101408801611f07565b6105a057600061056284610a7c565b6105948a600061057560208c018c611eed565b6001600160a01b03168152602081019190915260400160002054610a7c565b0213156105a057600080fd5b60006105d36105b6610100890160e08a01611eed565b6105c360208a018a611eed565b61034f60408b0160208c01611eed565b90506105e488886101000183610aa4565b6105ed57600080fd5b73__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__63b5f1ec8e8a6106196101008b0160e08c01611eed565b61062960408c0160208d01611eed565b61063b6101a08d016101808e0161202c565b6040518563ffffffff1660e01b815260040161065a94939291906121ca565b60206040518083038186803b15801561067257600080fd5b505af4158015610686573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106aa9190611f23565b6106b357600080fd5b60408051608081018252948552602085019390935291830152606082015291505b509392505050565b60006106e784610a7c565b6106f086610a7c565b02600019146106fe57600080fd5b600061070a8787610abb565b6001600160a01b038816600090815260208a90526040812091925061072e83610a7c565b825461073990610a7c565b0260001914156107e357670de0b6b3a7640000600061076d61075a866108a7565b8361076887600001546108a7565b610b61565b90508181116107ae57600061079061078483610c1a565b60018701549085610c66565b90506107a6896107a08c84610d0a565b90610d0a565b9350506107dc565b60006107bb8a8484610c66565b90506107d8896107a0838860010154610d0a90919063ffffffff16565b9350505b50506107e6565b50845b81546107f29084610d0a565b8255600182015461081590829061080f9089906107a0908c610d0a565b90610d6f565b600183015560028a01546108299082610d0a565b60028b015560405163ab49ea0560e01b815273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$",
  "libraries": {
    "AccountLibrary": "0xf485d7478cCeA7ff7FDbE78957E73216CADBaC60"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}