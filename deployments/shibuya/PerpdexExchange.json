{
  "address": "0xc5c784ACAcE2531744d7Ed7AFC9624A3ec803D28",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "settlementTokenArg",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivOverflow",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "ImRatioChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isMarketAllowed",
          "type": "bool"
        }
      ],
      "name": "IsMarketAllowedChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "LimitOrderCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isBid",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceX96",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "LimitOrderCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "rewardRatio",
          "type": "uint24"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "smoothEmaTime",
          "type": "uint16"
        }
      ],
      "name": "LiquidationRewardConfigChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cumBasePerLiquidityX96",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cumQuotePerLiquidityX96",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseBalancePerShareX96",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharePriceAfterX96",
          "type": "uint256"
        }
      ],
      "name": "LiquidityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "takerBase",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "takerQuote",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "realizedPnl",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseBalancePerShareX96",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharePriceAfterX96",
          "type": "uint256"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "value",
          "type": "uint8"
        }
      ],
      "name": "MaxMarketsPerAccountChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "MmRatioChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "base",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "quote",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "realizedPnl",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseBalancePerShareX96",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharePriceAfterX96",
          "type": "uint256"
        }
      ],
      "name": "PositionChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "base",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "quote",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "realizedPnl",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseBalancePerShareX96",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharePriceAfterX96",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidationPenalty",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidationReward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "insuranceFundReward",
          "type": "uint256"
        }
      ],
      "name": "PositionLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "ProtocolFeeRatioChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ProtocolFeeTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accountInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "collateralBalance",
              "type": "int256"
            }
          ],
          "internalType": "struct PerpdexStructs.VaultInfo",
          "name": "vaultInfo",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "market",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "base",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quote",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minQuote",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPerpdexExchange.AddLiquidityParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "market",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isBid",
              "type": "bool"
            },
            {
              "internalType": "uint40",
              "name": "orderId",
              "type": "uint40"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPerpdexExchange.CancelLimitOrderParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "cancelLimitOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "market",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isBid",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "base",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "priceX96",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPerpdexExchange.CreateLimitOrderParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createLimitOrder",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "orderId",
          "type": "uint40"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getAccountMarkets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "getMakerInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cumBaseSharePerLiquidityX96",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cumQuotePerLiquidityX96",
              "type": "uint256"
            }
          ],
          "internalType": "struct PerpdexStructs.MakerInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "getOpenPositionNotional",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "getOpenPositionShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "getPositionNotional",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "getPositionShare",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "getTakerInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "baseBalanceShare",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "quoteBalance",
              "type": "int256"
            }
          ],
          "internalType": "struct PerpdexStructs.TakerInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getTotalAccountValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "accountValue",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getTotalOpenPositionNotional",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getTotalPositionNotional",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "hasEnoughInitialMargin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "hasEnoughMaintenanceMargin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "imRatio",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "insuranceFundInfo",
      "outputs": [
        {
          "internalType": "int256",
          "name": "balance",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationRewardBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isMarketAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationRewardConfig",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "rewardRatio",
          "type": "uint24"
        },
        {
          "internalType": "uint16",
          "name": "smoothEmaTime",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMarketsPerAccount",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "market",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "caller",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isBaseToQuote",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isExactInput",
              "type": "bool"
            }
          ],
          "internalType": "struct IPerpdexExchange.MaxTradeParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "maxTrade",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mmRatio",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint40",
          "name": "",
          "type": "uint40"
        }
      ],
      "name": "orderIdToTrader",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "market",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "caller",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isBaseToQuote",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isExactInput",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "oppositeAmountBound",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPerpdexExchange.PreviewTradeParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "previewTrade",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "oppositeAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeRatio",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quoteDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "market",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minQuote",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPerpdexExchange.RemoveLiquidityParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "balance",
          "type": "int256"
        }
      ],
      "name": "setCollateralBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "setImRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setIsMarketAllowed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint24",
              "name": "rewardRatio",
              "type": "uint24"
            },
            {
              "internalType": "uint16",
              "name": "smoothEmaTime",
              "type": "uint16"
            }
          ],
          "internalType": "struct PerpdexStructs.LiquidationRewardConfig",
          "name": "value",
          "type": "tuple"
        }
      ],
      "name": "setLiquidationRewardConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "value",
          "type": "uint8"
        }
      ],
      "name": "setMaxMarketsPerAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "setMmRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "setProtocolFeeRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settlementToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "market",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isBaseToQuote",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isExactInput",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "oppositeAmountBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPerpdexExchange.TradeParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "trade",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "oppositeAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa24a0893b54c8cfd6bee90288e50ddeb9feb2860fb8f5f14aecca5ef452e060b",
  "receipt": {
    "to": null,
    "from": "0x4B78eCe4AA1be3495713199380635537C5fB2326",
    "contractAddress": "0xc5c784ACAcE2531744d7Ed7AFC9624A3ec803D28",
    "transactionIndex": 1,
    "gasUsed": "5383569",
    "logsBloom": "0x
    "blockHash": "0xa1480893977b204696877c9cc8b1183adbdff0a6536e9379d17facfc91c4ae39",
    "transactionHash": "0xa24a0893b54c8cfd6bee90288e50ddeb9feb2860fb8f5f14aecca5ef452e060b",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 2001167,
        "transactionHash": "0xa24a0893b54c8cfd6bee90288e50ddeb9feb2860fb8f5f14aecca5ef452e060b",
        "address": "0xc5c784ACAcE2531744d7Ed7AFC9624A3ec803D28",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004b78ece4aa1be3495713199380635537c5fb2326"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa1480893977b204696877c9cc8b1183adbdff0a6536e9379d17facfc91c4ae39"
      }
    ],
    "blockNumber": 2001167,
    "cumulativeGasUsed": "6145372",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000000"
  ],
  "numDeployments": 5,
  "solcInputHash": "8642eae312eb2b97d831fbc7e7d45b89",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"settlementTokenArg\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivOverflow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"ImRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isMarketAllowed\",\"type\":\"bool\"}],\"name\":\"IsMarketAllowedChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"LimitOrderCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceX96\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"LimitOrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"rewardRatio\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"smoothEmaTime\",\"type\":\"uint16\"}],\"name\":\"LiquidationRewardConfigChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cumBasePerLiquidityX96\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cumQuotePerLiquidityX96\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseBalancePerShareX96\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharePriceAfterX96\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"takerBase\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"takerQuote\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"realizedPnl\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseBalancePerShareX96\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharePriceAfterX96\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"value\",\"type\":\"uint8\"}],\"name\":\"MaxMarketsPerAccountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"MmRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"base\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"quote\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"realizedPnl\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseBalancePerShareX96\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharePriceAfterX96\",\"type\":\"uint256\"}],\"name\":\"PositionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"base\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"quote\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"realizedPnl\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseBalancePerShareX96\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharePriceAfterX96\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationPenalty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"insuranceFundReward\",\"type\":\"uint256\"}],\"name\":\"PositionLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"ProtocolFeeRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeeTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"collateralBalance\",\"type\":\"int256\"}],\"internalType\":\"struct PerpdexStructs.VaultInfo\",\"name\":\"vaultInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IPerpdexExchange.AddLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"internalType\":\"uint40\",\"name\":\"orderId\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IPerpdexExchange.CancelLimitOrderParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"cancelLimitOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceX96\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IPerpdexExchange.CreateLimitOrderParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createLimitOrder\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"orderId\",\"type\":\"uint40\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getAccountMarkets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getMakerInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumBaseSharePerLiquidityX96\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumQuotePerLiquidityX96\",\"type\":\"uint256\"}],\"internalType\":\"struct PerpdexStructs.MakerInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getOpenPositionNotional\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getOpenPositionShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getPositionNotional\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getPositionShare\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getTakerInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"baseBalanceShare\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quoteBalance\",\"type\":\"int256\"}],\"internalType\":\"struct PerpdexStructs.TakerInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getTotalAccountValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"accountValue\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getTotalOpenPositionNotional\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getTotalPositionNotional\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"hasEnoughInitialMargin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"hasEnoughMaintenanceMargin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"imRatio\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insuranceFundInfo\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"balance\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRewardBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMarketAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationRewardConfig\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"rewardRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"smoothEmaTime\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMarketsPerAccount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBaseToQuote\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isExactInput\",\"type\":\"bool\"}],\"internalType\":\"struct IPerpdexExchange.MaxTradeParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"maxTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mmRatio\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"name\":\"orderIdToTrader\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBaseToQuote\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isExactInput\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oppositeAmountBound\",\"type\":\"uint256\"}],\"internalType\":\"struct IPerpdexExchange.PreviewTradeParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"previewTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"oppositeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeRatio\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IPerpdexExchange.RemoveLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"balance\",\"type\":\"int256\"}],\"name\":\"setCollateralBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"setImRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setIsMarketAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint24\",\"name\":\"rewardRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"smoothEmaTime\",\"type\":\"uint16\"}],\"internalType\":\"struct PerpdexStructs.LiquidationRewardConfig\",\"name\":\"value\",\"type\":\"tuple\"}],\"name\":\"setLiquidationRewardConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"value\",\"type\":\"uint8\"}],\"name\":\"setMaxMarketsPerAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"setMmRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"setProtocolFeeRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settlementToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBaseToQuote\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isExactInput\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oppositeAmountBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IPerpdexExchange.TradeParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"trade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"oppositeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"PRBMath__MulDivOverflow(uint256,uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/DebugPerpdexExchange.sol\":\"DebugPerpdexExchange\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248) {\\n        require(value >= type(int248).min && value <= type(int248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return int248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240) {\\n        require(value >= type(int240).min && value <= type(int240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return int240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232) {\\n        require(value >= type(int232).min && value <= type(int232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return int232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224) {\\n        require(value >= type(int224).min && value <= type(int224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return int224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216) {\\n        require(value >= type(int216).min && value <= type(int216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return int216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208) {\\n        require(value >= type(int208).min && value <= type(int208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return int208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200) {\\n        require(value >= type(int200).min && value <= type(int200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return int200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192) {\\n        require(value >= type(int192).min && value <= type(int192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return int192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184) {\\n        require(value >= type(int184).min && value <= type(int184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return int184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176) {\\n        require(value >= type(int176).min && value <= type(int176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return int176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168) {\\n        require(value >= type(int168).min && value <= type(int168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return int168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160) {\\n        require(value >= type(int160).min && value <= type(int160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return int160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152) {\\n        require(value >= type(int152).min && value <= type(int152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return int152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144) {\\n        require(value >= type(int144).min && value <= type(int144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return int144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136) {\\n        require(value >= type(int136).min && value <= type(int136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return int136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120) {\\n        require(value >= type(int120).min && value <= type(int120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return int120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112) {\\n        require(value >= type(int112).min && value <= type(int112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return int112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104) {\\n        require(value >= type(int104).min && value <= type(int104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return int104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96) {\\n        require(value >= type(int96).min && value <= type(int96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return int96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88) {\\n        require(value >= type(int88).min && value <= type(int88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return int88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80) {\\n        require(value >= type(int80).min && value <= type(int80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return int80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72) {\\n        require(value >= type(int72).min && value <= type(int72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return int72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56) {\\n        require(value >= type(int56).min && value <= type(int56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return int56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48) {\\n        require(value >= type(int48).min && value <= type(int48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return int48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40) {\\n        require(value >= type(int40).min && value <= type(int40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return int40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24) {\\n        require(value >= type(int24).min && value <= type(int24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return int24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x02686c31ccb9ee77a299fa5f47327af5271f251a707a0e24f321957166ff0434\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        return a + b;\\n    }\\n}\\n\",\"keccak256\":\"0x62f53f262fabbbc6d8ab49488d8fce36370351aff2b8d3898d499d68995a71c2\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"contracts/PerpdexExchange.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { IPerpdexExchange } from \\\"./interfaces/IPerpdexExchange.sol\\\";\\nimport { IPerpdexMarketMinimum } from \\\"./interfaces/IPerpdexMarketMinimum.sol\\\";\\nimport { PerpdexStructs } from \\\"./lib/PerpdexStructs.sol\\\";\\nimport { AccountLibrary } from \\\"./lib/AccountLibrary.sol\\\";\\nimport { MakerLibrary } from \\\"./lib/MakerLibrary.sol\\\";\\nimport { MakerOrderBookLibrary } from \\\"./lib/MakerOrderBookLibrary.sol\\\";\\nimport { TakerLibrary } from \\\"./lib/TakerLibrary.sol\\\";\\nimport { VaultLibrary } from \\\"./lib/VaultLibrary.sol\\\";\\nimport { PerpMath } from \\\"./lib/PerpMath.sol\\\";\\n\\ncontract PerpdexExchange is IPerpdexExchange, ReentrancyGuard, Ownable {\\n    using Address for address;\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using SafeCast for uint256;\\n\\n    // states\\n    // trader\\n    mapping(address => PerpdexStructs.AccountInfo) public override accountInfos;\\n    PerpdexStructs.InsuranceFundInfo public override insuranceFundInfo;\\n    PerpdexStructs.ProtocolInfo public override protocolInfo;\\n    // market, isBid, orderId, trader\\n    mapping(address => mapping(bool => mapping(uint40 => address))) public orderIdToTrader;\\n\\n    // config\\n    address public immutable override settlementToken;\\n    uint8 public constant override quoteDecimals = 18;\\n    uint8 public override maxMarketsPerAccount = 16;\\n    uint24 public override imRatio = 10e4;\\n    uint24 public override mmRatio = 5e4;\\n    uint24 public override protocolFeeRatio = 0;\\n    PerpdexStructs.LiquidationRewardConfig public override liquidationRewardConfig =\\n        PerpdexStructs.LiquidationRewardConfig({ rewardRatio: 20e4, smoothEmaTime: 100 });\\n    mapping(address => bool) public override isMarketAllowed;\\n\\n    modifier checkDeadline(uint256 deadline) {\\n        _checkDeadline(deadline);\\n        _;\\n    }\\n\\n    modifier checkMarketAllowed(address market) {\\n        _checkMarketAllowed(market);\\n        _;\\n    }\\n\\n    constructor(address settlementTokenArg) {\\n        require(settlementTokenArg == address(0) || settlementTokenArg.isContract(), \\\"PE_C: token address invalid\\\");\\n\\n        settlementToken = settlementTokenArg;\\n    }\\n\\n    function deposit(uint256 amount) external payable override nonReentrant {\\n        address trader = _msgSender();\\n        _settleLimitOrders(trader);\\n\\n        if (settlementToken == address(0)) {\\n            require(amount == 0, \\\"PE_D: amount not zero\\\");\\n            VaultLibrary.depositEth(accountInfos[trader], msg.value);\\n            emit Deposited(trader, msg.value);\\n        } else {\\n            require(msg.value == 0, \\\"PE_D: msg.value not zero\\\");\\n            VaultLibrary.deposit(\\n                accountInfos[trader],\\n                VaultLibrary.DepositParams({ settlementToken: settlementToken, amount: amount, from: trader })\\n            );\\n            emit Deposited(trader, amount);\\n        }\\n    }\\n\\n    function withdraw(uint256 amount) external override nonReentrant {\\n        address payable trader = payable(_msgSender());\\n        _settleLimitOrders(trader);\\n\\n        VaultLibrary.withdraw(\\n            accountInfos[trader],\\n            VaultLibrary.WithdrawParams({\\n                settlementToken: settlementToken,\\n                amount: amount,\\n                to: trader,\\n                imRatio: imRatio\\n            })\\n        );\\n        emit Withdrawn(trader, amount);\\n    }\\n\\n    function transferProtocolFee(uint256 amount) external override onlyOwner nonReentrant {\\n        address trader = _msgSender();\\n        _settleLimitOrders(trader);\\n        VaultLibrary.transferProtocolFee(accountInfos[trader], protocolInfo, amount);\\n        emit ProtocolFeeTransferred(trader, amount);\\n    }\\n\\n    function trade(TradeParams calldata params)\\n        external\\n        override\\n        nonReentrant\\n        checkDeadline(params.deadline)\\n        checkMarketAllowed(params.market)\\n        returns (uint256 oppositeAmount)\\n    {\\n        _settleLimitOrders(params.trader);\\n        TakerLibrary.TradeResponse memory response = _doTrade(params);\\n\\n        if (response.rawResponse.partialKey != 0) {\\n            address partialTrader =\\n                orderIdToTrader[params.market][params.isBaseToQuote][response.rawResponse.partialKey];\\n            _settleLimitOrders(partialTrader);\\n            TakerLibrary.addToTakerBalance(\\n                accountInfos[partialTrader],\\n                params.market,\\n                params.isBaseToQuote\\n                    ? response.rawResponse.basePartial.toInt256()\\n                    : response.rawResponse.basePartial.neg256(),\\n                params.isBaseToQuote\\n                    ? response.rawResponse.quotePartial.neg256()\\n                    : response.rawResponse.quotePartial.toInt256(),\\n                0,\\n                maxMarketsPerAccount\\n            );\\n        }\\n\\n        uint256 baseBalancePerShareX96 = IPerpdexMarketMinimum(params.market).baseBalancePerShareX96();\\n        uint256 shareMarkPriceAfterX96 = IPerpdexMarketMinimum(params.market).getShareMarkPriceX96();\\n\\n        if (response.isLiquidation) {\\n            emit PositionLiquidated(\\n                params.trader,\\n                params.market,\\n                _msgSender(),\\n                response.base,\\n                response.quote,\\n                response.realizedPnl,\\n                response.protocolFee,\\n                baseBalancePerShareX96,\\n                shareMarkPriceAfterX96,\\n                response.liquidationPenalty,\\n                response.liquidationReward,\\n                response.insuranceFundReward\\n            );\\n        } else {\\n            emit PositionChanged(\\n                params.trader,\\n                params.market,\\n                response.base,\\n                response.quote,\\n                response.realizedPnl,\\n                response.protocolFee,\\n                baseBalancePerShareX96,\\n                shareMarkPriceAfterX96\\n            );\\n        }\\n\\n        oppositeAmount = params.isExactInput == params.isBaseToQuote ? response.quote.abs() : response.base.abs();\\n    }\\n\\n    function addLiquidity(AddLiquidityParams calldata params)\\n        external\\n        override\\n        nonReentrant\\n        checkDeadline(params.deadline)\\n        checkMarketAllowed(params.market)\\n        returns (\\n            uint256 base,\\n            uint256 quote,\\n            uint256 liquidity\\n        )\\n    {\\n        address trader = _msgSender();\\n        _settleLimitOrders(trader);\\n\\n        MakerLibrary.AddLiquidityResponse memory response =\\n            MakerLibrary.addLiquidity(\\n                accountInfos[trader],\\n                MakerLibrary.AddLiquidityParams({\\n                    market: params.market,\\n                    base: params.base,\\n                    quote: params.quote,\\n                    minBase: params.minBase,\\n                    minQuote: params.minQuote,\\n                    imRatio: imRatio,\\n                    maxMarketsPerAccount: maxMarketsPerAccount\\n                })\\n            );\\n\\n        uint256 baseBalancePerShareX96 = IPerpdexMarketMinimum(params.market).baseBalancePerShareX96();\\n        uint256 shareMarkPriceAfterX96 = IPerpdexMarketMinimum(params.market).getShareMarkPriceX96();\\n\\n        PerpdexStructs.MakerInfo storage makerInfo = accountInfos[trader].makerInfos[params.market];\\n        emit LiquidityAdded(\\n            trader,\\n            params.market,\\n            response.base,\\n            response.quote,\\n            response.liquidity,\\n            makerInfo.cumBaseSharePerLiquidityX96,\\n            makerInfo.cumQuotePerLiquidityX96,\\n            baseBalancePerShareX96,\\n            shareMarkPriceAfterX96\\n        );\\n\\n        return (response.base, response.quote, response.liquidity);\\n    }\\n\\n    function removeLiquidity(RemoveLiquidityParams calldata params)\\n        external\\n        override\\n        nonReentrant\\n        checkDeadline(params.deadline)\\n        checkMarketAllowed(params.market)\\n        returns (uint256 base, uint256 quote)\\n    {\\n        _settleLimitOrders(params.trader);\\n\\n        MakerLibrary.RemoveLiquidityResponse memory response =\\n            MakerLibrary.removeLiquidity(\\n                accountInfos[params.trader],\\n                MakerLibrary.RemoveLiquidityParams({\\n                    market: params.market,\\n                    liquidity: params.liquidity,\\n                    minBase: params.minBase,\\n                    minQuote: params.minQuote,\\n                    isSelf: params.trader == _msgSender(),\\n                    mmRatio: mmRatio,\\n                    maxMarketsPerAccount: maxMarketsPerAccount\\n                })\\n            );\\n\\n        uint256 baseBalancePerShareX96 = IPerpdexMarketMinimum(params.market).baseBalancePerShareX96();\\n        uint256 shareMarkPriceAfterX96 = IPerpdexMarketMinimum(params.market).getShareMarkPriceX96();\\n\\n        emit LiquidityRemoved(\\n            params.trader,\\n            params.market,\\n            response.isLiquidation ? _msgSender() : address(0),\\n            response.base,\\n            response.quote,\\n            params.liquidity,\\n            response.takerBase,\\n            response.takerQuote,\\n            response.realizedPnl,\\n            baseBalancePerShareX96,\\n            shareMarkPriceAfterX96\\n        );\\n\\n        return (response.base, response.quote);\\n    }\\n\\n    function createLimitOrder(CreateLimitOrderParams calldata params)\\n        external\\n        override\\n        nonReentrant\\n        checkDeadline(params.deadline)\\n        checkMarketAllowed(params.market)\\n        returns (uint40 orderId)\\n    {\\n        address trader = _msgSender();\\n        _settleLimitOrders(trader);\\n\\n        orderId = MakerOrderBookLibrary.createLimitOrder(\\n            accountInfos[trader],\\n            MakerOrderBookLibrary.CreateLimitOrderParams({\\n                market: params.market,\\n                isBid: params.isBid,\\n                base: params.base,\\n                priceX96: params.priceX96,\\n                imRatio: imRatio,\\n                maxMarketsPerAccount: maxMarketsPerAccount\\n            })\\n        );\\n        orderIdToTrader[params.market][params.isBid][orderId] = trader;\\n\\n        emit LimitOrderCreated(trader, params.market, params.isBid, params.base, params.priceX96, orderId);\\n    }\\n\\n    function cancelLimitOrder(CancelLimitOrderParams calldata params)\\n        external\\n        override\\n        nonReentrant\\n        checkDeadline(params.deadline)\\n        checkMarketAllowed(params.market)\\n    {\\n        address trader = orderIdToTrader[params.market][params.isBid][params.orderId];\\n        _settleLimitOrders(trader);\\n\\n        bool isLiquidation =\\n            MakerOrderBookLibrary.cancelLimitOrder(\\n                accountInfos[trader],\\n                MakerOrderBookLibrary.CancelLimitOrderParams({\\n                    market: params.market,\\n                    isBid: params.isBid,\\n                    orderId: params.orderId,\\n                    isSelf: trader == _msgSender(),\\n                    mmRatio: mmRatio,\\n                    maxMarketsPerAccount: maxMarketsPerAccount\\n                })\\n            );\\n\\n        emit LimitOrderCanceled(trader, params.market, isLiquidation ? _msgSender() : address(0), params.orderId);\\n    }\\n\\n    function _settleLimitOrders(address trader) private {\\n        MakerOrderBookLibrary.settleLimitOrdersAll(accountInfos[trader], maxMarketsPerAccount);\\n    }\\n\\n    function setMaxMarketsPerAccount(uint8 value) external override onlyOwner nonReentrant {\\n        maxMarketsPerAccount = value;\\n        emit MaxMarketsPerAccountChanged(value);\\n    }\\n\\n    function setImRatio(uint24 value) external override onlyOwner nonReentrant {\\n        require(value < 1e6, \\\"PE_SIR: too large\\\");\\n        require(value >= mmRatio, \\\"PE_SIR: smaller than mmRatio\\\");\\n        imRatio = value;\\n        emit ImRatioChanged(value);\\n    }\\n\\n    function setMmRatio(uint24 value) external override onlyOwner nonReentrant {\\n        require(value <= imRatio, \\\"PE_SMR: bigger than imRatio\\\");\\n        require(value > 0, \\\"PE_SMR: zero\\\");\\n        mmRatio = value;\\n        emit MmRatioChanged(value);\\n    }\\n\\n    function setLiquidationRewardConfig(PerpdexStructs.LiquidationRewardConfig calldata value)\\n        external\\n        override\\n        onlyOwner\\n        nonReentrant\\n    {\\n        require(value.rewardRatio < 1e6, \\\"PE_SLRC: too large reward ratio\\\");\\n        require(value.smoothEmaTime > 0, \\\"PE_SLRC: ema time is zero\\\");\\n        liquidationRewardConfig = value;\\n        emit LiquidationRewardConfigChanged(value.rewardRatio, value.smoothEmaTime);\\n    }\\n\\n    function setProtocolFeeRatio(uint24 value) external override onlyOwner nonReentrant {\\n        require(value <= 1e4, \\\"PE_SPFR: too large\\\");\\n        protocolFeeRatio = value;\\n        emit ProtocolFeeRatioChanged(value);\\n    }\\n\\n    function setIsMarketAllowed(address market, bool value) external override onlyOwner nonReentrant {\\n        require(market.isContract(), \\\"PE_SIMA: market address invalid\\\");\\n        if (value) {\\n            require(IPerpdexMarketMinimum(market).exchange() == address(this), \\\"PE_SIMA: different exchange\\\");\\n        }\\n        isMarketAllowed[market] = value;\\n        emit IsMarketAllowedChanged(market, value);\\n    }\\n\\n    // all raw information can be retrieved through getters (including default getters)\\n\\n    function getTakerInfo(address trader, address market)\\n        external\\n        view\\n        override\\n        returns (PerpdexStructs.TakerInfo memory)\\n    {\\n        return accountInfos[trader].takerInfos[market];\\n    }\\n\\n    function getMakerInfo(address trader, address market)\\n        external\\n        view\\n        override\\n        returns (PerpdexStructs.MakerInfo memory)\\n    {\\n        return accountInfos[trader].makerInfos[market];\\n    }\\n\\n    function getAccountMarkets(address trader) external view override returns (address[] memory) {\\n        return accountInfos[trader].markets;\\n    }\\n\\n    // dry run\\n\\n    function previewTrade(PreviewTradeParams calldata params)\\n        external\\n        view\\n        override\\n        checkMarketAllowed(params.market)\\n        returns (uint256 oppositeAmount)\\n    {\\n        address trader = params.trader;\\n        address caller = params.caller;\\n\\n        return\\n            TakerLibrary.previewTrade(\\n                accountInfos[trader],\\n                TakerLibrary.PreviewTradeParams({\\n                    market: params.market,\\n                    isBaseToQuote: params.isBaseToQuote,\\n                    isExactInput: params.isExactInput,\\n                    amount: params.amount,\\n                    oppositeAmountBound: params.oppositeAmountBound,\\n                    mmRatio: mmRatio,\\n                    protocolFeeRatio: protocolFeeRatio,\\n                    isSelf: trader == caller\\n                })\\n            );\\n    }\\n\\n    function maxTrade(MaxTradeParams calldata params) external view override returns (uint256 amount) {\\n        if (!isMarketAllowed[params.market]) return 0;\\n\\n        address trader = params.trader;\\n        address caller = params.caller;\\n\\n        return\\n            TakerLibrary.maxTrade({\\n                accountInfo: accountInfos[trader],\\n                market: params.market,\\n                isBaseToQuote: params.isBaseToQuote,\\n                isExactInput: params.isExactInput,\\n                mmRatio: mmRatio,\\n                protocolFeeRatio: protocolFeeRatio,\\n                isSelf: trader == caller\\n            });\\n    }\\n\\n    // convenient getters\\n\\n    function getTotalAccountValue(address trader) external view override returns (int256 accountValue) {\\n        (accountValue, ) = AccountLibrary.getTotalAccountValue(accountInfos[trader]);\\n    }\\n\\n    function getPositionShare(address trader, address market) external view override returns (int256) {\\n        return AccountLibrary.getPositionShare(accountInfos[trader], market);\\n    }\\n\\n    function getPositionNotional(address trader, address market) external view override returns (int256) {\\n        return AccountLibrary.getPositionNotional(accountInfos[trader], market);\\n    }\\n\\n    function getTotalPositionNotional(address trader) external view override returns (uint256) {\\n        return AccountLibrary.getTotalPositionNotional(accountInfos[trader]);\\n    }\\n\\n    function getOpenPositionShare(address trader, address market) external view override returns (uint256) {\\n        return AccountLibrary.getOpenPositionShare(accountInfos[trader], market);\\n    }\\n\\n    function getOpenPositionNotional(address trader, address market) external view override returns (uint256) {\\n        return AccountLibrary.getOpenPositionNotional(accountInfos[trader], market);\\n    }\\n\\n    function getTotalOpenPositionNotional(address trader) external view override returns (uint256) {\\n        return AccountLibrary.getTotalOpenPositionNotional(accountInfos[trader]);\\n    }\\n\\n    function hasEnoughMaintenanceMargin(address trader) external view override returns (bool) {\\n        return AccountLibrary.hasEnoughMaintenanceMargin(accountInfos[trader], mmRatio);\\n    }\\n\\n    function hasEnoughInitialMargin(address trader) external view override returns (bool) {\\n        return AccountLibrary.hasEnoughInitialMargin(accountInfos[trader], imRatio);\\n    }\\n\\n    // for avoiding stack too deep error\\n    function _doTrade(TradeParams calldata params) private returns (TakerLibrary.TradeResponse memory) {\\n        return\\n            TakerLibrary.trade(\\n                accountInfos[params.trader],\\n                accountInfos[_msgSender()].vaultInfo,\\n                insuranceFundInfo,\\n                protocolInfo,\\n                TakerLibrary.TradeParams({\\n                    market: params.market,\\n                    isBaseToQuote: params.isBaseToQuote,\\n                    isExactInput: params.isExactInput,\\n                    amount: params.amount,\\n                    oppositeAmountBound: params.oppositeAmountBound,\\n                    mmRatio: mmRatio,\\n                    imRatio: imRatio,\\n                    maxMarketsPerAccount: maxMarketsPerAccount,\\n                    protocolFeeRatio: protocolFeeRatio,\\n                    liquidationRewardConfig: liquidationRewardConfig,\\n                    isSelf: params.trader == _msgSender()\\n                })\\n            );\\n    }\\n\\n    // to reduce contract size\\n    function _checkDeadline(uint256 deadline) private view {\\n        require(block.timestamp <= deadline, \\\"PE_CD: too late\\\");\\n    }\\n\\n    // to reduce contract size\\n    function _checkMarketAllowed(address market) private view {\\n        require(isMarketAllowed[market], \\\"PE_CMA: market not allowed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xfb63dd6f4213683fb4d07405ca53f5fb24cc493981d10c2a5c2ce2669e5a3457\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.7.6;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x0ded61799fbba3a2364d09ceee767ec9f1df2b474afa560ff032f34916aee6cb\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IPerpdexExchange.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { PerpdexStructs } from \\\"../lib/PerpdexStructs.sol\\\";\\n\\ninterface IPerpdexExchange {\\n    struct AddLiquidityParams {\\n        address market;\\n        uint256 base;\\n        uint256 quote;\\n        uint256 minBase;\\n        uint256 minQuote;\\n        uint256 deadline;\\n    }\\n\\n    struct RemoveLiquidityParams {\\n        address trader;\\n        address market;\\n        uint256 liquidity;\\n        uint256 minBase;\\n        uint256 minQuote;\\n        uint256 deadline;\\n    }\\n\\n    struct TradeParams {\\n        address trader;\\n        address market;\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n        uint256 amount;\\n        uint256 oppositeAmountBound;\\n        uint256 deadline;\\n    }\\n\\n    struct PreviewTradeParams {\\n        address trader;\\n        address market;\\n        address caller;\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n        uint256 amount;\\n        uint256 oppositeAmountBound;\\n    }\\n\\n    struct MaxTradeParams {\\n        address trader;\\n        address market;\\n        address caller;\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n    }\\n\\n    struct CreateLimitOrderParams {\\n        address market;\\n        bool isBid;\\n        uint256 base;\\n        uint256 priceX96;\\n        uint256 deadline;\\n    }\\n\\n    struct CancelLimitOrderParams {\\n        address market;\\n        bool isBid;\\n        uint40 orderId;\\n        uint256 deadline;\\n    }\\n\\n    event Deposited(address indexed trader, uint256 amount);\\n    event Withdrawn(address indexed trader, uint256 amount);\\n    event ProtocolFeeTransferred(address indexed trader, uint256 amount);\\n\\n    event LiquidityAdded(\\n        address indexed trader,\\n        address indexed market,\\n        uint256 base,\\n        uint256 quote,\\n        uint256 liquidity,\\n        uint256 cumBasePerLiquidityX96,\\n        uint256 cumQuotePerLiquidityX96,\\n        uint256 baseBalancePerShareX96,\\n        uint256 sharePriceAfterX96\\n    );\\n\\n    event LiquidityRemoved(\\n        address indexed trader,\\n        address indexed market,\\n        address liquidator,\\n        uint256 base,\\n        uint256 quote,\\n        uint256 liquidity,\\n        int256 takerBase,\\n        int256 takerQuote,\\n        int256 realizedPnl,\\n        uint256 baseBalancePerShareX96,\\n        uint256 sharePriceAfterX96\\n    );\\n\\n    event PositionLiquidated(\\n        address indexed trader,\\n        address indexed market,\\n        address indexed liquidator,\\n        int256 base,\\n        int256 quote,\\n        int256 realizedPnl,\\n        uint256 protocolFee,\\n        uint256 baseBalancePerShareX96,\\n        uint256 sharePriceAfterX96,\\n        uint256 liquidationPenalty,\\n        uint256 liquidationReward,\\n        uint256 insuranceFundReward\\n    );\\n\\n    event PositionChanged(\\n        address indexed trader,\\n        address indexed market,\\n        int256 base,\\n        int256 quote,\\n        int256 realizedPnl,\\n        uint256 protocolFee,\\n        uint256 baseBalancePerShareX96,\\n        uint256 sharePriceAfterX96\\n    );\\n\\n    event LimitOrderCreated(\\n        address indexed trader,\\n        address indexed market,\\n        bool isBid,\\n        uint256 base,\\n        uint256 priceX96,\\n        uint256 orderId\\n    );\\n\\n    event LimitOrderCanceled(\\n        address indexed trader,\\n        address indexed market,\\n        address indexed liquidator,\\n        uint256 orderId\\n    );\\n\\n    event MaxMarketsPerAccountChanged(uint8 value);\\n    event ImRatioChanged(uint24 value);\\n    event MmRatioChanged(uint24 value);\\n    event LiquidationRewardConfigChanged(uint24 rewardRatio, uint16 smoothEmaTime);\\n    event ProtocolFeeRatioChanged(uint24 value);\\n    event IsMarketAllowedChanged(address indexed market, bool isMarketAllowed);\\n\\n    function deposit(uint256 amount) external payable;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function transferProtocolFee(uint256 amount) external;\\n\\n    function addLiquidity(AddLiquidityParams calldata params)\\n        external\\n        returns (\\n            uint256 base,\\n            uint256 quote,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(RemoveLiquidityParams calldata params) external returns (uint256 base, uint256 quote);\\n\\n    function createLimitOrder(CreateLimitOrderParams calldata params) external returns (uint40 orderId);\\n\\n    function cancelLimitOrder(CancelLimitOrderParams calldata params) external;\\n\\n    function trade(TradeParams calldata params) external returns (uint256 oppositeAmount);\\n\\n    // setters\\n\\n    function setMaxMarketsPerAccount(uint8 value) external;\\n\\n    function setImRatio(uint24 value) external;\\n\\n    function setMmRatio(uint24 value) external;\\n\\n    function setLiquidationRewardConfig(PerpdexStructs.LiquidationRewardConfig calldata value) external;\\n\\n    function setProtocolFeeRatio(uint24 value) external;\\n\\n    function setIsMarketAllowed(address market, bool value) external;\\n\\n    // dry run getters\\n\\n    function previewTrade(PreviewTradeParams calldata params) external view returns (uint256 oppositeAmount);\\n\\n    function maxTrade(MaxTradeParams calldata params) external view returns (uint256 amount);\\n\\n    // default getters\\n\\n    function accountInfos(address trader) external view returns (PerpdexStructs.VaultInfo memory);\\n\\n    function insuranceFundInfo() external view returns (int256 balance, uint256 liquidationRewardBalance);\\n\\n    function protocolInfo() external view returns (uint256 protocolFee);\\n\\n    function settlementToken() external view returns (address);\\n\\n    function quoteDecimals() external view returns (uint8);\\n\\n    function maxMarketsPerAccount() external view returns (uint8);\\n\\n    function imRatio() external view returns (uint24);\\n\\n    function mmRatio() external view returns (uint24);\\n\\n    function liquidationRewardConfig() external view returns (uint24 rewardRatio, uint16 smoothEmaTime);\\n\\n    function protocolFeeRatio() external view returns (uint24);\\n\\n    function isMarketAllowed(address market) external view returns (bool);\\n\\n    // getters not covered by default getters\\n\\n    function getTakerInfo(address trader, address market) external view returns (PerpdexStructs.TakerInfo memory);\\n\\n    function getMakerInfo(address trader, address market) external view returns (PerpdexStructs.MakerInfo memory);\\n\\n    function getAccountMarkets(address trader) external view returns (address[] memory);\\n\\n    // convenient getters\\n\\n    function getTotalAccountValue(address trader) external view returns (int256);\\n\\n    function getPositionShare(address trader, address market) external view returns (int256);\\n\\n    function getPositionNotional(address trader, address market) external view returns (int256);\\n\\n    function getTotalPositionNotional(address trader) external view returns (uint256);\\n\\n    function getOpenPositionShare(address trader, address market) external view returns (uint256);\\n\\n    function getOpenPositionNotional(address trader, address market) external view returns (uint256);\\n\\n    function getTotalOpenPositionNotional(address trader) external view returns (uint256);\\n\\n    function hasEnoughMaintenanceMargin(address trader) external view returns (bool);\\n\\n    function hasEnoughInitialMargin(address trader) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2312b50f522c8c2e1646ec13c76534e3684f1c3ae1c9178a32c8697305523a15\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IPerpdexMarketMinimum.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\ninterface IPerpdexMarketMinimum {\\n    struct SwapResponse {\\n        uint256 oppositeAmount;\\n        uint256 basePartial;\\n        uint256 quotePartial;\\n        uint40 partialKey;\\n    }\\n\\n    function swap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        bool isLiquidation\\n    ) external returns (SwapResponse memory response);\\n\\n    function addLiquidity(uint256 baseShare, uint256 quoteBalance)\\n        external\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function removeLiquidity(uint256 liquidity) external returns (uint256 baseShare, uint256 quoteBalance);\\n\\n    function createLimitOrder(\\n        bool isBid,\\n        uint256 baseShare,\\n        uint256 priceX96\\n    ) external returns (uint40 orderId);\\n\\n    function cancelLimitOrder(bool isBid, uint40 orderId) external;\\n\\n    // getters\\n\\n    function previewSwap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        bool isLiquidation\\n    ) external view returns (uint256);\\n\\n    function maxSwap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        bool isLiquidation\\n    ) external view returns (uint256 amount);\\n\\n    function exchange() external view returns (address);\\n\\n    function getShareMarkPriceX96() external view returns (uint256);\\n\\n    function getLiquidityValue(uint256 liquidity) external view returns (uint256 baseShare, uint256 quoteBalance);\\n\\n    function getLiquidityDeleveraged(\\n        uint256 liquidity,\\n        uint256 cumBasePerLiquidityX96,\\n        uint256 cumQuotePerLiquidityX96\\n    ) external view returns (int256, int256);\\n\\n    function getCumDeleveragedPerLiquidityX96() external view returns (uint256, uint256);\\n\\n    function baseBalancePerShareX96() external view returns (uint256);\\n\\n    function getLimitOrderExecution(bool isBid, uint40 orderId)\\n        external\\n        view\\n        returns (\\n            uint256 executionId,\\n            uint256 executedBase,\\n            uint256 executedQuote\\n        );\\n}\\n\",\"keccak256\":\"0x27e848c26e6973457d945eea3bb2050dec81ae26644f07c6ed93eae8b8b2a27c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/AccountLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\n\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\nimport { PRBMath } from \\\"prb-math/contracts/PRBMath.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { IPerpdexMarketMinimum } from \\\"../interfaces/IPerpdexMarketMinimum.sol\\\";\\nimport { PerpdexStructs } from \\\"./PerpdexStructs.sol\\\";\\nimport { AccountPreviewLibrary } from \\\"./AccountPreviewLibrary.sol\\\";\\n\\n// https://help.ftx.com/hc/en-us/articles/360024780511-Complete-Futures-Specs\\nlibrary AccountLibrary {\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    function updateMarkets(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address market,\\n        uint8 maxMarketsPerAccount\\n    ) public {\\n        bool enabled =\\n            accountInfo.takerInfos[market].baseBalanceShare != 0 ||\\n                accountInfo.makerInfos[market].liquidity != 0 ||\\n                accountInfo.limitOrderInfos[market].ask.root != 0 ||\\n                accountInfo.limitOrderInfos[market].bid.root != 0;\\n        address[] storage markets = accountInfo.markets;\\n        uint256 length = markets.length;\\n\\n        for (uint256 i = 0; i < length; ++i) {\\n            if (markets[i] == market) {\\n                if (!enabled) {\\n                    markets[i] = markets[length - 1];\\n                    markets.pop();\\n                }\\n                return;\\n            }\\n        }\\n\\n        if (!enabled) return;\\n\\n        require(length + 1 <= maxMarketsPerAccount, \\\"AL_UP: too many markets\\\");\\n        markets.push(market);\\n    }\\n\\n    function getTotalAccountValue(PerpdexStructs.AccountInfo storage accountInfo)\\n        public\\n        view\\n        returns (int256 accountValue, int256 collateralBalance)\\n    {\\n        address[] storage markets = accountInfo.markets;\\n        collateralBalance = accountInfo.vaultInfo.collateralBalance;\\n        uint256 length = markets.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            address market = markets[i];\\n\\n            PerpdexStructs.MakerInfo storage makerInfo = accountInfo.makerInfos[market];\\n\\n            (PerpdexStructs.TakerInfo memory takerInfo, int256 realizedPnl) =\\n                AccountPreviewLibrary.previewSettleLimitOrders(accountInfo, market);\\n            int256 baseShare = takerInfo.baseBalanceShare;\\n            int256 quoteBalance = takerInfo.quoteBalance;\\n            collateralBalance = collateralBalance.add(realizedPnl);\\n\\n            if (makerInfo.liquidity != 0) {\\n                (uint256 poolBaseShare, uint256 poolQuoteBalance) =\\n                    IPerpdexMarketMinimum(market).getLiquidityValue(makerInfo.liquidity);\\n                (int256 deleveragedBaseShare, int256 deleveragedQuoteBalance) =\\n                    IPerpdexMarketMinimum(market).getLiquidityDeleveraged(\\n                        makerInfo.liquidity,\\n                        makerInfo.cumBaseSharePerLiquidityX96,\\n                        makerInfo.cumQuotePerLiquidityX96\\n                    );\\n                baseShare = baseShare.add(poolBaseShare.toInt256()).add(deleveragedBaseShare);\\n                quoteBalance = quoteBalance.add(poolQuoteBalance.toInt256()).add(deleveragedQuoteBalance);\\n            }\\n\\n            if (baseShare != 0) {\\n                uint256 sharePriceX96 = IPerpdexMarketMinimum(market).getShareMarkPriceX96();\\n                accountValue = accountValue.add(baseShare.mulDiv(sharePriceX96.toInt256(), FixedPoint96.Q96));\\n            }\\n            accountValue = accountValue.add(quoteBalance);\\n        }\\n        accountValue = accountValue.add(collateralBalance);\\n    }\\n\\n    function getPositionShare(PerpdexStructs.AccountInfo storage accountInfo, address market)\\n        public\\n        view\\n        returns (int256 baseShare)\\n    {\\n        PerpdexStructs.MakerInfo storage makerInfo = accountInfo.makerInfos[market];\\n        (PerpdexStructs.TakerInfo memory takerInfo, ) =\\n            AccountPreviewLibrary.previewSettleLimitOrders(accountInfo, market);\\n        baseShare = takerInfo.baseBalanceShare;\\n\\n        if (makerInfo.liquidity != 0) {\\n            (uint256 poolBaseShare, ) = IPerpdexMarketMinimum(market).getLiquidityValue(makerInfo.liquidity);\\n            (int256 deleveragedBaseShare, ) =\\n                IPerpdexMarketMinimum(market).getLiquidityDeleveraged(\\n                    makerInfo.liquidity,\\n                    makerInfo.cumBaseSharePerLiquidityX96,\\n                    makerInfo.cumQuotePerLiquidityX96\\n                );\\n            baseShare = baseShare.add(poolBaseShare.toInt256()).add(deleveragedBaseShare);\\n        }\\n    }\\n\\n    function getPositionNotional(PerpdexStructs.AccountInfo storage accountInfo, address market)\\n        public\\n        view\\n        returns (int256)\\n    {\\n        int256 positionShare = getPositionShare(accountInfo, market);\\n        if (positionShare == 0) return 0;\\n        uint256 sharePriceX96 = IPerpdexMarketMinimum(market).getShareMarkPriceX96();\\n        return positionShare.mulDiv(sharePriceX96.toInt256(), FixedPoint96.Q96);\\n    }\\n\\n    function getTotalPositionNotional(PerpdexStructs.AccountInfo storage accountInfo) public view returns (uint256) {\\n        address[] storage markets = accountInfo.markets;\\n        uint256 totalPositionNotional;\\n        uint256 length = markets.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            uint256 positionNotional = getPositionNotional(accountInfo, markets[i]).abs();\\n            totalPositionNotional = totalPositionNotional.add(positionNotional);\\n        }\\n        return totalPositionNotional;\\n    }\\n\\n    function getOpenPositionShare(PerpdexStructs.AccountInfo storage accountInfo, address market)\\n        public\\n        view\\n        returns (uint256 result)\\n    {\\n        PerpdexStructs.MakerInfo storage makerInfo = accountInfo.makerInfos[market];\\n        result = getPositionShare(accountInfo, market).abs();\\n        if (makerInfo.liquidity != 0) {\\n            (uint256 poolBaseShare, ) = IPerpdexMarketMinimum(market).getLiquidityValue(makerInfo.liquidity);\\n            result = result.add(poolBaseShare);\\n        }\\n    }\\n\\n    function getOpenPositionNotional(PerpdexStructs.AccountInfo storage accountInfo, address market)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 positionShare = getOpenPositionShare(accountInfo, market);\\n        if (positionShare == 0) return 0;\\n        uint256 sharePriceX96 = IPerpdexMarketMinimum(market).getShareMarkPriceX96();\\n        return PRBMath.mulDiv(positionShare, sharePriceX96, FixedPoint96.Q96);\\n    }\\n\\n    function getTotalOpenPositionNotional(PerpdexStructs.AccountInfo storage accountInfo)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        address[] storage markets = accountInfo.markets;\\n        uint256 totalOpenPositionNotional;\\n        uint256 length = markets.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            uint256 positionNotional = getOpenPositionNotional(accountInfo, markets[i]);\\n            totalOpenPositionNotional = totalOpenPositionNotional.add(positionNotional);\\n        }\\n        return totalOpenPositionNotional;\\n    }\\n\\n    // always true when hasEnoughMaintenanceMargin is true\\n    function hasEnoughMaintenanceMargin(PerpdexStructs.AccountInfo storage accountInfo, uint24 mmRatio)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        (int256 accountValue, ) = getTotalAccountValue(accountInfo);\\n        uint256 totalPositionNotional = getTotalPositionNotional(accountInfo);\\n        return accountValue >= totalPositionNotional.mulRatio(mmRatio).toInt256();\\n    }\\n\\n    function hasEnoughInitialMargin(PerpdexStructs.AccountInfo storage accountInfo, uint24 imRatio)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        (int256 accountValue, int256 collateralBalance) = getTotalAccountValue(accountInfo);\\n        uint256 totalOpenPositionNotional = getTotalOpenPositionNotional(accountInfo);\\n        return\\n            accountValue.min(collateralBalance) >= totalOpenPositionNotional.mulRatio(imRatio).toInt256() ||\\n            isLiquidationFree(accountInfo);\\n    }\\n\\n    function isLiquidationFree(PerpdexStructs.AccountInfo storage accountInfo) public view returns (bool) {\\n        address[] storage markets = accountInfo.markets;\\n        int256 quoteBalance = accountInfo.vaultInfo.collateralBalance;\\n        uint256 length = markets.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            address market = markets[i];\\n\\n            PerpdexStructs.MakerInfo storage makerInfo = accountInfo.makerInfos[market];\\n            (PerpdexStructs.TakerInfo memory takerInfo, int256 realizedPnl) =\\n                AccountPreviewLibrary.previewSettleLimitOrders(accountInfo, market);\\n\\n            int256 baseShare = takerInfo.baseBalanceShare;\\n            quoteBalance = quoteBalance.add(takerInfo.quoteBalance).add(realizedPnl);\\n\\n            if (makerInfo.liquidity != 0) {\\n                (int256 deleveragedBaseShare, int256 deleveragedQuoteBalance) =\\n                    IPerpdexMarketMinimum(market).getLiquidityDeleveraged(\\n                        makerInfo.liquidity,\\n                        makerInfo.cumBaseSharePerLiquidityX96,\\n                        makerInfo.cumQuotePerLiquidityX96\\n                    );\\n                baseShare = baseShare.add(deleveragedBaseShare);\\n                quoteBalance = quoteBalance.add(deleveragedQuoteBalance);\\n            }\\n\\n            if (baseShare < 0) return false;\\n        }\\n        return quoteBalance >= 0;\\n    }\\n}\\n\",\"keccak256\":\"0x1bd81a7c56860e945f44668eb2bc3ec69d30d0a811d30cef965855a906cdb2d7\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/AccountPreviewLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\nimport { PRBMath } from \\\"prb-math/contracts/PRBMath.sol\\\";\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { IPerpdexMarketMinimum } from \\\"../interfaces/IPerpdexMarketMinimum.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { PerpdexStructs } from \\\"./PerpdexStructs.sol\\\";\\nimport {\\n    BokkyPooBahsRedBlackTreeLibrary as RBTreeLibrary\\n} from \\\"../../deps/BokkyPooBahsRedBlackTreeLibrary/contracts/BokkyPooBahsRedBlackTreeLibrary.sol\\\";\\n\\n// This is a technical library to avoid circular references between libraries\\nlibrary AccountPreviewLibrary {\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n    using RBTreeLibrary for RBTreeLibrary.Tree;\\n\\n    function previewAddToTakerBalance(\\n        PerpdexStructs.TakerInfo memory takerInfo,\\n        int256 baseShare,\\n        int256 quoteBalance,\\n        int256 quoteFee\\n    ) internal view returns (PerpdexStructs.TakerInfo memory resultTakerInfo, int256 realizedPnl) {\\n        if (baseShare != 0 || quoteBalance != 0) {\\n            require(baseShare.sign() * quoteBalance.sign() == -1, \\\"TL_ATTB: invalid input\\\");\\n\\n            if (takerInfo.baseBalanceShare.sign() * baseShare.sign() == -1) {\\n                uint256 baseAbs = baseShare.abs();\\n                uint256 takerBaseAbs = takerInfo.baseBalanceShare.abs();\\n\\n                if (baseAbs <= takerBaseAbs) {\\n                    int256 reducedOpenNotional = takerInfo.quoteBalance.mulDiv(baseAbs.toInt256(), takerBaseAbs);\\n                    realizedPnl = quoteBalance.add(reducedOpenNotional);\\n                } else {\\n                    int256 closedPositionNotional = quoteBalance.mulDiv(takerBaseAbs.toInt256(), baseAbs);\\n                    realizedPnl = takerInfo.quoteBalance.add(closedPositionNotional);\\n                }\\n            }\\n        }\\n        realizedPnl = realizedPnl.add(quoteFee);\\n\\n        int256 newBaseBalanceShare = takerInfo.baseBalanceShare.add(baseShare);\\n        int256 newQuoteBalance = takerInfo.quoteBalance.add(quoteBalance).add(quoteFee).sub(realizedPnl);\\n        require(\\n            (newBaseBalanceShare == 0 && newQuoteBalance == 0) ||\\n                newBaseBalanceShare.sign() * newQuoteBalance.sign() == -1,\\n            \\\"TL_ATTB: never occur\\\"\\n        );\\n\\n        resultTakerInfo.baseBalanceShare = newBaseBalanceShare;\\n        resultTakerInfo.quoteBalance = newQuoteBalance;\\n    }\\n\\n    struct Execution {\\n        int256 executedBase;\\n        int256 executedQuote;\\n    }\\n\\n    function getLimitOrderExecutions(PerpdexStructs.AccountInfo storage accountInfo, address market)\\n        internal\\n        view\\n        returns (\\n            Execution[] memory executions,\\n            uint40 executedLastAskOrderId,\\n            uint40 executedLastBidOrderId\\n        )\\n    {\\n        PerpdexStructs.LimitOrderInfo storage limitOrderInfo = accountInfo.limitOrderInfos[market];\\n\\n        uint40 ask = limitOrderInfo.ask.first();\\n        uint40 bid = limitOrderInfo.bid.first();\\n        uint256 executionIdAsk;\\n        uint256 executedBaseAsk;\\n        uint256 executedQuoteAsk;\\n        uint256 executionIdBid;\\n        uint256 executedBaseBid;\\n        uint256 executedQuoteBid;\\n        if (ask != 0) {\\n            (executionIdAsk, executedBaseAsk, executedQuoteAsk) = IPerpdexMarketMinimum(market).getLimitOrderExecution(\\n                false,\\n                ask\\n            );\\n        }\\n        if (bid != 0) {\\n            (executionIdBid, executedBaseBid, executedQuoteBid) = IPerpdexMarketMinimum(market).getLimitOrderExecution(\\n                true,\\n                bid\\n            );\\n        }\\n\\n        // Combine the ask and bid and process from the one with the smallest executionId.\\n        // Ask and bid are already sorted and can be processed like merge sort.\\n        Execution[100] memory executions2; // TODO: max order count\\n        uint256 executionCount;\\n        while (ask != 0 || bid != 0) {\\n            if (ask != 0 && (bid == 0 || executionIdAsk < executionIdBid)) {\\n                executions2[executionCount] = Execution({\\n                    executedBase: executedBaseAsk.neg256(),\\n                    executedQuote: executedQuoteAsk.toInt256()\\n                });\\n                ++executionCount;\\n\\n                uint40 nextAsk = limitOrderInfo.ask.next(ask);\\n                if (nextAsk != 0) {\\n                    (executionIdAsk, executedBaseAsk, executedQuoteAsk) = IPerpdexMarketMinimum(market)\\n                        .getLimitOrderExecution(false, nextAsk);\\n                }\\n                if (executionIdAsk == 0 || nextAsk == 0) {\\n                    executedLastAskOrderId = ask;\\n                    ask = 0;\\n                } else {\\n                    ask = nextAsk;\\n                }\\n            } else {\\n                executions2[executionCount] = Execution({\\n                    executedBase: executedBaseBid.toInt256(),\\n                    executedQuote: executedQuoteBid.neg256()\\n                });\\n                ++executionCount;\\n\\n                uint40 nextBid = limitOrderInfo.bid.next(bid);\\n                if (nextBid != 0) {\\n                    (executionIdBid, executedBaseBid, executedQuoteBid) = IPerpdexMarketMinimum(market)\\n                        .getLimitOrderExecution(true, nextBid);\\n                }\\n                if (executionIdBid == 0 || nextBid == 0) {\\n                    executedLastBidOrderId = bid;\\n                    bid = 0;\\n                } else {\\n                    bid = nextBid;\\n                }\\n            }\\n        }\\n\\n        executions = new Execution[](executionCount);\\n        for (uint256 i = 0; i < executionCount; i++) {\\n            executions[i] = executions2[i];\\n        }\\n    }\\n\\n    function previewSettleLimitOrders(PerpdexStructs.AccountInfo storage accountInfo, address market)\\n        internal\\n        view\\n        returns (PerpdexStructs.TakerInfo memory takerInfo, int256 realizedPnl)\\n    {\\n        (Execution[] memory executions, , ) = getLimitOrderExecutions(accountInfo, market);\\n\\n        takerInfo = accountInfo.takerInfos[market];\\n\\n        uint256 length = executions.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            int256 realizedPnl2;\\n            (takerInfo, realizedPnl2) = previewAddToTakerBalance(\\n                takerInfo,\\n                executions[i].executedBase,\\n                executions[i].executedQuote,\\n                0\\n            );\\n            realizedPnl += realizedPnl2;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x778f7c530fc6d9da0135379ca4f531a80a0a32ac1ecae2cd357e6d0eedeff702\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { PRBMath } from \\\"prb-math/contracts/PRBMath.sol\\\";\\n\\nlibrary FullMath {\\n    // Credit to Uniswap Labs under MIT license\\n    // https://github.com/Uniswap/v3-core/blob/412d9b236a1e75a98568d49b1aeb21e3a1430544/contracts/libraries/FullMath.sol\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max, \\\"FM_MDRU: overflow\\\");\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5954a98eafb2c37da038321b50dcb5ee4f2930c400f70549291fc88ceb69cb56\",\"license\":\"MIT\"},\"contracts/lib/MakerLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { PRBMath } from \\\"prb-math/contracts/PRBMath.sol\\\";\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { IPerpdexMarketMinimum } from \\\"../interfaces/IPerpdexMarketMinimum.sol\\\";\\nimport { PerpdexStructs } from \\\"./PerpdexStructs.sol\\\";\\nimport { AccountLibrary } from \\\"./AccountLibrary.sol\\\";\\nimport { TakerLibrary } from \\\"./TakerLibrary.sol\\\";\\n\\nlibrary MakerLibrary {\\n    using PerpMath for int256;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    struct AddLiquidityParams {\\n        address market;\\n        uint256 base;\\n        uint256 quote;\\n        uint256 minBase;\\n        uint256 minQuote;\\n        uint24 imRatio;\\n        uint8 maxMarketsPerAccount;\\n    }\\n\\n    struct AddLiquidityResponse {\\n        uint256 base;\\n        uint256 quote;\\n        uint256 liquidity;\\n    }\\n\\n    struct RemoveLiquidityParams {\\n        address market;\\n        uint256 liquidity;\\n        uint256 minBase;\\n        uint256 minQuote;\\n        uint24 mmRatio;\\n        uint8 maxMarketsPerAccount;\\n        bool isSelf;\\n    }\\n\\n    struct RemoveLiquidityResponse {\\n        uint256 base;\\n        uint256 quote;\\n        int256 takerBase;\\n        int256 takerQuote;\\n        int256 realizedPnl;\\n        bool isLiquidation;\\n    }\\n\\n    function addLiquidity(PerpdexStructs.AccountInfo storage accountInfo, AddLiquidityParams memory params)\\n        internal\\n        returns (AddLiquidityResponse memory response)\\n    {\\n        PerpdexStructs.MakerInfo storage makerInfo = accountInfo.makerInfos[params.market];\\n\\n        // retrieve before addLiquidity\\n        (uint256 cumBasePerLiquidityX96, uint256 cumQuotePerLiquidityX96) =\\n            IPerpdexMarketMinimum(params.market).getCumDeleveragedPerLiquidityX96();\\n\\n        (response.base, response.quote, response.liquidity) = IPerpdexMarketMinimum(params.market).addLiquidity(\\n            params.base,\\n            params.quote\\n        );\\n\\n        require(response.base >= params.minBase, \\\"ML_AL: too small output base\\\");\\n        require(response.quote >= params.minQuote, \\\"ML_AL: too small output quote\\\");\\n\\n        uint256 liquidityBefore = makerInfo.liquidity;\\n        makerInfo.liquidity = liquidityBefore.add(response.liquidity);\\n        {\\n            makerInfo.cumBaseSharePerLiquidityX96 = blendCumPerLiquidity(\\n                liquidityBefore,\\n                response.liquidity,\\n                response.base,\\n                makerInfo.cumBaseSharePerLiquidityX96,\\n                cumBasePerLiquidityX96\\n            );\\n            makerInfo.cumQuotePerLiquidityX96 = blendCumPerLiquidity(\\n                liquidityBefore,\\n                response.liquidity,\\n                response.quote,\\n                makerInfo.cumQuotePerLiquidityX96,\\n                cumQuotePerLiquidityX96\\n            );\\n        }\\n\\n        AccountLibrary.updateMarkets(accountInfo, params.market, params.maxMarketsPerAccount);\\n\\n        require(AccountLibrary.hasEnoughInitialMargin(accountInfo, params.imRatio), \\\"ML_AL: not enough im\\\");\\n    }\\n\\n    // difficult to calculate without error\\n    // underestimate the value to maintain the liquidation free condition\\n    // the error will be a burden to the insurance fund\\n    // the error is much smaller than the gas fee, so it is impossible to attack\\n    function blendCumPerLiquidity(\\n        uint256 liquidityBefore,\\n        uint256 addedLiquidity,\\n        uint256 addedToken,\\n        uint256 cumBefore,\\n        uint256 cumAfter\\n    ) private pure returns (uint256) {\\n        uint256 liquidityAfter = liquidityBefore.add(addedLiquidity);\\n        cumAfter = cumAfter.add(PRBMath.mulDiv(addedToken, FixedPoint96.Q96, addedLiquidity));\\n\\n        return\\n            PRBMath.mulDiv(cumBefore, liquidityBefore, liquidityAfter).add(\\n                PRBMath.mulDiv(cumAfter, addedLiquidity, liquidityAfter)\\n            );\\n    }\\n\\n    function removeLiquidity(PerpdexStructs.AccountInfo storage accountInfo, RemoveLiquidityParams memory params)\\n        internal\\n        returns (RemoveLiquidityResponse memory response)\\n    {\\n        response.isLiquidation = !AccountLibrary.hasEnoughMaintenanceMargin(accountInfo, params.mmRatio);\\n\\n        if (!params.isSelf) {\\n            require(response.isLiquidation, \\\"ML_RL: enough mm\\\");\\n        }\\n\\n        uint256 shareMarkPriceBeforeX96;\\n        {\\n            PerpdexStructs.MakerInfo storage makerInfo = accountInfo.makerInfos[params.market];\\n            // retrieve before removeLiquidity\\n            (response.takerBase, response.takerQuote) = IPerpdexMarketMinimum(params.market).getLiquidityDeleveraged(\\n                params.liquidity,\\n                makerInfo.cumBaseSharePerLiquidityX96,\\n                makerInfo.cumQuotePerLiquidityX96\\n            );\\n\\n            shareMarkPriceBeforeX96 = IPerpdexMarketMinimum(params.market).getShareMarkPriceX96();\\n        }\\n\\n        {\\n            (response.base, response.quote) = IPerpdexMarketMinimum(params.market).removeLiquidity(params.liquidity);\\n\\n            require(response.base >= params.minBase, \\\"ML_RL: too small output base\\\");\\n            require(response.quote >= params.minQuote, \\\"ML_RL: too small output base\\\");\\n\\n            response.takerBase = response.takerBase.add(response.base.toInt256());\\n            response.takerQuote = response.takerQuote.add(response.quote.toInt256());\\n\\n            PerpdexStructs.MakerInfo storage makerInfo = accountInfo.makerInfos[params.market];\\n            makerInfo.liquidity = makerInfo.liquidity.sub(params.liquidity);\\n        }\\n\\n        {\\n            int256 takerQuoteCalculatedAtCurrentPrice =\\n                -response.takerBase.mulDiv(shareMarkPriceBeforeX96.toInt256(), FixedPoint96.Q96);\\n\\n            // AccountLibrary.updateMarkets called\\n            response.realizedPnl = TakerLibrary.addToTakerBalance(\\n                accountInfo,\\n                params.market,\\n                response.takerBase,\\n                takerQuoteCalculatedAtCurrentPrice,\\n                response.takerQuote.sub(takerQuoteCalculatedAtCurrentPrice),\\n                params.maxMarketsPerAccount\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4da206876c1f6fe6d34ccaa167cdd9d9728f652d65c17ce431ad0d6c91f3dfdc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/MakerOrderBookLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { PRBMath } from \\\"prb-math/contracts/PRBMath.sol\\\";\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { IPerpdexMarketMinimum } from \\\"../interfaces/IPerpdexMarketMinimum.sol\\\";\\nimport { PerpdexStructs } from \\\"./PerpdexStructs.sol\\\";\\nimport { AccountLibrary } from \\\"./AccountLibrary.sol\\\";\\nimport { AccountPreviewLibrary } from \\\"./AccountPreviewLibrary.sol\\\";\\nimport { TakerLibrary } from \\\"./TakerLibrary.sol\\\";\\nimport {\\n    BokkyPooBahsRedBlackTreeLibrary as RBTreeLibrary\\n} from \\\"../../deps/BokkyPooBahsRedBlackTreeLibrary/contracts/BokkyPooBahsRedBlackTreeLibrary.sol\\\";\\n\\nlibrary MakerOrderBookLibrary {\\n    using PerpMath for int256;\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n    using RBTreeLibrary for RBTreeLibrary.Tree;\\n\\n    struct CreateLimitOrderParams {\\n        address market;\\n        uint256 base;\\n        uint256 priceX96;\\n        bool isBid;\\n        uint24 imRatio;\\n        uint8 maxMarketsPerAccount;\\n    }\\n\\n    struct CancelLimitOrderParams {\\n        address market;\\n        uint40 orderId;\\n        bool isBid;\\n        uint24 mmRatio;\\n        bool isSelf;\\n        uint8 maxMarketsPerAccount;\\n    }\\n\\n    function createLimitOrder(PerpdexStructs.AccountInfo storage accountInfo, CreateLimitOrderParams memory params)\\n        public\\n        returns (uint40 orderId)\\n    {\\n        orderId = IPerpdexMarketMinimum(params.market).createLimitOrder(params.isBid, params.base, params.priceX96);\\n\\n        PerpdexStructs.LimitOrderInfo storage limitOrderInfo = accountInfo.limitOrderInfos[params.market];\\n        uint256 slot = getSlot(limitOrderInfo);\\n        if (params.isBid) {\\n            limitOrderInfo.bid.insert(orderId, makeUserData(params.priceX96), lessThanBid, aggregate, slot);\\n        } else {\\n            limitOrderInfo.ask.insert(orderId, makeUserData(params.priceX96), lessThanAsk, aggregate, slot);\\n        }\\n\\n        AccountLibrary.updateMarkets(accountInfo, params.market, params.maxMarketsPerAccount);\\n\\n        require(AccountLibrary.hasEnoughInitialMargin(accountInfo, params.imRatio), \\\"MOBL_CLO: not enough im\\\");\\n    }\\n\\n    function cancelLimitOrder(PerpdexStructs.AccountInfo storage accountInfo, CancelLimitOrderParams memory params)\\n        public\\n        returns (bool isLiquidation)\\n    {\\n        isLiquidation = !AccountLibrary.hasEnoughMaintenanceMargin(accountInfo, params.mmRatio);\\n\\n        if (!params.isSelf) {\\n            require(isLiquidation, \\\"MOBL_CLO: enough mm\\\");\\n        }\\n\\n        IPerpdexMarketMinimum(params.market).cancelLimitOrder(params.isBid, params.orderId);\\n\\n        PerpdexStructs.LimitOrderInfo storage limitOrderInfo = accountInfo.limitOrderInfos[params.market];\\n        if (params.isBid) {\\n            limitOrderInfo.bid.remove(params.orderId, aggregate, 0);\\n        } else {\\n            limitOrderInfo.ask.remove(params.orderId, aggregate, 0);\\n        }\\n\\n        AccountLibrary.updateMarkets(accountInfo, params.market, params.maxMarketsPerAccount);\\n    }\\n\\n    function makeUserData(uint256 priceX96) internal pure returns (uint128) {\\n        return priceX96.toUint128();\\n    }\\n\\n    function userDataToPriceX96(uint128 userData) internal pure returns (uint128) {\\n        return userData;\\n    }\\n\\n    function lessThan(\\n        RBTreeLibrary.Tree storage tree,\\n        bool isBid,\\n        uint40 key0,\\n        uint40 key1\\n    ) private view returns (bool) {\\n        uint128 price0 = userDataToPriceX96(tree.nodes[key0].userData);\\n        uint128 price1 = userDataToPriceX96(tree.nodes[key1].userData);\\n        if (price0 == price1) {\\n            return key0 < key1; // time priority\\n        }\\n        // price priority\\n        return isBid ? price0 > price1 : price0 < price1;\\n    }\\n\\n    function lessThanAsk(\\n        uint40 key0,\\n        uint40 key1,\\n        uint256 slot\\n    ) private view returns (bool) {\\n        PerpdexStructs.LimitOrderInfo storage info = getLimitOrderInfoFromSlot(slot);\\n        return lessThan(info.ask, false, key0, key1);\\n    }\\n\\n    function lessThanBid(\\n        uint40 key0,\\n        uint40 key1,\\n        uint256 slot\\n    ) private view returns (bool) {\\n        PerpdexStructs.LimitOrderInfo storage info = getLimitOrderInfoFromSlot(slot);\\n        return lessThan(info.bid, true, key0, key1);\\n    }\\n\\n    function aggregate(uint40 key, uint256 slot) private pure returns (bool) {\\n        return true;\\n    }\\n\\n    function subtreeRemoved(uint40 key, uint256 slot) private pure {}\\n\\n    function settleLimitOrdersAll(PerpdexStructs.AccountInfo storage accountInfo, uint8 maxMarketsPerAccount) public {\\n        address[] storage markets = accountInfo.markets;\\n        uint256 i = markets.length;\\n        while (i > 0) {\\n            --i;\\n            settleLimitOrders(accountInfo, markets[i], maxMarketsPerAccount);\\n        }\\n    }\\n\\n    function settleLimitOrders(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address market,\\n        uint8 maxMarketsPerAccount\\n    ) private {\\n        PerpdexStructs.LimitOrderInfo storage limitOrderInfo = accountInfo.limitOrderInfos[market];\\n        (\\n            AccountPreviewLibrary.Execution[] memory executions,\\n            uint40 executedLastAskOrderId,\\n            uint40 executedLastBidOrderId\\n        ) = AccountPreviewLibrary.getLimitOrderExecutions(accountInfo, market);\\n\\n        uint256 slot = getSlot(limitOrderInfo);\\n        if (executedLastAskOrderId != 0) {\\n            limitOrderInfo.ask.removeLeft(executedLastAskOrderId, lessThanAsk, aggregate, subtreeRemoved, slot);\\n        }\\n        if (executedLastBidOrderId != 0) {\\n            limitOrderInfo.bid.removeLeft(executedLastBidOrderId, lessThanBid, aggregate, subtreeRemoved, slot);\\n        }\\n\\n        uint256 length = executions.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            TakerLibrary.addToTakerBalance(\\n                accountInfo,\\n                market,\\n                executions[i].executedBase,\\n                executions[i].executedQuote,\\n                0,\\n                maxMarketsPerAccount\\n            );\\n        }\\n    }\\n\\n    function getSlot(PerpdexStructs.LimitOrderInfo storage d) private pure returns (uint256 slot) {\\n        assembly {\\n            slot := d.slot\\n        }\\n    }\\n\\n    function getLimitOrderInfoFromSlot(uint256 slot) private pure returns (PerpdexStructs.LimitOrderInfo storage d) {\\n        assembly {\\n            d.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc960ecf7b97822e604240c312bb50b5ef9bc34d15aa4d80b579a41a512f904b3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PerpMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { PRBMath } from \\\"prb-math/contracts/PRBMath.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\nimport { FullMath } from \\\"./FullMath.sol\\\";\\n\\nlibrary PerpMath {\\n    using SafeCast for int256;\\n    using SignedSafeMath for int256;\\n    using SafeMath for uint256;\\n\\n    function formatSqrtPriceX96ToPriceX96(uint160 sqrtPriceX96) internal pure returns (uint256) {\\n        return PRBMath.mulDiv(sqrtPriceX96, sqrtPriceX96, FixedPoint96.Q96);\\n    }\\n\\n    function formatX10_18ToX96(uint256 valueX10_18) internal pure returns (uint256) {\\n        return PRBMath.mulDiv(valueX10_18, FixedPoint96.Q96, 1 ether);\\n    }\\n\\n    function formatX96ToX10_18(uint256 valueX96) internal pure returns (uint256) {\\n        return PRBMath.mulDiv(valueX96, 1 ether, FixedPoint96.Q96);\\n    }\\n\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function abs(int256 value) internal pure returns (uint256) {\\n        return value >= 0 ? value.toUint256() : neg256(value).toUint256();\\n    }\\n\\n    function neg256(int256 a) internal pure returns (int256) {\\n        require(a > -2**255, \\\"PerpMath: inversion overflow\\\");\\n        return -a;\\n    }\\n\\n    function neg256(uint256 a) internal pure returns (int256) {\\n        return -SafeCast.toInt256(a);\\n    }\\n\\n    function divBy10_18(int256 value) internal pure returns (int256) {\\n        // no overflow here\\n        return value / (1 ether);\\n    }\\n\\n    function divBy10_18(uint256 value) internal pure returns (uint256) {\\n        // no overflow here\\n        return value / (1 ether);\\n    }\\n\\n    function subRatio(uint24 a, uint24 b) internal pure returns (uint24) {\\n        require(b <= a, \\\"PerpMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    function mulRatio(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return PRBMath.mulDiv(value, ratio, 1e6);\\n    }\\n\\n    function divRatio(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return PRBMath.mulDiv(value, 1e6, ratio);\\n    }\\n\\n    function divRatioRoundingUp(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return FullMath.mulDivRoundingUp(value, 1e6, ratio);\\n    }\\n\\n    /// @param denominator cannot be 0 and is checked in PRBMath.mulDiv()\\n    function mulDiv(\\n        int256 a,\\n        int256 b,\\n        uint256 denominator\\n    ) internal pure returns (int256 result) {\\n        uint256 unsignedA = a < 0 ? uint256(neg256(a)) : uint256(a);\\n        uint256 unsignedB = b < 0 ? uint256(neg256(b)) : uint256(b);\\n        bool negative = ((a < 0 && b > 0) || (a > 0 && b < 0)) ? true : false;\\n\\n        uint256 unsignedResult = PRBMath.mulDiv(unsignedA, unsignedB, denominator);\\n\\n        result = negative ? neg256(unsignedResult) : SafeCast.toInt256(unsignedResult);\\n\\n        return result;\\n    }\\n\\n    function sign(int256 value) internal pure returns (int256) {\\n        return value > 0 ? int256(1) : (value < 0 ? int256(-1) : int256(0));\\n    }\\n}\\n\",\"keccak256\":\"0x861b474b56120c73317b276c50f7633f0fa0f8ce6572f73c6f4ec397ec4814c2\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PerpdexStructs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\n\\nimport {\\n    BokkyPooBahsRedBlackTreeLibrary as RBTreeLibrary\\n} from \\\"../../deps/BokkyPooBahsRedBlackTreeLibrary/contracts/BokkyPooBahsRedBlackTreeLibrary.sol\\\";\\n\\nlibrary PerpdexStructs {\\n    struct TakerInfo {\\n        int256 baseBalanceShare;\\n        int256 quoteBalance;\\n    }\\n\\n    struct MakerInfo {\\n        uint256 liquidity;\\n        uint256 cumBaseSharePerLiquidityX96;\\n        uint256 cumQuotePerLiquidityX96;\\n    }\\n\\n    struct LimitOrderInfo {\\n        RBTreeLibrary.Tree ask;\\n        RBTreeLibrary.Tree bid;\\n    }\\n\\n    struct VaultInfo {\\n        int256 collateralBalance;\\n    }\\n\\n    struct AccountInfo {\\n        // market\\n        mapping(address => TakerInfo) takerInfos;\\n        // market\\n        mapping(address => MakerInfo) makerInfos;\\n        // market\\n        mapping(address => LimitOrderInfo) limitOrderInfos;\\n        VaultInfo vaultInfo;\\n        address[] markets;\\n    }\\n\\n    struct InsuranceFundInfo {\\n        int256 balance;\\n        uint256 liquidationRewardBalance;\\n    }\\n\\n    struct ProtocolInfo {\\n        uint256 protocolFee;\\n    }\\n\\n    struct LiquidationRewardConfig {\\n        uint24 rewardRatio;\\n        uint16 smoothEmaTime;\\n    }\\n}\\n\",\"keccak256\":\"0xfaa835485fdfdf2cf241003b86c3532bb0053116ff55628926c3cc4e9f114ace\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/TakerLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\nimport { PRBMath } from \\\"prb-math/contracts/PRBMath.sol\\\";\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { IPerpdexMarketMinimum } from \\\"../interfaces/IPerpdexMarketMinimum.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { PerpdexStructs } from \\\"./PerpdexStructs.sol\\\";\\nimport { AccountLibrary } from \\\"./AccountLibrary.sol\\\";\\nimport { AccountPreviewLibrary } from \\\"./AccountPreviewLibrary.sol\\\";\\n\\nlibrary TakerLibrary {\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    struct TradeParams {\\n        address market;\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n        uint256 amount;\\n        uint256 oppositeAmountBound;\\n        uint24 mmRatio;\\n        uint24 imRatio;\\n        uint8 maxMarketsPerAccount;\\n        uint24 protocolFeeRatio;\\n        bool isSelf;\\n        PerpdexStructs.LiquidationRewardConfig liquidationRewardConfig;\\n    }\\n\\n    struct PreviewTradeParams {\\n        address market;\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n        uint256 amount;\\n        uint256 oppositeAmountBound;\\n        uint24 mmRatio;\\n        uint24 protocolFeeRatio;\\n        bool isSelf;\\n    }\\n\\n    struct TradeResponse {\\n        int256 base;\\n        int256 quote;\\n        int256 realizedPnl;\\n        uint256 protocolFee;\\n        uint256 liquidationPenalty;\\n        uint256 liquidationReward;\\n        uint256 insuranceFundReward;\\n        bool isLiquidation;\\n        IPerpdexMarketMinimum.SwapResponse rawResponse;\\n    }\\n\\n    function trade(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        PerpdexStructs.VaultInfo storage liquidatorVaultInfo,\\n        PerpdexStructs.InsuranceFundInfo storage insuranceFundInfo,\\n        PerpdexStructs.ProtocolInfo storage protocolInfo,\\n        TradeParams memory params\\n    ) internal returns (TradeResponse memory response) {\\n        response.isLiquidation = !AccountLibrary.hasEnoughMaintenanceMargin(accountInfo, params.mmRatio);\\n\\n        if (!params.isSelf) {\\n            require(response.isLiquidation, \\\"TL_OP: enough mm\\\");\\n        }\\n\\n        if (response.isLiquidation) {\\n            require(accountInfo.makerInfos[params.market].liquidity == 0, \\\"TL_OP: no maker when liquidation\\\");\\n        }\\n\\n        int256 takerBaseBefore = accountInfo.takerInfos[params.market].baseBalanceShare;\\n\\n        (response.base, response.quote, response.realizedPnl, response.protocolFee, response.rawResponse) = _doSwap(\\n            accountInfo,\\n            protocolInfo,\\n            DoSwapParams({\\n                market: params.market,\\n                isBaseToQuote: params.isBaseToQuote,\\n                isExactInput: params.isExactInput,\\n                amount: params.amount,\\n                oppositeAmountBound: params.oppositeAmountBound,\\n                maxMarketsPerAccount: params.maxMarketsPerAccount,\\n                protocolFeeRatio: params.protocolFeeRatio,\\n                isLiquidation: response.isLiquidation\\n            })\\n        );\\n\\n        bool isOpen = (takerBaseBefore.add(response.base)).sign() * response.base.sign() > 0;\\n\\n        if (response.isLiquidation) {\\n            require(!isOpen, \\\"TL_OP: no open when liquidation\\\");\\n\\n            (\\n                response.liquidationPenalty,\\n                response.liquidationReward,\\n                response.insuranceFundReward\\n            ) = processLiquidationReward(\\n                accountInfo.vaultInfo,\\n                liquidatorVaultInfo,\\n                insuranceFundInfo,\\n                params.mmRatio,\\n                params.liquidationRewardConfig,\\n                response.quote.abs()\\n            );\\n        }\\n\\n        if (isOpen) {\\n            require(AccountLibrary.hasEnoughInitialMargin(accountInfo, params.imRatio), \\\"TL_OP: not enough im\\\");\\n        }\\n    }\\n\\n    function addToTakerBalance(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address market,\\n        int256 baseShare,\\n        int256 quoteBalance,\\n        int256 quoteFee,\\n        uint8 maxMarketsPerAccount\\n    ) internal returns (int256 realizedPnl) {\\n        (accountInfo.takerInfos[market], realizedPnl) = AccountPreviewLibrary.previewAddToTakerBalance(\\n            accountInfo.takerInfos[market],\\n            baseShare,\\n            quoteBalance,\\n            quoteFee\\n        );\\n\\n        accountInfo.vaultInfo.collateralBalance = accountInfo.vaultInfo.collateralBalance.add(realizedPnl);\\n\\n        AccountLibrary.updateMarkets(accountInfo, market, maxMarketsPerAccount);\\n    }\\n\\n    // Even if trade reverts, it may not revert.\\n    // Attempting to match reverts makes the implementation too complicated\\n    // ignore initial margin check and close only check when liquidation\\n    function previewTrade(PerpdexStructs.AccountInfo storage accountInfo, PreviewTradeParams memory params)\\n        internal\\n        view\\n        returns (uint256 oppositeAmount)\\n    {\\n        bool isLiquidation = !AccountLibrary.hasEnoughMaintenanceMargin(accountInfo, params.mmRatio);\\n\\n        if (!params.isSelf) {\\n            require(isLiquidation, \\\"TL_OPD: enough mm\\\");\\n        }\\n\\n        if (isLiquidation) {\\n            require(accountInfo.makerInfos[params.market].liquidity == 0, \\\"TL_OPD: no maker when liq\\\");\\n        }\\n\\n        oppositeAmount;\\n        if (params.protocolFeeRatio == 0) {\\n            oppositeAmount = IPerpdexMarketMinimum(params.market).previewSwap(\\n                params.isBaseToQuote,\\n                params.isExactInput,\\n                params.amount,\\n                isLiquidation\\n            );\\n        } else {\\n            (oppositeAmount, ) = previewSwapWithProtocolFee(\\n                params.market,\\n                params.isBaseToQuote,\\n                params.isExactInput,\\n                params.amount,\\n                params.protocolFeeRatio,\\n                isLiquidation\\n            );\\n        }\\n        validateSlippage(params.isExactInput, oppositeAmount, params.oppositeAmountBound);\\n    }\\n\\n    // ignore initial margin check and close only check when liquidation\\n    function maxTrade(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address market,\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint24 mmRatio,\\n        uint24 protocolFeeRatio,\\n        bool isSelf\\n    ) internal view returns (uint256 amount) {\\n        bool isLiquidation = !AccountLibrary.hasEnoughMaintenanceMargin(accountInfo, mmRatio);\\n\\n        if (!isSelf && !isLiquidation) {\\n            return 0;\\n        }\\n\\n        if (isLiquidation && accountInfo.makerInfos[market].liquidity != 0) {\\n            return 0;\\n        }\\n\\n        if (protocolFeeRatio == 0) {\\n            amount = IPerpdexMarketMinimum(market).maxSwap(isBaseToQuote, isExactInput, isLiquidation);\\n        } else {\\n            amount = maxSwapWithProtocolFee(market, isBaseToQuote, isExactInput, protocolFeeRatio, isLiquidation);\\n        }\\n    }\\n\\n    // to avoid stack too deep\\n    struct DoSwapParams {\\n        address market;\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n        uint256 amount;\\n        uint256 oppositeAmountBound;\\n        uint8 maxMarketsPerAccount;\\n        uint24 protocolFeeRatio;\\n        bool isLiquidation;\\n    }\\n\\n    function _doSwap(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        PerpdexStructs.ProtocolInfo storage protocolInfo,\\n        DoSwapParams memory params\\n    )\\n        private\\n        returns (\\n            int256 base,\\n            int256 quote,\\n            int256 realizedPnl,\\n            uint256 protocolFee,\\n            IPerpdexMarketMinimum.SwapResponse memory rawResponse\\n        )\\n    {\\n        uint256 oppositeAmount;\\n\\n        if (params.protocolFeeRatio > 0) {\\n            (oppositeAmount, protocolFee, rawResponse) = swapWithProtocolFee(\\n                protocolInfo,\\n                params.market,\\n                params.isBaseToQuote,\\n                params.isExactInput,\\n                params.amount,\\n                params.protocolFeeRatio,\\n                params.isLiquidation\\n            );\\n        } else {\\n            rawResponse = IPerpdexMarketMinimum(params.market).swap(\\n                params.isBaseToQuote,\\n                params.isExactInput,\\n                params.amount,\\n                params.isLiquidation\\n            );\\n            oppositeAmount = rawResponse.oppositeAmount;\\n        }\\n        validateSlippage(params.isExactInput, oppositeAmount, params.oppositeAmountBound);\\n\\n        (base, quote) = swapResponseToBaseQuote(\\n            params.isBaseToQuote,\\n            params.isExactInput,\\n            params.amount,\\n            oppositeAmount\\n        );\\n        realizedPnl = addToTakerBalance(accountInfo, params.market, base, quote, 0, params.maxMarketsPerAccount);\\n    }\\n\\n    function swapWithProtocolFee(\\n        PerpdexStructs.ProtocolInfo storage protocolInfo,\\n        address market,\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        uint24 protocolFeeRatio,\\n        bool isLiquidation\\n    )\\n        internal\\n        returns (\\n            uint256 oppositeAmount,\\n            uint256 protocolFee,\\n            IPerpdexMarketMinimum.SwapResponse memory rawResponse\\n        )\\n    {\\n        if (isExactInput) {\\n            if (isBaseToQuote) {\\n                rawResponse = IPerpdexMarketMinimum(market).swap(isBaseToQuote, isExactInput, amount, isLiquidation);\\n                oppositeAmount = rawResponse.oppositeAmount;\\n                protocolFee = oppositeAmount.mulRatio(protocolFeeRatio);\\n                oppositeAmount = oppositeAmount.sub(protocolFee);\\n            } else {\\n                protocolFee = amount.mulRatio(protocolFeeRatio);\\n                rawResponse = IPerpdexMarketMinimum(market).swap(\\n                    isBaseToQuote,\\n                    isExactInput,\\n                    amount.sub(protocolFee),\\n                    isLiquidation\\n                );\\n                oppositeAmount = rawResponse.oppositeAmount;\\n            }\\n        } else {\\n            if (isBaseToQuote) {\\n                protocolFee = amount.divRatio(PerpMath.subRatio(1e6, protocolFeeRatio)).sub(amount);\\n                rawResponse = IPerpdexMarketMinimum(market).swap(\\n                    isBaseToQuote,\\n                    isExactInput,\\n                    amount.add(protocolFee),\\n                    isLiquidation\\n                );\\n                oppositeAmount = rawResponse.oppositeAmount;\\n            } else {\\n                rawResponse = IPerpdexMarketMinimum(market).swap(isBaseToQuote, isExactInput, amount, isLiquidation);\\n                uint256 oppositeAmountWithoutFee = rawResponse.oppositeAmount;\\n                oppositeAmount = oppositeAmountWithoutFee.divRatio(PerpMath.subRatio(1e6, protocolFeeRatio));\\n                protocolFee = oppositeAmount.sub(oppositeAmountWithoutFee);\\n            }\\n        }\\n\\n        protocolInfo.protocolFee = protocolInfo.protocolFee.add(protocolFee);\\n    }\\n\\n    function processLiquidationReward(\\n        PerpdexStructs.VaultInfo storage vaultInfo,\\n        PerpdexStructs.VaultInfo storage liquidatorVaultInfo,\\n        PerpdexStructs.InsuranceFundInfo storage insuranceFundInfo,\\n        uint24 mmRatio,\\n        PerpdexStructs.LiquidationRewardConfig memory liquidationRewardConfig,\\n        uint256 exchangedQuote\\n    )\\n        internal\\n        returns (\\n            uint256 penalty,\\n            uint256 liquidationReward,\\n            uint256 insuranceFundReward\\n        )\\n    {\\n        penalty = exchangedQuote.mulRatio(mmRatio);\\n        liquidationReward = penalty.mulRatio(liquidationRewardConfig.rewardRatio);\\n        insuranceFundReward = penalty.sub(liquidationReward);\\n\\n        (insuranceFundInfo.liquidationRewardBalance, liquidationReward) = _smoothLiquidationReward(\\n            insuranceFundInfo.liquidationRewardBalance,\\n            liquidationReward,\\n            liquidationRewardConfig.smoothEmaTime\\n        );\\n\\n        vaultInfo.collateralBalance = vaultInfo.collateralBalance.sub(penalty.toInt256());\\n        liquidatorVaultInfo.collateralBalance = liquidatorVaultInfo.collateralBalance.add(liquidationReward.toInt256());\\n        insuranceFundInfo.balance = insuranceFundInfo.balance.add(insuranceFundReward.toInt256());\\n    }\\n\\n    function _smoothLiquidationReward(\\n        uint256 rewardBalance,\\n        uint256 reward,\\n        uint24 emaTime\\n    ) private pure returns (uint256 outputRewardBalance, uint256 outputReward) {\\n        rewardBalance = rewardBalance.add(reward);\\n        outputReward = rewardBalance.div(emaTime);\\n        outputRewardBalance = rewardBalance.sub(outputReward);\\n    }\\n\\n    function previewSwapWithProtocolFee(\\n        address market,\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        uint24 protocolFeeRatio,\\n        bool isLiquidation\\n    ) internal view returns (uint256 oppositeAmount, uint256 protocolFee) {\\n        if (isExactInput) {\\n            if (isBaseToQuote) {\\n                oppositeAmount = IPerpdexMarketMinimum(market).previewSwap(\\n                    isBaseToQuote,\\n                    isExactInput,\\n                    amount,\\n                    isLiquidation\\n                );\\n                protocolFee = oppositeAmount.mulRatio(protocolFeeRatio);\\n                oppositeAmount = oppositeAmount.sub(protocolFee);\\n            } else {\\n                protocolFee = amount.mulRatio(protocolFeeRatio);\\n                oppositeAmount = IPerpdexMarketMinimum(market).previewSwap(\\n                    isBaseToQuote,\\n                    isExactInput,\\n                    amount.sub(protocolFee),\\n                    isLiquidation\\n                );\\n            }\\n        } else {\\n            if (isBaseToQuote) {\\n                protocolFee = amount.divRatio(PerpMath.subRatio(1e6, protocolFeeRatio)).sub(amount);\\n                oppositeAmount = IPerpdexMarketMinimum(market).previewSwap(\\n                    isBaseToQuote,\\n                    isExactInput,\\n                    amount.add(protocolFee),\\n                    isLiquidation\\n                );\\n            } else {\\n                uint256 oppositeAmountWithoutFee =\\n                    IPerpdexMarketMinimum(market).previewSwap(isBaseToQuote, isExactInput, amount, isLiquidation);\\n                oppositeAmount = oppositeAmountWithoutFee.divRatio(PerpMath.subRatio(1e6, protocolFeeRatio));\\n                protocolFee = oppositeAmount.sub(oppositeAmountWithoutFee);\\n            }\\n        }\\n    }\\n\\n    function maxSwapWithProtocolFee(\\n        address market,\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint24 protocolFeeRatio,\\n        bool isLiquidation\\n    ) internal view returns (uint256 amount) {\\n        amount = IPerpdexMarketMinimum(market).maxSwap(isBaseToQuote, isExactInput, isLiquidation);\\n\\n        if (isExactInput) {\\n            if (isBaseToQuote) {} else {\\n                amount = amount.divRatio(PerpMath.subRatio(1e6, protocolFeeRatio));\\n            }\\n        } else {\\n            if (isBaseToQuote) {\\n                amount = amount.mulRatio(PerpMath.subRatio(1e6, protocolFeeRatio));\\n            } else {}\\n        }\\n    }\\n\\n    function validateSlippage(\\n        bool isExactInput,\\n        uint256 oppositeAmount,\\n        uint256 oppositeAmountBound\\n    ) internal pure {\\n        if (isExactInput) {\\n            require(oppositeAmount >= oppositeAmountBound, \\\"TL_VS: too small opposite amount\\\");\\n        } else {\\n            require(oppositeAmount <= oppositeAmountBound, \\\"TL_VS: too large opposite amount\\\");\\n        }\\n    }\\n\\n    function swapResponseToBaseQuote(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        uint256 oppositeAmount\\n    ) internal pure returns (int256, int256) {\\n        if (isExactInput) {\\n            if (isBaseToQuote) {\\n                return (amount.neg256(), oppositeAmount.toInt256());\\n            } else {\\n                return (oppositeAmount.toInt256(), amount.neg256());\\n            }\\n        } else {\\n            if (isBaseToQuote) {\\n                return (oppositeAmount.neg256(), amount.toInt256());\\n            } else {\\n                return (amount.toInt256(), oppositeAmount.neg256());\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0a98b0ebdaffe9a825cc9a06fe5aa67fdd67aca4ce20e23dab4dfcd61be0580f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/VaultLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { IERC20Metadata } from \\\"../interfaces/IERC20Metadata.sol\\\";\\nimport { AccountLibrary } from \\\"./AccountLibrary.sol\\\";\\nimport { PerpdexStructs } from \\\"./PerpdexStructs.sol\\\";\\n\\nlibrary VaultLibrary {\\n    using PerpMath for int256;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    struct DepositParams {\\n        address settlementToken;\\n        uint256 amount;\\n        address from;\\n    }\\n\\n    struct WithdrawParams {\\n        address settlementToken;\\n        uint256 amount;\\n        address payable to;\\n        uint24 imRatio;\\n    }\\n\\n    function deposit(PerpdexStructs.AccountInfo storage accountInfo, DepositParams memory params) internal {\\n        require(params.amount > 0, \\\"VL_D: zero amount\\\");\\n        _transferTokenIn(params.settlementToken, params.from, params.amount);\\n        uint256 collateralAmount =\\n            _toCollateralAmount(params.amount, IERC20Metadata(params.settlementToken).decimals());\\n        accountInfo.vaultInfo.collateralBalance = accountInfo.vaultInfo.collateralBalance.add(\\n            collateralAmount.toInt256()\\n        );\\n    }\\n\\n    function depositEth(PerpdexStructs.AccountInfo storage accountInfo, uint256 amount) internal {\\n        require(amount > 0, \\\"VL_DE: zero amount\\\");\\n        accountInfo.vaultInfo.collateralBalance = accountInfo.vaultInfo.collateralBalance.add(amount.toInt256());\\n    }\\n\\n    function withdraw(PerpdexStructs.AccountInfo storage accountInfo, WithdrawParams memory params) internal {\\n        require(params.amount > 0, \\\"VL_W: zero amount\\\");\\n\\n        uint256 collateralAmount =\\n            params.settlementToken == address(0)\\n                ? params.amount\\n                : _toCollateralAmount(params.amount, IERC20Metadata(params.settlementToken).decimals());\\n        accountInfo.vaultInfo.collateralBalance = accountInfo.vaultInfo.collateralBalance.sub(\\n            collateralAmount.toInt256()\\n        );\\n\\n        require(AccountLibrary.hasEnoughInitialMargin(accountInfo, params.imRatio), \\\"VL_W: not enough initial margin\\\");\\n\\n        if (params.settlementToken == address(0)) {\\n            params.to.transfer(params.amount);\\n        } else {\\n            SafeERC20.safeTransfer(IERC20(params.settlementToken), params.to, params.amount);\\n        }\\n    }\\n\\n    function transferProtocolFee(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        PerpdexStructs.ProtocolInfo storage protocolInfo,\\n        uint256 amount\\n    ) internal {\\n        accountInfo.vaultInfo.collateralBalance = accountInfo.vaultInfo.collateralBalance.add(amount.toInt256());\\n        protocolInfo.protocolFee = protocolInfo.protocolFee.sub(amount);\\n    }\\n\\n    function _transferTokenIn(\\n        address token,\\n        address from,\\n        uint256 amount\\n    ) private {\\n        // check for deflationary tokens by assuring balances before and after transferring to be the same\\n        uint256 balanceBefore = IERC20Metadata(token).balanceOf(address(this));\\n        SafeERC20.safeTransferFrom(IERC20(token), from, address(this), amount);\\n        require(\\n            (IERC20Metadata(token).balanceOf(address(this)).sub(balanceBefore)) == amount,\\n            \\\"VL_TTI: inconsistent balance\\\"\\n        );\\n    }\\n\\n    function _toCollateralAmount(uint256 amount, uint8 tokenDecimals) private pure returns (uint256) {\\n        int256 decimalsDiff = int256(18).sub(uint256(tokenDecimals).toInt256());\\n        uint256 decimalsDiffAbs = decimalsDiff.abs();\\n        require(decimalsDiffAbs <= 77, \\\"VL_TCA: too large decimals diff\\\");\\n        return decimalsDiff >= 0 ? amount.mul(10**decimalsDiffAbs) : amount.div(10**decimalsDiffAbs);\\n    }\\n}\\n\",\"keccak256\":\"0x895f74b465fc06799edaf47758871dc06af50e1a729f35ad647bf8638a35dd57\",\"license\":\"GPL-3.0-or-later\"},\"contracts/test/DebugPerpdexExchange.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { PerpdexExchange } from \\\"../PerpdexExchange.sol\\\";\\n\\ncontract DebugPerpdexExchange is PerpdexExchange {\\n    uint256 private constant _RINKEBY_CHAIN_ID = 4;\\n    uint256 private constant _MUMBAI_CHAIN_ID = 80001;\\n    uint256 private constant _SHIBUYA_CHAIN_ID = 81;\\n    // https://v2-docs.zksync.io/dev/zksync-v2/temp-limits.html#temporarily-simulated-by-constant-values\\n    uint256 private constant _ZKSYNC2_TESTNET_CHAIN_ID = 0;\\n    uint256 private constant _ARBITRUM_RINKEBY_CHAIN_ID = 421611;\\n    uint256 private constant _OPTIMISM_KOVAN_CHAIN_ID = 69;\\n    uint256 private constant _HARDHAT_CHAIN_ID = 31337;\\n\\n    constructor(address settlementTokenArg) PerpdexExchange(settlementTokenArg) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        require(\\n            chainId == _RINKEBY_CHAIN_ID ||\\n                chainId == _MUMBAI_CHAIN_ID ||\\n                chainId == _SHIBUYA_CHAIN_ID ||\\n                chainId == _ZKSYNC2_TESTNET_CHAIN_ID ||\\n                chainId == _ARBITRUM_RINKEBY_CHAIN_ID ||\\n                chainId == _OPTIMISM_KOVAN_CHAIN_ID ||\\n                chainId == _HARDHAT_CHAIN_ID,\\n            \\\"DPE_C: testnet only\\\"\\n        );\\n    }\\n\\n    function setCollateralBalance(address trader, int256 balance) external {\\n        accountInfos[trader].vaultInfo.collateralBalance = balance;\\n    }\\n}\\n\",\"keccak256\":\"0xbe520b818a9d30ff70e5623384ca1921ca87b83dff9da992dfb84a7ad2f677b2\",\"license\":\"GPL-3.0-or-later\"},\"deps/BokkyPooBahsRedBlackTreeLibrary/contracts/BokkyPooBahsRedBlackTreeLibrary.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's Red-Black Tree Library v1.0-pre-release-a\\n//\\n// A Solidity Red-Black Tree binary search library to store and access a sorted\\n// list of unsigned integer data. The Red-Black algorithm rebalances the binary\\n// search tree, resulting in O(log n) insert, remove and search time (and ~gas)\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsRedBlackTreeLibrary\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2020. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary BokkyPooBahsRedBlackTreeLibrary {\\n    struct Node {\\n        uint40 parent;\\n        uint40 left;\\n        uint40 right;\\n        bool red;\\n        uint128 userData; // use freely. this is for gas efficiency\\n    }\\n\\n    struct Tree {\\n        uint40 root;\\n        mapping(uint40 => Node) nodes;\\n    }\\n\\n    uint40 private constant EMPTY = 0;\\n\\n    function first(Tree storage self) internal view returns (uint40 _key) {\\n        _key = self.root;\\n        if (_key != EMPTY) {\\n            _key = treeMinimum(self, self.root);\\n        }\\n    }\\n\\n    function last(Tree storage self) internal view returns (uint40 _key) {\\n        _key = self.root;\\n        if (_key != EMPTY) {\\n            _key = treeMaximum(self, self.root);\\n        }\\n    }\\n\\n    function next(Tree storage self, uint40 target)\\n        internal\\n        view\\n        returns (uint40 cursor)\\n    {\\n        require(target != EMPTY, \\\"RBTL_N: target is empty\\\");\\n        if (self.nodes[target].right != EMPTY) {\\n            cursor = treeMinimum(self, self.nodes[target].right);\\n        } else {\\n            cursor = self.nodes[target].parent;\\n            while (cursor != EMPTY && target == self.nodes[cursor].right) {\\n                target = cursor;\\n                cursor = self.nodes[cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function prev(Tree storage self, uint40 target)\\n        internal\\n        view\\n        returns (uint40 cursor)\\n    {\\n        require(target != EMPTY, \\\"RBTL_P: target is empty\\\");\\n        if (self.nodes[target].left != EMPTY) {\\n            cursor = treeMaximum(self, self.nodes[target].left);\\n        } else {\\n            cursor = self.nodes[target].parent;\\n            while (cursor != EMPTY && target == self.nodes[cursor].left) {\\n                target = cursor;\\n                cursor = self.nodes[cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function exists(Tree storage self, uint40 key)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return\\n            (key != EMPTY) &&\\n            ((key == self.root) || (self.nodes[key].parent != EMPTY));\\n    }\\n\\n    function isEmpty(uint40 key) internal pure returns (bool) {\\n        return key == EMPTY;\\n    }\\n\\n    function getEmpty() internal pure returns (uint256) {\\n        return EMPTY;\\n    }\\n\\n    function getNode(Tree storage self, uint40 key)\\n        internal\\n        view\\n        returns (\\n            uint40 _returnKey,\\n            uint40 _parent,\\n            uint40 _left,\\n            uint40 _right,\\n            bool _red\\n        )\\n    {\\n        require(exists(self, key), \\\"RBTL_GN: key not exist\\\");\\n        return (\\n            key,\\n            self.nodes[key].parent,\\n            self.nodes[key].left,\\n            self.nodes[key].right,\\n            self.nodes[key].red\\n        );\\n    }\\n\\n    function insert(\\n        Tree storage self,\\n        uint40 key,\\n        uint128 userData,\\n        function(uint40, uint40, uint256) view returns (bool) lessThan,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) internal {\\n        require(key != EMPTY, \\\"RBTL_I: key is empty\\\");\\n        require(!exists(self, key), \\\"RBTL_I: key already exists\\\");\\n        uint40 cursor = EMPTY;\\n        uint40 probe = self.root;\\n        self.nodes[key] = Node({\\n            parent: EMPTY,\\n            left: EMPTY,\\n            right: EMPTY,\\n            red: true,\\n            userData: userData\\n        });\\n        while (probe != EMPTY) {\\n            cursor = probe;\\n            if (lessThan(key, probe, data)) {\\n                probe = self.nodes[probe].left;\\n            } else {\\n                probe = self.nodes[probe].right;\\n            }\\n        }\\n        self.nodes[key].parent = cursor;\\n        if (cursor == EMPTY) {\\n            self.root = key;\\n        } else if (lessThan(key, cursor, data)) {\\n            self.nodes[cursor].left = key;\\n        } else {\\n            self.nodes[cursor].right = key;\\n        }\\n        aggregateRecursively(self, key, aggregate, data);\\n        insertFixup(self, key, aggregate, data);\\n    }\\n\\n    function remove(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) internal {\\n        require(key != EMPTY, \\\"RBTL_R: key is empty\\\");\\n        require(exists(self, key), \\\"RBTL_R: key not exist\\\");\\n        uint40 probe;\\n        uint40 cursor;\\n        if (self.nodes[key].left == EMPTY || self.nodes[key].right == EMPTY) {\\n            cursor = key;\\n        } else {\\n            cursor = self.nodes[key].right;\\n            while (self.nodes[cursor].left != EMPTY) {\\n                cursor = self.nodes[cursor].left;\\n            }\\n        }\\n        if (self.nodes[cursor].left != EMPTY) {\\n            probe = self.nodes[cursor].left;\\n        } else {\\n            probe = self.nodes[cursor].right;\\n        }\\n        uint40 yParent = self.nodes[cursor].parent;\\n        self.nodes[probe].parent = yParent;\\n        if (yParent != EMPTY) {\\n            if (cursor == self.nodes[yParent].left) {\\n                self.nodes[yParent].left = probe;\\n            } else {\\n                self.nodes[yParent].right = probe;\\n            }\\n        } else {\\n            self.root = probe;\\n        }\\n        bool doFixup = !self.nodes[cursor].red;\\n        if (cursor != key) {\\n            replaceParent(self, cursor, key);\\n            self.nodes[cursor].left = self.nodes[key].left;\\n            self.nodes[self.nodes[cursor].left].parent = cursor;\\n            self.nodes[cursor].right = self.nodes[key].right;\\n            self.nodes[self.nodes[cursor].right].parent = cursor;\\n            self.nodes[cursor].red = self.nodes[key].red;\\n            (cursor, key) = (key, cursor);\\n            aggregateRecursively(self, key, aggregate, data);\\n        }\\n        if (doFixup) {\\n            removeFixup(self, probe, aggregate, data);\\n        }\\n        aggregateRecursively(self, yParent, aggregate, data);\\n\\n        // Fixed a bug that caused the parent of empty nodes to be non-zero.\\n        // TODO: Fix it the right way.\\n        if (probe == EMPTY) {\\n            self.nodes[probe].parent = EMPTY;\\n        }\\n    }\\n\\n    // https://arxiv.org/pdf/1602.02120.pdf\\n    // changes from original\\n    // - handle empty\\n    // - handle parent\\n    // - change root to black\\n\\n    // to avoid stack too deep\\n    struct JoinParams {\\n        uint40 left;\\n        uint40 key;\\n        uint40 right;\\n        uint8 leftBlackHeight;\\n        uint8 rightBlackHeight;\\n        uint256 data;\\n    }\\n\\n    // destructive func\\n    function joinRight(\\n        Tree storage self,\\n        JoinParams memory params,\\n        function(uint40, uint256) returns (bool) aggregate\\n    ) private returns (uint40, uint8) {\\n        if (\\n            !self.nodes[params.left].red &&\\n            params.leftBlackHeight == params.rightBlackHeight\\n        ) {\\n            self.nodes[params.key].red = true;\\n            self.nodes[params.key].left = params.left;\\n            self.nodes[params.key].right = params.right;\\n            aggregate(params.key, params.data);\\n            return (params.key, params.leftBlackHeight);\\n        }\\n\\n        (uint40 t, ) = joinRight(\\n            self,\\n            JoinParams({\\n                left: self.nodes[params.left].right,\\n                key: params.key,\\n                right: params.right,\\n                leftBlackHeight: params.leftBlackHeight -\\n                    (self.nodes[params.left].red ? 0 : 1),\\n                rightBlackHeight: params.rightBlackHeight,\\n                data: params.data\\n            }),\\n            aggregate\\n        );\\n        self.nodes[params.left].right = t;\\n        self.nodes[params.left].parent = EMPTY;\\n        aggregate(params.left, params.data);\\n\\n        if (\\n            !self.nodes[params.left].red &&\\n            self.nodes[t].red &&\\n            self.nodes[self.nodes[t].right].red\\n        ) {\\n            self.nodes[self.nodes[t].right].red = false;\\n            rotateLeft(self, params.left, aggregate, params.data);\\n            return (t, params.leftBlackHeight);\\n            //            return (self.nodes[params.left].parent, tBlackHeight + 1); // TODO: replace with t\\n        }\\n        return (params.left, params.leftBlackHeight);\\n        //        return (params.left, tBlackHeight + (self.nodes[params.left].red ? 0 : 1));\\n    }\\n\\n    // destructive func\\n    function joinLeft(\\n        Tree storage self,\\n        JoinParams memory params,\\n        function(uint40, uint256) returns (bool) aggregate\\n    ) internal returns (uint40 resultKey) {\\n        if (\\n            !self.nodes[params.right].red &&\\n            params.leftBlackHeight == params.rightBlackHeight\\n        ) {\\n            self.nodes[params.key].red = true;\\n            self.nodes[params.key].left = params.left;\\n            self.nodes[params.key].right = params.right;\\n            if (params.left != EMPTY) {\\n                self.nodes[params.left].parent = params.key;\\n            }\\n            if (params.right != EMPTY) {\\n                self.nodes[params.right].parent = params.key;\\n            }\\n            aggregate(params.key, params.data);\\n            return params.key;\\n        }\\n\\n        uint40 t = joinLeft(\\n            self,\\n            JoinParams({\\n                left: params.left,\\n                key: params.key,\\n                right: self.nodes[params.right].left,\\n                leftBlackHeight: params.leftBlackHeight,\\n                rightBlackHeight: params.rightBlackHeight -\\n                    (self.nodes[params.right].red ? 0 : 1),\\n                data: params.data\\n            }),\\n            aggregate\\n        );\\n        self.nodes[params.right].left = t;\\n        self.nodes[params.right].parent = EMPTY;\\n        if (t != EMPTY) {\\n            self.nodes[t].parent = params.right;\\n        }\\n        aggregate(params.right, params.data);\\n\\n        if (\\n            !self.nodes[params.right].red &&\\n            self.nodes[t].red &&\\n            self.nodes[self.nodes[t].left].red\\n        ) {\\n            self.nodes[self.nodes[t].left].red = false;\\n            rotateRight(self, params.right, aggregate, params.data);\\n            return t;\\n        }\\n        return params.right;\\n    }\\n\\n    // destructive func\\n    function join(\\n        Tree storage self,\\n        uint40 left,\\n        uint40 key,\\n        uint40 right,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint8 leftBlackHeight,\\n        uint8 rightBlackHeight,\\n        uint256 data\\n    ) private returns (uint40 t, uint8 tBlackHeight) {\\n        if (leftBlackHeight > rightBlackHeight) {\\n            (t, tBlackHeight) = joinRight(\\n                self,\\n                JoinParams({\\n                    left: left,\\n                    key: key,\\n                    right: right,\\n                    leftBlackHeight: leftBlackHeight,\\n                    rightBlackHeight: rightBlackHeight,\\n                    data: data\\n                }),\\n                aggregate\\n            );\\n            tBlackHeight = leftBlackHeight;\\n            if (self.nodes[t].red && self.nodes[self.nodes[t].right].red) {\\n                self.nodes[t].red = false;\\n                tBlackHeight += 1;\\n            }\\n        } else if (leftBlackHeight < rightBlackHeight) {\\n            t = joinLeft(\\n                self,\\n                JoinParams({\\n                    left: left,\\n                    key: key,\\n                    right: right,\\n                    leftBlackHeight: leftBlackHeight,\\n                    rightBlackHeight: rightBlackHeight,\\n                    data: data\\n                }),\\n                aggregate\\n            );\\n            tBlackHeight = rightBlackHeight;\\n            if (self.nodes[t].red && self.nodes[self.nodes[t].left].red) {\\n                self.nodes[t].red = false;\\n                tBlackHeight += 1;\\n            }\\n        } else {\\n            bool red = !self.nodes[left].red && !self.nodes[right].red;\\n            self.nodes[key].red = red;\\n            self.nodes[key].left = left;\\n            self.nodes[key].right = right;\\n            aggregate(key, data);\\n            (t, tBlackHeight) = (key, leftBlackHeight + (red ? 0 : 1));\\n        }\\n    }\\n\\n    struct SplitParams {\\n        uint40 t;\\n        uint40 key;\\n        uint8 blackHeight;\\n        uint256 data;\\n    }\\n\\n    // destructive func\\n    function splitRight(\\n        Tree storage self,\\n        SplitParams memory params,\\n        function(uint40, uint40, uint256) returns (bool) lessThan,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        function(uint40, uint256) subtreeRemoved\\n    ) private returns (uint40 resultKey, uint8 resultBlackHeight) {\\n        if (params.t == EMPTY) return (EMPTY, params.blackHeight);\\n        params.blackHeight -= (self.nodes[params.t].red ? 0 : 1);\\n        if (params.key == params.t) {\\n            subtreeRemoved(params.t, params.data);\\n            return (self.nodes[params.t].right, params.blackHeight);\\n        }\\n        if (lessThan(params.key, params.t, params.data)) {\\n            (uint40 r, uint8 rBlackHeight) = splitRight(\\n                self,\\n                SplitParams({\\n                    t: self.nodes[params.t].left,\\n                    key: params.key,\\n                    blackHeight: params.blackHeight,\\n                    data: params.data\\n                }),\\n                lessThan,\\n                aggregate,\\n                subtreeRemoved\\n            );\\n            return\\n                join(\\n                    self,\\n                    r,\\n                    params.t,\\n                    self.nodes[params.t].right,\\n                    aggregate,\\n                    rBlackHeight,\\n                    params.blackHeight,\\n                    params.data\\n                );\\n        } else {\\n            subtreeRemoved(params.t, params.data);\\n            return\\n                splitRight(\\n                    self,\\n                    SplitParams({\\n                        t: self.nodes[params.t].right,\\n                        key: params.key,\\n                        blackHeight: params.blackHeight,\\n                        data: params.data\\n                    }),\\n                    lessThan,\\n                    aggregate,\\n                    subtreeRemoved\\n                );\\n        }\\n    }\\n\\n    function removeLeft(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint40, uint256) returns (bool) lessThan,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        function(uint40, uint256) subtreeRemoved,\\n        uint256 data\\n    ) internal {\\n        require(key != EMPTY, \\\"RBTL_RL: key is empty\\\");\\n        require(exists(self, key), \\\"RBTL_RL: key not exist\\\");\\n        (self.root, ) = splitRight(\\n            self,\\n            SplitParams({t: self.root, key: key, blackHeight: 128, data: data}),\\n            lessThan,\\n            aggregate,\\n            subtreeRemoved\\n        );\\n        self.nodes[self.root].parent = EMPTY;\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function aggregateRecursively(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) internal {\\n        while (key != EMPTY) {\\n            if (aggregate(key, data)) return;\\n            key = self.nodes[key].parent;\\n        }\\n    }\\n\\n    function treeMinimum(Tree storage self, uint40 key)\\n        private\\n        view\\n        returns (uint40)\\n    {\\n        while (self.nodes[key].left != EMPTY) {\\n            key = self.nodes[key].left;\\n        }\\n        return key;\\n    }\\n\\n    function treeMaximum(Tree storage self, uint40 key)\\n        private\\n        view\\n        returns (uint40)\\n    {\\n        while (self.nodes[key].right != EMPTY) {\\n            key = self.nodes[key].right;\\n        }\\n        return key;\\n    }\\n\\n    function rotateLeft(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) private {\\n        uint40 cursor = self.nodes[key].right;\\n        uint40 keyParent = self.nodes[key].parent;\\n        uint40 cursorLeft = self.nodes[cursor].left;\\n        self.nodes[key].right = cursorLeft;\\n        if (cursorLeft != EMPTY) {\\n            self.nodes[cursorLeft].parent = key;\\n        }\\n        self.nodes[cursor].parent = keyParent;\\n        if (keyParent == EMPTY) {\\n            self.root = cursor;\\n        } else if (key == self.nodes[keyParent].left) {\\n            self.nodes[keyParent].left = cursor;\\n        } else {\\n            self.nodes[keyParent].right = cursor;\\n        }\\n        self.nodes[cursor].left = key;\\n        self.nodes[key].parent = cursor;\\n        aggregate(key, data);\\n        aggregate(cursor, data);\\n    }\\n\\n    function rotateRight(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) private {\\n        uint40 cursor = self.nodes[key].left;\\n        uint40 keyParent = self.nodes[key].parent;\\n        uint40 cursorRight = self.nodes[cursor].right;\\n        self.nodes[key].left = cursorRight;\\n        if (cursorRight != EMPTY) {\\n            self.nodes[cursorRight].parent = key;\\n        }\\n        self.nodes[cursor].parent = keyParent;\\n        if (keyParent == EMPTY) {\\n            self.root = cursor;\\n        } else if (key == self.nodes[keyParent].right) {\\n            self.nodes[keyParent].right = cursor;\\n        } else {\\n            self.nodes[keyParent].left = cursor;\\n        }\\n        self.nodes[cursor].right = key;\\n        self.nodes[key].parent = cursor;\\n        aggregate(key, data);\\n        aggregate(cursor, data);\\n    }\\n\\n    function insertFixup(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) private {\\n        uint40 cursor;\\n        while (key != self.root && self.nodes[self.nodes[key].parent].red) {\\n            uint40 keyParent = self.nodes[key].parent;\\n            if (keyParent == self.nodes[self.nodes[keyParent].parent].left) {\\n                cursor = self.nodes[self.nodes[keyParent].parent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    key = self.nodes[keyParent].parent;\\n                } else {\\n                    if (key == self.nodes[keyParent].right) {\\n                        key = keyParent;\\n                        rotateLeft(self, key, aggregate, data);\\n                    }\\n                    keyParent = self.nodes[key].parent;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    rotateRight(\\n                        self,\\n                        self.nodes[keyParent].parent,\\n                        aggregate,\\n                        data\\n                    );\\n                }\\n            } else {\\n                cursor = self.nodes[self.nodes[keyParent].parent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    key = self.nodes[keyParent].parent;\\n                } else {\\n                    if (key == self.nodes[keyParent].left) {\\n                        key = keyParent;\\n                        rotateRight(self, key, aggregate, data);\\n                    }\\n                    keyParent = self.nodes[key].parent;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    rotateLeft(\\n                        self,\\n                        self.nodes[keyParent].parent,\\n                        aggregate,\\n                        data\\n                    );\\n                }\\n            }\\n        }\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function replaceParent(\\n        Tree storage self,\\n        uint40 a,\\n        uint40 b\\n    ) private {\\n        uint40 bParent = self.nodes[b].parent;\\n        self.nodes[a].parent = bParent;\\n        if (bParent == EMPTY) {\\n            self.root = a;\\n        } else {\\n            if (b == self.nodes[bParent].left) {\\n                self.nodes[bParent].left = a;\\n            } else {\\n                self.nodes[bParent].right = a;\\n            }\\n        }\\n    }\\n\\n    function removeFixup(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) private {\\n        uint40 cursor;\\n        while (key != self.root && !self.nodes[key].red) {\\n            uint40 keyParent = self.nodes[key].parent;\\n            if (key == self.nodes[keyParent].left) {\\n                cursor = self.nodes[keyParent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[keyParent].red = true;\\n                    rotateLeft(self, keyParent, aggregate, data);\\n                    cursor = self.nodes[keyParent].right;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].left].red &&\\n                    !self.nodes[self.nodes[cursor].right].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    key = keyParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].right].red) {\\n                        self.nodes[self.nodes[cursor].left].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateRight(self, cursor, aggregate, data);\\n                        cursor = self.nodes[keyParent].right;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[keyParent].red;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[cursor].right].red = false;\\n                    rotateLeft(self, keyParent, aggregate, data);\\n                    key = self.root;\\n                }\\n            } else {\\n                cursor = self.nodes[keyParent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[keyParent].red = true;\\n                    rotateRight(self, keyParent, aggregate, data);\\n                    cursor = self.nodes[keyParent].left;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].right].red &&\\n                    !self.nodes[self.nodes[cursor].left].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    key = keyParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].left].red) {\\n                        self.nodes[self.nodes[cursor].right].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateLeft(self, cursor, aggregate, data);\\n                        cursor = self.nodes[keyParent].left;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[keyParent].red;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[cursor].left].red = false;\\n                    rotateRight(self, keyParent, aggregate, data);\\n                    key = self.root;\\n                }\\n            }\\n        }\\n        self.nodes[key].red = false;\\n    }\\n}\\n// ----------------------------------------------------------------------------\\n// End - BokkyPooBah's Red-Black Tree Library\\n// ----------------------------------------------------------------------------\\n\",\"keccak256\":\"0xcd1e5d70b48e4c611fd4b863d8413eb8000db92c875f0a2ccb60b7c374e03d7f\"},\"prb-math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xed164c95012964f5e125b5d2b2d00471a4bdee4def618cd1fcf341d196011b61\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106102675760003560e01c806394887af711610144578063cffe8556116100b6578063e671be171161007a578063e671be171461087d578063e72e43631461089d578063e8c41ef9146108cd578063ec6cca8414610903578063f2fde38b14610923578063f652b5271461094357600080fd5b8063cffe85561461079b578063d11102c5146107bb578063d1ce35e3146107e8578063ddad7e9714610808578063dfe1cb921461084257600080fd5b8063ac3732b411610108578063ac3732b4146106cb578063b53c5125146106eb578063b6b55f251461072d578063c66fa8e614610740578063c9ca7b181461075b578063ca5b721e1461077b57600080fd5b806394887af7146105dc578063996fbf94146106235780639dce9e19146106435780639f044f3114610673578063a616c66c1461069657600080fd5b80634b4aa735116101dd5780637b9e618d116101a15780637b9e618d146104e45780637c88490a1461051857806387cad0bf146105385780638da5cb5b146105875780639317b193146105a557806393420cf4146105c557600080fd5b80634b4aa7351461044c5780636e838bad1461046c578063715018a61461048c57806373f62501146104a15780637a27d9f6146104c157600080fd5b80632f60a1511161022f5780632f60a1511461033c5780632fd99bf41461037157806333ff1577146103c55780633a921051146103e55780633d46396a146104055780633fd1e2bd1461042557600080fd5b80630674fa411461026c5780630729e07a1461029f5780632d67669c146102c15780632e1a7d4d146102e15780632e78434314610301575b600080fd5b34801561027857600080fd5b5061028c6102873660046155a9565b61095d565b6040519081526020015b60405180910390f35b3480156102ab57600080fd5b506102bf6102ba3660046155c6565b6109f0565b005b3480156102cd57600080fd5b5061028c6102dc3660046155f0565b610cdc565b3480156102ed57600080fd5b506102bf6102fc36600461560c565b610dcf565b34801561030d57600080fd5b5061032161031c366004615625565b610ec0565b60408051825181526020928301519281019290925201610296565b34801561034857600080fd5b5060075461035d90610100900462ffffff1681565b60405162ffffff9091168152602001610296565b34801561037d57600080fd5b506103b861038c36600461567f565b60066020908152600093845260408085208252928452828420905282529020546001600160a01b031681565b60405161029691906156ca565b3480156103d157600080fd5b5061028c6103e0366004615625565b610f0f565b3480156103f157600080fd5b5061028c6104003660046155a9565b610fa7565b34801561041157600080fd5b506102bf61042036600461560c565b611035565b34801561043157600080fd5b5061043a601281565b60405160ff9091168152602001610296565b34801561045857600080fd5b5061028c6104673660046155a9565b6110ce565b34801561047857600080fd5b506102bf6104873660046156ef565b61111f565b34801561049857600080fd5b506102bf611256565b3480156104ad57600080fd5b506102bf6104bc36600461571b565b61126a565b3480156104cd57600080fd5b5060075461035d90600160381b900462ffffff1681565b3480156104f057600080fd5b506103b87f000000000000000000000000000000000000000000000000000000000000000081565b34801561052457600080fd5b5061028c610533366004615625565b6112dc565b34801561054457600080fd5b506105786105533660046155a9565b6002602090815260009182526040918290208251918201909252600390910154815281565b60405190518152602001610296565b34801561059357600080fd5b506001546001600160a01b03166103b8565b3480156105b157600080fd5b506102bf6105c0366004615738565b61132c565b3480156105d157600080fd5b5060055461028c9081565b3480156105e857600080fd5b506008546106059062ffffff8116906301000000900461ffff1682565b6040805162ffffff909316835261ffff909116602083015201610296565b34801561062f57600080fd5b5061028c61063e366004615625565b6114da565b34801561064f57600080fd5b5061066361065e3660046155a9565b61152a565b6040519015158152602001610296565b34801561067f57600080fd5b5060075461035d90600160201b900462ffffff1681565b3480156106a257600080fd5b506106b66106b1366004615778565b6115cd565b60408051928352602083019190915201610296565b3480156106d757600080fd5b506102bf6106e6366004615794565b6118eb565b3480156106f757600080fd5b5061070b610706366004615625565b611a49565b6040805182518152602080840151908201529181015190820152606001610296565b6102bf61073b36600461560c565b611abd565b34801561074c57600080fd5b506003546004546106b6919082565b34801561076757600080fd5b506102bf6107763660046156ef565b611cd4565b34801561078757600080fd5b5061028c610796366004615625565b611dfb565b3480156107a757600080fd5b5061028c6107b63660046157b8565b611e4b565b3480156107c757600080fd5b506107db6107d63660046155a9565b611f63565b60405161029691906157d4565b3480156107f457600080fd5b506102bf6108033660046156ef565b611fdc565b34801561081457600080fd5b506102bf610823366004615821565b6001600160a01b03909116600090815260026020526040902060030155565b34801561084e57600080fd5b5061086261085d366004615778565b6120aa565b60408051938452602084019290925290820152606001610296565b34801561088957600080fd5b5061028c6108983660046157b8565b61236f565b3480156108a957600080fd5b506106636108b83660046155a9565b60096020526000908152604090205460ff1681565b3480156108d957600080fd5b506108ed6108e83660046155f0565b6127f0565b60405164ffffffffff9091168152602001610296565b34801561090f57600080fd5b5061066361091e3660046155a9565b612aad565b34801561092f57600080fd5b506102bf61093e3660046155a9565b612b11565b34801561094f57600080fd5b5060075461043a9060ff1681565b6001600160a01b038116600090815260026020526040808220905163d73fd34160e01b8152600481019190915273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__9063d73fd341906024016040805180830381865af41580156109c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e9919061584d565b5092915050565b60026000541415610a1c5760405162461bcd60e51b8152600401610a1390615871565b60405180910390fd5b60026000556060810135610a2f81612b99565b610a3c60208301836155a9565b610a4581612bdb565b6000600681610a5760208701876155a9565b6001600160a01b03166001600160a01b031681526020019081526020016000206000856020016020810190610a8c91906158a8565b1515151581526020019081526020016000206000856040016020810190610ab391906158c5565b64ffffffffff1681526020810191909152604001600020546001600160a01b03169050610adf81612c43565b6001600160a01b0381166000908152600260209081526040808320815160c0810190925273__$20e084fd68fd7ab4ec93efaca84ca46fc4$__92637ae9aeb292908190610b2e908b018b6155a9565b6001600160a01b03168152602001610b4c60608b0160408c016158c5565b64ffffffffff168152602001896020016020810190610b6b91906158a8565b15158152600754600160201b900462ffffff166020820152604001336001600160a01b0390811688821614825260075460ff9081166020938401526040805160e088901b6001600160e01b03191681526004810196909652845190921660248601529183015164ffffffffff16604485015282015115156064840152606082015162ffffff1660848401526080820151151560a484015260a0909101511660c482015260e401602060405180830381865af4158015610c2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5291906158e2565b905080610c60576000610c62565b335b6001600160a01b0316610c7860208701876155a9565b6001600160a01b039081169084167f918858ab3117fd69ab99c9055596d1e99f6c88b95cc8226a8dbdc7d9bdc115cb610cb760608a0160408b016158c5565b60405164ffffffffff909116815260200160405180910390a450506001600055505050565b6000600981610cf160408501602086016155a9565b6001600160a01b0316815260208101919091526040016000205460ff16610d1a57506000919050565b6000610d2960208401846155a9565b90506000610d3d60608501604086016155a9565b9050610dc760026000846001600160a01b03166001600160a01b03168152602001908152602001600020856020016020810190610d7a91906155a9565b610d8a60808801606089016158a8565b610d9a60a0890160808a016158a8565b60075462ffffff600160201b8204811691600160381b9004166001600160a01b0389811690891614612cd0565b949350505050565b60026000541415610df25760405162461bcd60e51b8152600401610a1390615871565b600260005533610e0181612c43565b6001600160a01b0381811660008181526002602090815260409182902082516080810184527f0000000000000000000000000000000000000000000000000000000000000000909516855290840186905290830191909152600754610100900462ffffff166060830152610e7491612e4f565b806001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d583604051610eaf91815260200190565b60405180910390a250506001600055565b604080518082018252600080825260209182018190526001600160a01b038581168252600283528382209085168252825282902082518084019093528054835260010154908201525b92915050565b6001600160a01b0382166000908152600260205260408082209051632de9906b60e11b815273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__91635bd320d691610f5f919086906004016158ff565b602060405180830381865af4158015610f7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa09190615916565b9392505050565b6001600160a01b0381166000908152600260205260408082209051631caf045760e31b8152600481019190915273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__9063e57822b8906024015b602060405180830381865af4158015611011573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f099190615916565b61103d613089565b600260005414156110605760405162461bcd60e51b8152600401610a1390615871565b60026000553361106f81612c43565b6001600160a01b0381166000908152600260205260409020611093906005846130e3565b806001600160a01b03167f0880b0e717a57f3b5cbd3fc19396ae3c8cdee5c624c9289477869c38014c849583604051610eaf91815260200190565b6001600160a01b03811660009081526002602052604080822090516367dd27b160e01b8152600481019190915273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__906367dd27b190602401610ff4565b611127613089565b6002600054141561114a5760405162461bcd60e51b8152600401610a1390615871565b6002600055620f424062ffffff82161061119a5760405162461bcd60e51b815260206004820152601160248201527050455f5349523a20746f6f206c6172676560781b6044820152606401610a13565b60075462ffffff600160201b909104811690821610156111fc5760405162461bcd60e51b815260206004820152601c60248201527f50455f5349523a20736d616c6c6572207468616e206d6d526174696f000000006044820152606401610a13565b6007805463ffffff00191661010062ffffff8416908102919091179091556040519081527f04f9c1a24c6543f4b91577d82af28fb7ef6d7b9fe46acd0e5c36ef17073b94e6906020015b60405180910390a1506001600055565b61125e613089565b6112686000613112565b565b611272613089565b600260005414156112955760405162461bcd60e51b8152600401610a1390615871565b60026000556007805460ff191660ff83169081179091556040519081527fa7b4760b38e2a630f3073fcd5119972cbf81bd50e3761f86534a69661caf811090602001611246565b6001600160a01b038216600090815260026020526040808220905163af77d70760e01b815273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__9163af77d70791610f5f919086906004016158ff565b611334613089565b600260005414156113575760405162461bcd60e51b8152600401610a1390615871565b600260005561136e6001600160a01b038316612b8a565b6113ba5760405162461bcd60e51b815260206004820152601f60248201527f50455f53494d413a206d61726b6574206164647265737320696e76616c6964006044820152606401610a13565b801561148257306001600160a01b0316826001600160a01b031663d2f7265a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611408573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142c919061592f565b6001600160a01b0316146114825760405162461bcd60e51b815260206004820152601b60248201527f50455f53494d413a20646966666572656e742065786368616e676500000000006044820152606401610a13565b6001600160a01b038216600081815260096020908152604091829020805460ff191685151590811790915591519182527fd5d4c2e150c76234e0f5d390162d34c5c1e1405df2194cfbd63b12d9521b10279101610eaf565b6001600160a01b0382166000908152600260205260408082209051630d832e2160e31b815273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__91636c19710891610f5f919086906004016158ff565b6001600160a01b0381166000908152600260205260408082206007549151633c7e525f60e01b81526004810191909152600160201b90910462ffffff16602482015273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__90633c7e525f906044015b602060405180830381865af41580156115a9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0991906158e2565b600080600260005414156115f35760405162461bcd60e51b8152600401610a1390615871565b600260005560a083013561160681612b99565b61161660408501602086016155a9565b61161f81612bdb565b61163461162f60208701876155a9565b612c43565b600061170060028261164960208a018a6155a9565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518060e0016040528089602001602081019061168791906155a9565b6001600160a01b0316815260408a81013560208301526060808c0135918301919091526080808c013591830191909152600754600160201b810462ffffff169183019190915260ff1660a082015260c001336001600160a01b03166116ef60208c018c6155a9565b6001600160a01b0316149052613164565b9050600061171460408801602089016155a9565b6001600160a01b0316639482de1a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611751573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117759190615916565b905060006117896040890160208a016155a9565b6001600160a01b0316638ee8fe5d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ea9190615916565b90506117fc6040890160208a016155a9565b6001600160a01b031661181260208a018a6155a9565b6001600160a01b03167f2935383596639a6916071dea84c6ed5d6c6315fa9628268974458798fea93ebc8560a0015161184c57600061184e565b335b866000015187602001518d6040013589604001518a606001518b608001518b8b6040516118c8999897969594939291906001600160a01b03999099168952602089019790975260408801959095526060870193909352608086019190915260a085015260c084015260e08301526101008201526101200190565b60405180910390a350508051602090910151600160005590969095509350505050565b6118f3613089565b600260005414156119165760405162461bcd60e51b8152600401610a1390615871565b6002600055620f424061192c60208301836156ef565b62ffffff161061197e5760405162461bcd60e51b815260206004820152601f60248201527f50455f534c52433a20746f6f206c617267652072657761726420726174696f006044820152606401610a13565b6000611990604083016020840161595c565b61ffff16116119dd5760405162461bcd60e51b815260206004820152601960248201527850455f534c52433a20656d612074696d65206973207a65726f60381b6044820152606401610a13565b8060086119ea8282615979565b507f1185c4964ca5cd3d88d5dfbc1fb65b84d5533e3354f3b2163e8e1c0f35bca0e19050611a1b60208301836156ef565b611a2b604084016020850161595c565b6040805162ffffff909316835261ffff909116602083015201611246565b611a6d60405180606001604052806000815260200160008152602001600081525090565b506001600160a01b03808316600090815260026020818152604080842094861684526001948501825292839020835160608101855281548152948101549185019190915201549082015292915050565b60026000541415611ae05760405162461bcd60e51b8152600401610a1390615871565b600260005533611aef81612c43565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611bcd578115611b635760405162461bcd60e51b815260206004820152601560248201527450455f443a20616d6f756e74206e6f74207a65726f60581b6044820152606401610a13565b6001600160a01b0381166000908152600260205260409020611b85903461352d565b806001600160a01b03167f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c434604051611bc091815260200190565b60405180910390a2611ccb565b3415611c165760405162461bcd60e51b815260206004820152601860248201527750455f443a206d73672e76616c7565206e6f74207a65726f60401b6044820152606401610a13565b611c9060026000836001600160a01b03166001600160a01b0316815260200190815260200160002060405180606001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001858152602001846001600160a01b0316815250613595565b806001600160a01b03167f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c483604051610eaf91815260200190565b50506001600055565b611cdc613089565b60026000541415611cff5760405162461bcd60e51b8152600401610a1390615871565b600260005560075462ffffff61010090910481169082161115611d645760405162461bcd60e51b815260206004820152601b60248201527f50455f534d523a20626967676572207468616e20696d526174696f00000000006044820152606401610a13565b60008162ffffff1611611da85760405162461bcd60e51b815260206004820152600c60248201526b50455f534d523a207a65726f60a01b6044820152606401610a13565b6007805466ffffff000000001916600160201b62ffffff8416908102919091179091556040519081527ffbd0bf17b9833a130f5baeccbfc586acefc75be8ad5bb114f448e412adc4c05b90602001611246565b6001600160a01b0382166000908152600260205260408082209051632691409160e01b815273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__91632691409191610f5f919086906004016158ff565b6000611e5d60408301602084016155a9565b611e6681612bdb565b6000611e7560208501856155a9565b90506000611e8960608601604087016155a9565b9050611f5a60026000846001600160a01b03166001600160a01b03168152602001908152602001600020604051806101000160405280886020016020810190611ed291906155a9565b6001600160a01b03168152602001611ef060808a0160608b016158a8565b15158152602001611f0760a08a0160808b016158a8565b1515815260a0808a0135602083015260c08a0135604083015260075462ffffff600160201b820481166060850152600160381b9091041660808301526001600160a01b038781169087161491015261365b565b95945050505050565b6001600160a01b038116600090815260026020908152604091829020600401805483518184028101840190945280845260609392830182828015611fd057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611fb2575b50505050509050919050565b611fe4613089565b600260005414156120075760405162461bcd60e51b8152600401610a1390615871565b600260005561271062ffffff821611156120585760405162461bcd60e51b815260206004820152601260248201527150455f535046523a20746f6f206c6172676560701b6044820152606401610a13565b6007805462ffffff60381b1916600160381b62ffffff8416908102919091179091556040519081527f68c41b7a5c12c4d9cbb99ec284bf647922a75f379a90694e3ad65574f4ff944d90602001611246565b6000806000600260005414156120d25760405162461bcd60e51b8152600401610a1390615871565b600260005560a08401356120e581612b99565b6120f260208601866155a9565b6120fb81612bdb565b3361210581612c43565b6001600160a01b0381166000908152600260209081526040808320815160e0810190925261219192909190819061213e908d018d6155a9565b6001600160a01b0316815260208c810135908201526040808d0135908201526060808d0135908201526080808d01359082015260075462ffffff61010082041660a083015260ff1660c09091015261386c565b905060006121a260208a018a6155a9565b6001600160a01b0316639482de1a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122039190615916565b9050600061221460208b018b6155a9565b6001600160a01b0316638ee8fe5d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612251573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122759190615916565b6001600160a01b0385166000908152600260209081526040822092935090916001019082906122a6908e018e6155a9565b6001600160a01b0316815260208082019290925260400160002091506122ce908c018c6155a9565b845160208087015160408089015160018701546002880154835196875294860193909352908401526060830152608082015260a0810185905260c081018490526001600160a01b03918216918716907f228674ca516ab8f32325e25d1e16656e747d977df7f664467fd5f7b4e64ba00f9060e00160405180910390a35050815160208301516040909301516001600055909a92995097509095505050505050565b6000600260005414156123945760405162461bcd60e51b8152600401610a1390615871565b600260005560c08201356123a781612b99565b6123b760408401602085016155a9565b6123c081612bdb565b6123d061162f60208601866155a9565b60006123db85613be1565b90508061010001516060015164ffffffffff1660001461253e57600060068161240a6040890160208a016155a9565b6001600160a01b03166001600160a01b03168152602001908152602001600020600087604001602081019061243f91906158a8565b15158152602080820192909252604090810160009081206101008601516060015164ffffffffff1682529092529020546001600160a01b0316905061248381612c43565b6001600160a01b03811660009081526002602090815260409182902061253b9290916124b3918a01908a016155a9565b6124c360608a0160408b016158a8565b6124de576124d985610100015160200151613d56565b6124f0565b6124f085610100015160200151613d6a565b61250060608b0160408c016158a8565b61251b5761251686610100015160400151613d6a565b61252d565b61252d86610100015160400151613d56565b60075460009060ff16613dd8565b50505b600061255060408701602088016155a9565b6001600160a01b0316639482de1a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561258d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125b19190615916565b905060006125c560408801602089016155a9565b6001600160a01b0316638ee8fe5d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612602573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126269190615916565b90508260e001511561270457336126436040890160208a016155a9565b6001600160a01b031661265960208a018a6155a9565b6001600160a01b03167f7c3978559b662b8adf839d43cce2ec6ab7db3fdc995575e4576acc9e0628985d866000015187602001518860400151896060015189898c608001518d60a001518e60c001516040516126f799989796959493929190988952602089019790975260408801959095526060870193909352608086019190915260a085015260c084015260e08301526101008201526101200190565b60405180910390a461279a565b61271460408801602089016155a9565b6001600160a01b031661272a60208901896155a9565b84516020808701516040808901516060808b0151835196875294860193909352908401528201526080810185905260a081018490526001600160a01b0391909116907fe386a40c070a1424ae709b98c27e64993228f777c6294ef7149cf0ee42ef46e89060c00160405180910390a35b6127aa60608801604089016158a8565b15156127bc6080890160608a016158a8565b1515146127d35782516127ce90613ec9565b6127e0565b6127e08360200151613ec9565b6001600055979650505050505050565b6000600260005414156128155760405162461bcd60e51b8152600401610a1390615871565b6002600055608082013561282881612b99565b61283560208401846155a9565b61283e81612bdb565b3361284881612c43565b6001600160a01b038116600090815260026020908152604091829020825160c0810190935273__$20e084fd68fd7ab4ec93efaca84ca46fc4$__9263d34e48d4928190612897908b018b6155a9565b6001600160a01b0316815260200189604001358152602001896060013581526020018960200160208101906128cc91906158a8565b1515815260075462ffffff6101008204811660208085019190915260ff92831660409485015283516001600160e01b031960e089901b168152600481019690965284516001600160a01b031660248701528401516044860152918301516064850152606083015115156084850152608083015190911660a484015260a0909101511660c482015260e401602060405180830381865af4158015612973573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061299791906159c7565b935080600660006129ab60208901896155a9565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008760200160208101906129e091906158a8565b151581526020808201929092526040908101600090812064ffffffffff8916825283522080546001600160a01b0319166001600160a01b039390931692909217909155612a2f908601866155a9565b6001600160a01b039081169082167f22c125447e6a06158aefb2637c0f7d1a544b0bb331e126582be4a4e70d3e6c88612a6e6040890160208a016158a8565b6040805191151582528981013560208301526060808b01358383015264ffffffffff8a1690830152519081900360800190a35050600160005550919050565b6001600160a01b0381166000908152600260205260408082206007549151634d3a1f3d60e11b8152600481019190915261010090910462ffffff16602482015273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__90639a743e7a9060440161158c565b612b19613089565b6001600160a01b038116612b7e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a13565b612b8781613112565b50565b6001600160a01b03163b151590565b80421115612b875760405162461bcd60e51b815260206004820152600f60248201526e50455f43443a20746f6f206c61746560881b6044820152606401610a13565b6001600160a01b03811660009081526009602052604090205460ff16612b875760405162461bcd60e51b815260206004820152601a60248201527f50455f434d413a206d61726b6574206e6f7420616c6c6f7765640000000000006044820152606401610a13565b6001600160a01b038116600090815260026020526040908190206007549151635c02a9e960e01b8152600481019190915260ff909116602482015273__$20e084fd68fd7ab4ec93efaca84ca46fc4$__90635c02a9e99060440160006040518083038186803b158015612cb557600080fd5b505af4158015612cc9573d6000803e3d6000fd5b5050505050565b604051633c7e525f60e01b81526004810188905262ffffff84166024820152600090819073__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__90633c7e525f90604401602060405180830381865af4158015612d30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d5491906158e2565b15905082158015612d63575080155b15612d72576000915050612e44565b808015612d9857506001600160a01b038816600090815260018a01602052604090205415155b15612da7576000915050612e44565b62ffffff8416612e325760405163e8fa204f60e01b81528715156004820152861515602482015281151560448201526001600160a01b0389169063e8fa204f90606401602060405180830381865afa158015612e07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e2b9190615916565b9150612e42565b612e3f8888888785613ef2565b91505b505b979650505050505050565b6000816020015111612e975760405162461bcd60e51b8152602060048201526011602482015270159317d5ce881e995c9bc8185b5bdd5b9d607a1b6044820152606401610a13565b80516000906001600160a01b031615612f2257612f1d826020015183600001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ef4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f1891906159e4565b613fbd565b612f28565b81602001515b9050612f41612f3682613d6a565b60038501549061406f565b60038401556060820151604051634d3a1f3d60e11b81526004810185905262ffffff909116602482015273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__90639a743e7a90604401602060405180830381865af4158015612fa7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fcb91906158e2565b6130175760405162461bcd60e51b815260206004820152601f60248201527f564c5f573a206e6f7420656e6f75676820696e697469616c206d617267696e006044820152606401610a13565b81516001600160a01b031661306d5781604001516001600160a01b03166108fc83602001519081150290604051600060405180830381858888f19350505050158015613067573d6000803e3d6000fd5b50505050565b61308482600001518360400151846020015161407b565b505050565b6001546001600160a01b031633146112685760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a13565b6130fa6130ef82613d6a565b6003850154906140de565b6003840155815461310b90826140ea565b9091555050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61319f6040518060c0016040528060008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b6080820151604051633c7e525f60e01b81526004810185905262ffffff909116602482015273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__90633c7e525f90604401602060405180830381865af4158015613200573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061322491906158e2565b1560a082015260c0820151613277578060a001516132775760405162461bcd60e51b815260206004820152601060248201526f4d4c5f524c3a20656e6f756768206d6d60801b6044820152606401610a13565b81516001600160a01b039081166000908152600185810160209081526040808420875192880151938101546002820154925163933c797960e01b81526004810195909552602485015260448401919091529293169063933c7979906064016040805180830381865afa1580156132f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613315919061584d565b84604001856060018281525082815250505083600001516001600160a01b0316638ee8fe5d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613369573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061338d9190615916565b84516020860151604051639c8f9f2360e01b815260048101919091529193506001600160a01b03169150639c8f9f239060240160408051808303816000875af11580156133de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613402919061584d565b60208401528083526040840151111561342d5760405162461bcd60e51b8152600401610a1390615a01565b8260600151826020015110156134555760405162461bcd60e51b8152600401610a1390615a01565b6134706134658360000151613d6a565b6040840151906140de565b604083015260208201516134929061348790613d6a565b6060840151906140de565b606083015282516001600160a01b0316600090815260018501602090815260409091209084015181546134c4916140ea565b905560006134e46134d483613d6a565b604085015190600160601b6140f6565b6134ed90615a4e565b905061351f85856000015185604001518461351586896060015161406f90919063ffffffff16565b8960a00151613dd8565b608084015250909392505050565b600081116135725760405162461bcd60e51b8152602060048201526012602482015271159317d1114e881e995c9bc8185b5bdd5b9d60721b6044820152606401610a13565b61358961357e82613d6a565b6003840154906140de565b60039092019190915550565b60008160200151116135dd5760405162461bcd60e51b8152602060048201526011602482015270159317d10e881e995c9bc8185b5bdd5b9d607a1b6044820152606401610a13565b6135f481600001518260400151836020015161419a565b6000613640826020015183600001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ef4573d6000803e3d6000fd5b905061364e6130ef82613d6a565b6003909301929092555050565b60a0810151604051633c7e525f60e01b81526004810184905262ffffff9091166024820152600090819073__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__90633c7e525f90604401602060405180830381865af41580156136c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136e591906158e2565b1590508260e0015161373257806137325760405162461bcd60e51b8152602060048201526011602482015270544c5f4f50443a20656e6f756768206d6d60781b6044820152606401610a13565b801561379d5782516001600160a01b031660009081526001850160205260409020541561379d5760405162461bcd60e51b8152602060048201526019602482015278544c5f4f50443a206e6f206d616b6572207768656e206c697160381b6044820152606401610a13565b60c083015162ffffff1661383357825160208401516040808601516060870151915162de853760e31b81526001600160a01b03909416936306f429b8936137eb939092918790600401615a6b565b602060405180830381865afa158015613808573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061382c9190615916565b9150613859565b61385583600001518460200151856040015186606001518760c00151866142dd565b5091505b6109e983604001518385608001516144e5565b61389060405180606001604052806000815260200160008152602001600081525090565b81516001600160a01b039081166000908152600185016020526040808220855182516379144ba960e11b815283519295859492169263f2289752926004808401939192918290030181865afa1580156138ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613911919061584d565b865160208801516040808a01519051634e6a20ed60e11b8152600481019290925260248201529294509092506001600160a01b031690639cd441da906044016060604051808303816000875af115801561396f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139939190615a8a565b60408701526020860152808552606086015111156139f35760405162461bcd60e51b815260206004820152601c60248201527f4d4c5f414c3a20746f6f20736d616c6c206f75747075742062617365000000006044820152606401610a13565b846080015184602001511015613a4b5760405162461bcd60e51b815260206004820152601d60248201527f4d4c5f414c3a20746f6f20736d616c6c206f75747075742071756f74650000006044820152606401610a13565b82546040850151613a5d90829061458b565b8455604085015185516001860154613a79928492909187614597565b8460010181905550613a9a8186604001518760200151876002015486614597565b6002850155855160c087015160405163724055e760e01b815273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__9263724055e792613adf928c929190600401615ab8565b60006040518083038186803b158015613af757600080fd5b505af4158015613b0b573d6000803e3d6000fd5b5050505060a0860151604051634d3a1f3d60e11b81526004810189905262ffffff909116602482015273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__90639a743e7a90604401602060405180830381865af4158015613b70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b9491906158e2565b613bd75760405162461bcd60e51b81526020600482015260146024820152734d4c5f414c3a206e6f7420656e6f75676820696d60601b6044820152606401610a13565b5050505092915050565b613be9615512565b610f0960026000613bfd60208601866155a9565b6001600160a01b03166001600160a01b0316815260200190815260200160002060026000613c283390565b6001600160a01b03166001600160a01b0316815260200190815260200160002060030160036005604051806101600160405280886020016020810190613c6e91906155a9565b6001600160a01b03168152602001613c8c60608a0160408b016158a8565b15158152602001613ca360808a0160608b016158a8565b151581526080808a0135602083015260a0808b0135604084015260075462ffffff600160201b820481166060860152610100820481169385019390935260ff811691840191909152600160381b90041660c082015260e001613d023390565b6001600160a01b0316613d1860208b018b6155a9565b6001600160a01b03161481526040805180820190915260085462ffffff811682526301000000900461ffff16602080830191909152909101526145e0565b6000613d6182613d6a565b610f0990615a4e565b60006001600160ff1b03821115613dd45760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b6064820152608401610a13565b5090565b6001600160a01b0385166000908152602087815260408083208151808301909252805482526001015491810191909152613e1490868686614993565b6001600160a01b038816600090815260208a81526040909120835181559201516001909201919091556003880154909150613e4f90826140de565b600388015560405163724055e760e01b815273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__9063724055e790613e8f908a908a908790600401615ab8565b60006040518083038186803b158015613ea757600080fd5b505af4158015613ebb573d6000803e3d6000fd5b505050509695505050505050565b600080821215613ee957613ee4613edf83614b9f565b614bfd565b610f09565b610f0982614bfd565b60405163e8fa204f60e01b81528415156004820152831515602482015281151560448201526000906001600160a01b0387169063e8fa204f90606401602060405180830381865afa158015613f4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f6f9190615916565b90508315613fa0578415613f8257611f5a565b613f99613f92620f424085614c4f565b8290614cb5565b9050611f5a565b8415611f5a57613f99613fb6620f424085614c4f565b8290614cca565b600080613fd7613fcf8460ff16613d6a565b60129061406f565b90506000613fe482613ec9565b9050604d8111156140375760405162461bcd60e51b815260206004820152601f60248201527f564c5f5443413a20746f6f206c6172676520646563696d616c732064696666006044820152606401610a13565b600082121561405a5761405561404e82600a615bbe565b8690614cdf565b611f5a565b611f5a61406882600a615bbe565b8690614ceb565b6000610fa08284615bca565b6040516001600160a01b03831660248201526044810182905261308490849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614cf7565b6000610fa08284615c09565b6000610fa08284615c4a565b600080600085126141075784614110565b61411085614b9f565b90506000808512614121578461412a565b61412a85614b9f565b90506000808712801561413d5750600086135b8061415357506000871380156141535750600086125b61415e576000614161565b60015b90506000614170848488614dc9565b9050816141855761418081613d6a565b61418e565b61418e81613d56565b98975050505050505050565b6040516370a0823160e01b81526000906001600160a01b038516906370a08231906141c99030906004016156ca565b602060405180830381865afa1580156141e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061420a9190615916565b905061421884843085614e97565b8161429082866001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161424991906156ca565b602060405180830381865afa158015614266573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061428a9190615916565b906140ea565b146130675760405162461bcd60e51b815260206004820152601c60248201527f564c5f5454493a20696e636f6e73697374656e742062616c616e6365000000006044820152606401610a13565b600080851561440557861561437d5760405162de853760e31b81526001600160a01b038916906306f429b89061431d908a908a908a908990600401615a6b565b602060405180830381865afa15801561433a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061435e9190615916565b915061436a8285614cca565b905061437682826140ea565b91506144da565b6143878585614cca565b90506001600160a01b0388166306f429b888886143a489866140ea565b876040518563ffffffff1660e01b81526004016143c49493929190615a6b565b602060405180830381865afa1580156143e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143769190615916565b8615614443576144268561428a61441f620f424088614c4f565b8890614cb5565b90506001600160a01b0388166306f429b888886143a4898661458b565b60405162de853760e31b81526000906001600160a01b038a16906306f429b890614477908b908b908b908a90600401615a6b565b602060405180830381865afa158015614494573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144b89190615916565b90506144ca613f92620f424087614c4f565b92506144d683826140ea565b9150505b965096945050505050565b821561453b57808210156130845760405162461bcd60e51b815260206004820181905260248201527f544c5f56533a20746f6f20736d616c6c206f70706f7369746520616d6f756e746044820152606401610a13565b808211156130845760405162461bcd60e51b815260206004820181905260248201527f544c5f56533a20746f6f206c61726765206f70706f7369746520616d6f756e746044820152606401610a13565b6000610fa08284615c61565b6000806145a4878761458b565b90506145bf6145b886600160601b89614dc9565b849061458b565b9250612e446145cf848884614dc9565b6145da868a85614dc9565b9061458b565b6145e8615512565b60a0820151604051633c7e525f60e01b81526004810188905262ffffff909116602482015273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__90633c7e525f90604401602060405180830381865af4158015614649573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061466d91906158e2565b1560e08201526101208201516146c1578060e001516146c15760405162461bcd60e51b815260206004820152601060248201526f544c5f4f503a20656e6f756768206d6d60801b6044820152606401610a13565b8060e00151156147345781516001600160a01b03166000908152600187016020526040902054156147345760405162461bcd60e51b815260206004820181905260248201527f544c5f4f503a206e6f206d616b6572207768656e206c69717569646174696f6e6044820152606401610a13565b600086600001600084600001516001600160a01b03166001600160a01b031681526020019081526020016000206000015490506147e3878560405180610100016040528087600001516001600160a01b0316815260200187602001511515815260200187604001511515815260200187606001518152602001876080015181526020018760e0015160ff16815260200187610100015162ffffff1681526020018660e001511515815250614ecf565b61010087015260608601526040850152602084015280835260009081906148099061500a565b845161481f9061481a9086906140de565b61500a565b6148299190615c79565b1390508260e00151156148ba5780156148845760405162461bcd60e51b815260206004820152601f60248201527f544c5f4f503a206e6f206f70656e207768656e206c69717569646174696f6e006044820152606401610a13565b6148aa8860030188888760a001518861014001516148a58960200151613ec9565b615032565b60c086015260a085015260808401525b80156149885760c0840151604051634d3a1f3d60e11b8152600481018a905262ffffff909116602482015273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__90639a743e7a90604401602060405180830381865af4158015614921573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061494591906158e2565b6149885760405162461bcd60e51b8152602060048201526014602482015273544c5f4f503a206e6f7420656e6f75676820696d60601b6044820152606401610a13565b505095945050505050565b60408051808201909152600080825260208201526000841515806149b657508315155b15614ac9576149c48461500a565b6149cd8661500a565b6149d79190615c79565b60001914614a205760405162461bcd60e51b8152602060048201526016602482015275151317d05515108e881a5b9d985b1a59081a5b9c1d5d60521b6044820152606401610a13565b614a298561500a565b8651614a349061500a565b614a3e9190615c79565b6000191415614ac9576000614a5286613ec9565b90506000614a638860000151613ec9565b9050808211614a9a576000614a86614a7a84613d6a565b60208b015190846140f6565b9050614a9287826140de565b935050614ac6565b6000614ab0614aa883613d6a565b8890856140f6565b60208a0151909150614ac290826140de565b9350505b50505b614ad381846140de565b8651909150600090614ae590876140de565b90506000614b1483614b0e87614b088a8d602001516140de90919063ffffffff16565b906140de565b9061406f565b905081158015614b22575080155b80614b495750614b318161500a565b614b3a8361500a565b614b449190615c79565b600019145b614b8c5760405162461bcd60e51b81526020600482015260146024820152732a262fa0aa2a211d103732bb32b91037b1b1bab960611b6044820152606401610a13565b9083526020830152909590945092505050565b6000600160ff1b8213614bf45760405162461bcd60e51b815260206004820152601c60248201527f506572704d6174683a20696e76657273696f6e206f766572666c6f77000000006044820152606401610a13565b610f0982615a4e565b600080821215613dd45760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f7369746976656044820152606401610a13565b60008262ffffff168262ffffff161115614cab5760405162461bcd60e51b815260206004820152601e60248201527f506572704d6174683a207375627472616374696f6e206f766572666c6f7700006044820152606401610a13565b610fa08284615cfe565b6000610fa083620f42408462ffffff16614dc9565b6000610fa0838362ffffff16620f4240614dc9565b6000610fa08284615d38565b6000610fa08284615d5a565b6000614d4c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166150cf9092919063ffffffff16565b8051909150156130845780806020019051810190614d6a91906158e2565b6130845760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610a13565b600080806000198587098587029250828110838203039150508060001415614e0457838281614dfa57614dfa615d22565b0492505050610fa0565b838110614e2e57604051631dcf306360e21b81526004810182905260248101859052604401610a13565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6040516001600160a01b03808516602483015283166044820152606481018290526130679085906323b872dd60e01b906084016140a7565b600080600080614edd615565565b60c086015160009062ffffff1615614f2257614f1688886000015189602001518a604001518b606001518c60c001518d60e001516150de565b90945092509050614fb2565b865160208801516040808a015160608b015160e08c015192516380796d5560e01b81526001600160a01b03909516946380796d5594614f679490939291600401615a6b565b6080604051808303816000875af1158015614f86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614faa9190615d79565b805190925090505b614fc587604001518289608001516144e5565b614fdd87602001518860400151896060015184615317565b8096508197505050614ffc898860000151888860008c60a00151613dd8565b935050939792965093509350565b600080821361502a5760008212615022576000610f09565b600019610f09565b600192915050565b600080806150408487614cca565b8551909350615050908490614cca565b915061505c83836140ea565b9050615075876001015483876020015161ffff16615386565b6001890191909155915061509361508b84613d6a565b8a549061406f565b89556150a96150a183613d6a565b8954906140de565b88556150bf6150b782613d6a565b8854906140de565b9096559097909650939450505050565b6060610dc784846000856153ba565b6000806150e9615565565b861561522257871561518d576040516380796d5560e01b81526001600160a01b038a16906380796d5590615127908b908b908b908a90600401615a6b565b6080604051808303816000875af1158015615146573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061516a9190615d79565b80519350905061517a8386614cca565b915061518683836140ea565b92506152fa565b6151978686614cca565b91506001600160a01b0389166380796d5589896151b48a876140ea565b886040518563ffffffff1660e01b81526004016151d49493929190615a6b565b6080604051808303816000875af11580156151f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906152179190615d79565b8051935090506152fa565b8715615260576152438661428a61523c620f424089614c4f565b8990614cb5565b91506001600160a01b0389166380796d5589896151b48a8761458b565b6040516380796d5560e01b81526001600160a01b038a16906380796d5590615292908b908b908b908a90600401615a6b565b6080604051808303816000875af11580156152b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906152d59190615d79565b80519091506152ea613f92620f424088614c4f565b93506152f684826140ea565b9250505b8954615306908361458b565b909955909890979650945050505050565b60008084156153535785156153415761532f84613d56565b61533884613d6a565b9150915061537d565b61534a83613d6a565b61533885613d56565b851561536b5761536283613d56565b61533885613d6a565b61537484613d6a565b61533884613d56565b94509492505050565b600080615393858561458b565b94506153a48562ffffff8516614cdf565b90506153b085826140ea565b9150935093915050565b60608247101561541b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610a13565b61542485612b8a565b6154705760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a13565b600080866001600160a01b0316858760405161548c9190615e1f565b60006040518083038185875af1925050503d80600081146154c9576040519150601f19603f3d011682016040523d82523d6000602084013e6154ce565b606091505b5091509150612e44828286606083156154e8575081610fa0565b8251156154f85782518084602001fd5b8160405162461bcd60e51b8152600401610a139190615e3b565b60405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600015158152602001615560615565565b905290565b6040518060800160405280600081526020016000815260200160008152602001600064ffffffffff1681525090565b6001600160a01b0381168114612b8757600080fd5b6000602082840312156155bb57600080fd5b8135610fa081615594565b6000608082840312156155d857600080fd5b50919050565b600060a082840312156155d857600080fd5b600060a0828403121561560257600080fd5b610fa083836155de565b60006020828403121561561e57600080fd5b5035919050565b6000806040838503121561563857600080fd5b823561564381615594565b9150602083013561565381615594565b809150509250929050565b8015158114612b8757600080fd5b64ffffffffff81168114612b8757600080fd5b60008060006060848603121561569457600080fd5b833561569f81615594565b925060208401356156af8161565e565b915060408401356156bf8161566c565b809150509250925092565b6001600160a01b0391909116815260200190565b62ffffff81168114612b8757600080fd5b60006020828403121561570157600080fd5b8135610fa0816156de565b60ff81168114612b8757600080fd5b60006020828403121561572d57600080fd5b8135610fa08161570c565b6000806040838503121561574b57600080fd5b823561575681615594565b915060208301356156538161565e565b600060c082840312156155d857600080fd5b600060c0828403121561578a57600080fd5b610fa08383615766565b6000604082840312156155d857600080fd5b600060e082840312156155d857600080fd5b600060e082840312156157ca57600080fd5b610fa083836157a6565b6020808252825182820181905260009190848201906040850190845b818110156158155783516001600160a01b0316835292840192918401916001016157f0565b50909695505050505050565b6000806040838503121561583457600080fd5b823561583f81615594565b946020939093013593505050565b6000806040838503121561586057600080fd5b505080516020909101519092909150565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000602082840312156158ba57600080fd5b8135610fa08161565e565b6000602082840312156158d757600080fd5b8135610fa08161566c565b6000602082840312156158f457600080fd5b8151610fa08161565e565b9182526001600160a01b0316602082015260400190565b60006020828403121561592857600080fd5b5051919050565b60006020828403121561594157600080fd5b8151610fa081615594565b61ffff81168114612b8757600080fd5b60006020828403121561596e57600080fd5b8135610fa08161594c565b8135615984816156de565b62ffffff8116905081548162ffffff19821617835560208401356159a78161594c565b64ffff0000008160181b168364ffffffffff198416171784555050505050565b6000602082840312156159d957600080fd5b8151610fa08161566c565b6000602082840312156159f657600080fd5b8151610fa08161570c565b6020808252601c908201527f4d4c5f524c3a20746f6f20736d616c6c206f7574707574206261736500000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000600160ff1b821415615a6457615a64615a38565b5060000390565b9315158452911515602084015260408301521515606082015260800190565b600080600060608486031215615a9f57600080fd5b8351925060208401519150604084015190509250925092565b9283526001600160a01b0391909116602083015260ff16604082015260600190565b600181815b80851115615b15578160001904821115615afb57615afb615a38565b80851615615b0857918102915b93841c9390800290615adf565b509250929050565b600082615b2c57506001610f09565b81615b3957506000610f09565b8160018114615b4f5760028114615b5957615b75565b6001915050610f09565b60ff841115615b6a57615b6a615a38565b50506001821b610f09565b5060208310610133831016604e8410600b8410161715615b98575081810a610f09565b615ba28383615ada565b8060001904821115615bb657615bb6615a38565b029392505050565b6000610fa08383615b1d565b60008083128015600160ff1b850184121615615be857615be8615a38565b6001600160ff1b0384018313811615615c0357615c03615a38565b50500390565b600080821280156001600160ff1b0384900385131615615c2b57615c2b615a38565b600160ff1b8390038412811615615c4457615c44615a38565b50500190565b600082821015615c5c57615c5c615a38565b500390565b60008219821115615c7457615c74615a38565b500190565b60006001600160ff1b0381841382841380821686840486111615615c9f57615c9f615a38565b600160ff1b6000871282811687830589121615615cbe57615cbe615a38565b60008712925087820587128484161615615cda57615cda615a38565b87850587128184161615615cf057615cf0615a38565b505050929093029392505050565b600062ffffff83811690831681811015615d1a57615d1a615a38565b039392505050565b634e487b7160e01b600052601260045260246000fd5b600082615d5557634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615615d7457615d74615a38565b500290565b600060808284031215615d8b57600080fd5b6040516080810181811067ffffffffffffffff82111715615dbc57634e487b7160e01b600052604160045260246000fd5b80604052508251815260208301516020820152604083015160408201526060830151615de78161566c565b60608201529392505050565b60005b83811015615e0e578181015183820152602001615df6565b838111156130675750506000910152565b60008251615e31818460208701615df3565b9190910192915050565b6020815260008251806020840152615e5a816040850160208701615df3565b601f01601f1916919091016040019291505056fea26469706673582212204dea7f4a97cd8b10eaf9740abe2f35d5664dbcf2b48fa57a953410ffbe104d2264736f6c634300080c0033",
  "libraries": {
    "AccountLibrary": "0xF84762AA944658ea511bf9b1BD067c2c50fFa4aE",
    "MakerOrderBookLibrary": "0xFA8B7afC23A3Afd7f2800aC0c13310f7E1ebDC8D"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "PRBMath__MulDivOverflow(uint256,uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 925,
        "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 550,
        "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6149,
        "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
        "label": "accountInfos",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(AccountInfo)14774_storage)"
      },
      {
        "astId": 6153,
        "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
        "label": "insuranceFundInfo",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(InsuranceFundInfo)14779_storage"
      },
      {
        "astId": 6157,
        "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
        "label": "protocolInfo",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(ProtocolInfo)14782_storage"
      },
      {
        "astId": 6165,
        "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
        "label": "orderIdToTrader",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_bool,t_mapping(t_uint40,t_address)))"
      },
      {
        "astId": 6176,
        "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
        "label": "maxMarketsPerAccount",
        "offset": 0,
        "slot": "7",
        "type": "t_uint8"
      },
      {
        "astId": 6180,
        "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
        "label": "imRatio",
        "offset": 1,
        "slot": "7",
        "type": "t_uint24"
      },
      {
        "astId": 6184,
        "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
        "label": "mmRatio",
        "offset": 4,
        "slot": "7",
        "type": "t_uint24"
      },
      {
        "astId": 6188,
        "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
        "label": "protocolFeeRatio",
        "offset": 7,
        "slot": "7",
        "type": "t_uint24"
      },
      {
        "astId": 6197,
        "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
        "label": "liquidationRewardConfig",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(LiquidationRewardConfig)14787_storage"
      },
      {
        "astId": 6202,
        "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
        "label": "isMarketAllowed",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_bool,t_mapping(t_uint40,t_address)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bool => mapping(uint40 => address)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bool,t_mapping(t_uint40,t_address))"
      },
      "t_mapping(t_address,t_struct(AccountInfo)14774_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PerpdexStructs.AccountInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(AccountInfo)14774_storage"
      },
      "t_mapping(t_address,t_struct(LimitOrderInfo)14749_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PerpdexStructs.LimitOrderInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(LimitOrderInfo)14749_storage"
      },
      "t_mapping(t_address,t_struct(MakerInfo)14742_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PerpdexStructs.MakerInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(MakerInfo)14742_storage"
      },
      "t_mapping(t_address,t_struct(TakerInfo)14735_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PerpdexStructs.TakerInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TakerInfo)14735_storage"
      },
      "t_mapping(t_bool,t_mapping(t_uint40,t_address))": {
        "encoding": "mapping",
        "key": "t_bool",
        "label": "mapping(bool => mapping(uint40 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint40,t_address)"
      },
      "t_mapping(t_uint40,t_address)": {
        "encoding": "mapping",
        "key": "t_uint40",
        "label": "mapping(uint40 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint40,t_struct(Node)19263_storage)": {
        "encoding": "mapping",
        "key": "t_uint40",
        "label": "mapping(uint40 => struct BokkyPooBahsRedBlackTreeLibrary.Node)",
        "numberOfBytes": "32",
        "value": "t_struct(Node)19263_storage"
      },
      "t_struct(AccountInfo)14774_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.AccountInfo",
        "members": [
          {
            "astId": 14757,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "takerInfos",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_struct(TakerInfo)14735_storage)"
          },
          {
            "astId": 14762,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "makerInfos",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_struct(MakerInfo)14742_storage)"
          },
          {
            "astId": 14767,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "limitOrderInfos",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_struct(LimitOrderInfo)14749_storage)"
          },
          {
            "astId": 14770,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "vaultInfo",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(VaultInfo)14752_storage"
          },
          {
            "astId": 14773,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "markets",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(InsuranceFundInfo)14779_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.InsuranceFundInfo",
        "members": [
          {
            "astId": 14776,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 14778,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "liquidationRewardBalance",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(LimitOrderInfo)14749_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.LimitOrderInfo",
        "members": [
          {
            "astId": 14745,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "ask",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Tree)19271_storage"
          },
          {
            "astId": 14748,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "bid",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Tree)19271_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(LiquidationRewardConfig)14787_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.LiquidationRewardConfig",
        "members": [
          {
            "astId": 14784,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "rewardRatio",
            "offset": 0,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 14786,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "smoothEmaTime",
            "offset": 3,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(MakerInfo)14742_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.MakerInfo",
        "members": [
          {
            "astId": 14737,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "liquidity",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 14739,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "cumBaseSharePerLiquidityX96",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 14741,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "cumQuotePerLiquidityX96",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Node)19263_storage": {
        "encoding": "inplace",
        "label": "struct BokkyPooBahsRedBlackTreeLibrary.Node",
        "members": [
          {
            "astId": 19254,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "parent",
            "offset": 0,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 19256,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "left",
            "offset": 5,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 19258,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "right",
            "offset": 10,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 19260,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "red",
            "offset": 15,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 19262,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "userData",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ProtocolInfo)14782_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.ProtocolInfo",
        "members": [
          {
            "astId": 14781,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "protocolFee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TakerInfo)14735_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.TakerInfo",
        "members": [
          {
            "astId": 14732,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "baseBalanceShare",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 14734,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "quoteBalance",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Tree)19271_storage": {
        "encoding": "inplace",
        "label": "struct BokkyPooBahsRedBlackTreeLibrary.Tree",
        "members": [
          {
            "astId": 19265,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "root",
            "offset": 0,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 19270,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "nodes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint40,t_struct(Node)19263_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(VaultInfo)14752_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.VaultInfo",
        "members": [
          {
            "astId": 14751,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "collateralBalance",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}