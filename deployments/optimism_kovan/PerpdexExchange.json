{
  "address": "0xDf4D877c5e1067BA130bf97bF7a194a9B9a92940",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "settlementTokenArg",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivOverflow",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "ImRatioChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isMarketAllowed",
          "type": "bool"
        }
      ],
      "name": "IsMarketAllowedChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "rewardRatio",
          "type": "uint24"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "smoothEmaTime",
          "type": "uint16"
        }
      ],
      "name": "LiquidationRewardConfigChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cumBasePerLiquidityX96",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cumQuotePerLiquidityX96",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseBalancePerShareX96",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharePriceAfterX96",
          "type": "uint256"
        }
      ],
      "name": "LiquidityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "takerBase",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "takerQuote",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "realizedPnl",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseBalancePerShareX96",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharePriceAfterX96",
          "type": "uint256"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "value",
          "type": "uint8"
        }
      ],
      "name": "MaxMarketsPerAccountChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "MmRatioChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "base",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "quote",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "realizedPnl",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseBalancePerShareX96",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharePriceAfterX96",
          "type": "uint256"
        }
      ],
      "name": "PositionChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "base",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "quote",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "realizedPnl",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseBalancePerShareX96",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharePriceAfterX96",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidationPenalty",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidationReward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "insuranceFundReward",
          "type": "uint256"
        }
      ],
      "name": "PositionLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "ProtocolFeeRatioChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ProtocolFeeTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accountInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "collateralBalance",
              "type": "int256"
            }
          ],
          "internalType": "struct PerpdexStructs.VaultInfo",
          "name": "vaultInfo",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "market",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "base",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quote",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minQuote",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPerpdexExchange.AddLiquidityParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getAccountMarkets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "getMakerInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cumBaseSharePerLiquidityX96",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cumQuotePerLiquidityX96",
              "type": "uint256"
            }
          ],
          "internalType": "struct PerpdexStructs.MakerInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "getOpenPositionNotional",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "getOpenPositionShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "getPositionNotional",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "getPositionShare",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "getTakerInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "baseBalanceShare",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "quoteBalance",
              "type": "int256"
            }
          ],
          "internalType": "struct PerpdexStructs.TakerInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getTotalAccountValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getTotalOpenPositionNotional",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getTotalPositionNotional",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "hasEnoughInitialMargin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "hasEnoughMaintenanceMargin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "imRatio",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "insuranceFundInfo",
      "outputs": [
        {
          "internalType": "int256",
          "name": "balance",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationRewardBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isMarketAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationRewardConfig",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "rewardRatio",
          "type": "uint24"
        },
        {
          "internalType": "uint16",
          "name": "smoothEmaTime",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMarketsPerAccount",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "market",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "caller",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isBaseToQuote",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isExactInput",
              "type": "bool"
            }
          ],
          "internalType": "struct IPerpdexExchange.MaxTradeParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "maxTrade",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mmRatio",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "market",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "caller",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isBaseToQuote",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isExactInput",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "oppositeAmountBound",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPerpdexExchange.PreviewTradeParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "previewTrade",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "oppositeAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeRatio",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quoteDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "market",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minQuote",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPerpdexExchange.RemoveLiquidityParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "balance",
          "type": "int256"
        }
      ],
      "name": "setCollateralBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "setImRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setIsMarketAllowed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint24",
              "name": "rewardRatio",
              "type": "uint24"
            },
            {
              "internalType": "uint16",
              "name": "smoothEmaTime",
              "type": "uint16"
            }
          ],
          "internalType": "struct PerpdexStructs.LiquidationRewardConfig",
          "name": "value",
          "type": "tuple"
        }
      ],
      "name": "setLiquidationRewardConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "value",
          "type": "uint8"
        }
      ],
      "name": "setMaxMarketsPerAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "setMmRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "setProtocolFeeRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settlementToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "market",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isBaseToQuote",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isExactInput",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "oppositeAmountBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPerpdexExchange.TradeParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "trade",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "oppositeAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb88a3a97d111fee3217721b7e862bb698ee05efeb8b20670c42bc10dd506e79c",
  "receipt": {
    "to": null,
    "from": "0x4B78eCe4AA1be3495713199380635537C5fB2326",
    "contractAddress": "0xDf4D877c5e1067BA130bf97bF7a194a9B9a92940",
    "transactionIndex": 0,
    "gasUsed": "4995269",
    "logsBloom": "0x
    "blockHash": "0x033b85d90232db7835fcd355eb2c75b22af529519960ce5d010c2af0e2405008",
    "transactionHash": "0xb88a3a97d111fee3217721b7e862bb698ee05efeb8b20670c42bc10dd506e79c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5301560,
        "transactionHash": "0xb88a3a97d111fee3217721b7e862bb698ee05efeb8b20670c42bc10dd506e79c",
        "address": "0xDf4D877c5e1067BA130bf97bF7a194a9B9a92940",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004b78ece4aa1be3495713199380635537c5fb2326"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x033b85d90232db7835fcd355eb2c75b22af529519960ce5d010c2af0e2405008"
      }
    ],
    "blockNumber": 5301560,
    "cumulativeGasUsed": "4995269",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "6351b3da456677a3b3f260083ba05335",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"settlementTokenArg\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivOverflow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"ImRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isMarketAllowed\",\"type\":\"bool\"}],\"name\":\"IsMarketAllowedChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"rewardRatio\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"smoothEmaTime\",\"type\":\"uint16\"}],\"name\":\"LiquidationRewardConfigChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cumBasePerLiquidityX96\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cumQuotePerLiquidityX96\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseBalancePerShareX96\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharePriceAfterX96\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"takerBase\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"takerQuote\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"realizedPnl\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseBalancePerShareX96\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharePriceAfterX96\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"value\",\"type\":\"uint8\"}],\"name\":\"MaxMarketsPerAccountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"MmRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"base\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"quote\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"realizedPnl\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseBalancePerShareX96\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharePriceAfterX96\",\"type\":\"uint256\"}],\"name\":\"PositionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"base\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"quote\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"realizedPnl\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseBalancePerShareX96\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharePriceAfterX96\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationPenalty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"insuranceFundReward\",\"type\":\"uint256\"}],\"name\":\"PositionLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"ProtocolFeeRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeeTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"collateralBalance\",\"type\":\"int256\"}],\"internalType\":\"struct PerpdexStructs.VaultInfo\",\"name\":\"vaultInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IPerpdexExchange.AddLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getAccountMarkets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getMakerInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumBaseSharePerLiquidityX96\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumQuotePerLiquidityX96\",\"type\":\"uint256\"}],\"internalType\":\"struct PerpdexStructs.MakerInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getOpenPositionNotional\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getOpenPositionShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getPositionNotional\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getPositionShare\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getTakerInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"baseBalanceShare\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quoteBalance\",\"type\":\"int256\"}],\"internalType\":\"struct PerpdexStructs.TakerInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getTotalAccountValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getTotalOpenPositionNotional\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getTotalPositionNotional\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"hasEnoughInitialMargin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"hasEnoughMaintenanceMargin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"imRatio\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insuranceFundInfo\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"balance\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRewardBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMarketAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationRewardConfig\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"rewardRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"smoothEmaTime\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMarketsPerAccount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBaseToQuote\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isExactInput\",\"type\":\"bool\"}],\"internalType\":\"struct IPerpdexExchange.MaxTradeParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"maxTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mmRatio\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBaseToQuote\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isExactInput\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oppositeAmountBound\",\"type\":\"uint256\"}],\"internalType\":\"struct IPerpdexExchange.PreviewTradeParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"previewTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"oppositeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeRatio\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IPerpdexExchange.RemoveLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"balance\",\"type\":\"int256\"}],\"name\":\"setCollateralBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"setImRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setIsMarketAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint24\",\"name\":\"rewardRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"smoothEmaTime\",\"type\":\"uint16\"}],\"internalType\":\"struct PerpdexStructs.LiquidationRewardConfig\",\"name\":\"value\",\"type\":\"tuple\"}],\"name\":\"setLiquidationRewardConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"value\",\"type\":\"uint8\"}],\"name\":\"setMaxMarketsPerAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"setMmRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"setProtocolFeeRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settlementToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBaseToQuote\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isExactInput\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oppositeAmountBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IPerpdexExchange.TradeParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"trade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"oppositeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"PRBMath__MulDivOverflow(uint256,uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/DebugPerpdexExchange.sol\":\"DebugPerpdexExchange\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248) {\\n        require(value >= type(int248).min && value <= type(int248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return int248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240) {\\n        require(value >= type(int240).min && value <= type(int240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return int240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232) {\\n        require(value >= type(int232).min && value <= type(int232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return int232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224) {\\n        require(value >= type(int224).min && value <= type(int224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return int224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216) {\\n        require(value >= type(int216).min && value <= type(int216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return int216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208) {\\n        require(value >= type(int208).min && value <= type(int208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return int208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200) {\\n        require(value >= type(int200).min && value <= type(int200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return int200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192) {\\n        require(value >= type(int192).min && value <= type(int192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return int192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184) {\\n        require(value >= type(int184).min && value <= type(int184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return int184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176) {\\n        require(value >= type(int176).min && value <= type(int176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return int176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168) {\\n        require(value >= type(int168).min && value <= type(int168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return int168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160) {\\n        require(value >= type(int160).min && value <= type(int160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return int160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152) {\\n        require(value >= type(int152).min && value <= type(int152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return int152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144) {\\n        require(value >= type(int144).min && value <= type(int144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return int144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136) {\\n        require(value >= type(int136).min && value <= type(int136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return int136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120) {\\n        require(value >= type(int120).min && value <= type(int120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return int120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112) {\\n        require(value >= type(int112).min && value <= type(int112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return int112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104) {\\n        require(value >= type(int104).min && value <= type(int104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return int104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96) {\\n        require(value >= type(int96).min && value <= type(int96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return int96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88) {\\n        require(value >= type(int88).min && value <= type(int88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return int88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80) {\\n        require(value >= type(int80).min && value <= type(int80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return int80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72) {\\n        require(value >= type(int72).min && value <= type(int72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return int72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56) {\\n        require(value >= type(int56).min && value <= type(int56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return int56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48) {\\n        require(value >= type(int48).min && value <= type(int48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return int48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40) {\\n        require(value >= type(int40).min && value <= type(int40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return int40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24) {\\n        require(value >= type(int24).min && value <= type(int24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return int24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x02686c31ccb9ee77a299fa5f47327af5271f251a707a0e24f321957166ff0434\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        return a + b;\\n    }\\n}\\n\",\"keccak256\":\"0x62f53f262fabbbc6d8ab49488d8fce36370351aff2b8d3898d499d68995a71c2\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"contracts/PerpdexExchange.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { IPerpdexExchange } from \\\"./interfaces/IPerpdexExchange.sol\\\";\\nimport { IPerpdexMarketMinimum } from \\\"./interfaces/IPerpdexMarketMinimum.sol\\\";\\nimport { PerpdexStructs } from \\\"./lib/PerpdexStructs.sol\\\";\\nimport { AccountLibrary } from \\\"./lib/AccountLibrary.sol\\\";\\nimport { MakerLibrary } from \\\"./lib/MakerLibrary.sol\\\";\\nimport { TakerLibrary } from \\\"./lib/TakerLibrary.sol\\\";\\nimport { VaultLibrary } from \\\"./lib/VaultLibrary.sol\\\";\\nimport { PerpMath } from \\\"./lib/PerpMath.sol\\\";\\n\\ncontract PerpdexExchange is IPerpdexExchange, ReentrancyGuard, Ownable {\\n    using Address for address;\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using SafeCast for uint256;\\n\\n    // states\\n    // trader\\n    mapping(address => PerpdexStructs.AccountInfo) public override accountInfos;\\n    PerpdexStructs.InsuranceFundInfo public override insuranceFundInfo;\\n    PerpdexStructs.ProtocolInfo public override protocolInfo;\\n\\n    // config\\n    address public immutable override settlementToken;\\n    uint8 public constant override quoteDecimals = 18;\\n    uint8 public override maxMarketsPerAccount = 16;\\n    uint24 public override imRatio = 10e4;\\n    uint24 public override mmRatio = 5e4;\\n    uint24 public override protocolFeeRatio = 0;\\n    PerpdexStructs.LiquidationRewardConfig public override liquidationRewardConfig =\\n        PerpdexStructs.LiquidationRewardConfig({ rewardRatio: 20e4, smoothEmaTime: 100 });\\n    mapping(address => bool) public override isMarketAllowed;\\n\\n    modifier checkDeadline(uint256 deadline) {\\n        require(block.timestamp <= deadline, \\\"PE_CD: too late\\\");\\n        _;\\n    }\\n\\n    modifier checkMarketAllowed(address market) {\\n        require(isMarketAllowed[market], \\\"PE_CMA: market not allowed\\\");\\n        _;\\n    }\\n\\n    constructor(address settlementTokenArg) {\\n        require(settlementTokenArg == address(0) || settlementTokenArg.isContract(), \\\"PE_C: token address invalid\\\");\\n\\n        settlementToken = settlementTokenArg;\\n    }\\n\\n    function deposit(uint256 amount) external payable override nonReentrant {\\n        address trader = _msgSender();\\n\\n        if (settlementToken == address(0)) {\\n            require(amount == 0, \\\"PE_D: amount not zero\\\");\\n            VaultLibrary.depositEth(accountInfos[trader], msg.value);\\n            emit Deposited(trader, msg.value);\\n        } else {\\n            require(msg.value == 0, \\\"PE_D: msg.value not zero\\\");\\n            VaultLibrary.deposit(\\n                accountInfos[trader],\\n                VaultLibrary.DepositParams({ settlementToken: settlementToken, amount: amount, from: trader })\\n            );\\n            emit Deposited(trader, amount);\\n        }\\n    }\\n\\n    function withdraw(uint256 amount) external override nonReentrant {\\n        address payable trader = payable(_msgSender());\\n\\n        VaultLibrary.withdraw(\\n            accountInfos[trader],\\n            VaultLibrary.WithdrawParams({\\n                settlementToken: settlementToken,\\n                amount: amount,\\n                to: trader,\\n                imRatio: imRatio\\n            })\\n        );\\n        emit Withdrawn(trader, amount);\\n    }\\n\\n    function transferProtocolFee(uint256 amount) external override onlyOwner nonReentrant {\\n        address trader = _msgSender();\\n        VaultLibrary.transferProtocolFee(accountInfos[trader], protocolInfo, amount);\\n        emit ProtocolFeeTransferred(trader, amount);\\n    }\\n\\n    function trade(TradeParams calldata params)\\n        external\\n        override\\n        nonReentrant\\n        checkDeadline(params.deadline)\\n        checkMarketAllowed(params.market)\\n        returns (uint256 oppositeAmount)\\n    {\\n        TakerLibrary.TradeResponse memory response = _doTrade(params);\\n\\n        uint256 baseBalancePerShareX96 = IPerpdexMarketMinimum(params.market).baseBalancePerShareX96();\\n        uint256 shareMarkPriceAfterX96 = IPerpdexMarketMinimum(params.market).getShareMarkPriceX96();\\n\\n        if (response.isLiquidation) {\\n            emit PositionLiquidated(\\n                params.trader,\\n                params.market,\\n                _msgSender(),\\n                response.base,\\n                response.quote,\\n                response.realizedPnl,\\n                response.protocolFee,\\n                baseBalancePerShareX96,\\n                shareMarkPriceAfterX96,\\n                response.liquidationPenalty,\\n                response.liquidationReward,\\n                response.insuranceFundReward\\n            );\\n        } else {\\n            emit PositionChanged(\\n                params.trader,\\n                params.market,\\n                response.base,\\n                response.quote,\\n                response.realizedPnl,\\n                response.protocolFee,\\n                baseBalancePerShareX96,\\n                shareMarkPriceAfterX96\\n            );\\n        }\\n\\n        oppositeAmount = params.isExactInput == params.isBaseToQuote ? response.quote.abs() : response.base.abs();\\n    }\\n\\n    function addLiquidity(AddLiquidityParams calldata params)\\n        external\\n        override\\n        nonReentrant\\n        checkDeadline(params.deadline)\\n        checkMarketAllowed(params.market)\\n        returns (\\n            uint256 base,\\n            uint256 quote,\\n            uint256 liquidity\\n        )\\n    {\\n        address trader = _msgSender();\\n\\n        MakerLibrary.AddLiquidityResponse memory response =\\n            MakerLibrary.addLiquidity(\\n                accountInfos[trader],\\n                MakerLibrary.AddLiquidityParams({\\n                    market: params.market,\\n                    base: params.base,\\n                    quote: params.quote,\\n                    minBase: params.minBase,\\n                    minQuote: params.minQuote,\\n                    imRatio: imRatio,\\n                    maxMarketsPerAccount: maxMarketsPerAccount\\n                })\\n            );\\n\\n        uint256 baseBalancePerShareX96 = IPerpdexMarketMinimum(params.market).baseBalancePerShareX96();\\n        uint256 shareMarkPriceAfterX96 = IPerpdexMarketMinimum(params.market).getShareMarkPriceX96();\\n\\n        PerpdexStructs.MakerInfo storage makerInfo = accountInfos[trader].makerInfos[params.market];\\n        emit LiquidityAdded(\\n            trader,\\n            params.market,\\n            response.base,\\n            response.quote,\\n            response.liquidity,\\n            makerInfo.cumBaseSharePerLiquidityX96,\\n            makerInfo.cumQuotePerLiquidityX96,\\n            baseBalancePerShareX96,\\n            shareMarkPriceAfterX96\\n        );\\n\\n        return (response.base, response.quote, response.liquidity);\\n    }\\n\\n    function removeLiquidity(RemoveLiquidityParams calldata params)\\n        external\\n        override\\n        nonReentrant\\n        checkDeadline(params.deadline)\\n        checkMarketAllowed(params.market)\\n        returns (uint256 base, uint256 quote)\\n    {\\n        MakerLibrary.RemoveLiquidityResponse memory response =\\n            MakerLibrary.removeLiquidity(\\n                accountInfos[params.trader],\\n                MakerLibrary.RemoveLiquidityParams({\\n                    market: params.market,\\n                    liquidity: params.liquidity,\\n                    minBase: params.minBase,\\n                    minQuote: params.minQuote,\\n                    isSelf: params.trader == _msgSender(),\\n                    mmRatio: mmRatio,\\n                    maxMarketsPerAccount: maxMarketsPerAccount\\n                })\\n            );\\n\\n        uint256 baseBalancePerShareX96 = IPerpdexMarketMinimum(params.market).baseBalancePerShareX96();\\n        uint256 shareMarkPriceAfterX96 = IPerpdexMarketMinimum(params.market).getShareMarkPriceX96();\\n\\n        emit LiquidityRemoved(\\n            params.trader,\\n            params.market,\\n            response.isLiquidation ? _msgSender() : address(0),\\n            response.base,\\n            response.quote,\\n            params.liquidity,\\n            response.takerBase,\\n            response.takerQuote,\\n            response.realizedPnl,\\n            baseBalancePerShareX96,\\n            shareMarkPriceAfterX96\\n        );\\n\\n        return (response.base, response.quote);\\n    }\\n\\n    function setMaxMarketsPerAccount(uint8 value) external override onlyOwner nonReentrant {\\n        maxMarketsPerAccount = value;\\n        emit MaxMarketsPerAccountChanged(value);\\n    }\\n\\n    function setImRatio(uint24 value) external override onlyOwner nonReentrant {\\n        require(value < 1e6, \\\"PE_SIR: too large\\\");\\n        require(value >= mmRatio, \\\"PE_SIR: smaller than mmRatio\\\");\\n        imRatio = value;\\n        emit ImRatioChanged(value);\\n    }\\n\\n    function setMmRatio(uint24 value) external override onlyOwner nonReentrant {\\n        require(value <= imRatio, \\\"PE_SMR: bigger than imRatio\\\");\\n        require(value > 0, \\\"PE_SMR: zero\\\");\\n        mmRatio = value;\\n        emit MmRatioChanged(value);\\n    }\\n\\n    function setLiquidationRewardConfig(PerpdexStructs.LiquidationRewardConfig calldata value)\\n        external\\n        override\\n        onlyOwner\\n        nonReentrant\\n    {\\n        require(value.rewardRatio < 1e6, \\\"PE_SLRC: too large reward ratio\\\");\\n        require(value.smoothEmaTime > 0, \\\"PE_SLRC: ema time is zero\\\");\\n        liquidationRewardConfig = value;\\n        emit LiquidationRewardConfigChanged(value.rewardRatio, value.smoothEmaTime);\\n    }\\n\\n    function setProtocolFeeRatio(uint24 value) external override onlyOwner nonReentrant {\\n        require(value <= 1e4, \\\"PE_SPFR: too large\\\");\\n        protocolFeeRatio = value;\\n        emit ProtocolFeeRatioChanged(value);\\n    }\\n\\n    function setIsMarketAllowed(address market, bool value) external override onlyOwner nonReentrant {\\n        require(market.isContract(), \\\"PE_SIMA: market address invalid\\\");\\n        if (value) {\\n            require(IPerpdexMarketMinimum(market).exchange() == address(this), \\\"PE_SIMA: different exchange\\\");\\n        }\\n        isMarketAllowed[market] = value;\\n        emit IsMarketAllowedChanged(market, value);\\n    }\\n\\n    // all raw information can be retrieved through getters (including default getters)\\n\\n    function getTakerInfo(address trader, address market)\\n        external\\n        view\\n        override\\n        returns (PerpdexStructs.TakerInfo memory)\\n    {\\n        return accountInfos[trader].takerInfos[market];\\n    }\\n\\n    function getMakerInfo(address trader, address market)\\n        external\\n        view\\n        override\\n        returns (PerpdexStructs.MakerInfo memory)\\n    {\\n        return accountInfos[trader].makerInfos[market];\\n    }\\n\\n    function getAccountMarkets(address trader) external view override returns (address[] memory) {\\n        return accountInfos[trader].markets;\\n    }\\n\\n    // dry run\\n\\n    function previewTrade(PreviewTradeParams calldata params)\\n        external\\n        view\\n        override\\n        checkMarketAllowed(params.market)\\n        returns (uint256 oppositeAmount)\\n    {\\n        address trader = params.trader;\\n        address caller = params.caller;\\n\\n        return\\n            TakerLibrary.previewTrade(\\n                accountInfos[trader],\\n                TakerLibrary.PreviewTradeParams({\\n                    market: params.market,\\n                    isBaseToQuote: params.isBaseToQuote,\\n                    isExactInput: params.isExactInput,\\n                    amount: params.amount,\\n                    oppositeAmountBound: params.oppositeAmountBound,\\n                    mmRatio: mmRatio,\\n                    protocolFeeRatio: protocolFeeRatio,\\n                    isSelf: trader == caller\\n                })\\n            );\\n    }\\n\\n    function maxTrade(MaxTradeParams calldata params) external view override returns (uint256 amount) {\\n        if (!isMarketAllowed[params.market]) return 0;\\n\\n        address trader = params.trader;\\n        address caller = params.caller;\\n\\n        return\\n            TakerLibrary.maxTrade({\\n                accountInfo: accountInfos[trader],\\n                market: params.market,\\n                isBaseToQuote: params.isBaseToQuote,\\n                isExactInput: params.isExactInput,\\n                mmRatio: mmRatio,\\n                protocolFeeRatio: protocolFeeRatio,\\n                isSelf: trader == caller\\n            });\\n    }\\n\\n    // convenient getters\\n\\n    function getTotalAccountValue(address trader) external view override returns (int256) {\\n        return AccountLibrary.getTotalAccountValue(accountInfos[trader]);\\n    }\\n\\n    function getPositionShare(address trader, address market) external view override returns (int256) {\\n        return AccountLibrary.getPositionShare(accountInfos[trader], market);\\n    }\\n\\n    function getPositionNotional(address trader, address market) external view override returns (int256) {\\n        return AccountLibrary.getPositionNotional(accountInfos[trader], market);\\n    }\\n\\n    function getTotalPositionNotional(address trader) external view override returns (uint256) {\\n        return AccountLibrary.getTotalPositionNotional(accountInfos[trader]);\\n    }\\n\\n    function getOpenPositionShare(address trader, address market) external view override returns (uint256) {\\n        return AccountLibrary.getOpenPositionShare(accountInfos[trader], market);\\n    }\\n\\n    function getOpenPositionNotional(address trader, address market) external view override returns (uint256) {\\n        return AccountLibrary.getOpenPositionNotional(accountInfos[trader], market);\\n    }\\n\\n    function getTotalOpenPositionNotional(address trader) external view override returns (uint256) {\\n        return AccountLibrary.getTotalOpenPositionNotional(accountInfos[trader]);\\n    }\\n\\n    function hasEnoughMaintenanceMargin(address trader) external view override returns (bool) {\\n        return AccountLibrary.hasEnoughMaintenanceMargin(accountInfos[trader], mmRatio);\\n    }\\n\\n    function hasEnoughInitialMargin(address trader) external view override returns (bool) {\\n        return AccountLibrary.hasEnoughInitialMargin(accountInfos[trader], imRatio);\\n    }\\n\\n    // for avoiding stack too deep error\\n    function _doTrade(TradeParams calldata params) private returns (TakerLibrary.TradeResponse memory) {\\n        return\\n            TakerLibrary.trade(\\n                accountInfos[params.trader],\\n                accountInfos[_msgSender()].vaultInfo,\\n                insuranceFundInfo,\\n                protocolInfo,\\n                TakerLibrary.TradeParams({\\n                    market: params.market,\\n                    isBaseToQuote: params.isBaseToQuote,\\n                    isExactInput: params.isExactInput,\\n                    amount: params.amount,\\n                    oppositeAmountBound: params.oppositeAmountBound,\\n                    mmRatio: mmRatio,\\n                    imRatio: imRatio,\\n                    maxMarketsPerAccount: maxMarketsPerAccount,\\n                    protocolFeeRatio: protocolFeeRatio,\\n                    liquidationRewardConfig: liquidationRewardConfig,\\n                    isSelf: params.trader == _msgSender()\\n                })\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x33005852272c552d280aadacfbd54a55a0eeabc1a7bea32de09a9bb45feada1c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.7.6;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x0ded61799fbba3a2364d09ceee767ec9f1df2b474afa560ff032f34916aee6cb\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IPerpdexExchange.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { PerpdexStructs } from \\\"../lib/PerpdexStructs.sol\\\";\\n\\ninterface IPerpdexExchange {\\n    struct AddLiquidityParams {\\n        address market;\\n        uint256 base;\\n        uint256 quote;\\n        uint256 minBase;\\n        uint256 minQuote;\\n        uint256 deadline;\\n    }\\n\\n    struct RemoveLiquidityParams {\\n        address trader;\\n        address market;\\n        uint256 liquidity;\\n        uint256 minBase;\\n        uint256 minQuote;\\n        uint256 deadline;\\n    }\\n\\n    struct TradeParams {\\n        address trader;\\n        address market;\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n        uint256 amount;\\n        uint256 oppositeAmountBound;\\n        uint256 deadline;\\n    }\\n\\n    struct PreviewTradeParams {\\n        address trader;\\n        address market;\\n        address caller;\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n        uint256 amount;\\n        uint256 oppositeAmountBound;\\n    }\\n\\n    struct MaxTradeParams {\\n        address trader;\\n        address market;\\n        address caller;\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n    }\\n\\n    event Deposited(address indexed trader, uint256 amount);\\n    event Withdrawn(address indexed trader, uint256 amount);\\n    event ProtocolFeeTransferred(address indexed trader, uint256 amount);\\n\\n    event LiquidityAdded(\\n        address indexed trader,\\n        address indexed market,\\n        uint256 base,\\n        uint256 quote,\\n        uint256 liquidity,\\n        uint256 cumBasePerLiquidityX96,\\n        uint256 cumQuotePerLiquidityX96,\\n        uint256 baseBalancePerShareX96,\\n        uint256 sharePriceAfterX96\\n    );\\n\\n    event LiquidityRemoved(\\n        address indexed trader,\\n        address indexed market,\\n        address liquidator,\\n        uint256 base,\\n        uint256 quote,\\n        uint256 liquidity,\\n        int256 takerBase,\\n        int256 takerQuote,\\n        int256 realizedPnl,\\n        uint256 baseBalancePerShareX96,\\n        uint256 sharePriceAfterX96\\n    );\\n\\n    event PositionLiquidated(\\n        address indexed trader,\\n        address indexed market,\\n        address indexed liquidator,\\n        int256 base,\\n        int256 quote,\\n        int256 realizedPnl,\\n        uint256 protocolFee,\\n        uint256 baseBalancePerShareX96,\\n        uint256 sharePriceAfterX96,\\n        uint256 liquidationPenalty,\\n        uint256 liquidationReward,\\n        uint256 insuranceFundReward\\n    );\\n\\n    event PositionChanged(\\n        address indexed trader,\\n        address indexed market,\\n        int256 base,\\n        int256 quote,\\n        int256 realizedPnl,\\n        uint256 protocolFee,\\n        uint256 baseBalancePerShareX96,\\n        uint256 sharePriceAfterX96\\n    );\\n\\n    event MaxMarketsPerAccountChanged(uint8 value);\\n    event ImRatioChanged(uint24 value);\\n    event MmRatioChanged(uint24 value);\\n    event LiquidationRewardConfigChanged(uint24 rewardRatio, uint16 smoothEmaTime);\\n    event ProtocolFeeRatioChanged(uint24 value);\\n    event IsMarketAllowedChanged(address indexed market, bool isMarketAllowed);\\n\\n    function deposit(uint256 amount) external payable;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function transferProtocolFee(uint256 amount) external;\\n\\n    function addLiquidity(AddLiquidityParams calldata params)\\n        external\\n        returns (\\n            uint256 base,\\n            uint256 quote,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(RemoveLiquidityParams calldata params) external returns (uint256 base, uint256 quote);\\n\\n    function trade(TradeParams calldata params) external returns (uint256 oppositeAmount);\\n\\n    // setters\\n\\n    function setMaxMarketsPerAccount(uint8 value) external;\\n\\n    function setImRatio(uint24 value) external;\\n\\n    function setMmRatio(uint24 value) external;\\n\\n    function setLiquidationRewardConfig(PerpdexStructs.LiquidationRewardConfig calldata value) external;\\n\\n    function setProtocolFeeRatio(uint24 value) external;\\n\\n    function setIsMarketAllowed(address market, bool value) external;\\n\\n    // dry run getters\\n\\n    function previewTrade(PreviewTradeParams calldata params) external view returns (uint256 oppositeAmount);\\n\\n    function maxTrade(MaxTradeParams calldata params) external view returns (uint256 amount);\\n\\n    // default getters\\n\\n    function accountInfos(address trader) external view returns (PerpdexStructs.VaultInfo memory);\\n\\n    function insuranceFundInfo() external view returns (int256 balance, uint256 liquidationRewardBalance);\\n\\n    function protocolInfo() external view returns (uint256 protocolFee);\\n\\n    function settlementToken() external view returns (address);\\n\\n    function quoteDecimals() external view returns (uint8);\\n\\n    function maxMarketsPerAccount() external view returns (uint8);\\n\\n    function imRatio() external view returns (uint24);\\n\\n    function mmRatio() external view returns (uint24);\\n\\n    function liquidationRewardConfig() external view returns (uint24 rewardRatio, uint16 smoothEmaTime);\\n\\n    function protocolFeeRatio() external view returns (uint24);\\n\\n    function isMarketAllowed(address market) external view returns (bool);\\n\\n    // getters not covered by default getters\\n\\n    function getTakerInfo(address trader, address market) external view returns (PerpdexStructs.TakerInfo memory);\\n\\n    function getMakerInfo(address trader, address market) external view returns (PerpdexStructs.MakerInfo memory);\\n\\n    function getAccountMarkets(address trader) external view returns (address[] memory);\\n\\n    // convenient getters\\n\\n    function getTotalAccountValue(address trader) external view returns (int256);\\n\\n    function getPositionShare(address trader, address market) external view returns (int256);\\n\\n    function getPositionNotional(address trader, address market) external view returns (int256);\\n\\n    function getTotalPositionNotional(address trader) external view returns (uint256);\\n\\n    function getOpenPositionShare(address trader, address market) external view returns (uint256);\\n\\n    function getOpenPositionNotional(address trader, address market) external view returns (uint256);\\n\\n    function getTotalOpenPositionNotional(address trader) external view returns (uint256);\\n\\n    function hasEnoughMaintenanceMargin(address trader) external view returns (bool);\\n\\n    function hasEnoughInitialMargin(address trader) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe9a4093cec26295b56110d9130280b6a70dfc515b2f6d5708ec646ca18290b45\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IPerpdexMarketMinimum.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\ninterface IPerpdexMarketMinimum {\\n    function swap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        bool isLiquidation\\n    ) external returns (uint256);\\n\\n    function addLiquidity(uint256 baseShare, uint256 quoteBalance)\\n        external\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function removeLiquidity(uint256 liquidity) external returns (uint256 baseShare, uint256 quoteBalance);\\n\\n    // getters\\n\\n    function previewSwap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        bool isLiquidation\\n    ) external view returns (uint256);\\n\\n    function maxSwap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        bool isLiquidation\\n    ) external view returns (uint256 amount);\\n\\n    function exchange() external view returns (address);\\n\\n    function getShareMarkPriceX96() external view returns (uint256);\\n\\n    function getLiquidityValue(uint256 liquidity) external view returns (uint256 baseShare, uint256 quoteBalance);\\n\\n    function getLiquidityDeleveraged(\\n        uint256 liquidity,\\n        uint256 cumBasePerLiquidityX96,\\n        uint256 cumQuotePerLiquidityX96\\n    ) external view returns (int256, int256);\\n\\n    function getCumDeleveragedPerLiquidityX96() external view returns (uint256, uint256);\\n\\n    function baseBalancePerShareX96() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1a74a3ae8d7e727bf1214fc9eb9ed394d7764b965add8e3a7d2a4f48c2853e38\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/AccountLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\n\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\nimport { PRBMath } from \\\"prb-math/contracts/PRBMath.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { IPerpdexMarketMinimum } from \\\"../interfaces/IPerpdexMarketMinimum.sol\\\";\\nimport { PerpdexStructs } from \\\"./PerpdexStructs.sol\\\";\\n\\n// https://help.ftx.com/hc/en-us/articles/360024780511-Complete-Futures-Specs\\nlibrary AccountLibrary {\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    function updateMarkets(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address market,\\n        uint8 maxMarketsPerAccount\\n    ) internal {\\n        bool enabled =\\n            accountInfo.takerInfos[market].baseBalanceShare != 0 || accountInfo.makerInfos[market].liquidity != 0;\\n        address[] storage markets = accountInfo.markets;\\n        uint256 length = markets.length;\\n\\n        for (uint256 i = 0; i < length; ++i) {\\n            if (markets[i] == market) {\\n                if (!enabled) {\\n                    markets[i] = markets[length - 1];\\n                    markets.pop();\\n                }\\n                return;\\n            }\\n        }\\n\\n        if (!enabled) return;\\n\\n        require(length + 1 <= maxMarketsPerAccount, \\\"AL_UP: too many markets\\\");\\n        markets.push(market);\\n    }\\n\\n    function getTotalAccountValue(PerpdexStructs.AccountInfo storage accountInfo) internal view returns (int256) {\\n        address[] storage markets = accountInfo.markets;\\n        int256 accountValue = accountInfo.vaultInfo.collateralBalance;\\n        uint256 length = markets.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            address market = markets[i];\\n\\n            PerpdexStructs.MakerInfo storage makerInfo = accountInfo.makerInfos[market];\\n            int256 baseShare = accountInfo.takerInfos[market].baseBalanceShare;\\n            int256 quoteBalance = accountInfo.takerInfos[market].quoteBalance;\\n\\n            if (makerInfo.liquidity != 0) {\\n                (uint256 poolBaseShare, uint256 poolQuoteBalance) =\\n                    IPerpdexMarketMinimum(market).getLiquidityValue(makerInfo.liquidity);\\n                (int256 deleveragedBaseShare, int256 deleveragedQuoteBalance) =\\n                    IPerpdexMarketMinimum(market).getLiquidityDeleveraged(\\n                        makerInfo.liquidity,\\n                        makerInfo.cumBaseSharePerLiquidityX96,\\n                        makerInfo.cumQuotePerLiquidityX96\\n                    );\\n                baseShare = baseShare.add(poolBaseShare.toInt256()).add(deleveragedBaseShare);\\n                quoteBalance = quoteBalance.add(poolQuoteBalance.toInt256()).add(deleveragedQuoteBalance);\\n            }\\n\\n            if (baseShare != 0) {\\n                uint256 sharePriceX96 = IPerpdexMarketMinimum(market).getShareMarkPriceX96();\\n                accountValue = accountValue.add(baseShare.mulDiv(sharePriceX96.toInt256(), FixedPoint96.Q96));\\n            }\\n            accountValue = accountValue.add(quoteBalance);\\n        }\\n        return accountValue;\\n    }\\n\\n    function getPositionShare(PerpdexStructs.AccountInfo storage accountInfo, address market)\\n        internal\\n        view\\n        returns (int256 baseShare)\\n    {\\n        PerpdexStructs.MakerInfo storage makerInfo = accountInfo.makerInfos[market];\\n        baseShare = accountInfo.takerInfos[market].baseBalanceShare;\\n        if (makerInfo.liquidity != 0) {\\n            (uint256 poolBaseShare, ) = IPerpdexMarketMinimum(market).getLiquidityValue(makerInfo.liquidity);\\n            (int256 deleveragedBaseShare, ) =\\n                IPerpdexMarketMinimum(market).getLiquidityDeleveraged(\\n                    makerInfo.liquidity,\\n                    makerInfo.cumBaseSharePerLiquidityX96,\\n                    makerInfo.cumQuotePerLiquidityX96\\n                );\\n            baseShare = baseShare.add(poolBaseShare.toInt256()).add(deleveragedBaseShare);\\n        }\\n    }\\n\\n    function getPositionNotional(PerpdexStructs.AccountInfo storage accountInfo, address market)\\n        internal\\n        view\\n        returns (int256)\\n    {\\n        int256 positionShare = getPositionShare(accountInfo, market);\\n        if (positionShare == 0) return 0;\\n        uint256 sharePriceX96 = IPerpdexMarketMinimum(market).getShareMarkPriceX96();\\n        return positionShare.mulDiv(sharePriceX96.toInt256(), FixedPoint96.Q96);\\n    }\\n\\n    function getTotalPositionNotional(PerpdexStructs.AccountInfo storage accountInfo) internal view returns (uint256) {\\n        address[] storage markets = accountInfo.markets;\\n        uint256 totalPositionNotional;\\n        uint256 length = markets.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            uint256 positionNotional = getPositionNotional(accountInfo, markets[i]).abs();\\n            totalPositionNotional = totalPositionNotional.add(positionNotional);\\n        }\\n        return totalPositionNotional;\\n    }\\n\\n    function getOpenPositionShare(PerpdexStructs.AccountInfo storage accountInfo, address market)\\n        internal\\n        view\\n        returns (uint256 result)\\n    {\\n        PerpdexStructs.MakerInfo storage makerInfo = accountInfo.makerInfos[market];\\n        result = getPositionShare(accountInfo, market).abs();\\n        if (makerInfo.liquidity != 0) {\\n            (uint256 poolBaseShare, ) = IPerpdexMarketMinimum(market).getLiquidityValue(makerInfo.liquidity);\\n            result = result.add(poolBaseShare);\\n        }\\n    }\\n\\n    function getOpenPositionNotional(PerpdexStructs.AccountInfo storage accountInfo, address market)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 positionShare = getOpenPositionShare(accountInfo, market);\\n        if (positionShare == 0) return 0;\\n        uint256 sharePriceX96 = IPerpdexMarketMinimum(market).getShareMarkPriceX96();\\n        return PRBMath.mulDiv(positionShare, sharePriceX96, FixedPoint96.Q96);\\n    }\\n\\n    function getTotalOpenPositionNotional(PerpdexStructs.AccountInfo storage accountInfo)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        address[] storage markets = accountInfo.markets;\\n        uint256 totalOpenPositionNotional;\\n        uint256 length = markets.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            uint256 positionNotional = getOpenPositionNotional(accountInfo, markets[i]);\\n            totalOpenPositionNotional = totalOpenPositionNotional.add(positionNotional);\\n        }\\n        return totalOpenPositionNotional;\\n    }\\n\\n    // always true when hasEnoughMaintenanceMargin is true\\n    function hasEnoughMaintenanceMargin(PerpdexStructs.AccountInfo storage accountInfo, uint24 mmRatio)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        int256 accountValue = getTotalAccountValue(accountInfo);\\n        uint256 totalPositionNotional = getTotalPositionNotional(accountInfo);\\n        return accountValue >= totalPositionNotional.mulRatio(mmRatio).toInt256();\\n    }\\n\\n    function hasEnoughInitialMargin(PerpdexStructs.AccountInfo storage accountInfo, uint24 imRatio)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        int256 accountValue = getTotalAccountValue(accountInfo);\\n        uint256 totalOpenPositionNotional = getTotalOpenPositionNotional(accountInfo);\\n        return\\n            accountValue.min(accountInfo.vaultInfo.collateralBalance) >=\\n            totalOpenPositionNotional.mulRatio(imRatio).toInt256() ||\\n            isLiquidationFree(accountInfo);\\n    }\\n\\n    function isLiquidationFree(PerpdexStructs.AccountInfo storage accountInfo) internal view returns (bool) {\\n        address[] storage markets = accountInfo.markets;\\n        int256 quoteBalance = accountInfo.vaultInfo.collateralBalance;\\n        uint256 length = markets.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            address market = markets[i];\\n\\n            PerpdexStructs.MakerInfo storage makerInfo = accountInfo.makerInfos[market];\\n            int256 baseShare = accountInfo.takerInfos[market].baseBalanceShare;\\n            quoteBalance = quoteBalance.add(accountInfo.takerInfos[market].quoteBalance);\\n\\n            if (makerInfo.liquidity != 0) {\\n                (int256 deleveragedBaseShare, int256 deleveragedQuoteBalance) =\\n                    IPerpdexMarketMinimum(market).getLiquidityDeleveraged(\\n                        makerInfo.liquidity,\\n                        makerInfo.cumBaseSharePerLiquidityX96,\\n                        makerInfo.cumQuotePerLiquidityX96\\n                    );\\n                baseShare = baseShare.add(deleveragedBaseShare);\\n                quoteBalance = quoteBalance.add(deleveragedQuoteBalance);\\n            }\\n\\n            if (baseShare < 0) return false;\\n        }\\n        return quoteBalance >= 0;\\n    }\\n}\\n\",\"keccak256\":\"0xb7cd22656ca39dd60b1a429cf8e6faa763bad768de510ad6bcd12cb41a8d0711\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { PRBMath } from \\\"prb-math/contracts/PRBMath.sol\\\";\\n\\nlibrary FullMath {\\n    // Credit to Uniswap Labs under MIT license\\n    // https://github.com/Uniswap/v3-core/blob/412d9b236a1e75a98568d49b1aeb21e3a1430544/contracts/libraries/FullMath.sol\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max, \\\"FM_MDRU: overflow\\\");\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5954a98eafb2c37da038321b50dcb5ee4f2930c400f70549291fc88ceb69cb56\",\"license\":\"MIT\"},\"contracts/lib/MakerLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { PRBMath } from \\\"prb-math/contracts/PRBMath.sol\\\";\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { IPerpdexMarketMinimum } from \\\"../interfaces/IPerpdexMarketMinimum.sol\\\";\\nimport { PerpdexStructs } from \\\"./PerpdexStructs.sol\\\";\\nimport { AccountLibrary } from \\\"./AccountLibrary.sol\\\";\\nimport { TakerLibrary } from \\\"./TakerLibrary.sol\\\";\\n\\nlibrary MakerLibrary {\\n    using PerpMath for int256;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    struct AddLiquidityParams {\\n        address market;\\n        uint256 base;\\n        uint256 quote;\\n        uint256 minBase;\\n        uint256 minQuote;\\n        uint24 imRatio;\\n        uint8 maxMarketsPerAccount;\\n    }\\n\\n    struct AddLiquidityResponse {\\n        uint256 base;\\n        uint256 quote;\\n        uint256 liquidity;\\n    }\\n\\n    struct RemoveLiquidityParams {\\n        address market;\\n        uint256 liquidity;\\n        uint256 minBase;\\n        uint256 minQuote;\\n        uint24 mmRatio;\\n        uint8 maxMarketsPerAccount;\\n        bool isSelf;\\n    }\\n\\n    struct RemoveLiquidityResponse {\\n        uint256 base;\\n        uint256 quote;\\n        int256 takerBase;\\n        int256 takerQuote;\\n        int256 realizedPnl;\\n        bool isLiquidation;\\n    }\\n\\n    function addLiquidity(PerpdexStructs.AccountInfo storage accountInfo, AddLiquidityParams memory params)\\n        internal\\n        returns (AddLiquidityResponse memory response)\\n    {\\n        PerpdexStructs.MakerInfo storage makerInfo = accountInfo.makerInfos[params.market];\\n\\n        // retrieve before addLiquidity\\n        (uint256 cumBasePerLiquidityX96, uint256 cumQuotePerLiquidityX96) =\\n            IPerpdexMarketMinimum(params.market).getCumDeleveragedPerLiquidityX96();\\n\\n        (response.base, response.quote, response.liquidity) = IPerpdexMarketMinimum(params.market).addLiquidity(\\n            params.base,\\n            params.quote\\n        );\\n\\n        require(response.base >= params.minBase, \\\"ML_AL: too small output base\\\");\\n        require(response.quote >= params.minQuote, \\\"ML_AL: too small output quote\\\");\\n\\n        uint256 liquidityBefore = makerInfo.liquidity;\\n        makerInfo.liquidity = liquidityBefore.add(response.liquidity);\\n        {\\n            makerInfo.cumBaseSharePerLiquidityX96 = blendCumPerLiquidity(\\n                liquidityBefore,\\n                response.liquidity,\\n                response.base,\\n                makerInfo.cumBaseSharePerLiquidityX96,\\n                cumBasePerLiquidityX96\\n            );\\n            makerInfo.cumQuotePerLiquidityX96 = blendCumPerLiquidity(\\n                liquidityBefore,\\n                response.liquidity,\\n                response.quote,\\n                makerInfo.cumQuotePerLiquidityX96,\\n                cumQuotePerLiquidityX96\\n            );\\n        }\\n\\n        AccountLibrary.updateMarkets(accountInfo, params.market, params.maxMarketsPerAccount);\\n\\n        require(AccountLibrary.hasEnoughInitialMargin(accountInfo, params.imRatio), \\\"ML_AL: not enough im\\\");\\n    }\\n\\n    // difficult to calculate without error\\n    // underestimate the value to maintain the liquidation free condition\\n    // the error will be a burden to the insurance fund\\n    // the error is much smaller than the gas fee, so it is impossible to attack\\n    function blendCumPerLiquidity(\\n        uint256 liquidityBefore,\\n        uint256 addedLiquidity,\\n        uint256 addedToken,\\n        uint256 cumBefore,\\n        uint256 cumAfter\\n    ) internal pure returns (uint256) {\\n        uint256 liquidityAfter = liquidityBefore.add(addedLiquidity);\\n        cumAfter = cumAfter.add(PRBMath.mulDiv(addedToken, FixedPoint96.Q96, addedLiquidity));\\n\\n        return\\n            PRBMath.mulDiv(cumBefore, liquidityBefore, liquidityAfter).add(\\n                PRBMath.mulDiv(cumAfter, addedLiquidity, liquidityAfter)\\n            );\\n    }\\n\\n    function removeLiquidity(PerpdexStructs.AccountInfo storage accountInfo, RemoveLiquidityParams memory params)\\n        internal\\n        returns (RemoveLiquidityResponse memory response)\\n    {\\n        response.isLiquidation = !AccountLibrary.hasEnoughMaintenanceMargin(accountInfo, params.mmRatio);\\n\\n        if (!params.isSelf) {\\n            require(response.isLiquidation, \\\"ML_RL: enough mm\\\");\\n        }\\n\\n        uint256 shareMarkPriceBeforeX96;\\n        {\\n            PerpdexStructs.MakerInfo storage makerInfo = accountInfo.makerInfos[params.market];\\n            // retrieve before removeLiquidity\\n            (response.takerBase, response.takerQuote) = IPerpdexMarketMinimum(params.market).getLiquidityDeleveraged(\\n                params.liquidity,\\n                makerInfo.cumBaseSharePerLiquidityX96,\\n                makerInfo.cumQuotePerLiquidityX96\\n            );\\n\\n            shareMarkPriceBeforeX96 = IPerpdexMarketMinimum(params.market).getShareMarkPriceX96();\\n        }\\n\\n        {\\n            (response.base, response.quote) = IPerpdexMarketMinimum(params.market).removeLiquidity(params.liquidity);\\n\\n            require(response.base >= params.minBase, \\\"ML_RL: too small output base\\\");\\n            require(response.quote >= params.minQuote, \\\"ML_RL: too small output base\\\");\\n\\n            response.takerBase = response.takerBase.add(response.base.toInt256());\\n            response.takerQuote = response.takerQuote.add(response.quote.toInt256());\\n\\n            PerpdexStructs.MakerInfo storage makerInfo = accountInfo.makerInfos[params.market];\\n            makerInfo.liquidity = makerInfo.liquidity.sub(params.liquidity);\\n        }\\n\\n        {\\n            int256 takerQuoteCalculatedAtCurrentPrice =\\n                -response.takerBase.mulDiv(shareMarkPriceBeforeX96.toInt256(), FixedPoint96.Q96);\\n\\n            // AccountLibrary.updateMarkets called\\n            response.realizedPnl = TakerLibrary.addToTakerBalance(\\n                accountInfo,\\n                params.market,\\n                response.takerBase,\\n                takerQuoteCalculatedAtCurrentPrice,\\n                response.takerQuote.sub(takerQuoteCalculatedAtCurrentPrice),\\n                params.maxMarketsPerAccount\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc76f474e11ff4c3f3cda1fdf03eddb6dc636d580efc9efd4f76fd0a2a5061640\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PerpMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { PRBMath } from \\\"prb-math/contracts/PRBMath.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\nimport { FullMath } from \\\"./FullMath.sol\\\";\\n\\nlibrary PerpMath {\\n    using SafeCast for int256;\\n    using SignedSafeMath for int256;\\n    using SafeMath for uint256;\\n\\n    function formatSqrtPriceX96ToPriceX96(uint160 sqrtPriceX96) internal pure returns (uint256) {\\n        return PRBMath.mulDiv(sqrtPriceX96, sqrtPriceX96, FixedPoint96.Q96);\\n    }\\n\\n    function formatX10_18ToX96(uint256 valueX10_18) internal pure returns (uint256) {\\n        return PRBMath.mulDiv(valueX10_18, FixedPoint96.Q96, 1 ether);\\n    }\\n\\n    function formatX96ToX10_18(uint256 valueX96) internal pure returns (uint256) {\\n        return PRBMath.mulDiv(valueX96, 1 ether, FixedPoint96.Q96);\\n    }\\n\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function abs(int256 value) internal pure returns (uint256) {\\n        return value >= 0 ? value.toUint256() : neg256(value).toUint256();\\n    }\\n\\n    function neg256(int256 a) internal pure returns (int256) {\\n        require(a > -2**255, \\\"PerpMath: inversion overflow\\\");\\n        return -a;\\n    }\\n\\n    function neg256(uint256 a) internal pure returns (int256) {\\n        return -SafeCast.toInt256(a);\\n    }\\n\\n    function divBy10_18(int256 value) internal pure returns (int256) {\\n        // no overflow here\\n        return value / (1 ether);\\n    }\\n\\n    function divBy10_18(uint256 value) internal pure returns (uint256) {\\n        // no overflow here\\n        return value / (1 ether);\\n    }\\n\\n    function subRatio(uint24 a, uint24 b) internal pure returns (uint24) {\\n        require(b <= a, \\\"PerpMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    function mulRatio(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return PRBMath.mulDiv(value, ratio, 1e6);\\n    }\\n\\n    function divRatio(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return PRBMath.mulDiv(value, 1e6, ratio);\\n    }\\n\\n    function divRatioRoundingUp(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return FullMath.mulDivRoundingUp(value, 1e6, ratio);\\n    }\\n\\n    /// @param denominator cannot be 0 and is checked in PRBMath.mulDiv()\\n    function mulDiv(\\n        int256 a,\\n        int256 b,\\n        uint256 denominator\\n    ) internal pure returns (int256 result) {\\n        uint256 unsignedA = a < 0 ? uint256(neg256(a)) : uint256(a);\\n        uint256 unsignedB = b < 0 ? uint256(neg256(b)) : uint256(b);\\n        bool negative = ((a < 0 && b > 0) || (a > 0 && b < 0)) ? true : false;\\n\\n        uint256 unsignedResult = PRBMath.mulDiv(unsignedA, unsignedB, denominator);\\n\\n        result = negative ? neg256(unsignedResult) : SafeCast.toInt256(unsignedResult);\\n\\n        return result;\\n    }\\n\\n    function sign(int256 value) internal pure returns (int256) {\\n        return value > 0 ? int256(1) : (value < 0 ? int256(-1) : int256(0));\\n    }\\n}\\n\",\"keccak256\":\"0x861b474b56120c73317b276c50f7633f0fa0f8ce6572f73c6f4ec397ec4814c2\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PerpdexStructs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\n\\nlibrary PerpdexStructs {\\n    struct TakerInfo {\\n        int256 baseBalanceShare;\\n        int256 quoteBalance;\\n    }\\n\\n    struct MakerInfo {\\n        uint256 liquidity;\\n        uint256 cumBaseSharePerLiquidityX96;\\n        uint256 cumQuotePerLiquidityX96;\\n    }\\n\\n    struct VaultInfo {\\n        int256 collateralBalance;\\n    }\\n\\n    struct AccountInfo {\\n        // market\\n        mapping(address => TakerInfo) takerInfos;\\n        // market\\n        mapping(address => MakerInfo) makerInfos;\\n        VaultInfo vaultInfo;\\n        address[] markets;\\n    }\\n\\n    struct InsuranceFundInfo {\\n        int256 balance;\\n        uint256 liquidationRewardBalance;\\n    }\\n\\n    struct ProtocolInfo {\\n        uint256 protocolFee;\\n    }\\n\\n    struct LiquidationRewardConfig {\\n        uint24 rewardRatio;\\n        uint16 smoothEmaTime;\\n    }\\n}\\n\",\"keccak256\":\"0x7281809f60043a809b04144a25e8c5d61edbefd4589a0e097d205921f392d5df\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/TakerLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\nimport { PRBMath } from \\\"prb-math/contracts/PRBMath.sol\\\";\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { IPerpdexMarketMinimum } from \\\"../interfaces/IPerpdexMarketMinimum.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { PerpdexStructs } from \\\"./PerpdexStructs.sol\\\";\\nimport { AccountLibrary } from \\\"./AccountLibrary.sol\\\";\\n\\nlibrary TakerLibrary {\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    struct TradeParams {\\n        address market;\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n        uint256 amount;\\n        uint256 oppositeAmountBound;\\n        uint24 mmRatio;\\n        uint24 imRatio;\\n        uint8 maxMarketsPerAccount;\\n        uint24 protocolFeeRatio;\\n        bool isSelf;\\n        PerpdexStructs.LiquidationRewardConfig liquidationRewardConfig;\\n    }\\n\\n    struct PreviewTradeParams {\\n        address market;\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n        uint256 amount;\\n        uint256 oppositeAmountBound;\\n        uint24 mmRatio;\\n        uint24 protocolFeeRatio;\\n        bool isSelf;\\n    }\\n\\n    struct TradeResponse {\\n        int256 base;\\n        int256 quote;\\n        int256 realizedPnl;\\n        uint256 protocolFee;\\n        uint256 liquidationPenalty;\\n        uint256 liquidationReward;\\n        uint256 insuranceFundReward;\\n        bool isLiquidation;\\n    }\\n\\n    function trade(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        PerpdexStructs.VaultInfo storage liquidatorVaultInfo,\\n        PerpdexStructs.InsuranceFundInfo storage insuranceFundInfo,\\n        PerpdexStructs.ProtocolInfo storage protocolInfo,\\n        TradeParams memory params\\n    ) internal returns (TradeResponse memory response) {\\n        response.isLiquidation = !AccountLibrary.hasEnoughMaintenanceMargin(accountInfo, params.mmRatio);\\n\\n        if (!params.isSelf) {\\n            require(response.isLiquidation, \\\"TL_OP: enough mm\\\");\\n        }\\n\\n        if (response.isLiquidation) {\\n            require(accountInfo.makerInfos[params.market].liquidity == 0, \\\"TL_OP: no maker when liquidation\\\");\\n        }\\n\\n        int256 takerBaseBefore = accountInfo.takerInfos[params.market].baseBalanceShare;\\n\\n        (response.base, response.quote, response.realizedPnl, response.protocolFee) = _doSwap(\\n            accountInfo,\\n            protocolInfo,\\n            params.market,\\n            params.isBaseToQuote,\\n            params.isExactInput,\\n            params.amount,\\n            params.oppositeAmountBound,\\n            params.maxMarketsPerAccount,\\n            params.protocolFeeRatio,\\n            response.isLiquidation\\n        );\\n\\n        bool isOpen = (takerBaseBefore.add(response.base)).sign() * response.base.sign() > 0;\\n\\n        if (response.isLiquidation) {\\n            require(!isOpen, \\\"TL_OP: no open when liquidation\\\");\\n\\n            (\\n                response.liquidationPenalty,\\n                response.liquidationReward,\\n                response.insuranceFundReward\\n            ) = processLiquidationReward(\\n                accountInfo.vaultInfo,\\n                liquidatorVaultInfo,\\n                insuranceFundInfo,\\n                params.mmRatio,\\n                params.liquidationRewardConfig,\\n                response.quote.abs()\\n            );\\n        }\\n\\n        if (isOpen) {\\n            require(AccountLibrary.hasEnoughInitialMargin(accountInfo, params.imRatio), \\\"TL_OP: not enough im\\\");\\n        }\\n    }\\n\\n    function addToTakerBalance(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address market,\\n        int256 baseShare,\\n        int256 quoteBalance,\\n        int256 quoteFee,\\n        uint8 maxMarketsPerAccount\\n    ) internal returns (int256 realizedPnl) {\\n        PerpdexStructs.TakerInfo storage takerInfo = accountInfo.takerInfos[market];\\n\\n        if (baseShare != 0 || quoteBalance != 0) {\\n            require(baseShare.sign() * quoteBalance.sign() == -1, \\\"TL_ATTB: invalid input\\\");\\n\\n            if (takerInfo.baseBalanceShare.sign() * baseShare.sign() == -1) {\\n                uint256 baseAbs = baseShare.abs();\\n                uint256 takerBaseAbs = takerInfo.baseBalanceShare.abs();\\n\\n                if (baseAbs <= takerBaseAbs) {\\n                    int256 reducedOpenNotional = takerInfo.quoteBalance.mulDiv(baseAbs.toInt256(), takerBaseAbs);\\n                    realizedPnl = quoteBalance.add(reducedOpenNotional);\\n                } else {\\n                    int256 closedPositionNotional = quoteBalance.mulDiv(takerBaseAbs.toInt256(), baseAbs);\\n                    realizedPnl = takerInfo.quoteBalance.add(closedPositionNotional);\\n                }\\n            }\\n        }\\n        realizedPnl = realizedPnl.add(quoteFee);\\n\\n        int256 newBaseBalanceShare = takerInfo.baseBalanceShare.add(baseShare);\\n        int256 newQuoteBalance = takerInfo.quoteBalance.add(quoteBalance).add(quoteFee).sub(realizedPnl);\\n        require(\\n            (newBaseBalanceShare == 0 && newQuoteBalance == 0) ||\\n                newBaseBalanceShare.sign() * newQuoteBalance.sign() == -1,\\n            \\\"TL_ATTB: never occur\\\"\\n        );\\n\\n        takerInfo.baseBalanceShare = newBaseBalanceShare;\\n        takerInfo.quoteBalance = newQuoteBalance;\\n        accountInfo.vaultInfo.collateralBalance = accountInfo.vaultInfo.collateralBalance.add(realizedPnl);\\n\\n        AccountLibrary.updateMarkets(accountInfo, market, maxMarketsPerAccount);\\n    }\\n\\n    // Even if trade reverts, it may not revert.\\n    // Attempting to match reverts makes the implementation too complicated\\n    // ignore initial margin check and close only check when liquidation\\n    function previewTrade(PerpdexStructs.AccountInfo storage accountInfo, PreviewTradeParams memory params)\\n        internal\\n        view\\n        returns (uint256 oppositeAmount)\\n    {\\n        bool isLiquidation = !AccountLibrary.hasEnoughMaintenanceMargin(accountInfo, params.mmRatio);\\n\\n        if (!params.isSelf) {\\n            require(isLiquidation, \\\"TL_OPD: enough mm\\\");\\n        }\\n\\n        if (isLiquidation) {\\n            require(accountInfo.makerInfos[params.market].liquidity == 0, \\\"TL_OPD: no maker when liq\\\");\\n        }\\n\\n        oppositeAmount;\\n        if (params.protocolFeeRatio == 0) {\\n            oppositeAmount = IPerpdexMarketMinimum(params.market).previewSwap(\\n                params.isBaseToQuote,\\n                params.isExactInput,\\n                params.amount,\\n                isLiquidation\\n            );\\n        } else {\\n            (oppositeAmount, ) = previewSwapWithProtocolFee(\\n                params.market,\\n                params.isBaseToQuote,\\n                params.isExactInput,\\n                params.amount,\\n                params.protocolFeeRatio,\\n                isLiquidation\\n            );\\n        }\\n        validateSlippage(params.isExactInput, oppositeAmount, params.oppositeAmountBound);\\n    }\\n\\n    // ignore initial margin check and close only check when liquidation\\n    function maxTrade(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address market,\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint24 mmRatio,\\n        uint24 protocolFeeRatio,\\n        bool isSelf\\n    ) internal view returns (uint256 amount) {\\n        bool isLiquidation = !AccountLibrary.hasEnoughMaintenanceMargin(accountInfo, mmRatio);\\n\\n        if (!isSelf && !isLiquidation) {\\n            return 0;\\n        }\\n\\n        if (isLiquidation && accountInfo.makerInfos[market].liquidity != 0) {\\n            return 0;\\n        }\\n\\n        if (protocolFeeRatio == 0) {\\n            amount = IPerpdexMarketMinimum(market).maxSwap(isBaseToQuote, isExactInput, isLiquidation);\\n        } else {\\n            amount = maxSwapWithProtocolFee(market, isBaseToQuote, isExactInput, protocolFeeRatio, isLiquidation);\\n        }\\n    }\\n\\n    function _doSwap(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        PerpdexStructs.ProtocolInfo storage protocolInfo,\\n        address market,\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        uint256 oppositeAmountBound,\\n        uint8 maxMarketsPerAccount,\\n        uint24 protocolFeeRatio,\\n        bool isLiquidation\\n    )\\n        private\\n        returns (\\n            int256 base,\\n            int256 quote,\\n            int256 realizedPnl,\\n            uint256 protocolFee\\n        )\\n    {\\n        uint256 oppositeAmount;\\n\\n        if (protocolFeeRatio > 0) {\\n            (oppositeAmount, protocolFee) = swapWithProtocolFee(\\n                protocolInfo,\\n                market,\\n                isBaseToQuote,\\n                isExactInput,\\n                amount,\\n                protocolFeeRatio,\\n                isLiquidation\\n            );\\n        } else {\\n            oppositeAmount = IPerpdexMarketMinimum(market).swap(isBaseToQuote, isExactInput, amount, isLiquidation);\\n        }\\n        validateSlippage(isExactInput, oppositeAmount, oppositeAmountBound);\\n\\n        (base, quote) = swapResponseToBaseQuote(isBaseToQuote, isExactInput, amount, oppositeAmount);\\n        realizedPnl = addToTakerBalance(accountInfo, market, base, quote, 0, maxMarketsPerAccount);\\n    }\\n\\n    function swapWithProtocolFee(\\n        PerpdexStructs.ProtocolInfo storage protocolInfo,\\n        address market,\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        uint24 protocolFeeRatio,\\n        bool isLiquidation\\n    ) internal returns (uint256 oppositeAmount, uint256 protocolFee) {\\n        if (isExactInput) {\\n            if (isBaseToQuote) {\\n                oppositeAmount = IPerpdexMarketMinimum(market).swap(isBaseToQuote, isExactInput, amount, isLiquidation);\\n                protocolFee = oppositeAmount.mulRatio(protocolFeeRatio);\\n                oppositeAmount = oppositeAmount.sub(protocolFee);\\n            } else {\\n                protocolFee = amount.mulRatio(protocolFeeRatio);\\n                oppositeAmount = IPerpdexMarketMinimum(market).swap(\\n                    isBaseToQuote,\\n                    isExactInput,\\n                    amount.sub(protocolFee),\\n                    isLiquidation\\n                );\\n            }\\n        } else {\\n            if (isBaseToQuote) {\\n                protocolFee = amount.divRatio(PerpMath.subRatio(1e6, protocolFeeRatio)).sub(amount);\\n                oppositeAmount = IPerpdexMarketMinimum(market).swap(\\n                    isBaseToQuote,\\n                    isExactInput,\\n                    amount.add(protocolFee),\\n                    isLiquidation\\n                );\\n            } else {\\n                uint256 oppositeAmountWithoutFee =\\n                    IPerpdexMarketMinimum(market).swap(isBaseToQuote, isExactInput, amount, isLiquidation);\\n                oppositeAmount = oppositeAmountWithoutFee.divRatio(PerpMath.subRatio(1e6, protocolFeeRatio));\\n                protocolFee = oppositeAmount.sub(oppositeAmountWithoutFee);\\n            }\\n        }\\n\\n        protocolInfo.protocolFee = protocolInfo.protocolFee.add(protocolFee);\\n    }\\n\\n    function processLiquidationReward(\\n        PerpdexStructs.VaultInfo storage vaultInfo,\\n        PerpdexStructs.VaultInfo storage liquidatorVaultInfo,\\n        PerpdexStructs.InsuranceFundInfo storage insuranceFundInfo,\\n        uint24 mmRatio,\\n        PerpdexStructs.LiquidationRewardConfig memory liquidationRewardConfig,\\n        uint256 exchangedQuote\\n    )\\n        internal\\n        returns (\\n            uint256 penalty,\\n            uint256 liquidationReward,\\n            uint256 insuranceFundReward\\n        )\\n    {\\n        penalty = exchangedQuote.mulRatio(mmRatio);\\n        liquidationReward = penalty.mulRatio(liquidationRewardConfig.rewardRatio);\\n        insuranceFundReward = penalty.sub(liquidationReward);\\n\\n        (insuranceFundInfo.liquidationRewardBalance, liquidationReward) = _smoothLiquidationReward(\\n            insuranceFundInfo.liquidationRewardBalance,\\n            liquidationReward,\\n            liquidationRewardConfig.smoothEmaTime\\n        );\\n\\n        vaultInfo.collateralBalance = vaultInfo.collateralBalance.sub(penalty.toInt256());\\n        liquidatorVaultInfo.collateralBalance = liquidatorVaultInfo.collateralBalance.add(liquidationReward.toInt256());\\n        insuranceFundInfo.balance = insuranceFundInfo.balance.add(insuranceFundReward.toInt256());\\n    }\\n\\n    function _smoothLiquidationReward(\\n        uint256 rewardBalance,\\n        uint256 reward,\\n        uint24 emaTime\\n    ) private pure returns (uint256 outputRewardBalance, uint256 outputReward) {\\n        rewardBalance = rewardBalance.add(reward);\\n        outputReward = rewardBalance.div(emaTime);\\n        outputRewardBalance = rewardBalance.sub(outputReward);\\n    }\\n\\n    function previewSwapWithProtocolFee(\\n        address market,\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        uint24 protocolFeeRatio,\\n        bool isLiquidation\\n    ) internal view returns (uint256 oppositeAmount, uint256 protocolFee) {\\n        if (isExactInput) {\\n            if (isBaseToQuote) {\\n                oppositeAmount = IPerpdexMarketMinimum(market).previewSwap(\\n                    isBaseToQuote,\\n                    isExactInput,\\n                    amount,\\n                    isLiquidation\\n                );\\n                protocolFee = oppositeAmount.mulRatio(protocolFeeRatio);\\n                oppositeAmount = oppositeAmount.sub(protocolFee);\\n            } else {\\n                protocolFee = amount.mulRatio(protocolFeeRatio);\\n                oppositeAmount = IPerpdexMarketMinimum(market).previewSwap(\\n                    isBaseToQuote,\\n                    isExactInput,\\n                    amount.sub(protocolFee),\\n                    isLiquidation\\n                );\\n            }\\n        } else {\\n            if (isBaseToQuote) {\\n                protocolFee = amount.divRatio(PerpMath.subRatio(1e6, protocolFeeRatio)).sub(amount);\\n                oppositeAmount = IPerpdexMarketMinimum(market).previewSwap(\\n                    isBaseToQuote,\\n                    isExactInput,\\n                    amount.add(protocolFee),\\n                    isLiquidation\\n                );\\n            } else {\\n                uint256 oppositeAmountWithoutFee =\\n                    IPerpdexMarketMinimum(market).previewSwap(isBaseToQuote, isExactInput, amount, isLiquidation);\\n                oppositeAmount = oppositeAmountWithoutFee.divRatio(PerpMath.subRatio(1e6, protocolFeeRatio));\\n                protocolFee = oppositeAmount.sub(oppositeAmountWithoutFee);\\n            }\\n        }\\n    }\\n\\n    function maxSwapWithProtocolFee(\\n        address market,\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint24 protocolFeeRatio,\\n        bool isLiquidation\\n    ) internal view returns (uint256 amount) {\\n        amount = IPerpdexMarketMinimum(market).maxSwap(isBaseToQuote, isExactInput, isLiquidation);\\n\\n        if (isExactInput) {\\n            if (isBaseToQuote) {} else {\\n                amount = amount.divRatio(PerpMath.subRatio(1e6, protocolFeeRatio));\\n            }\\n        } else {\\n            if (isBaseToQuote) {\\n                amount = amount.mulRatio(PerpMath.subRatio(1e6, protocolFeeRatio));\\n            } else {}\\n        }\\n    }\\n\\n    function validateSlippage(\\n        bool isExactInput,\\n        uint256 oppositeAmount,\\n        uint256 oppositeAmountBound\\n    ) internal pure {\\n        if (isExactInput) {\\n            require(oppositeAmount >= oppositeAmountBound, \\\"TL_VS: too small opposite amount\\\");\\n        } else {\\n            require(oppositeAmount <= oppositeAmountBound, \\\"TL_VS: too large opposite amount\\\");\\n        }\\n    }\\n\\n    function swapResponseToBaseQuote(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        uint256 oppositeAmount\\n    ) internal pure returns (int256, int256) {\\n        if (isExactInput) {\\n            if (isBaseToQuote) {\\n                return (amount.neg256(), oppositeAmount.toInt256());\\n            } else {\\n                return (oppositeAmount.toInt256(), amount.neg256());\\n            }\\n        } else {\\n            if (isBaseToQuote) {\\n                return (oppositeAmount.neg256(), amount.toInt256());\\n            } else {\\n                return (amount.toInt256(), oppositeAmount.neg256());\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdfec59a21a29e0e9ad1c74d57482576905f1fed81c9a8a39cb8d4a9f5f4bdfc6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/VaultLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { IERC20Metadata } from \\\"../interfaces/IERC20Metadata.sol\\\";\\nimport { AccountLibrary } from \\\"./AccountLibrary.sol\\\";\\nimport { PerpdexStructs } from \\\"./PerpdexStructs.sol\\\";\\n\\nlibrary VaultLibrary {\\n    using PerpMath for int256;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    struct DepositParams {\\n        address settlementToken;\\n        uint256 amount;\\n        address from;\\n    }\\n\\n    struct WithdrawParams {\\n        address settlementToken;\\n        uint256 amount;\\n        address payable to;\\n        uint24 imRatio;\\n    }\\n\\n    function deposit(PerpdexStructs.AccountInfo storage accountInfo, DepositParams memory params) internal {\\n        require(params.amount > 0, \\\"VL_D: zero amount\\\");\\n        _transferTokenIn(params.settlementToken, params.from, params.amount);\\n        uint256 collateralAmount =\\n            _toCollateralAmount(params.amount, IERC20Metadata(params.settlementToken).decimals());\\n        accountInfo.vaultInfo.collateralBalance = accountInfo.vaultInfo.collateralBalance.add(\\n            collateralAmount.toInt256()\\n        );\\n    }\\n\\n    function depositEth(PerpdexStructs.AccountInfo storage accountInfo, uint256 amount) internal {\\n        require(amount > 0, \\\"VL_DE: zero amount\\\");\\n        accountInfo.vaultInfo.collateralBalance = accountInfo.vaultInfo.collateralBalance.add(amount.toInt256());\\n    }\\n\\n    function withdraw(PerpdexStructs.AccountInfo storage accountInfo, WithdrawParams memory params) internal {\\n        require(params.amount > 0, \\\"VL_W: zero amount\\\");\\n\\n        uint256 collateralAmount =\\n            params.settlementToken == address(0)\\n                ? params.amount\\n                : _toCollateralAmount(params.amount, IERC20Metadata(params.settlementToken).decimals());\\n        accountInfo.vaultInfo.collateralBalance = accountInfo.vaultInfo.collateralBalance.sub(\\n            collateralAmount.toInt256()\\n        );\\n\\n        require(AccountLibrary.hasEnoughInitialMargin(accountInfo, params.imRatio), \\\"VL_W: not enough initial margin\\\");\\n\\n        if (params.settlementToken == address(0)) {\\n            params.to.transfer(params.amount);\\n        } else {\\n            SafeERC20.safeTransfer(IERC20(params.settlementToken), params.to, params.amount);\\n        }\\n    }\\n\\n    function transferProtocolFee(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        PerpdexStructs.ProtocolInfo storage protocolInfo,\\n        uint256 amount\\n    ) internal {\\n        accountInfo.vaultInfo.collateralBalance = accountInfo.vaultInfo.collateralBalance.add(amount.toInt256());\\n        protocolInfo.protocolFee = protocolInfo.protocolFee.sub(amount);\\n    }\\n\\n    function _transferTokenIn(\\n        address token,\\n        address from,\\n        uint256 amount\\n    ) private {\\n        // check for deflationary tokens by assuring balances before and after transferring to be the same\\n        uint256 balanceBefore = IERC20Metadata(token).balanceOf(address(this));\\n        SafeERC20.safeTransferFrom(IERC20(token), from, address(this), amount);\\n        require(\\n            (IERC20Metadata(token).balanceOf(address(this)).sub(balanceBefore)) == amount,\\n            \\\"VL_TTI: inconsistent balance\\\"\\n        );\\n    }\\n\\n    function _toCollateralAmount(uint256 amount, uint8 tokenDecimals) private pure returns (uint256) {\\n        int256 decimalsDiff = int256(18).sub(uint256(tokenDecimals).toInt256());\\n        uint256 decimalsDiffAbs = decimalsDiff.abs();\\n        require(decimalsDiffAbs <= 77, \\\"VL_TCA: too large decimals diff\\\");\\n        return decimalsDiff >= 0 ? amount.mul(10**decimalsDiffAbs) : amount.div(10**decimalsDiffAbs);\\n    }\\n}\\n\",\"keccak256\":\"0x895f74b465fc06799edaf47758871dc06af50e1a729f35ad647bf8638a35dd57\",\"license\":\"GPL-3.0-or-later\"},\"contracts/test/DebugPerpdexExchange.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { PerpdexExchange } from \\\"../PerpdexExchange.sol\\\";\\n\\ncontract DebugPerpdexExchange is PerpdexExchange {\\n    uint256 private constant _RINKEBY_CHAIN_ID = 4;\\n    uint256 private constant _MUMBAI_CHAIN_ID = 80001;\\n    uint256 private constant _SHIBUYA_CHAIN_ID = 81;\\n    // https://v2-docs.zksync.io/dev/zksync-v2/temp-limits.html#temporarily-simulated-by-constant-values\\n    uint256 private constant _ZKSYNC2_TESTNET_CHAIN_ID = 0;\\n    uint256 private constant _ARBITRUM_RINKEBY_CHAIN_ID = 421611;\\n    uint256 private constant _OPTIMISM_KOVAN_CHAIN_ID = 69;\\n\\n    constructor(address settlementTokenArg) PerpdexExchange(settlementTokenArg) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        require(\\n            chainId == _RINKEBY_CHAIN_ID ||\\n                chainId == _MUMBAI_CHAIN_ID ||\\n                chainId == _SHIBUYA_CHAIN_ID ||\\n                chainId == _ZKSYNC2_TESTNET_CHAIN_ID ||\\n            chainId == _ARBITRUM_RINKEBY_CHAIN_ID ||\\n            chainId == _OPTIMISM_KOVAN_CHAIN_ID,\\n            \\\"DPE_C: testnet only\\\"\\n        );\\n    }\\n\\n    function setCollateralBalance(address trader, int256 balance) external {\\n        accountInfos[trader].vaultInfo.collateralBalance = balance;\\n    }\\n}\\n\",\"keccak256\":\"0xbf56d22cc673250d72a7c60eb97147b1543952ccb616afb318aea96c71a954ac\",\"license\":\"GPL-3.0-or-later\"},\"prb-math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xed164c95012964f5e125b5d2b2d00471a4bdee4def618cd1fcf341d196011b61\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x600680546001600160501b03191665c3500186a01017905560e060405262030d4060a052606460c052600780546364030d4064ffffffffff199091161790553480156200004b57600080fd5b5060405162005a0b38038062005a0b8339810160408190526200006e9162000208565b6001600055806200007f33620001a7565b6001600160a01b0381161580620000b05750620000b0816001600160a01b0316620001f960201b620021b91760201c565b620001025760405162461bcd60e51b815260206004820152601b60248201527f50455f433a20746f6b656e206164647265737320696e76616c6964000000000060448201526064015b60405180910390fd5b6001600160a01b03166080524660048114806200012157506201388181145b806200012d5750605181145b8062000137575080155b8062000145575062066eeb81145b80620001515750604581145b6200019f5760405162461bcd60e51b815260206004820152601360248201527f4450455f433a20746573746e6574206f6e6c79000000000000000000000000006044820152606401620000f9565b50506200023a565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b03163b151590565b6000602082840312156200021b57600080fd5b81516001600160a01b03811681146200023357600080fd5b9392505050565b6080516157a06200026b600039600081816104aa01528181610a5401528181611511015261166301526157a06000f3fe6080604052600436106102465760003560e01c806394887af711610139578063ca5b721e116100b6578063dfe1cb921161007a578063dfe1cb9214610801578063e671be171461083c578063e72e43631461085c578063ec6cca841461088c578063f2fde38b146108ac578063f652b527146108cc57600080fd5b8063ca5b721e14610739578063cffe855614610759578063d11102c514610779578063d1ce35e3146107a6578063ddad7e97146107c657600080fd5b8063ac3732b4116100fd578063ac3732b414610689578063b53c5125146106a9578063b6b55f25146106eb578063c66fa8e6146106fe578063c9ca7b181461071957600080fd5b806394887af71461059a578063996fbf94146105e15780639dce9e19146106015780639f044f3114610631578063a616c66c1461065457600080fd5b80636e838bad116101c75780637c88490a1161018b5780637c88490a146104d957806387cad0bf146104f95780638da5cb5b146105455780639317b1931461056357806393420cf41461058357600080fd5b80636e838bad14610420578063715018a61461044057806373f62501146104555780637a27d9f6146104755780637b9e618d1461049857600080fd5b806333ff15771161020e57806333ff1577146103795780633a921051146103995780633d46396a146103b95780633fd1e2bd146103d95780634b4aa7351461040057600080fd5b80630674fa411461024b5780632d67669c1461027e5780632e1a7d4d1461029e5780632e784343146102c05780632f60a15114610344575b600080fd5b34801561025757600080fd5b5061026b610266366004614f77565b6108e6565b6040519081526020015b60405180910390f35b34801561028a57600080fd5b5061026b610299366004614f94565b61090d565b3480156102aa57600080fd5b506102be6102b9366004614fac565b610a00565b005b3480156102cc57600080fd5b506103296102db366004614fc5565b604080518082018252600080825260209182018190526001600160a01b0394851681526002825282812093909416845291825291829020825180840190935280548352600101549082015290565b60408051825181526020928301519281019290925201610275565b34801561035057600080fd5b5060065461036590610100900462ffffff1681565b60405162ffffff9091168152602001610275565b34801561038557600080fd5b5061026b610394366004614fc5565b610aeb565b3480156103a557600080fd5b5061026b6103b4366004614f77565b610b14565b3480156103c557600080fd5b506102be6103d4366004614fac565b610b35565b3480156103e557600080fd5b506103ee601281565b60405160ff9091168152602001610275565b34801561040c57600080fd5b5061026b61041b366004614f77565b610bbc565b34801561042c57600080fd5b506102be61043b36600461500f565b610bdd565b34801561044c57600080fd5b506102be610d14565b34801561046157600080fd5b506102be61047036600461503b565b610d28565b34801561048157600080fd5b5060065461036590600160381b900462ffffff1681565b3480156104a457600080fd5b506104cc7f000000000000000000000000000000000000000000000000000000000000000081565b6040516102759190615058565b3480156104e557600080fd5b5061026b6104f4366004614fc5565b610d9a565b34801561050557600080fd5b50610536610514366004614f77565b6002602081815260009283526040928390208351918201909352910154815281565b60405190518152602001610275565b34801561055157600080fd5b506001546001600160a01b03166104cc565b34801561056f57600080fd5b506102be61057e36600461507a565b610dbc565b34801561058f57600080fd5b5060055461026b9081565b3480156105a657600080fd5b506007546105c39062ffffff8116906301000000900461ffff1682565b6040805162ffffff909316835261ffff909116602083015201610275565b3480156105ed57600080fd5b5061026b6105fc366004614fc5565b610f6a565b34801561060d57600080fd5b5061062161061c366004614f77565b610f8c565b6040519015158152602001610275565b34801561063d57600080fd5b5060065461036590600160201b900462ffffff1681565b34801561066057600080fd5b5061067461066f3660046150ba565b610fbd565b60408051928352602083019190915201610275565b34801561069557600080fd5b506102be6106a43660046150d6565b61130c565b3480156106b557600080fd5b506106c96106c4366004614fc5565b61146a565b6040805182518152602080840151908201529181015190820152606001610275565b6102be6106f9366004614fac565b6114de565b34801561070a57600080fd5b50600354600454610674919082565b34801561072557600080fd5b506102be61073436600461500f565b6116ec565b34801561074557600080fd5b5061026b610754366004614fc5565b611813565b34801561076557600080fd5b5061026b6107743660046150fa565b611835565b34801561078557600080fd5b50610799610794366004614f77565b61197c565b6040516102759190615116565b3480156107b257600080fd5b506102be6107c136600461500f565b6119f5565b3480156107d257600080fd5b506102be6107e1366004615163565b6001600160a01b0390911660009081526002602081905260409091200155565b34801561080d57600080fd5b5061082161081c3660046150ba565b611ac3565b60408051938452602084019290925290820152606001610275565b34801561084857600080fd5b5061026b6108573660046150fa565b611dbb565b34801561086857600080fd5b50610621610877366004614f77565b60086020526000908152604090205460ff1681565b34801561089857600080fd5b506106216108a7366004614f77565b612111565b3480156108b857600080fd5b506102be6108c7366004614f77565b612140565b3480156108d857600080fd5b506006546103ee9060ff1681565b6001600160a01b0381166000908152600260205260408120610907906121c8565b92915050565b60006008816109226040850160208601614f77565b6001600160a01b0316815260208101919091526040016000205460ff1661094b57506000919050565b600061095a6020840184614f77565b9050600061096e6060850160408601614f77565b90506109f860026000846001600160a01b03166001600160a01b031681526020019081526020016000208560200160208101906109ab9190614f77565b6109bb608088016060890161518f565b6109cb60a0890160808a0161518f565b60065462ffffff600160201b8204811691600160381b9004166001600160a01b0389811690891614612428565b949350505050565b60026000541415610a2c5760405162461bcd60e51b8152600401610a23906151ac565b60405180910390fd5b6002600081815533808252602092835260409182902082516080810184526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152938401859052918301819052600654610100900462ffffff16606084015291610a9f9190612530565b806001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d583604051610ada91815260200190565b60405180910390a250506001600055565b6001600160a01b0382166000908152600260205260408120610b0d90836126f5565b9392505050565b6001600160a01b038116600090815260026020526040812061090790612846565b610b3d6128b6565b60026000541415610b605760405162461bcd60e51b8152600401610a23906151ac565b600260008181553380825260209290925260409020610b8190600584612910565b806001600160a01b03167f0880b0e717a57f3b5cbd3fc19396ae3c8cdee5c624c9289477869c38014c849583604051610ada91815260200190565b6001600160a01b03811660009081526002602052604081206109079061293f565b610be56128b6565b60026000541415610c085760405162461bcd60e51b8152600401610a23906151ac565b6002600055620f424062ffffff821610610c585760405162461bcd60e51b815260206004820152601160248201527050455f5349523a20746f6f206c6172676560781b6044820152606401610a23565b60065462ffffff600160201b90910481169082161015610cba5760405162461bcd60e51b815260206004820152601c60248201527f50455f5349523a20736d616c6c6572207468616e206d6d526174696f000000006044820152606401610a23565b6006805463ffffff00191661010062ffffff8416908102919091179091556040519081527f04f9c1a24c6543f4b91577d82af28fb7ef6d7b9fe46acd0e5c36ef17073b94e6906020015b60405180910390a1506001600055565b610d1c6128b6565b610d2660006129a7565b565b610d306128b6565b60026000541415610d535760405162461bcd60e51b8152600401610a23906151ac565b60026000556006805460ff191660ff83169081179091556040519081527fa7b4760b38e2a630f3073fcd5119972cbf81bd50e3761f86534a69661caf811090602001610d04565b6001600160a01b0382166000908152600260205260408120610b0d90836129f9565b610dc46128b6565b60026000541415610de75760405162461bcd60e51b8152600401610a23906151ac565b6002600055610dfe6001600160a01b0383166121b9565b610e4a5760405162461bcd60e51b815260206004820152601f60248201527f50455f53494d413a206d61726b6574206164647265737320696e76616c6964006044820152606401610a23565b8015610f1257306001600160a01b0316826001600160a01b031663d2f7265a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebc91906151e3565b6001600160a01b031614610f125760405162461bcd60e51b815260206004820152601b60248201527f50455f53494d413a20646966666572656e742065786368616e676500000000006044820152606401610a23565b6001600160a01b038216600081815260086020908152604091829020805460ff191685151590811790915591519182527fd5d4c2e150c76234e0f5d390162d34c5c1e1405df2194cfbd63b12d9521b10279101610ada565b6001600160a01b0382166000908152600260205260408120610b0d9083612a95565b6001600160a01b03811660009081526002602052604081206006546109079190600160201b900462ffffff16612b28565b60008060026000541415610fe35760405162461bcd60e51b8152600401610a23906151ac565b600260005560a08301354281101561100d5760405162461bcd60e51b8152600401610a2390615200565b61101d6040850160208601614f77565b6001600160a01b03811660009081526008602052604090205460ff166110555760405162461bcd60e51b8152600401610a2390615229565b600061112160028261106a60208a018a614f77565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518060e001604052808960200160208101906110a89190614f77565b6001600160a01b0316815260408a81013560208301526060808c0135918301919091526080808c013591830191909152600654600160201b810462ffffff169183019190915260ff1660a082015260c001336001600160a01b031661111060208c018c614f77565b6001600160a01b0316149052612b61565b905060006111356040880160208901614f77565b6001600160a01b0316639482de1a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611172573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111969190615260565b905060006111aa6040890160208a01614f77565b6001600160a01b0316638ee8fe5d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120b9190615260565b905061121d6040890160208a01614f77565b6001600160a01b031661123360208a018a614f77565b6001600160a01b03167f2935383596639a6916071dea84c6ed5d6c6315fa9628268974458798fea93ebc8560a0015161126d57600061126f565b335b866000015187602001518d6040013589604001518a606001518b608001518b8b6040516112e9999897969594939291906001600160a01b03999099168952602089019790975260408801959095526060870193909352608086019190915260a085015260c084015260e08301526101008201526101200190565b60405180910390a350508051602090910151600160005590969095509350505050565b6113146128b6565b600260005414156113375760405162461bcd60e51b8152600401610a23906151ac565b6002600055620f424061134d602083018361500f565b62ffffff161061139f5760405162461bcd60e51b815260206004820152601f60248201527f50455f534c52433a20746f6f206c617267652072657761726420726174696f006044820152606401610a23565b60006113b16040830160208401615289565b61ffff16116113fe5760405162461bcd60e51b815260206004820152601960248201527850455f534c52433a20656d612074696d65206973207a65726f60381b6044820152606401610a23565b80600761140b82826152a6565b507f1185c4964ca5cd3d88d5dfbc1fb65b84d5533e3354f3b2163e8e1c0f35bca0e1905061143c602083018361500f565b61144c6040840160208501615289565b6040805162ffffff909316835261ffff909116602083015201610d04565b61148e60405180606001604052806000815260200160008152602001600081525090565b506001600160a01b03808316600090815260026020818152604080842094861684526001948501825292839020835160608101855281548152948101549185019190915201549082015292915050565b600260005414156115015760405162461bcd60e51b8152600401610a23906151ac565b6002600055336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166115e557811561157b5760405162461bcd60e51b815260206004820152601560248201527450455f443a20616d6f756e74206e6f74207a65726f60581b6044820152606401610a23565b6001600160a01b038116600090815260026020526040902061159d9034612eb3565b806001600160a01b03167f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4346040516115d891815260200190565b60405180910390a26116e3565b341561162e5760405162461bcd60e51b815260206004820152601860248201527750455f443a206d73672e76616c7565206e6f74207a65726f60401b6044820152606401610a23565b6116a860026000836001600160a01b03166001600160a01b0316815260200190815260200160002060405180606001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001858152602001846001600160a01b0316815250612f1b565b806001600160a01b03167f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c483604051610ada91815260200190565b50506001600055565b6116f46128b6565b600260005414156117175760405162461bcd60e51b8152600401610a23906151ac565b600260005560065462ffffff6101009091048116908216111561177c5760405162461bcd60e51b815260206004820152601b60248201527f50455f534d523a20626967676572207468616e20696d526174696f00000000006044820152606401610a23565b60008162ffffff16116117c05760405162461bcd60e51b815260206004820152600c60248201526b50455f534d523a207a65726f60a01b6044820152606401610a23565b6006805466ffffff000000001916600160201b62ffffff8416908102919091179091556040519081527ffbd0bf17b9833a130f5baeccbfc586acefc75be8ad5bb114f448e412adc4c05b90602001610d04565b6001600160a01b0382166000908152600260205260408120610b0d9083612fe1565b60006118476040830160208401614f77565b6001600160a01b03811660009081526008602052604090205460ff1661187f5760405162461bcd60e51b8152600401610a2390615229565b600061188e6020850185614f77565b905060006118a26060860160408701614f77565b905061197360026000846001600160a01b03166001600160a01b031681526020019081526020016000206040518061010001604052808860200160208101906118eb9190614f77565b6001600160a01b0316815260200161190960808a0160608b0161518f565b1515815260200161192060a08a0160808b0161518f565b1515815260a0808a0135602083015260c08a0135604083015260065462ffffff600160201b820481166060850152600160381b9091041660808301526001600160a01b0387811690871614910152613092565b95945050505050565b6001600160a01b0381166000908152600260209081526040918290206003018054835181840281018401909452808452606093928301828280156119e957602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116119cb575b50505050509050919050565b6119fd6128b6565b60026000541415611a205760405162461bcd60e51b8152600401610a23906151ac565b600260005561271062ffffff82161115611a715760405162461bcd60e51b815260206004820152601260248201527150455f535046523a20746f6f206c6172676560701b6044820152606401610a23565b6006805462ffffff60381b1916600160381b62ffffff8416908102919091179091556040519081527f68c41b7a5c12c4d9cbb99ec284bf647922a75f379a90694e3ad65574f4ff944d90602001610d04565b600080600060026000541415611aeb5760405162461bcd60e51b8152600401610a23906151ac565b600260005560a084013542811015611b155760405162461bcd60e51b8152600401610a2390615200565b611b226020860186614f77565b6001600160a01b03811660009081526008602052604090205460ff16611b5a5760405162461bcd60e51b8152600401610a2390615229565b336000818152600260209081526040808320815160e08101909252611bdd929091908190611b8a908d018d614f77565b6001600160a01b0316815260208c810135908201526040808d0135908201526060808d0135908201526080808d01359082015260065462ffffff61010082041660a083015260ff1660c09091015261322a565b90506000611bee60208a018a614f77565b6001600160a01b0316639482de1a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4f9190615260565b90506000611c6060208b018b614f77565b6001600160a01b0316638ee8fe5d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc19190615260565b6001600160a01b038516600090815260026020908152604082209293509091600101908290611cf2908e018e614f77565b6001600160a01b031681526020808201929092526040016000209150611d1a908c018c614f77565b845160208087015160408089015160018701546002880154835196875294860193909352908401526060830152608082015260a0810185905260c081018490526001600160a01b03918216918716907f228674ca516ab8f32325e25d1e16656e747d977df7f664467fd5f7b4e64ba00f9060e00160405180910390a35050815160208301516040909301516001600055909a92995097509095505050505050565b600060026000541415611de05760405162461bcd60e51b8152600401610a23906151ac565b600260005560c082013542811015611e0a5760405162461bcd60e51b8152600401610a2390615200565b611e1a6040840160208501614f77565b6001600160a01b03811660009081526008602052604090205460ff16611e525760405162461bcd60e51b8152600401610a2390615229565b6000611e5d856134ca565b90506000611e716040870160208801614f77565b6001600160a01b0316639482de1a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611eae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed29190615260565b90506000611ee66040880160208901614f77565b6001600160a01b0316638ee8fe5d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f479190615260565b90508260e00151156120255733611f646040890160208a01614f77565b6001600160a01b0316611f7a60208a018a614f77565b6001600160a01b03167f7c3978559b662b8adf839d43cce2ec6ab7db3fdc995575e4576acc9e0628985d866000015187602001518860400151896060015189898c608001518d60a001518e60c0015160405161201899989796959493929190988952602089019790975260408801959095526060870193909352608086019190915260a085015260c084015260e08301526101008201526101200190565b60405180910390a46120bb565b6120356040880160208901614f77565b6001600160a01b031661204b6020890189614f77565b84516020808701516040808901516060808b0151835196875294860193909352908401528201526080810185905260a081018490526001600160a01b0391909116907fe386a40c070a1424ae709b98c27e64993228f777c6294ef7149cf0ee42ef46e89060c00160405180910390a35b6120cb606088016040890161518f565b15156120dd6080890160608a0161518f565b1515146120f45782516120ef9061363f565b612101565b612101836020015161363f565b6001600055979650505050505050565b6001600160a01b03811660009081526002602052604081206006546109079190610100900462ffffff16613668565b6121486128b6565b6001600160a01b0381166121ad5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a23565b6121b6816129a7565b50565b6001600160a01b03163b151590565b600281015460038201805460009290835b8181101561241e5760008482815481106121f5576121f56152f4565b60009182526020808320909101546001600160a01b031680835260018a810183526040808520938c9052909320805493015482549194509192919015612372578254604051637640482f60e01b8152600481019190915260009081906001600160a01b03871690637640482f906024016040805180830381865afa158015612281573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a5919061530a565b86546001880154600289015460405163933c797960e01b8152600481019390935260248301919091526044820152919350915060009081906001600160a01b0389169063933c7979906064016040805180830381865afa15801561230d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612331919061530a565b915091506123528261234c612345876136b1565b899061371f565b9061371f565b955061236b8161234c612364866136b1565b889061371f565b9450505050505b81156123fd576000846001600160a01b0316638ee8fe5d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156123b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123dc9190615260565b90506123f96123456123ed836136b1565b8590600160601b61372b565b9750505b612407878261371f565b9650505050508061241790615344565b90506121d9565b5090949350505050565b6000806124358986612b28565b15905082158015612444575080155b15612453576000915050612525565b80801561247957506001600160a01b038816600090815260018a01602052604090205415155b15612488576000915050612525565b62ffffff84166125135760405163e8fa204f60e01b81528715156004820152861515602482015281151560448201526001600160a01b0389169063e8fa204f90606401602060405180830381865afa1580156124e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250c9190615260565b9150612523565b61252088888887856137cf565b91505b505b979650505050505050565b60008160200151116125785760405162461bcd60e51b8152602060048201526011602482015270159317d5ce881e995c9bc8185b5bdd5b9d607a1b6044820152606401610a23565b80516000906001600160a01b031615612603576125fe826020015183600001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125f9919061535f565b61389a565b612609565b81602001515b9050612622612617826136b1565b60028501549061394c565b60028401556060820151612637908490613668565b6126835760405162461bcd60e51b815260206004820152601f60248201527f564c5f573a206e6f7420656e6f75676820696e697469616c206d617267696e006044820152606401610a23565b81516001600160a01b03166126d95781604001516001600160a01b03166108fc83602001519081150290604051600060405180830381858888f193505050501580156126d3573d6000803e3d6000fd5b50505050565b6126f0826000015183604001518460200151613958565b505050565b6001600160a01b03811660009081526001830160209081526040808320918590529091205481549091901561283f578054604051637640482f60e01b81526000916001600160a01b03861691637640482f916127579160040190815260200190565b6040805180830381865afa158015612773573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612797919061530a565b5082546001840154600285015460405163933c797960e01b81526004810193909352602483019190915260448201529091506000906001600160a01b0386169063933c7979906064016040805180830381865afa1580156127fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612820919061530a565b50905061283a8161234c612833856136b1565b879061371f565b935050505b5092915050565b600381018054600091908290815b8181101561241e57600061289661289188878581548110612877576128776152f4565b6000918252602090912001546001600160a01b03166129f9565b61363f565b90506128a284826139bb565b935050806128af90615344565b9050612854565b6001546001600160a01b03163314610d265760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a23565b61292761291c826136b1565b60028501549061371f565b6002840155815461293890826139c7565b9091555050565b600381018054600091908290815b8181101561241e5760006129878786848154811061296d5761296d6152f4565b6000918252602090912001546001600160a01b0316612a95565b905061299384826139bb565b935050806129a090615344565b905061294d565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080612a0684846126f5565b905080612a17576000915050610907565b6000836001600160a01b0316638ee8fe5d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a7b9190615260565b9050611973612a89826136b1565b8390600160601b61372b565b600080612aa28484612fe1565b905080612ab3576000915050610907565b6000836001600160a01b0316638ee8fe5d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612af3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b179190615260565b90506119738282600160601b6139d3565b600080612b34846121c8565b90506000612b4185612846565b9050612b55612b508286613aa1565b6136b1565b90911215949350505050565b612b9c6040518060c0016040528060008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b612baa838360800151612b28565b1560a082015260c0820151612bfd578060a00151612bfd5760405162461bcd60e51b815260206004820152601060248201526f4d4c5f524c3a20656e6f756768206d6d60801b6044820152606401610a23565b81516001600160a01b039081166000908152600185810160209081526040808420875192880151938101546002820154925163933c797960e01b81526004810195909552602485015260448401919091529293169063933c7979906064016040805180830381865afa158015612c77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c9b919061530a565b84604001856060018281525082815250505083600001516001600160a01b0316638ee8fe5d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612cef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d139190615260565b84516020860151604051639c8f9f2360e01b815260048101919091529193506001600160a01b03169150639c8f9f239060240160408051808303816000875af1158015612d64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d88919061530a565b602084015280835260408401511115612db35760405162461bcd60e51b8152600401610a239061537c565b826060015182602001511015612ddb5760405162461bcd60e51b8152600401610a239061537c565b612df6612deb83600001516136b1565b60408401519061371f565b60408301526020820151612e1890612e0d906136b1565b60608401519061371f565b606083015282516001600160a01b031660009081526001850160209081526040909120908401518154612e4a916139c7565b90556000612e6a612e5a836136b1565b604085015190600160601b61372b565b612e73906153b3565b9050612ea5858560000151856040015184612e9b86896060015161394c90919063ffffffff16565b8960a00151613ab6565b608084015250909392505050565b60008111612ef85760405162461bcd60e51b8152602060048201526012602482015271159317d1114e881e995c9bc8185b5bdd5b9d60721b6044820152606401610a23565b612f0f612f04826136b1565b60028401549061371f565b60029092019190915550565b6000816020015111612f635760405162461bcd60e51b8152602060048201526011602482015270159317d10e881e995c9bc8185b5bdd5b9d607a1b6044820152606401610a23565b612f7a816000015182604001518360200151613ce1565b6000612fc6826020015183600001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125d5573d6000803e3d6000fd5b9050612fd461291c826136b1565b6002909301929092555050565b6001600160a01b0381166000908152600183016020526040812061300861289185856126f5565b81549092501561283f578054604051637640482f60e01b81526000916001600160a01b03861691637640482f916130459160040190815260200190565b6040805180830381865afa158015613061573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613085919061530a565b50905061197383826139bb565b6000806130a3848460a00151612b28565b1590508260e001516130f057806130f05760405162461bcd60e51b8152602060048201526011602482015270544c5f4f50443a20656e6f756768206d6d60781b6044820152606401610a23565b801561315b5782516001600160a01b031660009081526001850160205260409020541561315b5760405162461bcd60e51b8152602060048201526019602482015278544c5f4f50443a206e6f206d616b6572207768656e206c697160381b6044820152606401610a23565b60c083015162ffffff166131f157825160208401516040808601516060870151915162de853760e31b81526001600160a01b03909416936306f429b8936131a99390929187906004016153d0565b602060405180830381865afa1580156131c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131ea9190615260565b9150613217565b61321383600001518460200151856040015186606001518760c0015186613e24565b5091505b61283f836040015183856080015161402c565b61324e60405180606001604052806000815260200160008152602001600081525090565b81516001600160a01b039081166000908152600185016020526040808220855182516379144ba960e11b815283519295859492169263f2289752926004808401939192918290030181865afa1580156132ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132cf919061530a565b865160208801516040808a01519051634e6a20ed60e11b8152600481019290925260248201529294509092506001600160a01b031690639cd441da906044016060604051808303816000875af115801561332d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061335191906153ef565b60408701526020860152808552606086015111156133b15760405162461bcd60e51b815260206004820152601c60248201527f4d4c5f414c3a20746f6f20736d616c6c206f75747075742062617365000000006044820152606401610a23565b8460800151846020015110156134095760405162461bcd60e51b815260206004820152601d60248201527f4d4c5f414c3a20746f6f20736d616c6c206f75747075742071756f74650000006044820152606401610a23565b8254604085015161341b9082906139bb565b84556040850151855160018601546134379284929091876140d2565b846001018190555061345881866040015187602001518760020154866140d2565b6002850155855160c087015161346f91899161411b565b61347d878760a00151613668565b6134c05760405162461bcd60e51b81526020600482015260146024820152734d4c5f414c3a206e6f7420656e6f75676820696d60601b6044820152606401610a23565b5050505092915050565b6134d2614f1b565b610907600260006134e66020860186614f77565b6001600160a01b03166001600160a01b03168152602001908152602001600020600260006135113390565b6001600160a01b03166001600160a01b03168152602001908152602001600020600201600360056040518061016001604052808860200160208101906135579190614f77565b6001600160a01b0316815260200161357560608a0160408b0161518f565b1515815260200161358c60808a0160608b0161518f565b151581526080808a0135602083015260a0808b0135604084015260065462ffffff600160201b820481166060860152610100820481169385019390935260ff811691840191909152600160381b90041660c082015260e0016135eb3390565b6001600160a01b031661360160208b018b614f77565b6001600160a01b03161481526040805180820190915260075462ffffff811682526301000000900461ffff166020808301919091529091015261430e565b60008082121561365f5761365a61365583614584565b6145e2565b610907565b610907826145e2565b600080613674846121c8565b905060006136818561293f565b9050613690612b508286613aa1565b60028601546136a0908490614634565b12158061197357506119738561464a565b60006001600160ff1b0382111561371b5760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b6064820152608401610a23565b5090565b6000610b0d828461541d565b6000806000851261373c5784613745565b61374585614584565b90506000808512613756578461375f565b61375f85614584565b9050600080871280156137725750600086135b8061378857506000871380156137885750600086125b613793576000613796565b60015b905060006137a58484886139d3565b9050816137ba576137b5816136b1565b6137c3565b6137c3816147a4565b98975050505050505050565b60405163e8fa204f60e01b81528415156004820152831515602482015281151560448201526000906001600160a01b0387169063e8fa204f90606401602060405180830381865afa158015613828573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061384c9190615260565b9050831561387d57841561385f57611973565b61387661386f620f4240856147b8565b829061481e565b9050611973565b841561197357613876613893620f4240856147b8565b8290613aa1565b6000806138b46138ac8460ff166136b1565b60129061394c565b905060006138c18261363f565b9050604d8111156139145760405162461bcd60e51b815260206004820152601f60248201527f564c5f5443413a20746f6f206c6172676520646563696d616c732064696666006044820152606401610a23565b60008212156139375761393261392b82600a615542565b8690614833565b611973565b61197361394582600a615542565b869061483f565b6000610b0d828461554e565b6040516001600160a01b0383166024820152604481018290526126f090849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261484b565b6000610b0d828461558d565b6000610b0d82846155a5565b600080806000198587098587029250828110838203039150508060001415613a0e57838281613a0457613a046155bc565b0492505050610b0d565b838110613a3857604051631dcf306360e21b81526004810182905260248101859052604401610a23565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6000610b0d838362ffffff16620f42406139d3565b6001600160a01b038516600090815260208790526040812085151580613adb57508415155b15613bee57613ae98561491d565b613af28761491d565b613afc91906155d2565b60001914613b455760405162461bcd60e51b8152602060048201526016602482015275151317d05515108e881a5b9d985b1a59081a5b9c1d5d60521b6044820152606401610a23565b613b4e8661491d565b8154613b599061491d565b613b6391906155d2565b6000191415613bee576000613b778761363f565b90506000613b88836000015461363f565b9050808211613bbf576000613bab613b9f846136b1565b6001860154908461372b565b9050613bb7888261371f565b945050613beb565b6000613bd5613bcd836136b1565b89908561372b565b6001850154909150613be7908261371f565b9450505b50505b613bf8828561371f565b8154909250600090613c0a908861371f565b90506000613c3384613c2d8861234c8b886001015461371f90919063ffffffff16565b9061394c565b905081158015613c41575080155b80613c685750613c508161491d565b613c598361491d565b613c6391906155d2565b600019145b613cab5760405162461bcd60e51b81526020600482015260146024820152732a262fa0aa2a211d103732bb32b91037b1b1bab960611b6044820152606401610a23565b8183556001830181905560028a0154613cc4908561371f565b60028b0155613cd48a8a8761411b565b5050509695505050505050565b6040516370a0823160e01b81526000906001600160a01b038516906370a0823190613d10903090600401615058565b602060405180830381865afa158015613d2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d519190615260565b9050613d5f84843085614945565b81613dd782866001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401613d909190615058565b602060405180830381865afa158015613dad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dd19190615260565b906139c7565b146126d35760405162461bcd60e51b815260206004820152601c60248201527f564c5f5454493a20696e636f6e73697374656e742062616c616e6365000000006044820152606401610a23565b6000808515613f4c578615613ec45760405162de853760e31b81526001600160a01b038916906306f429b890613e64908a908a908a9089906004016153d0565b602060405180830381865afa158015613e81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ea59190615260565b9150613eb18285613aa1565b9050613ebd82826139c7565b9150614021565b613ece8585613aa1565b90506001600160a01b0388166306f429b88888613eeb89866139c7565b876040518563ffffffff1660e01b8152600401613f0b94939291906153d0565b602060405180830381865afa158015613f28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ebd9190615260565b8615613f8a57613f6d85613dd1613f66620f4240886147b8565b889061481e565b90506001600160a01b0388166306f429b88888613eeb89866139bb565b60405162de853760e31b81526000906001600160a01b038a16906306f429b890613fbe908b908b908b908a906004016153d0565b602060405180830381865afa158015613fdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fff9190615260565b905061401161386f620f4240876147b8565b925061401d83826139c7565b9150505b965096945050505050565b821561408257808210156126f05760405162461bcd60e51b815260206004820181905260248201527f544c5f56533a20746f6f20736d616c6c206f70706f7369746520616d6f756e746044820152606401610a23565b808211156126f05760405162461bcd60e51b815260206004820181905260248201527f544c5f56533a20746f6f206c61726765206f70706f7369746520616d6f756e746044820152606401610a23565b6000806140df87876139bb565b90506140fa6140f386600160601b896139d3565b84906139bb565b925061252561410a8488846139d3565b614115868a856139d3565b906139bb565b6001600160a01b03821660009081526020849052604081205415158061415a57506001600160a01b038316600090815260018501602052604090205415155b6003850180549192509060005b8181101561427157856001600160a01b031683828154811061418b5761418b6152f4565b6000918252602090912001546001600160a01b03161415614261578361425857826141b76001846155a5565b815481106141c7576141c76152f4565b9060005260206000200160009054906101000a90046001600160a01b03168382815481106141f7576141f76152f4565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508280548061423557614235615657565b600082815260209020810160001990810180546001600160a01b03191690550190555b50505050505050565b61426a81615344565b9050614167565b508261427f57505050505050565b60ff841661428e82600161558d565b11156142d65760405162461bcd60e51b8152602060048201526017602482015276414c5f55503a20746f6f206d616e79206d61726b65747360481b6044820152606401610a23565b508054600181018255600091825260209091200180546001600160a01b0319166001600160a01b039490941693909317909255505050565b614316614f1b565b614324868360a00151612b28565b1560e0820152610120820151614378578060e001516143785760405162461bcd60e51b815260206004820152601060248201526f544c5f4f503a20656e6f756768206d6d60801b6044820152606401610a23565b8060e00151156143eb5781516001600160a01b03166000908152600187016020526040902054156143eb5760405162461bcd60e51b815260206004820181905260248201527f544c5f4f503a206e6f206d616b6572207768656e206c69717569646174696f6e6044820152606401610a23565b600086600001600084600001516001600160a01b03166001600160a01b031681526020019081526020016000206000015490506144518785856000015186602001518760400151886060015189608001518a60e001518b61010001518b60e0015161497d565b60608601526040850152602084015280835260009081906144719061491d565b84516144879061448290869061371f565b61491d565b61449191906155d2565b1390508260e00151156145225780156144ec5760405162461bcd60e51b815260206004820152601f60248201527f544c5f4f503a206e6f206f70656e207768656e206c69717569646174696f6e006044820152606401610a23565b6145128860020188888760a0015188610140015161450d896020015161363f565b614a5d565b60c086015260a085015260808401525b801561457957614536888560c00151613668565b6145795760405162461bcd60e51b8152602060048201526014602482015273544c5f4f503a206e6f7420656e6f75676820696d60601b6044820152606401610a23565b505095945050505050565b6000600160ff1b82136145d95760405162461bcd60e51b815260206004820152601c60248201527f506572704d6174683a20696e76657273696f6e206f766572666c6f77000000006044820152606401610a23565b610907826153b3565b60008082121561371b5760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f7369746976656044820152606401610a23565b60008183126146435781610b0d565b5090919050565b600281015460038201805460009290835b81811015614797576000848281548110614677576146776152f4565b60009182526020808320909101546001600160a01b031680835260018a810183526040808520938c905290932080549301549093509091906146ba90879061371f565b82549096501561476b5781546001830154600284015460405163933c797960e01b815260048101939093526024830191909152604482015260009081906001600160a01b0386169063933c7979906064016040805180830381865afa158015614727573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061474b919061530a565b909250905061475a838361371f565b9250614766888261371f565b975050505b60008112156147835750600098975050505050505050565b5050508061479090615344565b905061465b565b5050600013159392505050565b60006147af826136b1565b610907906153b3565b60008262ffffff168262ffffff1611156148145760405162461bcd60e51b815260206004820152601e60248201527f506572704d6174683a207375627472616374696f6e206f766572666c6f7700006044820152606401610a23565b610b0d828461566d565b6000610b0d83620f42408462ffffff166139d3565b6000610b0d8284615691565b6000610b0d82846156b3565b60006148a0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614afa9092919063ffffffff16565b8051909150156126f057808060200190518101906148be91906156d2565b6126f05760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610a23565b600080821361493d5760008212614935576000610907565b600019610907565b600192915050565b6040516001600160a01b03808516602483015283166044820152606481018290526126d39085906323b872dd60e01b90608401613984565b60008080808062ffffff8716156149a65761499d8e8e8e8e8e8c8c614b09565b92509050614a1e565b6040516380796d5560e01b81526001600160a01b038e16906380796d55906149d8908f908f908f908c906004016153d0565b6020604051808303816000875af11580156149f7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a1b9190615260565b90505b614a298b828b61402c565b614a358c8c8c84614d20565b9095509350614a498f8e878760008d613ab6565b9250509a509a509a509a9650505050505050565b60008080614a6b8487613aa1565b8551909350614a7b908490613aa1565b9150614a8783836139c7565b9050614aa0876001015483876020015161ffff16614d8f565b60018901919091559150614abe614ab6846136b1565b8a549061394c565b8955614ad4614acc836136b1565b89549061371f565b8855614aea614ae2826136b1565b88549061371f565b9096559097909650939450505050565b60606109f88484600085614dc3565b6000808515614c36578615614bac576040516380796d5560e01b81526001600160a01b038916906380796d5590614b4a908a908a908a9089906004016153d0565b6020604051808303816000875af1158015614b69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b8d9190615260565b9150614b998285613aa1565b9050614ba582826139c7565b9150614d07565b614bb68585613aa1565b90506001600160a01b0388166380796d558888614bd389866139c7565b876040518563ffffffff1660e01b8152600401614bf394939291906153d0565b6020604051808303816000875af1158015614c12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614ba59190615260565b8615614c6d57614c5085613dd1613f66620f4240886147b8565b90506001600160a01b0388166380796d558888614bd389866139bb565b6040516380796d5560e01b81526000906001600160a01b038a16906380796d5590614ca2908b908b908b908a906004016153d0565b6020604051808303816000875af1158015614cc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614ce59190615260565b9050614cf761386f620f4240876147b8565b9250614d0383826139c7565b9150505b8854614d1390826139bb565b9098559795505050505050565b6000808415614d5c578515614d4a57614d38846147a4565b614d41846136b1565b91509150614d86565b614d53836136b1565b614d41856147a4565b8515614d7457614d6b836147a4565b614d41856136b1565b614d7d846136b1565b614d41846147a4565b94509492505050565b600080614d9c85856139bb565b9450614dad8562ffffff8516614833565b9050614db985826139c7565b9150935093915050565b606082471015614e245760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610a23565b614e2d856121b9565b614e795760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a23565b600080866001600160a01b03168587604051614e95919061571b565b60006040518083038185875af1925050503d8060008114614ed2576040519150601f19603f3d011682016040523d82523d6000602084013e614ed7565b606091505b509150915061252582828660608315614ef1575081610b0d565b825115614f015782518084602001fd5b8160405162461bcd60e51b8152600401610a239190615737565b604051806101000160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b6001600160a01b03811681146121b657600080fd5b600060208284031215614f8957600080fd5b8135610b0d81614f62565b600060a08284031215614fa657600080fd5b50919050565b600060208284031215614fbe57600080fd5b5035919050565b60008060408385031215614fd857600080fd5b8235614fe381614f62565b91506020830135614ff381614f62565b809150509250929050565b62ffffff811681146121b657600080fd5b60006020828403121561502157600080fd5b8135610b0d81614ffe565b60ff811681146121b657600080fd5b60006020828403121561504d57600080fd5b8135610b0d8161502c565b6001600160a01b0391909116815260200190565b80151581146121b657600080fd5b6000806040838503121561508d57600080fd5b823561509881614f62565b91506020830135614ff38161506c565b600060c08284031215614fa657600080fd5b600060c082840312156150cc57600080fd5b610b0d83836150a8565b600060408284031215614fa657600080fd5b600060e08284031215614fa657600080fd5b600060e0828403121561510c57600080fd5b610b0d83836150e8565b6020808252825182820181905260009190848201906040850190845b818110156151575783516001600160a01b031683529284019291840191600101615132565b50909695505050505050565b6000806040838503121561517657600080fd5b823561518181614f62565b946020939093013593505050565b6000602082840312156151a157600080fd5b8135610b0d8161506c565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000602082840312156151f557600080fd5b8151610b0d81614f62565b6020808252600f908201526e50455f43443a20746f6f206c61746560881b604082015260600190565b6020808252601a908201527f50455f434d413a206d61726b6574206e6f7420616c6c6f776564000000000000604082015260600190565b60006020828403121561527257600080fd5b5051919050565b61ffff811681146121b657600080fd5b60006020828403121561529b57600080fd5b8135610b0d81615279565b81356152b181614ffe565b62ffffff8116905081548162ffffff19821617835560208401356152d481615279565b64ffff0000008160181b168364ffffffffff198416171784555050505050565b634e487b7160e01b600052603260045260246000fd5b6000806040838503121561531d57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601160045260246000fd5b60006000198214156153585761535861532e565b5060010190565b60006020828403121561537157600080fd5b8151610b0d8161502c565b6020808252601c908201527f4d4c5f524c3a20746f6f20736d616c6c206f7574707574206261736500000000604082015260600190565b6000600160ff1b8214156153c9576153c961532e565b5060000390565b9315158452911515602084015260408301521515606082015260800190565b60008060006060848603121561540457600080fd5b8351925060208401519150604084015190509250925092565b600080821280156001600160ff1b038490038513161561543f5761543f61532e565b600160ff1b83900384128116156154585761545861532e565b50500190565b600181815b8085111561549957816000190482111561547f5761547f61532e565b8085161561548c57918102915b93841c9390800290615463565b509250929050565b6000826154b057506001610907565b816154bd57506000610907565b81600181146154d357600281146154dd576154f9565b6001915050610907565b60ff8411156154ee576154ee61532e565b50506001821b610907565b5060208310610133831016604e8410600b841016171561551c575081810a610907565b615526838361545e565b806000190482111561553a5761553a61532e565b029392505050565b6000610b0d83836154a1565b60008083128015600160ff1b85018412161561556c5761556c61532e565b6001600160ff1b03840183138116156155875761558761532e565b50500390565b600082198211156155a0576155a061532e565b500190565b6000828210156155b7576155b761532e565b500390565b634e487b7160e01b600052601260045260246000fd5b60006001600160ff1b03818413828413808216868404861116156155f8576155f861532e565b600160ff1b60008712828116878305891216156156175761561761532e565b600087129250878205871284841616156156335761563361532e565b878505871281841616156156495761564961532e565b505050929093029392505050565b634e487b7160e01b600052603160045260246000fd5b600062ffffff838116908316818110156156895761568961532e565b039392505050565b6000826156ae57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156156cd576156cd61532e565b500290565b6000602082840312156156e457600080fd5b8151610b0d8161506c565b60005b8381101561570a5781810151838201526020016156f2565b838111156126d35750506000910152565b6000825161572d8184602087016156ef565b9190910192915050565b60208152600082518060208401526157568160408501602087016156ef565b601f01601f1916919091016040019291505056fea26469706673582212201037857eb06592f586103f22398be58e02289c3f13bc408f90692839c026f64564736f6c634300080c0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "PRBMath__MulDivOverflow(uint256,uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 925,
        "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 550,
        "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6147,
        "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
        "label": "accountInfos",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(AccountInfo)11158_storage)"
      },
      {
        "astId": 6151,
        "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
        "label": "insuranceFundInfo",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(InsuranceFundInfo)11163_storage"
      },
      {
        "astId": 6155,
        "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
        "label": "protocolInfo",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(ProtocolInfo)11166_storage"
      },
      {
        "astId": 6166,
        "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
        "label": "maxMarketsPerAccount",
        "offset": 0,
        "slot": "6",
        "type": "t_uint8"
      },
      {
        "astId": 6170,
        "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
        "label": "imRatio",
        "offset": 1,
        "slot": "6",
        "type": "t_uint24"
      },
      {
        "astId": 6174,
        "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
        "label": "mmRatio",
        "offset": 4,
        "slot": "6",
        "type": "t_uint24"
      },
      {
        "astId": 6178,
        "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
        "label": "protocolFeeRatio",
        "offset": 7,
        "slot": "6",
        "type": "t_uint24"
      },
      {
        "astId": 6187,
        "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
        "label": "liquidationRewardConfig",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(LiquidationRewardConfig)11171_storage"
      },
      {
        "astId": 6192,
        "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
        "label": "isMarketAllowed",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(AccountInfo)11158_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PerpdexStructs.AccountInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(AccountInfo)11158_storage"
      },
      "t_mapping(t_address,t_struct(MakerInfo)11138_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PerpdexStructs.MakerInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(MakerInfo)11138_storage"
      },
      "t_mapping(t_address,t_struct(TakerInfo)11131_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PerpdexStructs.TakerInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TakerInfo)11131_storage"
      },
      "t_struct(AccountInfo)11158_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.AccountInfo",
        "members": [
          {
            "astId": 11146,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "takerInfos",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_struct(TakerInfo)11131_storage)"
          },
          {
            "astId": 11151,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "makerInfos",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_struct(MakerInfo)11138_storage)"
          },
          {
            "astId": 11154,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "vaultInfo",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(VaultInfo)11141_storage"
          },
          {
            "astId": 11157,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "markets",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(InsuranceFundInfo)11163_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.InsuranceFundInfo",
        "members": [
          {
            "astId": 11160,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 11162,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "liquidationRewardBalance",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(LiquidationRewardConfig)11171_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.LiquidationRewardConfig",
        "members": [
          {
            "astId": 11168,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "rewardRatio",
            "offset": 0,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 11170,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "smoothEmaTime",
            "offset": 3,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(MakerInfo)11138_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.MakerInfo",
        "members": [
          {
            "astId": 11133,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "liquidity",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11135,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "cumBaseSharePerLiquidityX96",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11137,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "cumQuotePerLiquidityX96",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ProtocolInfo)11166_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.ProtocolInfo",
        "members": [
          {
            "astId": 11165,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "protocolFee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TakerInfo)11131_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.TakerInfo",
        "members": [
          {
            "astId": 11128,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "baseBalanceShare",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 11130,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "quoteBalance",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(VaultInfo)11141_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.VaultInfo",
        "members": [
          {
            "astId": 11140,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "collateralBalance",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}