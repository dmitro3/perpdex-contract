{
  "address": "0xCA541aF2cC2a999d61f2F79D8A61f22eAfB97CBA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbolArg",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "exchangeArg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceFeedArg",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "baseShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteBalance",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "balanceToShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchange",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balancePerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "prevIndexPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "prevIndexPriceTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingMaxElapsedSec",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingMaxPremiumRatio",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingRolloverSec",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "getLiquidityValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarkPriceX96",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolFeeRatio",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalLiquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "value",
          "type": "uint32"
        }
      ],
      "name": "setFundingMaxElapsedSec",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "setFundingMaxPremiumRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "value",
          "type": "uint32"
        }
      ],
      "name": "setFundingRolloverSec",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "setPoolFeeRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "shareToBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isBaseToQuote",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isExactInput",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfde2c9939561215d692095b95e64c705b6412a6e227d01b475c838a3d201e320",
  "receipt": {
    "to": null,
    "from": "0x4B78eCe4AA1be3495713199380635537C5fB2326",
    "contractAddress": "0xCA541aF2cC2a999d61f2F79D8A61f22eAfB97CBA",
    "transactionIndex": 24,
    "gasUsed": "1300905",
    "logsBloom": "0x
    "blockHash": "0xe28d83b5079ac7517e4b3309af16993a0f01e3612419da712ba2fc2b8f47feaa",
    "transactionHash": "0xfde2c9939561215d692095b95e64c705b6412a6e227d01b475c838a3d201e320",
    "logs": [],
    "blockNumber": 10756497,
    "cumulativeGasUsed": "4138029",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "USD",
    "0xE17a0424AD921ef4c3F1FbD445Eb3903Ec2EAC40",
    "0x8F9aC0A22e5aC2A6dda0C1d4Ce17B5c079D094F0"
  ],
  "numDeployments": 2,
  "solcInputHash": "6da403cefb707c9867f8d2226be5c288",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbolArg\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"exchangeArg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceFeedArg\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteBalance\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"balanceToShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balancePerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevIndexPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevIndexPriceTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingMaxElapsedSec\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingMaxPremiumRatio\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingRolloverSec\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"getLiquidityValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarkPriceX96\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFeeRatio\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLiquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"value\",\"type\":\"uint32\"}],\"name\":\"setFundingMaxElapsedSec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"setFundingMaxPremiumRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"value\",\"type\":\"uint32\"}],\"name\":\"setFundingRolloverSec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"setPoolFeeRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"shareToBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isBaseToQuote\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isExactInput\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PerpdexMarket.sol\":\"PerpdexMarket\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x0dd1e9b19801e3e7d900fbf4182d81e1afd23ad7be39504e33df6bbcba91d724\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMathUpgradeable {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xe391db37b722a67addfa9fce3101edf44ba68e2e12ae6fd74d68677b04ffd5a8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xd17ac7e1d8f83d20d80e652adfed83da122f3a3c7b69fefa2985d85aebf0a3e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-4.0\\npragma solidity >=0.4.0;\\n\\n// taken from https://medium.com/coinmonks/math-in-solidity-part-3-percents-and-proportions-4db014e080b1\\n// license is CC-BY-4.0\\nlibrary FullMath {\\n    function fullMul(uint256 x, uint256 y) internal pure returns (uint256 l, uint256 h) {\\n        uint256 mm = mulmod(x, y, uint256(-1));\\n        l = x * y;\\n        h = mm - l;\\n        if (mm < l) h -= 1;\\n    }\\n\\n    function fullDiv(\\n        uint256 l,\\n        uint256 h,\\n        uint256 d\\n    ) private pure returns (uint256) {\\n        uint256 pow2 = d & -d;\\n        d /= pow2;\\n        l /= pow2;\\n        l += h * ((-pow2) / pow2 + 1);\\n        uint256 r = 1;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        return l * r;\\n    }\\n\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 d\\n    ) internal pure returns (uint256) {\\n        (uint256 l, uint256 h) = fullMul(x, y);\\n\\n        uint256 mm = mulmod(x, y, d);\\n        if (mm > l) h -= 1;\\n        l -= mm;\\n\\n        if (h == 0) return l / d;\\n\\n        require(h < d, 'FullMath: FULLDIV_OVERFLOW');\\n        return fullDiv(l, h, d);\\n    }\\n}\\n\",\"keccak256\":\"0xc4ffcf28169f73fc9fdd1f82345d6d4fcccf3fd5aea83c133437c25e4e0950a9\",\"license\":\"CC-BY-4.0\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe511530871deaef86692cea9adb6076d26d7b47fd4815ce51af52af981026057\",\"license\":\"MIT\"},\"contracts/PerpdexMarket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { IPerpdexMarket } from \\\"./interface/IPerpdexMarket.sol\\\";\\nimport { MarketStructs } from \\\"./lib/MarketStructs.sol\\\";\\nimport { FundingLibrary } from \\\"./lib/FundingLibrary.sol\\\";\\nimport { PoolLibrary } from \\\"./lib/PoolLibrary.sol\\\";\\n\\ncontract PerpdexMarket is IPerpdexMarket {\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    string public override symbol;\\n    address public immutable override exchange;\\n    address public immutable priceFeed;\\n\\n    MarketStructs.PoolInfo public poolInfo;\\n    MarketStructs.FundingInfo public fundingInfo;\\n\\n    uint24 public poolFeeRatio;\\n    uint24 public fundingMaxPremiumRatio;\\n    uint32 public fundingMaxElapsedSec;\\n    uint32 public fundingRolloverSec;\\n\\n    modifier onlyExchange() {\\n        // BT_CNCH: caller not Exchange\\n        require(exchange == msg.sender, \\\"BT_CNE\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        string memory symbolArg,\\n        address exchangeArg,\\n        address priceFeedArg\\n    ) {\\n        // BT_EANC: exchangeArg address is not contract\\n        require(exchangeArg.isContract(), \\\"BT_EANC\\\");\\n\\n        // BT_SANC: Price feed address is not contract\\n        require(priceFeedArg.isContract(), \\\"BT_PANC\\\");\\n\\n        symbol = symbolArg;\\n        exchange = exchangeArg;\\n        priceFeed = priceFeedArg;\\n\\n        FundingLibrary.initializeFunding(fundingInfo);\\n\\n        poolFeeRatio = 3e3;\\n        fundingMaxPremiumRatio = 1e4;\\n        fundingMaxElapsedSec = 1 days;\\n        fundingRolloverSec = 1 days;\\n    }\\n\\n    function swap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount\\n    ) external override onlyExchange returns (uint256) {\\n        _rebase();\\n        return\\n            PoolLibrary.swap(\\n                poolInfo,\\n                PoolLibrary.SwapParams({\\n                    isBaseToQuote: isBaseToQuote,\\n                    isExactInput: isExactInput,\\n                    amount: amount,\\n                    feeRatio: poolFeeRatio\\n                })\\n            );\\n    }\\n\\n    function addLiquidity(uint256 baseShare, uint256 quoteBalance)\\n        external\\n        override\\n        onlyExchange\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        _rebase();\\n        return\\n            PoolLibrary.addLiquidity(\\n                poolInfo,\\n                PoolLibrary.AddLiquidityParams({ base: baseShare, quote: quoteBalance })\\n            );\\n    }\\n\\n    function removeLiquidity(uint256 liquidity) external override onlyExchange returns (uint256, uint256) {\\n        _rebase();\\n        return PoolLibrary.removeLiquidity(poolInfo, PoolLibrary.RemoveLiquidityParams({ liquidity: liquidity }));\\n    }\\n\\n    function setPoolFeeRatio(uint24 value) external {\\n        require(value < 1e6);\\n        poolFeeRatio = value;\\n    }\\n\\n    function setFundingMaxPremiumRatio(uint24 value) external {\\n        require(value < 1e6);\\n        fundingMaxPremiumRatio = value;\\n    }\\n\\n    function setFundingMaxElapsedSec(uint32 value) external {\\n        require(value <= 7 days);\\n        fundingMaxElapsedSec = value;\\n    }\\n\\n    function setFundingRolloverSec(uint32 value) external {\\n        require(value <= 7 days);\\n        fundingRolloverSec = value;\\n    }\\n\\n    function getMarkPriceX96() public view override returns (uint256) {\\n        return PoolLibrary.getMarkPriceX96(poolInfo).div(fundingInfo.balancePerShare);\\n    }\\n\\n    function getLiquidityValue(uint256 liquidity) external view override returns (uint256, uint256) {\\n        return PoolLibrary.getLiquidityValue(poolInfo, liquidity);\\n    }\\n\\n    function shareToBalance(uint256 share) external view override returns (uint256) {\\n        return share.mul(fundingInfo.balancePerShare);\\n    }\\n\\n    function balanceToShare(uint256 balance) external view override returns (uint256) {\\n        return balance.div(fundingInfo.balancePerShare);\\n    }\\n\\n    function _rebase() private {\\n        uint256 markPriceX96 = getMarkPriceX96();\\n\\n        FundingLibrary.rebase(\\n            fundingInfo,\\n            FundingLibrary.RebaseParams({\\n                priceFeed: priceFeed,\\n                markPriceX96: markPriceX96,\\n                maxPremiumRatio: fundingMaxPremiumRatio,\\n                maxElapsedSec: fundingMaxElapsedSec,\\n                rolloverSec: fundingRolloverSec\\n            })\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x63decbfbe4b7cd7870c7b8c3fa682898ea77a08f8ba37f442c6dc02b08a7d967\",\"license\":\"GPL-3.0-or-later\"},\"contracts/amm/uniswap_v2/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe77f3770b9e458f6fd64a82af61d05614d85940acc24cfe448295a74742eed21\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IPerpdexMarket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { PerpdexStructs } from \\\"../lib/PerpdexStructs.sol\\\";\\n\\ninterface IPerpdexMarket {\\n    function swap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount\\n    ) external returns (uint256);\\n\\n    function addLiquidity(uint256 baseShare, uint256 quoteBalance)\\n        external\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function removeLiquidity(uint256 liquidity) external returns (uint256 baseShare, uint256 quoteBalance);\\n\\n    // getters\\n\\n    function symbol() external view returns (string memory);\\n\\n    function exchange() external view returns (address);\\n\\n    function getMarkPriceX96() external view returns (uint256);\\n\\n    function getLiquidityValue(uint256 liquidity) external view returns (uint256 baseShare, uint256 quoteBalance);\\n\\n    function shareToBalance(uint256 baseShare) external view returns (uint256);\\n\\n    function balanceToShare(uint256 baseBalance) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x850da92ae991a1d77805cad4919e5bbb52065795d32e37ff2e83fdeffbc49ff6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IPerpdexPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\ninterface IPerpdexPriceFeed {\\n    function decimals() external view returns (uint8);\\n\\n    /// @dev Returns the index price of the token.\\n    function getPrice() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6289c246a3791213f4bd4cf2a16c8fb6876c403dd627eabea39a092af3834a55\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/FundingLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { Math } from \\\"../amm/uniswap_v2/libraries/Math.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { PerpSafeCast } from \\\"./PerpSafeCast.sol\\\";\\nimport { MarketStructs } from \\\"./MarketStructs.sol\\\";\\nimport { IPerpdexPriceFeed } from \\\"../interface/IPerpdexPriceFeed.sol\\\";\\nimport { FullMath } from \\\"@uniswap/lib/contracts/libraries/FullMath.sol\\\";\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\n\\nlibrary FundingLibrary {\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using PerpSafeCast for int256;\\n    using PerpSafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    struct RebaseParams {\\n        address priceFeed;\\n        uint256 markPriceX96;\\n        uint24 maxPremiumRatio;\\n        uint32 maxElapsedSec;\\n        uint32 rolloverSec;\\n    }\\n\\n    function initializeFunding(MarketStructs.FundingInfo storage fundingInfo) internal {\\n        fundingInfo.balancePerShare = 1 << 64;\\n        fundingInfo.prevIndexPriceTimestamp = block.timestamp;\\n    }\\n\\n    function rebase(MarketStructs.FundingInfo storage fundingInfo, RebaseParams memory params) internal {\\n        uint256 now = block.timestamp;\\n        uint256 elapsedSec = now.sub(fundingInfo.prevIndexPriceTimestamp);\\n        if (elapsedSec == 0) return;\\n\\n        // TODO: process decimals\\n        // TODO: process inverse\\n        uint256 indexPrice = IPerpdexPriceFeed(params.priceFeed).getPrice();\\n        if (fundingInfo.prevIndexPrice == indexPrice || indexPrice == 0) {\\n            return;\\n        }\\n\\n        elapsedSec = Math.min(elapsedSec, params.maxElapsedSec);\\n\\n        int256 premiumX96 =\\n            FullMath.mulDiv(params.markPriceX96, FixedPoint96.Q96, indexPrice).toInt256() - FixedPoint96.Q96.toInt256();\\n        int256 maxPremiumX96 = FixedPoint96.Q96.mulRatio(params.maxPremiumRatio).toInt256();\\n        premiumX96 = (-maxPremiumX96).max(maxPremiumX96.min(premiumX96));\\n        int256 fundingRateX96 = premiumX96.mulDiv(elapsedSec.toInt256(), params.rolloverSec);\\n\\n        fundingInfo.balancePerShare = FullMath.mulDiv(\\n            fundingInfo.balancePerShare,\\n            FixedPoint96.Q96,\\n            FixedPoint96.Q96.toInt256().sub(fundingRateX96).toUint256()\\n        );\\n        fundingInfo.prevIndexPrice = indexPrice;\\n        fundingInfo.prevIndexPriceTimestamp = now;\\n    }\\n}\\n\",\"keccak256\":\"0xdb3ff84fb46434d6fe0b088452f8bb6c6d665deb41f36dfc8a5428afaaf59cd7\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/MarketStructs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nlibrary MarketStructs {\\n    struct FundingInfo {\\n        uint256 balancePerShare;\\n        uint256 prevIndexPrice;\\n        uint256 prevIndexPriceTimestamp;\\n    }\\n\\n    struct PoolInfo {\\n        uint256 base;\\n        uint256 quote;\\n        uint256 totalLiquidity;\\n    }\\n}\\n\",\"keccak256\":\"0x212394ef3e5095196bc2be12bcd135a97a4d2d35d1a70ac3afb8d9a4ac41acb6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PerpMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { FullMath } from \\\"@uniswap/v3-core/contracts/libraries/FullMath.sol\\\";\\nimport { PerpSafeCast } from \\\"./PerpSafeCast.sol\\\";\\nimport { SafeMathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport { SignedSafeMathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol\\\";\\n\\nlibrary PerpMath {\\n    using PerpSafeCast for int256;\\n    using SignedSafeMathUpgradeable for int256;\\n    using SafeMathUpgradeable for uint256;\\n\\n    function formatSqrtPriceX96ToPriceX96(uint160 sqrtPriceX96) internal pure returns (uint256) {\\n        return FullMath.mulDiv(sqrtPriceX96, sqrtPriceX96, FixedPoint96.Q96);\\n    }\\n\\n    function formatX10_18ToX96(uint256 valueX10_18) internal pure returns (uint256) {\\n        return FullMath.mulDiv(valueX10_18, FixedPoint96.Q96, 1 ether);\\n    }\\n\\n    function formatX96ToX10_18(uint256 valueX96) internal pure returns (uint256) {\\n        return FullMath.mulDiv(valueX96, 1 ether, FixedPoint96.Q96);\\n    }\\n\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function abs(int256 value) internal pure returns (uint256) {\\n        return value >= 0 ? value.toUint256() : neg256(value).toUint256();\\n    }\\n\\n    function neg256(int256 a) internal pure returns (int256) {\\n        require(a > -2**255, \\\"PerpMath: inversion overflow\\\");\\n        return -a;\\n    }\\n\\n    function neg256(uint256 a) internal pure returns (int256) {\\n        return -PerpSafeCast.toInt256(a);\\n    }\\n\\n    function neg128(int128 a) internal pure returns (int128) {\\n        require(a > -2**127, \\\"PerpMath: inversion overflow\\\");\\n        return -a;\\n    }\\n\\n    function neg128(uint128 a) internal pure returns (int128) {\\n        return -PerpSafeCast.toInt128(a);\\n    }\\n\\n    function divBy10_18(int256 value) internal pure returns (int256) {\\n        // no overflow here\\n        return value / (1 ether);\\n    }\\n\\n    function divBy10_18(uint256 value) internal pure returns (uint256) {\\n        // no overflow here\\n        return value / (1 ether);\\n    }\\n\\n    function subRatio(uint24 a, uint24 b) internal pure returns (uint24) {\\n        require(b <= a, \\\"PerpMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    function mulRatio(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return FullMath.mulDiv(value, ratio, 1e6);\\n    }\\n\\n    function divRatio(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return FullMath.mulDiv(value, 1e6, ratio);\\n    }\\n\\n    /// @param denominator cannot be 0 and is checked in FullMath.mulDiv()\\n    function mulDiv(\\n        int256 a,\\n        int256 b,\\n        uint256 denominator\\n    ) internal pure returns (int256 result) {\\n        uint256 unsignedA = a < 0 ? uint256(neg256(a)) : uint256(a);\\n        uint256 unsignedB = b < 0 ? uint256(neg256(b)) : uint256(b);\\n        bool negative = ((a < 0 && b > 0) || (a > 0 && b < 0)) ? true : false;\\n\\n        uint256 unsignedResult = FullMath.mulDiv(unsignedA, unsignedB, denominator);\\n\\n        result = negative ? neg256(unsignedResult) : PerpSafeCast.toInt256(unsignedResult);\\n\\n        return result;\\n    }\\n\\n    function sign(int256 value) internal pure returns (int256) {\\n        return value > 0 ? 1 : (value < 0 ? -1 : int256(0));\\n    }\\n}\\n\",\"keccak256\":\"0xe4d7752bfc35e9b67fd81b7485a880f5e76c2744ff7f984204180ca5dea99d9f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PerpSafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev copy from \\\"@openzeppelin/contracts-upgradeable/utils/SafeCastUpgradeable.sol\\\"\\n * and rename to avoid naming conflict with uniswap\\n */\\nlibrary PerpSafeCast {\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128 returnValue) {\\n        require(((returnValue = uint128(value)) == value), \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64 returnValue) {\\n        require(((returnValue = uint64(value)) == value), \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32 returnValue) {\\n        require(((returnValue = uint32(value)) == value), \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16 returnValue) {\\n        require(((returnValue = uint16(value)) == value), \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8 returnValue) {\\n        require(((returnValue = uint8(value)) == value), \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 returnValue) {\\n        require(((returnValue = int128(value)) == value), \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 returnValue) {\\n        require(((returnValue = int64(value)) == value), \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 returnValue) {\\n        require(((returnValue = int32(value)) == value), \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 returnValue) {\\n        require(((returnValue = int16(value)) == value), \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 returnValue) {\\n        require(((returnValue = int8(value)) == value), \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from int256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0 and into 24 bit.\\n     */\\n    function toUint24(int256 value) internal pure returns (uint24 returnValue) {\\n        require(\\n            ((returnValue = uint24(value)) == value),\\n            \\\"SafeCast: value must be positive or value doesn't fit in an 24 bits\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 returnValue) {\\n        require(((returnValue = int24(value)) == value), \\\"SafeCast: value doesn't fit in an 24 bits\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x6aba2cd6fe208ea413e3e087540ab092c2f3e9455e317de485bd82a81769e381\",\"license\":\"MIT\"},\"contracts/lib/PerpdexStructs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nlibrary PerpdexStructs {\\n    struct TakerInfo {\\n        int256 baseBalanceShare;\\n        int256 quoteBalance;\\n    }\\n\\n    struct MakerInfo {\\n        uint256 baseDebtShare;\\n        uint256 quoteDebt;\\n        uint256 liquidity;\\n    }\\n\\n    struct VaultInfo {\\n        int256 collateralBalance;\\n    }\\n\\n    struct AccountInfo {\\n        // market\\n        mapping(address => TakerInfo) takerInfos;\\n        // market\\n        mapping(address => MakerInfo) makerInfos;\\n        VaultInfo vaultInfo;\\n        address[] markets;\\n    }\\n\\n    struct InsuranceFundInfo {\\n        int256 balance;\\n    }\\n\\n    struct PriceLimitInfo {\\n        uint256 referencePrice;\\n        uint256 referenceTimestamp;\\n    }\\n\\n    struct PriceLimitConfig {\\n        uint24 priceLimitNormalOrderRatio;\\n        uint24 priceLimitLiquidationRatio;\\n    }\\n}\\n\",\"keccak256\":\"0x585b91719421236ceca61cfc2dd33055f703bfe30e2b389e347cdb5ba067c102\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PoolLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { Math } from \\\"../amm/uniswap_v2/libraries/Math.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { PerpSafeCast } from \\\"./PerpSafeCast.sol\\\";\\nimport { MarketStructs } from \\\"./MarketStructs.sol\\\";\\nimport { FullMath } from \\\"@uniswap/lib/contracts/libraries/FullMath.sol\\\";\\n\\nlibrary PoolLibrary {\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using PerpSafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    uint256 public constant MINIMUM_LIQUIDITY = 1e3;\\n\\n    struct SwapParams {\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n        uint256 amount;\\n        uint24 feeRatio;\\n    }\\n\\n    struct AddLiquidityParams {\\n        uint256 base;\\n        uint256 quote;\\n    }\\n\\n    struct RemoveLiquidityParams {\\n        uint256 liquidity;\\n    }\\n\\n    function swap(MarketStructs.PoolInfo storage poolInfo, SwapParams memory params) internal returns (uint256) {\\n        uint256 output;\\n        uint256 base = poolInfo.base;\\n        uint256 quote = poolInfo.quote;\\n        uint256 invariant = base.mul(quote);\\n        uint24 onePlusFeeRatio = 1e6 + params.feeRatio;\\n\\n        if (params.isExactInput) {\\n            if (params.isBaseToQuote) {\\n                output = quote.sub(invariant.div(base + params.amount.divRatio(onePlusFeeRatio)));\\n            } else {\\n                output = base.sub(invariant.div(quote + params.amount.divRatio(onePlusFeeRatio)));\\n            }\\n        } else {\\n            if (params.isBaseToQuote) {\\n                output = invariant.div(quote - params.amount).sub(base);\\n            } else {\\n                output = invariant.div(base - params.amount).sub(quote);\\n            }\\n            output = output.mulRatio(onePlusFeeRatio);\\n        }\\n        require(output > 0);\\n\\n        return output;\\n    }\\n\\n    function addLiquidity(MarketStructs.PoolInfo storage poolInfo, AddLiquidityParams memory params)\\n        internal\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 poolTotalLiquidity = poolInfo.totalLiquidity;\\n\\n        if (poolTotalLiquidity == 0) {\\n            poolInfo.base = params.base;\\n            poolInfo.quote = params.quote;\\n            uint256 totalLiquidity = Math.sqrt(params.base.mul(params.quote));\\n            require(totalLiquidity > MINIMUM_LIQUIDITY);\\n            poolInfo.totalLiquidity = totalLiquidity;\\n            return (params.base, params.quote, totalLiquidity.sub(MINIMUM_LIQUIDITY));\\n        }\\n\\n        uint256 poolBase = poolInfo.base;\\n        uint256 poolQuote = poolInfo.quote;\\n\\n        uint256 base = Math.min(params.base, FullMath.mulDiv(params.quote, poolBase, poolQuote));\\n        uint256 quote = Math.min(params.quote, FullMath.mulDiv(params.base, poolQuote, poolBase));\\n        uint256 liquidity =\\n            Math.min(\\n                FullMath.mulDiv(base, poolTotalLiquidity, poolBase),\\n                FullMath.mulDiv(quote, poolTotalLiquidity, poolQuote)\\n            );\\n        require(base > 0 && quote > 0 && liquidity > 0);\\n\\n        poolInfo.base = poolBase.add(base);\\n        poolInfo.quote = poolQuote.add(quote);\\n        poolInfo.totalLiquidity = poolTotalLiquidity.add(liquidity);\\n\\n        return (base, quote, liquidity);\\n    }\\n\\n    function removeLiquidity(MarketStructs.PoolInfo storage poolInfo, RemoveLiquidityParams memory params)\\n        internal\\n        returns (uint256, uint256)\\n    {\\n        uint256 poolBase = poolInfo.base;\\n        uint256 poolQuote = poolInfo.quote;\\n        uint256 poolTotalLiquidity = poolInfo.totalLiquidity;\\n        uint256 base = FullMath.mulDiv(params.liquidity, poolBase, poolTotalLiquidity);\\n        uint256 quote = FullMath.mulDiv(params.liquidity, poolQuote, poolTotalLiquidity);\\n        require(base > 0 && quote > 0);\\n        poolInfo.base = poolBase.sub(base);\\n        poolInfo.quote = poolQuote.sub(quote);\\n        poolInfo.totalLiquidity = poolTotalLiquidity.sub(params.liquidity);\\n        return (base, quote);\\n    }\\n\\n    function getMarkPriceX96(MarketStructs.PoolInfo storage poolInfo) internal view returns (uint256) {\\n        return poolInfo.quote.div(poolInfo.base);\\n    }\\n\\n    function getLiquidityValue(MarketStructs.PoolInfo storage poolInfo, uint256 liquidity)\\n        internal\\n        view\\n        returns (uint256, uint256)\\n    {\\n        return (\\n            FullMath.mulDiv(liquidity, poolInfo.base, poolInfo.totalLiquidity),\\n            FullMath.mulDiv(liquidity, poolInfo.quote, poolInfo.totalLiquidity)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xc93c55fc4ac536e00104449dc070259b5d00f454810d746728aa85533d5bf96c\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620017fb380380620017fb833981810160405260608110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b50604090815260208281015192909101519193509091506200011c906001600160a01b03841690620008286200024e821b17901c565b62000158576040805162461bcd60e51b815260206004820152600760248201526642545f45414e4360c81b604482015290519081900360640190fd5b62000177816001600160a01b03166200024e60201b620008281760201c565b620001b3576040805162461bcd60e51b815260206004820152600760248201526642545f50414e4360c81b604482015290519081900360640190fd5b8251620001c890600090602086019062000269565b50606082811b6001600160601b03199081166080529082901b1660a052620001fd600462000254602090811b6200082e17901c565b505060078054610bb862ffffff199091161765ffffff00000019166427100000001763ffffffff60301b1916680151800000000000001763ffffffff60501b19166102a360571b1790555062000315565b3b151590565b68010000000000000000815542600290910155565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282620002a15760008555620002ec565b82601f10620002bc57805160ff1916838001178555620002ec565b82800160010185558215620002ec579182015b82811115620002ec578251825591602001919060010190620002cf565b50620002fa929150620002fe565b5090565b5b80821115620002fa5760008155600101620002ff565b60805160601c60a05160601c6114a8620003536000398061050652806108c55250806104585280610695528061072052806107fa52506114a86000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80637661ce13116100ad5780639c8f9f23116100715780639c8f9f23146103695780639cd441da146103865780639d67bf03146103a9578063d2f7265a146103cc578063dba49153146103d45761012c565b80637661ce131461029c578063796c20b7146102a457806381955105146102c757806388e27dfb146102e457806395d89b41146102ec5761012c565b8063630e375f116100f4578063630e375f146101eb578063741bef1a146102185780637452fadd1461023c57806374f25689146102445780637640482f146102665761012c565b806301e0df12146101315780631363bdd314610155578063186f181e146101845780633aa3e650146101a55780635a2f3d09146101c5575b600080fd5b6101536004803603602081101561014757600080fd5b503562ffffff166103dc565b005b6101726004803603602081101561016b57600080fd5b503561040a565b60408051918252519081900360200190f35b61018c610423565b6040805163ffffffff9092168252519081900360200190f35b6101ad610436565b6040805162ffffff9092168252519081900360200190f35b6101cd610448565b60408051938452602084019290925282820152519081900360600190f35b6101726004803603606081101561020157600080fd5b508035151590602081013515159060400135610454565b610220610504565b604080516001600160a01b039092168252519081900360200190f35b610172610528565b6101536004803603602081101561025a57600080fd5b503562ffffff16610548565b6102836004803603602081101561027c57600080fd5b5035610580565b6040805192835260208301919091528051918290030190f35b61018c610597565b610153600480360360208110156102ba57600080fd5b503563ffffffff166105aa565b610172600480360360208110156102dd57600080fd5b50356105e6565b6101ad6105f7565b6102f4610602565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561032e578181015183820152602001610316565b50505050905090810190601f16801561035b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102836004803603602081101561037f57600080fd5b5035610690565b6101cd6004803603604081101561039c57600080fd5b508035906020013561071a565b610153600480360360208110156103bf57600080fd5b503563ffffffff166107b9565b6102206107f8565b6101cd61081c565b620f42408162ffffff16106103f057600080fd5b6007805462ffffff191662ffffff92909216919091179055565b60045460009061041b90839061083e565b90505b919050565b600754600160501b900463ffffffff1681565b6007546301000000900462ffffff1681565b60015460025460035483565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146104bc576040805162461bcd60e51b815260206004820152600660248201526542545f434e4560d01b604482015290519081900360640190fd5b6104c46108a7565b604080516080810182528515158152841515602082015290810183905260075462ffffff1660608201526104fa90600190610939565b90505b9392505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061054360046000015461053d6001610a4f565b9061083e565b905090565b620f42408162ffffff161061055c57600080fd5b6007805462ffffff90921663010000000265ffffff00000019909216919091179055565b60008061058e600184610a63565b91509150915091565b600754600160301b900463ffffffff1681565b62093a808163ffffffff1611156105c057600080fd5b6007805463ffffffff909216600160501b0263ffffffff60501b19909216919091179055565b60045460009061041b908390610a97565b60075462ffffff1681565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106885780601f1061065d57610100808354040283529160200191610688565b820191906000526020600020905b81548152906001019060200180831161066b57829003601f168201915b505050505081565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146106f9576040805162461bcd60e51b815260206004820152600660248201526542545f434e4560d01b604482015290519081900360640190fd5b6107016108a7565b61058e6001604051806020016040528086815250610af0565b600080807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314610784576040805162461bcd60e51b815260206004820152600660248201526542545f434e4560d01b604482015290519081900360640190fd5b61078c6108a7565b6107ab6001604051806040016040528088815260200187815250610b7e565b9250925092505b9250925092565b62093a808163ffffffff1611156107cf57600080fd5b6007805463ffffffff909216600160301b0269ffffffff00000000000019909216919091179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b60045460055460065483565b3b151590565b600160401b815542600290910155565b6000808211610894576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161089d57fe5b0490505b92915050565b60006108b1610528565b6040805160a0810182526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001681526020810183905260075462ffffff63010000008204169282019290925263ffffffff600160301b830481166060830152600160501b909204909116608082015290915061093690600490610cac565b50565b815460018301546000918291826109508383610a97565b60608701516020880151919250620f42400190156109d8578651156109a35761099c61099561098c838a60400151610e5590919063ffffffff16565b8490870161083e565b8490610e6a565b94506109d3565b6109d06109c96109c0838a60400151610e5590919063ffffffff16565b8490860161083e565b8590610e6a565b94505b610a36565b865115610a0957610a02846109fc896040015186038561083e90919063ffffffff16565b90610e6a565b9450610a29565b610a26836109fc896040015187038561083e90919063ffffffff16565b94505b610a338582610ec7565b94505b60008511610a4357600080fd5b50929695505050505050565b8054600182015460009161041b919061083e565b600080610a798385600001548660020154610edc565b610a8c8486600101548760020154610edc565b915091509250929050565b600082610aa6575060006108a1565b82820282848281610ab357fe5b04146104fd5760405162461bcd60e51b81526004018080602001828103825260218152602001806114066021913960400191505060405180910390fd5b81546001830154600284015483516000938493909290918490610b14908584610edc565b90506000610b2788600001518585610edc565b9050600082118015610b395750600081115b610b4257600080fd5b610b4c8583610e6a565b8955610b588482610e6a565b60018a01558751610b6a908490610e6a565b60028a015590955093505050509250929050565b60028201546000908190819080610bed578451808755602086015160018801819055600091610bb691610bb19190610a97565b610f95565b90506103e88111610bc657600080fd5b6002870181905585516020870151610be0836103e8610e6a565b94509450945050506107b2565b8554600187015486516020880151600091610c1291610c0d908686610edc565b610fe6565b90506000610c2d8960200151610c0d8b600001518688610edc565b90506000610c4a610c3f848888610edc565b610c0d848988610edc565b9050600083118015610c5c5750600082115b8015610c685750600081115b610c7157600080fd5b610c7b8584610ffc565b8b55610c878483610ffc565b60018c0155610c968682610ffc565b60028c0155919750955093505050509250925092565b60028201544290600090610cc1908390610e6a565b905080610ccf575050610e51565b600083600001516001600160a01b03166398d5fdca6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d0e57600080fd5b505afa158015610d22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4691906113b6565b90508085600101541480610d58575080155b15610d6557505050610e51565b610d7982856060015163ffffffff16610fe6565b91506000610d8a600160601b611056565b610da5610da08760200151600160601b86610edc565b611056565b0390506000610dc8610da08760400151600160601b610ec790919063ffffffff16565b9050610de2610dd782846110a2565b6000839003906110b1565b91506000610e0d610df286611056565b886080015163ffffffff16856110c19092919063ffffffff16565b9050610e408860000154600160601b610e3b610e3685610e30600160601b611056565b90611165565b6111ca565b610edc565b885550505060018501555060028301555b5050565b60006104fd83620f42408462ffffff16611221565b600082821115610ec1576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60006104fd838362ffffff16620f4240611221565b6000806000610eeb86866112d0565b9150915060008480610ef957fe5b868809905082811115610f0d576001820391505b918290039181610f2b57848381610f2057fe5b0493505050506104fd565b848210610f7f576040805162461bcd60e51b815260206004820152601a60248201527f46756c6c4d6174683a2046554c4c4449565f4f564552464c4f57000000000000604482015290519081900360640190fd5b610f8a8383876112fd565b979650505050505050565b60006003821115610fd8575080600160028204015b81811015610fd257809150600281828581610fc157fe5b040181610fca57fe5b049050610faa565b5061041e565b811561041e57506001919050565b6000818310610ff557816104fd565b5090919050565b6000828201838110156104fd576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60006001600160ff1b0382111561109e5760405162461bcd60e51b81526004018080602001828103825260288152602001806114276028913960400191505060405180910390fd5b5090565b6000818312610ff557816104fd565b600081831215610ff557816104fd565b600080600085126110d257846110db565b6110db8561136d565b905060008085126110ec57846110f5565b6110f58561136d565b9050600080871280156111085750600086135b8061111e575060008713801561111e5750600086125b61112957600061112c565b60015b9050600061113b848488611221565b9050816111505761114b81611056565b611159565b611159816113a2565b98975050505050505050565b600081830381831280159061117a5750838113155b8061118f575060008312801561118f57508381135b6104fd5760405162461bcd60e51b815260040180806020018281038252602481526020018061144f6024913960400191505060405180910390fd5b60008082121561109e576040805162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f736974697665604482015290519081900360640190fd5b6000808060001985870986860292508281109083900303905080611257576000841161124c57600080fd5b5082900490506104fd565b80841161126357600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b60008080600019848609905083850292508281039150828110156112f5576001820391505b509250929050565b6000818103821680838161130d57fe5b04925080858161131957fe5b04945080816000038161132857fe5b60028581038087028203028087028203028087028203028087028203028087028203028087028203029586029003909402930460010193909302939093010292915050565b6000600160ff1b821361139b5760405162461bcd60e51b8152600401611392906113ce565b60405180910390fd5b5060000390565b60006113ad82611056565b60000392915050565b6000602082840312156113c7578081fd5b5051919050565b6020808252601c908201527f506572704d6174683a20696e76657273696f6e206f766572666c6f770000000060408201526060019056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7753616665436173743a2076616c756520646f65736e27742066697420696e20616e20696e743235365369676e6564536166654d6174683a207375627472616374696f6e206f766572666c6f77a26469706673582212209e86d1f6a839349a1dc0c45204261bfe6e6f0d6f8175b8ed0b1c965423c4380864736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c80637661ce13116100ad5780639c8f9f23116100715780639c8f9f23146103695780639cd441da146103865780639d67bf03146103a9578063d2f7265a146103cc578063dba49153146103d45761012c565b80637661ce131461029c578063796c20b7146102a457806381955105146102c757806388e27dfb146102e457806395d89b41146102ec5761012c565b8063630e375f116100f4578063630e375f146101eb578063741bef1a146102185780637452fadd1461023c57806374f25689146102445780637640482f146102665761012c565b806301e0df12146101315780631363bdd314610155578063186f181e146101845780633aa3e650146101a55780635a2f3d09146101c5575b600080fd5b6101536004803603602081101561014757600080fd5b503562ffffff166103dc565b005b6101726004803603602081101561016b57600080fd5b503561040a565b60408051918252519081900360200190f35b61018c610423565b6040805163ffffffff9092168252519081900360200190f35b6101ad610436565b6040805162ffffff9092168252519081900360200190f35b6101cd610448565b60408051938452602084019290925282820152519081900360600190f35b6101726004803603606081101561020157600080fd5b508035151590602081013515159060400135610454565b610220610504565b604080516001600160a01b039092168252519081900360200190f35b610172610528565b6101536004803603602081101561025a57600080fd5b503562ffffff16610548565b6102836004803603602081101561027c57600080fd5b5035610580565b6040805192835260208301919091528051918290030190f35b61018c610597565b610153600480360360208110156102ba57600080fd5b503563ffffffff166105aa565b610172600480360360208110156102dd57600080fd5b50356105e6565b6101ad6105f7565b6102f4610602565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561032e578181015183820152602001610316565b50505050905090810190601f16801561035b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102836004803603602081101561037f57600080fd5b5035610690565b6101cd6004803603604081101561039c57600080fd5b508035906020013561071a565b610153600480360360208110156103bf57600080fd5b503563ffffffff166107b9565b6102206107f8565b6101cd61081c565b620f42408162ffffff16106103f057600080fd5b6007805462ffffff191662ffffff92909216919091179055565b60045460009061041b90839061083e565b90505b919050565b600754600160501b900463ffffffff1681565b6007546301000000900462ffffff1681565b60015460025460035483565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146104bc576040805162461bcd60e51b815260206004820152600660248201526542545f434e4560d01b604482015290519081900360640190fd5b6104c46108a7565b604080516080810182528515158152841515602082015290810183905260075462ffffff1660608201526104fa90600190610939565b90505b9392505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061054360046000015461053d6001610a4f565b9061083e565b905090565b620f42408162ffffff161061055c57600080fd5b6007805462ffffff90921663010000000265ffffff00000019909216919091179055565b60008061058e600184610a63565b91509150915091565b600754600160301b900463ffffffff1681565b62093a808163ffffffff1611156105c057600080fd5b6007805463ffffffff909216600160501b0263ffffffff60501b19909216919091179055565b60045460009061041b908390610a97565b60075462ffffff1681565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106885780601f1061065d57610100808354040283529160200191610688565b820191906000526020600020905b81548152906001019060200180831161066b57829003601f168201915b505050505081565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146106f9576040805162461bcd60e51b815260206004820152600660248201526542545f434e4560d01b604482015290519081900360640190fd5b6107016108a7565b61058e6001604051806020016040528086815250610af0565b600080807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314610784576040805162461bcd60e51b815260206004820152600660248201526542545f434e4560d01b604482015290519081900360640190fd5b61078c6108a7565b6107ab6001604051806040016040528088815260200187815250610b7e565b9250925092505b9250925092565b62093a808163ffffffff1611156107cf57600080fd5b6007805463ffffffff909216600160301b0269ffffffff00000000000019909216919091179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b60045460055460065483565b3b151590565b600160401b815542600290910155565b6000808211610894576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161089d57fe5b0490505b92915050565b60006108b1610528565b6040805160a0810182526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001681526020810183905260075462ffffff63010000008204169282019290925263ffffffff600160301b830481166060830152600160501b909204909116608082015290915061093690600490610cac565b50565b815460018301546000918291826109508383610a97565b60608701516020880151919250620f42400190156109d8578651156109a35761099c61099561098c838a60400151610e5590919063ffffffff16565b8490870161083e565b8490610e6a565b94506109d3565b6109d06109c96109c0838a60400151610e5590919063ffffffff16565b8490860161083e565b8590610e6a565b94505b610a36565b865115610a0957610a02846109fc896040015186038561083e90919063ffffffff16565b90610e6a565b9450610a29565b610a26836109fc896040015187038561083e90919063ffffffff16565b94505b610a338582610ec7565b94505b60008511610a4357600080fd5b50929695505050505050565b8054600182015460009161041b919061083e565b600080610a798385600001548660020154610edc565b610a8c8486600101548760020154610edc565b915091509250929050565b600082610aa6575060006108a1565b82820282848281610ab357fe5b04146104fd5760405162461bcd60e51b81526004018080602001828103825260218152602001806114066021913960400191505060405180910390fd5b81546001830154600284015483516000938493909290918490610b14908584610edc565b90506000610b2788600001518585610edc565b9050600082118015610b395750600081115b610b4257600080fd5b610b4c8583610e6a565b8955610b588482610e6a565b60018a01558751610b6a908490610e6a565b60028a015590955093505050509250929050565b60028201546000908190819080610bed578451808755602086015160018801819055600091610bb691610bb19190610a97565b610f95565b90506103e88111610bc657600080fd5b6002870181905585516020870151610be0836103e8610e6a565b94509450945050506107b2565b8554600187015486516020880151600091610c1291610c0d908686610edc565b610fe6565b90506000610c2d8960200151610c0d8b600001518688610edc565b90506000610c4a610c3f848888610edc565b610c0d848988610edc565b9050600083118015610c5c5750600082115b8015610c685750600081115b610c7157600080fd5b610c7b8584610ffc565b8b55610c878483610ffc565b60018c0155610c968682610ffc565b60028c0155919750955093505050509250925092565b60028201544290600090610cc1908390610e6a565b905080610ccf575050610e51565b600083600001516001600160a01b03166398d5fdca6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d0e57600080fd5b505afa158015610d22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4691906113b6565b90508085600101541480610d58575080155b15610d6557505050610e51565b610d7982856060015163ffffffff16610fe6565b91506000610d8a600160601b611056565b610da5610da08760200151600160601b86610edc565b611056565b0390506000610dc8610da08760400151600160601b610ec790919063ffffffff16565b9050610de2610dd782846110a2565b6000839003906110b1565b91506000610e0d610df286611056565b886080015163ffffffff16856110c19092919063ffffffff16565b9050610e408860000154600160601b610e3b610e3685610e30600160601b611056565b90611165565b6111ca565b610edc565b885550505060018501555060028301555b5050565b60006104fd83620f42408462ffffff16611221565b600082821115610ec1576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60006104fd838362ffffff16620f4240611221565b6000806000610eeb86866112d0565b9150915060008480610ef957fe5b868809905082811115610f0d576001820391505b918290039181610f2b57848381610f2057fe5b0493505050506104fd565b848210610f7f576040805162461bcd60e51b815260206004820152601a60248201527f46756c6c4d6174683a2046554c4c4449565f4f564552464c4f57000000000000604482015290519081900360640190fd5b610f8a8383876112fd565b979650505050505050565b60006003821115610fd8575080600160028204015b81811015610fd257809150600281828581610fc157fe5b040181610fca57fe5b049050610faa565b5061041e565b811561041e57506001919050565b6000818310610ff557816104fd565b5090919050565b6000828201838110156104fd576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60006001600160ff1b0382111561109e5760405162461bcd60e51b81526004018080602001828103825260288152602001806114276028913960400191505060405180910390fd5b5090565b6000818312610ff557816104fd565b600081831215610ff557816104fd565b600080600085126110d257846110db565b6110db8561136d565b905060008085126110ec57846110f5565b6110f58561136d565b9050600080871280156111085750600086135b8061111e575060008713801561111e5750600086125b61112957600061112c565b60015b9050600061113b848488611221565b9050816111505761114b81611056565b611159565b611159816113a2565b98975050505050505050565b600081830381831280159061117a5750838113155b8061118f575060008312801561118f57508381135b6104fd5760405162461bcd60e51b815260040180806020018281038252602481526020018061144f6024913960400191505060405180910390fd5b60008082121561109e576040805162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f736974697665604482015290519081900360640190fd5b6000808060001985870986860292508281109083900303905080611257576000841161124c57600080fd5b5082900490506104fd565b80841161126357600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b60008080600019848609905083850292508281039150828110156112f5576001820391505b509250929050565b6000818103821680838161130d57fe5b04925080858161131957fe5b04945080816000038161132857fe5b60028581038087028203028087028203028087028203028087028203028087028203028087028203029586029003909402930460010193909302939093010292915050565b6000600160ff1b821361139b5760405162461bcd60e51b8152600401611392906113ce565b60405180910390fd5b5060000390565b60006113ad82611056565b60000392915050565b6000602082840312156113c7578081fd5b5051919050565b6020808252601c908201527f506572704d6174683a20696e76657273696f6e206f766572666c6f770000000060408201526060019056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7753616665436173743a2076616c756520646f65736e27742066697420696e20616e20696e743235365369676e6564536166654d6174683a207375627472616374696f6e206f766572666c6f77a26469706673582212209e86d1f6a839349a1dc0c45204261bfe6e6f0d6f8175b8ed0b1c965423c4380864736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 31685,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "symbol",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 31692,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "poolInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(PoolInfo)48857_storage"
      },
      {
        "astId": 31694,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "fundingInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(FundingInfo)48850_storage"
      },
      {
        "astId": 31696,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "poolFeeRatio",
        "offset": 0,
        "slot": "7",
        "type": "t_uint24"
      },
      {
        "astId": 31698,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "fundingMaxPremiumRatio",
        "offset": 3,
        "slot": "7",
        "type": "t_uint24"
      },
      {
        "astId": 31700,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "fundingMaxElapsedSec",
        "offset": 6,
        "slot": "7",
        "type": "t_uint32"
      },
      {
        "astId": 31702,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "fundingRolloverSec",
        "offset": 10,
        "slot": "7",
        "type": "t_uint32"
      }
    ],
    "types": {
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(FundingInfo)48850_storage": {
        "encoding": "inplace",
        "label": "struct MarketStructs.FundingInfo",
        "members": [
          {
            "astId": 48845,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "balancePerShare",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 48847,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "prevIndexPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 48849,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "prevIndexPriceTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PoolInfo)48857_storage": {
        "encoding": "inplace",
        "label": "struct MarketStructs.PoolInfo",
        "members": [
          {
            "astId": 48852,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "base",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 48854,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "quote",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 48856,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "totalLiquidity",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}