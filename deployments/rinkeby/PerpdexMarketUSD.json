{
  "address": "0x8Df4aC26b8174F531578474A3999194650e42D84",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbolArg",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "exchangeArg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceFeedBaseArg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceFeedQuoteArg",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "value",
          "type": "uint32"
        }
      ],
      "name": "FundingMaxElapsedSecChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "FundingMaxPremiumRatioChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "fundingRateX96",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "elapsedSec",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "premiumX96",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "markPriceX96",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cumBasePerLiquidityX96",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cumQuotePerLiquidityX96",
          "type": "uint256"
        }
      ],
      "name": "FundingPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "value",
          "type": "uint32"
        }
      ],
      "name": "FundingRolloverSecChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "LiquidityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "PoolFeeRatioChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "normalOrderRatio",
          "type": "uint24"
        },
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "liquidationRatio",
          "type": "uint24"
        },
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "emaNormalOrderRatio",
          "type": "uint24"
        },
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "emaLiquidationRatio",
          "type": "uint24"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "emaSec",
          "type": "uint32"
        }
      ],
      "name": "PriceLimitConfigChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isBaseToQuote",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isExactInput",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oppositeAmount",
          "type": "uint256"
        }
      ],
      "name": "Swapped",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "baseShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteBalance",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseBalancePerShareX96",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchange",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "prevIndexPriceBase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "prevIndexPriceQuote",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "prevIndexPriceTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingMaxElapsedSec",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingMaxPremiumRatio",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingRolloverSec",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCumDeleveragedPerLiquidityX96",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cumBasePerLiquidityX96",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cumQuotePerLiquidityX96",
          "type": "uint256"
        }
      ],
      "name": "getLiquidityDeleveraged",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "getLiquidityValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarkPriceX96",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getShareMarkPriceX96",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isBaseToQuote",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isExactInput",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isLiquidation",
          "type": "bool"
        }
      ],
      "name": "maxSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolFeeRatio",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cumBasePerLiquidityX96",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cumQuotePerLiquidityX96",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseBalancePerShareX96",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isBaseToQuote",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isExactInput",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLiquidation",
          "type": "bool"
        }
      ],
      "name": "previewSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "oppositeAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeedBase",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeedQuote",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceLimitConfig",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "normalOrderRatio",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "liquidationRatio",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "emaNormalOrderRatio",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "emaLiquidationRatio",
          "type": "uint24"
        },
        {
          "internalType": "uint32",
          "name": "emaSec",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceLimitInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "referencePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "referenceTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "emaPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "value",
          "type": "uint32"
        }
      ],
      "name": "setFundingMaxElapsedSec",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "setFundingMaxPremiumRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "value",
          "type": "uint32"
        }
      ],
      "name": "setFundingRolloverSec",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "setPoolFeeRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint24",
              "name": "normalOrderRatio",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "liquidationRatio",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "emaNormalOrderRatio",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "emaLiquidationRatio",
              "type": "uint24"
            },
            {
              "internalType": "uint32",
              "name": "emaSec",
              "type": "uint32"
            }
          ],
          "internalType": "struct MarketStructs.PriceLimitConfig",
          "name": "value",
          "type": "tuple"
        }
      ],
      "name": "setPriceLimitConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isBaseToQuote",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isExactInput",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLiquidation",
          "type": "bool"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "oppositeAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa7dacb540c58eced3a72d8fcbcce51fc4a79b879b300d6797a892e9d0a1e15c7",
  "receipt": {
    "to": null,
    "from": "0x4B78eCe4AA1be3495713199380635537C5fB2326",
    "contractAddress": "0x8Df4aC26b8174F531578474A3999194650e42D84",
    "transactionIndex": 17,
    "gasUsed": "3017899",
    "logsBloom": "0x
    "blockHash": "0x6228a96223a4c4f9b1989db43f87e48c44caf342025eb578f1a9a54127f7631f",
    "transactionHash": "0xa7dacb540c58eced3a72d8fcbcce51fc4a79b879b300d6797a892e9d0a1e15c7",
    "logs": [
      {
        "transactionIndex": 17,
        "blockNumber": 10875350,
        "transactionHash": "0xa7dacb540c58eced3a72d8fcbcce51fc4a79b879b300d6797a892e9d0a1e15c7",
        "address": "0x8Df4aC26b8174F531578474A3999194650e42D84",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004b78ece4aa1be3495713199380635537c5fb2326"
        ],
        "data": "0x",
        "logIndex": 40,
        "blockHash": "0x6228a96223a4c4f9b1989db43f87e48c44caf342025eb578f1a9a54127f7631f"
      }
    ],
    "blockNumber": 10875350,
    "cumulativeGasUsed": "5524700",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "USD",
    "0x335E2DF76eA6d5d4A82E45d2b917F84a747f0E82",
    "0x0000000000000000000000000000000000000000",
    "0xBB82625d4b46ae1b4dbF519A56d4A19e2F70d63b"
  ],
  "numDeployments": 9,
  "solcInputHash": "095953b35fb9ffc64048adf5b35f21df",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbolArg\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"exchangeArg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceFeedBaseArg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceFeedQuoteArg\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"value\",\"type\":\"uint32\"}],\"name\":\"FundingMaxElapsedSecChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"FundingMaxPremiumRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fundingRateX96\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"elapsedSec\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"premiumX96\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"markPriceX96\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cumBasePerLiquidityX96\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cumQuotePerLiquidityX96\",\"type\":\"uint256\"}],\"name\":\"FundingPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"value\",\"type\":\"uint32\"}],\"name\":\"FundingRolloverSecChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"PoolFeeRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"normalOrderRatio\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"liquidationRatio\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"emaNormalOrderRatio\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"emaLiquidationRatio\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"emaSec\",\"type\":\"uint32\"}],\"name\":\"PriceLimitConfigChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBaseToQuote\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExactInput\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oppositeAmount\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteBalance\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseBalancePerShareX96\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"prevIndexPriceBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevIndexPriceQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevIndexPriceTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingMaxElapsedSec\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingMaxPremiumRatio\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingRolloverSec\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCumDeleveragedPerLiquidityX96\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumBasePerLiquidityX96\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumQuotePerLiquidityX96\",\"type\":\"uint256\"}],\"name\":\"getLiquidityDeleveraged\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"getLiquidityValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarkPriceX96\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getShareMarkPriceX96\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isBaseToQuote\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isExactInput\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isLiquidation\",\"type\":\"bool\"}],\"name\":\"maxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFeeRatio\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumBasePerLiquidityX96\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumQuotePerLiquidityX96\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseBalancePerShareX96\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isBaseToQuote\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isExactInput\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLiquidation\",\"type\":\"bool\"}],\"name\":\"previewSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"oppositeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeedBase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeedQuote\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceLimitConfig\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"normalOrderRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"liquidationRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"emaNormalOrderRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"emaLiquidationRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"emaSec\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceLimitInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"referencePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referenceTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"emaPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"value\",\"type\":\"uint32\"}],\"name\":\"setFundingMaxElapsedSec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"setFundingMaxPremiumRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"value\",\"type\":\"uint32\"}],\"name\":\"setFundingRolloverSec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"setPoolFeeRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint24\",\"name\":\"normalOrderRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"liquidationRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"emaNormalOrderRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"emaLiquidationRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"emaSec\",\"type\":\"uint32\"}],\"internalType\":\"struct MarketStructs.PriceLimitConfig\",\"name\":\"value\",\"type\":\"tuple\"}],\"name\":\"setPriceLimitConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isBaseToQuote\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isExactInput\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLiquidation\",\"type\":\"bool\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"oppositeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PerpdexMarket.sol\":\"PerpdexMarket\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xd17ac7e1d8f83d20d80e652adfed83da122f3a3c7b69fefa2985d85aebf0a3e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x7b2b8baa20fd60ab4a328c8e34c64a353651b80ba4b5b157cbb61813f6f85d55\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe511530871deaef86692cea9adb6076d26d7b47fd4815ce51af52af981026057\",\"license\":\"MIT\"},\"contracts/PerpdexMarket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { IPerpdexMarket } from \\\"./interface/IPerpdexMarket.sol\\\";\\nimport { MarketStructs } from \\\"./lib/MarketStructs.sol\\\";\\nimport { FundingLibrary } from \\\"./lib/FundingLibrary.sol\\\";\\nimport { PoolLibrary } from \\\"./lib/PoolLibrary.sol\\\";\\nimport { PriceLimitLibrary } from \\\"./lib/PriceLimitLibrary.sol\\\";\\n\\ncontract PerpdexMarket is IPerpdexMarket, ReentrancyGuard, Ownable {\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    event PoolFeeRatioChanged(uint24 value);\\n    event FundingMaxPremiumRatioChanged(uint24 value);\\n    event FundingMaxElapsedSecChanged(uint32 value);\\n    event FundingRolloverSecChanged(uint32 value);\\n    event PriceLimitConfigChanged(\\n        uint24 normalOrderRatio,\\n        uint24 liquidationRatio,\\n        uint24 emaNormalOrderRatio,\\n        uint24 emaLiquidationRatio,\\n        uint32 emaSec\\n    );\\n\\n    string public override symbol;\\n    address public immutable override exchange;\\n    address public immutable priceFeedBase;\\n    address public immutable priceFeedQuote;\\n\\n    MarketStructs.PoolInfo public poolInfo;\\n    MarketStructs.FundingInfo public fundingInfo;\\n    MarketStructs.PriceLimitInfo public priceLimitInfo;\\n\\n    uint24 public poolFeeRatio = 3e3;\\n    uint24 public fundingMaxPremiumRatio = 1e4;\\n    uint32 public fundingMaxElapsedSec = 1 days;\\n    uint32 public fundingRolloverSec = 1 days;\\n    MarketStructs.PriceLimitConfig public priceLimitConfig =\\n        MarketStructs.PriceLimitConfig({\\n            normalOrderRatio: 5e4,\\n            liquidationRatio: 10e4,\\n            emaNormalOrderRatio: 20e4,\\n            emaLiquidationRatio: 25e4,\\n            emaSec: 5 minutes\\n        });\\n\\n    modifier onlyExchange() {\\n        require(exchange == msg.sender, \\\"PM_OE: caller is not exchange\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        string memory symbolArg,\\n        address exchangeArg,\\n        address priceFeedBaseArg,\\n        address priceFeedQuoteArg\\n    ) {\\n        require(priceFeedBaseArg == address(0) || priceFeedBaseArg.isContract(), \\\"PM_C: base price feed invalid\\\");\\n        require(priceFeedQuoteArg == address(0) || priceFeedQuoteArg.isContract(), \\\"PM_C: quote price feed invalid\\\");\\n\\n        symbol = symbolArg;\\n        exchange = exchangeArg;\\n        priceFeedBase = priceFeedBaseArg;\\n        priceFeedQuote = priceFeedQuoteArg;\\n\\n        FundingLibrary.initializeFunding(fundingInfo);\\n        PoolLibrary.initializePool(poolInfo);\\n    }\\n\\n    function swap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        bool isLiquidation\\n    ) external override onlyExchange nonReentrant returns (uint256 oppositeAmount) {\\n        (uint256 maxAmount, MarketStructs.PriceLimitInfo memory updated) =\\n            _doMaxSwap(isBaseToQuote, isExactInput, isLiquidation);\\n        require(amount <= maxAmount, \\\"PM_S: too large amount\\\");\\n\\n        oppositeAmount = PoolLibrary.swap(\\n            poolInfo,\\n            PoolLibrary.SwapParams({\\n                isBaseToQuote: isBaseToQuote,\\n                isExactInput: isExactInput,\\n                amount: amount,\\n                feeRatio: poolFeeRatio\\n            })\\n        );\\n\\n        PriceLimitLibrary.update(priceLimitInfo, updated);\\n\\n        emit Swapped(isBaseToQuote, isExactInput, amount, oppositeAmount);\\n\\n        _processFunding();\\n    }\\n\\n    function addLiquidity(uint256 baseShare, uint256 quoteBalance)\\n        external\\n        override\\n        onlyExchange\\n        nonReentrant\\n        returns (\\n            uint256 base,\\n            uint256 quote,\\n            uint256 liquidity\\n        )\\n    {\\n        if (poolInfo.totalLiquidity == 0) {\\n            FundingLibrary.validateInitialLiquidityPrice(priceFeedBase, priceFeedQuote, baseShare, quoteBalance);\\n        }\\n\\n        (base, quote, liquidity) = PoolLibrary.addLiquidity(\\n            poolInfo,\\n            PoolLibrary.AddLiquidityParams({ base: baseShare, quote: quoteBalance })\\n        );\\n        emit LiquidityAdded(base, quote, liquidity);\\n\\n        _processFunding();\\n    }\\n\\n    function removeLiquidity(uint256 liquidity)\\n        external\\n        override\\n        onlyExchange\\n        nonReentrant\\n        returns (uint256 base, uint256 quote)\\n    {\\n        (base, quote) = PoolLibrary.removeLiquidity(\\n            poolInfo,\\n            PoolLibrary.RemoveLiquidityParams({ liquidity: liquidity })\\n        );\\n        emit LiquidityRemoved(base, quote, liquidity);\\n\\n        _processFunding();\\n    }\\n\\n    function setPoolFeeRatio(uint24 value) external onlyOwner nonReentrant {\\n        require(value <= 5e4, \\\"PM_SPFR: too large\\\");\\n        poolFeeRatio = value;\\n        emit PoolFeeRatioChanged(value);\\n    }\\n\\n    function setFundingMaxPremiumRatio(uint24 value) external onlyOwner nonReentrant {\\n        require(value <= 1e5, \\\"PM_SFMPR: too large\\\");\\n        fundingMaxPremiumRatio = value;\\n        emit FundingMaxPremiumRatioChanged(value);\\n    }\\n\\n    function setFundingMaxElapsedSec(uint32 value) external onlyOwner nonReentrant {\\n        require(value <= 7 days, \\\"PM_SFMES: too large\\\");\\n        fundingMaxElapsedSec = value;\\n        emit FundingMaxElapsedSecChanged(value);\\n    }\\n\\n    function setFundingRolloverSec(uint32 value) external onlyOwner nonReentrant {\\n        require(value <= 7 days, \\\"PM_SFRS: too large\\\");\\n        require(value >= 1 hours, \\\"PM_SFRS: too small\\\");\\n        fundingRolloverSec = value;\\n        emit FundingRolloverSecChanged(value);\\n    }\\n\\n    function setPriceLimitConfig(MarketStructs.PriceLimitConfig calldata value) external onlyOwner nonReentrant {\\n        require(value.liquidationRatio <= 5e5, \\\"PE_SPLC: too large liquidation\\\");\\n        require(value.normalOrderRatio <= value.liquidationRatio, \\\"PE_SPLC: invalid\\\");\\n        require(value.emaLiquidationRatio < 1e6, \\\"PE_SPLC: ema too large liq\\\");\\n        require(value.emaNormalOrderRatio <= value.emaLiquidationRatio, \\\"PE_SPLC: ema invalid\\\");\\n        priceLimitConfig = value;\\n        emit PriceLimitConfigChanged(\\n            value.normalOrderRatio,\\n            value.liquidationRatio,\\n            value.emaNormalOrderRatio,\\n            value.emaLiquidationRatio,\\n            value.emaSec\\n        );\\n    }\\n\\n    function previewSwap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        bool isLiquidation\\n    ) external view override returns (uint256 oppositeAmount) {\\n        (uint256 maxAmount, ) = _doMaxSwap(isBaseToQuote, isExactInput, isLiquidation);\\n        require(amount <= maxAmount, \\\"PM_PS: too large amount\\\");\\n\\n        oppositeAmount = PoolLibrary.previewSwap(\\n            poolInfo.base,\\n            poolInfo.quote,\\n            PoolLibrary.SwapParams({\\n                isBaseToQuote: isBaseToQuote,\\n                isExactInput: isExactInput,\\n                amount: amount,\\n                feeRatio: poolFeeRatio\\n            }),\\n            false\\n        );\\n    }\\n\\n    function maxSwap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        bool isLiquidation\\n    ) external view override returns (uint256 amount) {\\n        (amount, ) = _doMaxSwap(isBaseToQuote, isExactInput, isLiquidation);\\n    }\\n\\n    function getShareMarkPriceX96() public view override returns (uint256) {\\n        if (poolInfo.base == 0) return 0;\\n        return PoolLibrary.getShareMarkPriceX96(poolInfo.base, poolInfo.quote);\\n    }\\n\\n    function getLiquidityValue(uint256 liquidity) external view override returns (uint256, uint256) {\\n        return PoolLibrary.getLiquidityValue(poolInfo, liquidity);\\n    }\\n\\n    function getLiquidityDeleveraged(\\n        uint256 liquidity,\\n        uint256 cumBasePerLiquidityX96,\\n        uint256 cumQuotePerLiquidityX96\\n    ) external view override returns (int256, int256) {\\n        return\\n            PoolLibrary.getLiquidityDeleveraged(\\n                poolInfo.cumBasePerLiquidityX96,\\n                poolInfo.cumQuotePerLiquidityX96,\\n                liquidity,\\n                cumBasePerLiquidityX96,\\n                cumQuotePerLiquidityX96\\n            );\\n    }\\n\\n    function getCumDeleveragedPerLiquidityX96() external view override returns (uint256, uint256) {\\n        return (poolInfo.cumBasePerLiquidityX96, poolInfo.cumQuotePerLiquidityX96);\\n    }\\n\\n    function baseBalancePerShareX96() external view override returns (uint256) {\\n        return poolInfo.baseBalancePerShareX96;\\n    }\\n\\n    function getMarkPriceX96() public view override returns (uint256) {\\n        if (poolInfo.base == 0) return 0;\\n        return PoolLibrary.getMarkPriceX96(poolInfo.base, poolInfo.quote, poolInfo.baseBalancePerShareX96);\\n    }\\n\\n    function _processFunding() internal {\\n        uint256 markPriceX96 = getMarkPriceX96();\\n        (int256 fundingRateX96, uint32 elapsedSec, int256 premiumX96) =\\n            FundingLibrary.processFunding(\\n                fundingInfo,\\n                FundingLibrary.ProcessFundingParams({\\n                    priceFeedBase: priceFeedBase,\\n                    priceFeedQuote: priceFeedQuote,\\n                    markPriceX96: markPriceX96,\\n                    maxPremiumRatio: fundingMaxPremiumRatio,\\n                    maxElapsedSec: fundingMaxElapsedSec,\\n                    rolloverSec: fundingRolloverSec\\n                })\\n            );\\n        if (fundingRateX96 == 0) return;\\n\\n        PoolLibrary.applyFunding(poolInfo, fundingRateX96);\\n        emit FundingPaid(\\n            fundingRateX96,\\n            elapsedSec,\\n            premiumX96,\\n            markPriceX96,\\n            poolInfo.cumBasePerLiquidityX96,\\n            poolInfo.cumQuotePerLiquidityX96\\n        );\\n    }\\n\\n    function _doMaxSwap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        bool isLiquidation\\n    ) private view returns (uint256 amount, MarketStructs.PriceLimitInfo memory updated) {\\n        if (poolInfo.totalLiquidity == 0) return (0, updated);\\n\\n        uint256 sharePriceBeforeX96 = getShareMarkPriceX96();\\n        updated = PriceLimitLibrary.updateDry(priceLimitInfo, priceLimitConfig, sharePriceBeforeX96);\\n\\n        uint256 sharePriceBound =\\n            PriceLimitLibrary.priceBound(\\n                updated.referencePrice,\\n                updated.emaPrice,\\n                priceLimitConfig,\\n                isLiquidation,\\n                !isBaseToQuote\\n            );\\n        amount = PoolLibrary.maxSwap(\\n            poolInfo.base,\\n            poolInfo.quote,\\n            isBaseToQuote,\\n            isExactInput,\\n            poolFeeRatio,\\n            sharePriceBound\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x90d1a8d01ef55e5a0e2ce6ef8ce8dc4a73c7a8b2e48f637b96e5da464076eae7\",\"license\":\"GPL-3.0-or-later\"},\"contracts/amm/uniswap_v2/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe77f3770b9e458f6fd64a82af61d05614d85940acc24cfe448295a74742eed21\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IPerpdexMarket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { IPerpdexMarketMinimum } from \\\"./IPerpdexMarketMinimum.sol\\\";\\n\\ninterface IPerpdexMarket is IPerpdexMarketMinimum {\\n    event FundingPaid(\\n        int256 fundingRateX96,\\n        uint32 elapsedSec,\\n        int256 premiumX96,\\n        uint256 markPriceX96,\\n        uint256 cumBasePerLiquidityX96,\\n        uint256 cumQuotePerLiquidityX96\\n    );\\n    event LiquidityAdded(uint256 base, uint256 quote, uint256 liquidity);\\n    event LiquidityRemoved(uint256 base, uint256 quote, uint256 liquidity);\\n    event Swapped(bool isBaseToQuote, bool isExactInput, uint256 amount, uint256 oppositeAmount);\\n\\n    // getters\\n\\n    function symbol() external view returns (string memory);\\n\\n    function exchange() external view returns (address);\\n\\n    function getMarkPriceX96() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1dc3041350d9371233f6d57c2fb0f4ea34509ca0efb6ca4801621d9905f1f7d6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IPerpdexMarketMinimum.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\ninterface IPerpdexMarketMinimum {\\n    function swap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        bool isLiquidation\\n    ) external returns (uint256);\\n\\n    function addLiquidity(uint256 baseShare, uint256 quoteBalance)\\n        external\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function removeLiquidity(uint256 liquidity) external returns (uint256 baseShare, uint256 quoteBalance);\\n\\n    // getters\\n\\n    function previewSwap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        bool isLiquidation\\n    ) external view returns (uint256);\\n\\n    function maxSwap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        bool isLiquidation\\n    ) external view returns (uint256 amount);\\n\\n    function getShareMarkPriceX96() external view returns (uint256);\\n\\n    function getLiquidityValue(uint256 liquidity) external view returns (uint256 baseShare, uint256 quoteBalance);\\n\\n    function getLiquidityDeleveraged(\\n        uint256 liquidity,\\n        uint256 cumBasePerLiquidityX96,\\n        uint256 cumQuotePerLiquidityX96\\n    ) external view returns (int256, int256);\\n\\n    function getCumDeleveragedPerLiquidityX96() external view returns (uint256, uint256);\\n\\n    function baseBalancePerShareX96() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x97c08fc1171e3487fc1af1eddaa3b38cedabc49f2506a3f31b4a06fed7b7e815\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IPerpdexPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\ninterface IPerpdexPriceFeed {\\n    function decimals() external view returns (uint8);\\n\\n    /// @dev Returns the index price of the token.\\n    function getPrice() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6289c246a3791213f4bd4cf2a16c8fb6876c403dd627eabea39a092af3834a55\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/FundingLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { Math } from \\\"../amm/uniswap_v2/libraries/Math.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport { MarketStructs } from \\\"./MarketStructs.sol\\\";\\nimport { IPerpdexPriceFeed } from \\\"../interface/IPerpdexPriceFeed.sol\\\";\\nimport { FullMath } from \\\"@uniswap/v3-core/contracts/libraries/FullMath.sol\\\";\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\n\\nlibrary FundingLibrary {\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    struct ProcessFundingParams {\\n        address priceFeedBase;\\n        address priceFeedQuote;\\n        uint256 markPriceX96;\\n        uint24 maxPremiumRatio;\\n        uint32 maxElapsedSec;\\n        uint32 rolloverSec;\\n    }\\n\\n    uint8 public constant MAX_DECIMALS = 77; // 10^MAX_DECIMALS < 2^256\\n\\n    function initializeFunding(MarketStructs.FundingInfo storage fundingInfo) internal {\\n        fundingInfo.prevIndexPriceTimestamp = block.timestamp;\\n    }\\n\\n    // must not revert even if priceFeed is malicious\\n    function processFunding(MarketStructs.FundingInfo storage fundingInfo, ProcessFundingParams memory params)\\n        internal\\n        returns (\\n            int256 fundingRateX96,\\n            uint32 elapsedSec,\\n            int256 premiumX96\\n        )\\n    {\\n        uint256 currentTimestamp = block.timestamp;\\n        uint256 elapsedSec256 = currentTimestamp.sub(fundingInfo.prevIndexPriceTimestamp);\\n        if (elapsedSec256 == 0) return (0, 0, 0);\\n\\n        uint256 indexPriceBase = _getIndexPriceSafe(params.priceFeedBase);\\n        uint256 indexPriceQuote = _getIndexPriceSafe(params.priceFeedQuote);\\n        uint8 decimalsBase = _getDecimalsSafe(params.priceFeedBase);\\n        uint8 decimalsQuote = _getDecimalsSafe(params.priceFeedQuote);\\n        if (\\n            (fundingInfo.prevIndexPriceBase == indexPriceBase && fundingInfo.prevIndexPriceQuote == indexPriceQuote) ||\\n            indexPriceBase == 0 ||\\n            indexPriceQuote == 0 ||\\n            decimalsBase > MAX_DECIMALS ||\\n            decimalsQuote > MAX_DECIMALS\\n        ) {\\n            return (0, 0, 0);\\n        }\\n\\n        elapsedSec256 = Math.min(elapsedSec256, params.maxElapsedSec);\\n        elapsedSec = elapsedSec256.toUint32();\\n\\n        premiumX96 = _calcPremiumX96(decimalsBase, decimalsQuote, indexPriceBase, indexPriceQuote, params.markPriceX96);\\n\\n        int256 maxPremiumX96 = FixedPoint96.Q96.mulRatio(params.maxPremiumRatio).toInt256();\\n        premiumX96 = (-maxPremiumX96).max(maxPremiumX96.min(premiumX96));\\n        fundingRateX96 = premiumX96.mulDiv(elapsedSec256.toInt256(), params.rolloverSec);\\n\\n        fundingInfo.prevIndexPriceBase = indexPriceBase;\\n        fundingInfo.prevIndexPriceQuote = indexPriceQuote;\\n        fundingInfo.prevIndexPriceTimestamp = currentTimestamp;\\n    }\\n\\n    function validateInitialLiquidityPrice(\\n        address priceFeedBase,\\n        address priceFeedQuote,\\n        uint256 base,\\n        uint256 quote\\n    ) internal view {\\n        uint256 indexPriceBase = _getIndexPriceSafe(priceFeedBase);\\n        uint256 indexPriceQuote = _getIndexPriceSafe(priceFeedQuote);\\n        require(indexPriceBase > 0, \\\"FL_VILP: invalid base price\\\");\\n        require(indexPriceQuote > 0, \\\"FL_VILP: invalid quote price\\\");\\n        uint8 decimalsBase = _getDecimalsSafe(priceFeedBase);\\n        uint8 decimalsQuote = _getDecimalsSafe(priceFeedQuote);\\n        require(decimalsBase <= MAX_DECIMALS, \\\"FL_VILP: invalid base decimals\\\");\\n        require(decimalsQuote <= MAX_DECIMALS, \\\"FL_VILP: invalid quote decimals\\\");\\n\\n        uint256 markPriceX96 = FullMath.mulDiv(quote, FixedPoint96.Q96, base);\\n        int256 premiumX96 = _calcPremiumX96(decimalsBase, decimalsQuote, indexPriceBase, indexPriceQuote, markPriceX96);\\n\\n        require(premiumX96.abs() <= FixedPoint96.Q96.mulRatio(1e5), \\\"FL_VILP: too far from index\\\");\\n    }\\n\\n    function _getIndexPriceSafe(address priceFeed) private view returns (uint256) {\\n        if (priceFeed == address(0)) return 1; // indicate valid\\n\\n        bytes memory payload = abi.encodeWithSignature(\\\"getPrice()\\\");\\n        (bool success, bytes memory data) = address(priceFeed).staticcall(payload);\\n        if (!success) return 0; // invalid\\n\\n        return abi.decode(data, (uint256));\\n    }\\n\\n    function _getDecimalsSafe(address priceFeed) private view returns (uint8) {\\n        if (priceFeed == address(0)) return 0; // indicate valid\\n\\n        bytes memory payload = abi.encodeWithSignature(\\\"decimals()\\\");\\n        (bool success, bytes memory data) = address(priceFeed).staticcall(payload);\\n        if (!success) return 255; // invalid\\n\\n        return abi.decode(data, (uint8));\\n    }\\n\\n    // TODO: must not revert\\n    function _calcPremiumX96(\\n        uint8 decimalsBase,\\n        uint8 decimalsQuote,\\n        uint256 indexPriceBase,\\n        uint256 indexPriceQuote,\\n        uint256 markPriceX96\\n    ) private pure returns (int256 premiumX96) {\\n        uint256 priceRatioX96 = markPriceX96;\\n\\n        if (decimalsBase != 0 || indexPriceBase != 1) {\\n            priceRatioX96 = FullMath.mulDiv(priceRatioX96, 10**decimalsBase, indexPriceBase);\\n        }\\n        if (decimalsQuote != 0 || indexPriceQuote != 1) {\\n            priceRatioX96 = FullMath.mulDiv(priceRatioX96, indexPriceQuote, 10**decimalsQuote);\\n        }\\n\\n        premiumX96 = priceRatioX96.toInt256().sub(FixedPoint96.Q96.toInt256());\\n    }\\n}\\n\",\"keccak256\":\"0x447d7ffb50b0bd833e4609e2c66e6c8083f89269ccb106db0330957de18c237b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/MarketStructs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nlibrary MarketStructs {\\n    struct FundingInfo {\\n        uint256 prevIndexPriceBase;\\n        uint256 prevIndexPriceQuote;\\n        uint256 prevIndexPriceTimestamp;\\n    }\\n\\n    struct PoolInfo {\\n        uint256 base;\\n        uint256 quote;\\n        uint256 totalLiquidity;\\n        uint256 cumBasePerLiquidityX96;\\n        uint256 cumQuotePerLiquidityX96;\\n        uint256 baseBalancePerShareX96;\\n    }\\n\\n    struct PriceLimitInfo {\\n        uint256 referencePrice;\\n        uint256 referenceTimestamp;\\n        uint256 emaPrice;\\n    }\\n\\n    struct PriceLimitConfig {\\n        uint24 normalOrderRatio;\\n        uint24 liquidationRatio;\\n        uint24 emaNormalOrderRatio;\\n        uint24 emaLiquidationRatio;\\n        uint32 emaSec;\\n    }\\n}\\n\",\"keccak256\":\"0xd38217d07a110e402468f65b4c64428b696599f4708608d78617875453682861\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PerpMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { FullMath } from \\\"@uniswap/v3-core/contracts/libraries/FullMath.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\n\\nlibrary PerpMath {\\n    using SafeCast for int256;\\n    using SignedSafeMath for int256;\\n    using SafeMath for uint256;\\n\\n    function formatSqrtPriceX96ToPriceX96(uint160 sqrtPriceX96) internal pure returns (uint256) {\\n        return FullMath.mulDiv(sqrtPriceX96, sqrtPriceX96, FixedPoint96.Q96);\\n    }\\n\\n    function formatX10_18ToX96(uint256 valueX10_18) internal pure returns (uint256) {\\n        return FullMath.mulDiv(valueX10_18, FixedPoint96.Q96, 1 ether);\\n    }\\n\\n    function formatX96ToX10_18(uint256 valueX96) internal pure returns (uint256) {\\n        return FullMath.mulDiv(valueX96, 1 ether, FixedPoint96.Q96);\\n    }\\n\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function abs(int256 value) internal pure returns (uint256) {\\n        return value >= 0 ? value.toUint256() : neg256(value).toUint256();\\n    }\\n\\n    function neg256(int256 a) internal pure returns (int256) {\\n        require(a > -2**255, \\\"PerpMath: inversion overflow\\\");\\n        return -a;\\n    }\\n\\n    function neg256(uint256 a) internal pure returns (int256) {\\n        return -SafeCast.toInt256(a);\\n    }\\n\\n    function divBy10_18(int256 value) internal pure returns (int256) {\\n        // no overflow here\\n        return value / (1 ether);\\n    }\\n\\n    function divBy10_18(uint256 value) internal pure returns (uint256) {\\n        // no overflow here\\n        return value / (1 ether);\\n    }\\n\\n    function subRatio(uint24 a, uint24 b) internal pure returns (uint24) {\\n        require(b <= a, \\\"PerpMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    function mulRatio(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return FullMath.mulDiv(value, ratio, 1e6);\\n    }\\n\\n    function divRatio(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return FullMath.mulDiv(value, 1e6, ratio);\\n    }\\n\\n    function divRatioRoundingUp(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return FullMath.mulDivRoundingUp(value, 1e6, ratio);\\n    }\\n\\n    /// @param denominator cannot be 0 and is checked in FullMath.mulDiv()\\n    function mulDiv(\\n        int256 a,\\n        int256 b,\\n        uint256 denominator\\n    ) internal pure returns (int256 result) {\\n        uint256 unsignedA = a < 0 ? uint256(neg256(a)) : uint256(a);\\n        uint256 unsignedB = b < 0 ? uint256(neg256(b)) : uint256(b);\\n        bool negative = ((a < 0 && b > 0) || (a > 0 && b < 0)) ? true : false;\\n\\n        uint256 unsignedResult = FullMath.mulDiv(unsignedA, unsignedB, denominator);\\n\\n        result = negative ? neg256(unsignedResult) : SafeCast.toInt256(unsignedResult);\\n\\n        return result;\\n    }\\n\\n    function sign(int256 value) internal pure returns (int256) {\\n        return value > 0 ? 1 : (value < 0 ? -1 : int256(0));\\n    }\\n}\\n\",\"keccak256\":\"0xf9265ecc56eb540b432c8afd6bef5c849dce63a73afdc01db7015ea86c4efc22\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PoolLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { Math } from \\\"../amm/uniswap_v2/libraries/Math.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport { MarketStructs } from \\\"./MarketStructs.sol\\\";\\nimport { FullMath } from \\\"@uniswap/v3-core/contracts/libraries/FullMath.sol\\\";\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\n\\nlibrary PoolLibrary {\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    struct SwapParams {\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n        uint24 feeRatio;\\n        uint256 amount;\\n    }\\n\\n    struct AddLiquidityParams {\\n        uint256 base;\\n        uint256 quote;\\n    }\\n\\n    struct RemoveLiquidityParams {\\n        uint256 liquidity;\\n    }\\n\\n    uint256 public constant MINIMUM_LIQUIDITY = 1e3;\\n\\n    function initializePool(MarketStructs.PoolInfo storage poolInfo) internal {\\n        poolInfo.baseBalancePerShareX96 = FixedPoint96.Q96;\\n    }\\n\\n    // underestimate deleveraged tokens\\n    function applyFunding(MarketStructs.PoolInfo storage poolInfo, int256 fundingRateX96) internal {\\n        if (fundingRateX96 == 0) return;\\n\\n        uint256 frAbs = fundingRateX96.abs();\\n\\n        if (fundingRateX96 > 0) {\\n            uint256 poolQuote = poolInfo.quote;\\n            uint256 deleveratedQuote = FullMath.mulDiv(poolQuote, frAbs, FixedPoint96.Q96);\\n            poolInfo.quote = poolQuote.sub(deleveratedQuote);\\n            poolInfo.cumQuotePerLiquidityX96 = poolInfo.cumQuotePerLiquidityX96.add(\\n                FullMath.mulDiv(deleveratedQuote, FixedPoint96.Q96, poolInfo.totalLiquidity)\\n            );\\n        } else {\\n            uint256 poolBase = poolInfo.base;\\n            uint256 deleveratedBase = FullMath.mulDiv(poolBase, frAbs, FixedPoint96.Q96.add(frAbs));\\n            poolInfo.base = poolBase.sub(deleveratedBase);\\n            poolInfo.cumBasePerLiquidityX96 = poolInfo.cumBasePerLiquidityX96.add(\\n                FullMath.mulDiv(deleveratedBase, FixedPoint96.Q96, poolInfo.totalLiquidity)\\n            );\\n        }\\n\\n        poolInfo.baseBalancePerShareX96 = FullMath.mulDiv(\\n            poolInfo.baseBalancePerShareX96,\\n            FixedPoint96.Q96.toInt256().sub(fundingRateX96).toUint256(),\\n            FixedPoint96.Q96\\n        );\\n    }\\n\\n    function swap(MarketStructs.PoolInfo storage poolInfo, SwapParams memory params)\\n        internal\\n        returns (uint256 oppositeAmount)\\n    {\\n        oppositeAmount = previewSwap(poolInfo.base, poolInfo.quote, params, false);\\n        (poolInfo.base, poolInfo.quote) = calcPoolAfter(\\n            params.isBaseToQuote,\\n            params.isExactInput,\\n            poolInfo.base,\\n            poolInfo.quote,\\n            params.amount,\\n            oppositeAmount\\n        );\\n    }\\n\\n    function calcPoolAfter(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 base,\\n        uint256 quote,\\n        uint256 amount,\\n        uint256 oppositeAmount\\n    ) internal pure returns (uint256 baseAfter, uint256 quoteAfter) {\\n        if (isExactInput) {\\n            if (isBaseToQuote) {\\n                baseAfter = base.add(amount);\\n                quoteAfter = quote.sub(oppositeAmount);\\n            } else {\\n                baseAfter = base.sub(oppositeAmount);\\n                quoteAfter = quote.add(amount);\\n            }\\n        } else {\\n            if (isBaseToQuote) {\\n                baseAfter = base.add(oppositeAmount);\\n                quoteAfter = quote.sub(amount);\\n            } else {\\n                baseAfter = base.sub(amount);\\n                quoteAfter = quote.add(oppositeAmount);\\n            }\\n        }\\n    }\\n\\n    function addLiquidity(MarketStructs.PoolInfo storage poolInfo, AddLiquidityParams memory params)\\n        internal\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 poolTotalLiquidity = poolInfo.totalLiquidity;\\n        uint256 liquidity;\\n\\n        if (poolTotalLiquidity == 0) {\\n            uint256 totalLiquidity = Math.sqrt(params.base.mul(params.quote));\\n            liquidity = totalLiquidity.sub(MINIMUM_LIQUIDITY);\\n            require(params.base > 0 && params.quote > 0 && liquidity > 0, \\\"PL_AL: initial liquidity zero\\\");\\n\\n            poolInfo.base = params.base;\\n            poolInfo.quote = params.quote;\\n            poolInfo.totalLiquidity = totalLiquidity;\\n            return (params.base, params.quote, liquidity);\\n        }\\n\\n        uint256 poolBase = poolInfo.base;\\n        uint256 poolQuote = poolInfo.quote;\\n\\n        uint256 base = Math.min(params.base, FullMath.mulDiv(params.quote, poolBase, poolQuote));\\n        uint256 quote = Math.min(params.quote, FullMath.mulDiv(params.base, poolQuote, poolBase));\\n        liquidity = Math.min(\\n            FullMath.mulDiv(base, poolTotalLiquidity, poolBase),\\n            FullMath.mulDiv(quote, poolTotalLiquidity, poolQuote)\\n        );\\n        require(base > 0 && quote > 0 && liquidity > 0, \\\"PL_AL: liquidity zero\\\");\\n\\n        poolInfo.base = poolBase.add(base);\\n        poolInfo.quote = poolQuote.add(quote);\\n        poolInfo.totalLiquidity = poolTotalLiquidity.add(liquidity);\\n\\n        return (base, quote, liquidity);\\n    }\\n\\n    function removeLiquidity(MarketStructs.PoolInfo storage poolInfo, RemoveLiquidityParams memory params)\\n        internal\\n        returns (uint256, uint256)\\n    {\\n        uint256 poolBase = poolInfo.base;\\n        uint256 poolQuote = poolInfo.quote;\\n        uint256 poolTotalLiquidity = poolInfo.totalLiquidity;\\n        uint256 base = FullMath.mulDiv(params.liquidity, poolBase, poolTotalLiquidity);\\n        uint256 quote = FullMath.mulDiv(params.liquidity, poolQuote, poolTotalLiquidity);\\n        require(base > 0 && quote > 0, \\\"PL_RL: output is zero\\\");\\n        poolInfo.base = poolBase.sub(base);\\n        poolInfo.quote = poolQuote.sub(quote);\\n        uint256 totalLiquidity = poolTotalLiquidity.sub(params.liquidity);\\n        require(totalLiquidity >= MINIMUM_LIQUIDITY, \\\"PL_RL: min liquidity\\\");\\n        poolInfo.totalLiquidity = totalLiquidity;\\n        return (base, quote);\\n    }\\n\\n    function getLiquidityValue(MarketStructs.PoolInfo storage poolInfo, uint256 liquidity)\\n        internal\\n        view\\n        returns (uint256, uint256)\\n    {\\n        return (\\n            FullMath.mulDiv(liquidity, poolInfo.base, poolInfo.totalLiquidity),\\n            FullMath.mulDiv(liquidity, poolInfo.quote, poolInfo.totalLiquidity)\\n        );\\n    }\\n\\n    function previewSwap(\\n        uint256 base,\\n        uint256 quote,\\n        SwapParams memory params,\\n        bool noRevert\\n    ) internal pure returns (uint256 output) {\\n        uint24 oneSubFeeRatio = PerpMath.subRatio(1e6, params.feeRatio);\\n\\n        if (params.isExactInput) {\\n            uint256 amountSubFee = params.amount.mulRatio(oneSubFeeRatio);\\n            if (params.isBaseToQuote) {\\n                // output = quote.sub(FullMath.mulDivRoundingUp(base, quote, base.add(amountSubFee)));\\n                output = FullMath.mulDiv(quote, amountSubFee, base.add(amountSubFee));\\n            } else {\\n                // output = base.sub(FullMath.mulDivRoundingUp(base, quote, quote.add(amountSubFee)));\\n                output = FullMath.mulDiv(base, amountSubFee, quote.add(amountSubFee));\\n            }\\n        } else {\\n            if (params.isBaseToQuote) {\\n                // output = FullMath.mulDivRoundingUp(base, quote, quote.sub(params.amount)).sub(base);\\n                output = FullMath.mulDivRoundingUp(base, params.amount, quote.sub(params.amount));\\n            } else {\\n                // output = FullMath.mulDivRoundingUp(base, quote, base.sub(params.amount)).sub(quote);\\n                output = FullMath.mulDivRoundingUp(quote, params.amount, base.sub(params.amount));\\n            }\\n            output = output.divRatioRoundingUp(oneSubFeeRatio);\\n        }\\n        if (!noRevert) {\\n            require(output > 0, \\\"PL_SD: output is zero\\\");\\n        }\\n    }\\n\\n    function _solveQuadratic(uint256 b, uint256 cNeg) private pure returns (uint256) {\\n        return Math.sqrt(b.mul(b).add(cNeg.mul(4))).sub(b).div(2);\\n    }\\n\\n    // must not revert\\n    function maxSwap(\\n        uint256 base,\\n        uint256 quote,\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint24 feeRatio,\\n        uint256 priceBoundX96\\n    ) internal pure returns (uint256 output) {\\n        uint24 oneSubFeeRatio = PerpMath.subRatio(1e6, feeRatio);\\n        uint256 k = base.mul(quote);\\n\\n        if (isBaseToQuote) {\\n            uint256 kDivP = FullMath.mulDiv(k, FixedPoint96.Q96, priceBoundX96);\\n            uint256 baseSqr = base.mul(base);\\n            if (kDivP <= baseSqr) return 0;\\n            uint256 cNeg = kDivP.sub(baseSqr);\\n            uint256 b = base.add(base.mulRatio(oneSubFeeRatio));\\n            output = _solveQuadratic(b.divRatio(oneSubFeeRatio), cNeg.divRatio(oneSubFeeRatio));\\n        } else {\\n            // https://www.wolframalpha.com/input?i=%28x+%2B+a%29+*+%28x+%2B+a+*+%281+-+f%29%29+%3D+kp+solve+a\\n            uint256 kp = FullMath.mulDiv(k, priceBoundX96, FixedPoint96.Q96);\\n            uint256 quoteSqr = quote.mul(quote);\\n            if (kp <= quoteSqr) return 0;\\n            uint256 cNeg = kp.sub(quoteSqr);\\n            uint256 b = quote.add(quote.mulRatio(oneSubFeeRatio));\\n            output = _solveQuadratic(b.divRatio(oneSubFeeRatio), cNeg.divRatio(oneSubFeeRatio));\\n        }\\n        if (!isExactInput) {\\n            output = previewSwap(\\n                base,\\n                quote,\\n                SwapParams({ isBaseToQuote: isBaseToQuote, isExactInput: true, feeRatio: feeRatio, amount: output }),\\n                true\\n            );\\n        }\\n    }\\n\\n    function getMarkPriceX96(\\n        uint256 base,\\n        uint256 quote,\\n        uint256 baseBalancePerShareX96\\n    ) internal pure returns (uint256) {\\n        return FullMath.mulDiv(getShareMarkPriceX96(base, quote), FixedPoint96.Q96, baseBalancePerShareX96);\\n    }\\n\\n    function getShareMarkPriceX96(uint256 base, uint256 quote) internal pure returns (uint256) {\\n        return FullMath.mulDiv(quote, FixedPoint96.Q96, base);\\n    }\\n\\n    function getLiquidityDeleveraged(\\n        uint256 poolCumBasePerLiquidityX96,\\n        uint256 poolCumQuotePerLiquidityX96,\\n        uint256 liquidity,\\n        uint256 cumBasePerLiquidityX96,\\n        uint256 cumQuotePerLiquidityX96\\n    ) internal pure returns (int256, int256) {\\n        int256 basePerLiquidityX96 = poolCumBasePerLiquidityX96.toInt256().sub(cumBasePerLiquidityX96.toInt256());\\n        int256 quotePerLiquidityX96 = poolCumQuotePerLiquidityX96.toInt256().sub(cumQuotePerLiquidityX96.toInt256());\\n\\n        return (\\n            liquidity.toInt256().mulDiv(basePerLiquidityX96, FixedPoint96.Q96),\\n            liquidity.toInt256().mulDiv(quotePerLiquidityX96, FixedPoint96.Q96)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x56d572b3d57115be90034aec26ada1a3f43351cdae1fd306c3eab63b17cb5581\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PriceLimitLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { Math } from \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { FullMath } from \\\"@uniswap/v3-core/contracts/libraries/FullMath.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { MarketStructs } from \\\"./MarketStructs.sol\\\";\\n\\nlibrary PriceLimitLibrary {\\n    using PerpMath for uint256;\\n    using SafeMath for uint256;\\n\\n    function update(MarketStructs.PriceLimitInfo storage priceLimitInfo, MarketStructs.PriceLimitInfo memory value)\\n        internal\\n    {\\n        if (value.referenceTimestamp == 0) return;\\n        priceLimitInfo.referencePrice = value.referencePrice;\\n        priceLimitInfo.referenceTimestamp = value.referenceTimestamp;\\n        priceLimitInfo.emaPrice = value.emaPrice;\\n    }\\n\\n    // referenceTimestamp == 0 indicates not updated\\n    function updateDry(\\n        MarketStructs.PriceLimitInfo storage priceLimitInfo,\\n        MarketStructs.PriceLimitConfig storage config,\\n        uint256 price\\n    ) internal view returns (MarketStructs.PriceLimitInfo memory updated) {\\n        uint256 currentTimestamp = block.timestamp;\\n        uint256 refTimestamp = priceLimitInfo.referenceTimestamp;\\n        if (currentTimestamp <= refTimestamp) {\\n            updated.referencePrice = priceLimitInfo.referencePrice;\\n            updated.emaPrice = priceLimitInfo.emaPrice;\\n            return updated;\\n        }\\n\\n        uint256 elapsed = currentTimestamp.sub(refTimestamp);\\n\\n        if (priceLimitInfo.referencePrice == 0) {\\n            updated.emaPrice = price;\\n        } else {\\n            uint32 emaSec = config.emaSec;\\n            uint256 denominator = elapsed.add(emaSec);\\n            updated.emaPrice = FullMath.mulDiv(priceLimitInfo.emaPrice, emaSec, denominator).add(\\n                FullMath.mulDiv(price, elapsed, denominator)\\n            );\\n        }\\n\\n        updated.referencePrice = price;\\n        updated.referenceTimestamp = currentTimestamp;\\n    }\\n\\n    function priceBound(\\n        uint256 referencePrice,\\n        uint256 emaPrice,\\n        MarketStructs.PriceLimitConfig storage config,\\n        bool isLiquidation,\\n        bool isUpperBound\\n    ) internal view returns (uint256 price) {\\n        uint256 referenceRange =\\n            referencePrice.mulRatio(isLiquidation ? config.liquidationRatio : config.normalOrderRatio);\\n        uint256 emaRange = emaPrice.mulRatio(isLiquidation ? config.emaLiquidationRatio : config.emaNormalOrderRatio);\\n\\n        if (isUpperBound) {\\n            return Math.min(referencePrice.add(referenceRange), emaPrice.add(emaRange));\\n        } else {\\n            return Math.max(referencePrice.sub(referenceRange), emaPrice.sub(emaRange));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4c355a0cabdc470f7424b4babb21d70ed4191601d9d2fcda87020d094f9ebace\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x600f8054610bb862ffffff199182161765ffffff000000199081166427100000001763ffffffff60301b1916680151800000000000001763ffffffff60501b19166102a360571b1790925561018060405261c35060e0819052620186a06101005262030d40610120526203d0906101405261012c610160526010805490921617909116650186a00000001762ffffff60301b191668030d400000000000001762ffffff60481b19166b03d0900000000000000000001763ffffffff60601b1916604b60621b179055348015620000d457600080fd5b506040516200378e3803806200378e833981016040819052620000f79162000363565b600160009081556200010862000272565b600180546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160a01b038216158062000187575062000187826001600160a01b03166200027660201b6200130c1760201c565b620001af5760405162461bcd60e51b8152600401620001a69062000493565b60405180910390fd5b6001600160a01b0381161580620001e05750620001e0816001600160a01b03166200027660201b6200130c1760201c565b620001ff5760405162461bcd60e51b8152600401620001a6906200045c565b8351620002149060029060208701906200029f565b50606083811b6001600160601b031990811660805283821b811660a0529082901b1660c05262000251600962000280602090811b6200131617901c565b6200026860036200028960201b6200131f1760201c565b50505050620004ca565b3390565b803b15155b919050565b42600290910155565b6c01000000000000000000000000600590910155565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282620002d7576000855562000322565b82601f10620002f257805160ff191683800117855562000322565b8280016001018555821562000322579182015b828111156200032257825182559160200191906001019062000305565b506200033092915062000334565b5090565b5b8082111562000330576000815560010162000335565b80516001600160a01b03811681146200027b57600080fd5b6000806000806080858703121562000379578384fd5b84516001600160401b038082111562000390578586fd5b818701915087601f830112620003a4578586fd5b815181811115620003b157fe5b6040516020601f8301601f1916820181018481118382101715620003d157fe5b60405282825284830181018b1015620003e8578889fd5b8893505b828410156200040b5784840181015182850182015292830192620003ec565b828411156200041c57888184840101525b8198506200042c818b016200034b565b9750505050505062000441604086016200034b565b915062000451606086016200034b565b905092959194509250565b6020808252601e908201527f504d5f433a2071756f7465207072696365206665656420696e76616c69640000604082015260600190565b6020808252601d908201527f504d5f433a2062617365207072696365206665656420696e76616c6964000000604082015260600190565b60805160601c60a05160601c60c05160601c61326b620005236000398061056a5280610dbc5280611593525080610ad25280610d9b528061156e5250806109735280610bf85280610cfe5280610f85525061326b6000f3fe608060405234801561001057600080fd5b50600436106101a55760003560e01c806385aaa397116100ef5780639cd441da116100925780639cd441da146103465780639d67bf0314610359578063d2f7265a1461036c578063dba4915314610374578063e7a499311461037c578063e8fa204f1461038f578063f2289752146103a2578063f2fde38b146103aa576101a5565b806385aaa397146102d457806388e27dfb146102eb5780638da5cb5b146102f35780638ee8fe5d146102fb578063933c7979146103035780639482de1a1461031657806395d89b411461031e5780639c8f9f2314610333576101a5565b8063715018a611610157578063715018a61461025a5780637452fadd1461026257806374f256891461026a5780637640482f1461027d5780637661ce131461029e578063796c20b7146102a657806380796d55146102b9578063823f2b04146102cc576101a5565b806301e0df12146101aa57806306f429b8146101bf5780630e06e4d0146101e8578063186f181e146101fd5780633aa3e650146102125780635a2f3d09146102275780636346f32e14610241575b600080fd5b6101bd6101b836600461292a565b6103bd565b005b6101d26101cd3660046128c7565b6104ed565b6040516101df9190612fae565b60405180910390f35b6101f0610568565b6040516101df9190612a1b565b61020561058c565b6040516101df9190612ff5565b61021a61059f565b6040516101df9190612f6a565b61022f6105b1565b6040516101df96959493929190612fcd565b6102496105c6565b6040516101df959493929190612f7a565b6101bd610600565b6101d26106ac565b6101bd61027836600461292a565b6106d8565b61029061028b366004612946565b6107f9565b6040516101df929190612a4c565b610205610810565b6101bd6102b43660046129c2565b610823565b6101d26102c73660046128c7565b61096f565b6101f0610ad0565b6102dc610af4565b6040516101df93929190612fb7565b61021a610b00565b6101f0610b0b565b6101d2610b1a565b610290610311366004612997565b610b3c565b6101d2610b62565b610326610b68565b6040516101df9190612a88565b610290610341366004612946565b610bf3565b6102dc610354366004612976565b610cf8565b6101bd6103673660046129c2565b610e5c565b6101f0610f83565b6102dc610fa7565b6101bd61038a366004612913565b610fb3565b6101d261039d366004612885565b6111e9565b6102906111ff565b6101bd6103b836600461285e565b611209565b6103c561132c565b6001600160a01b03166103d6610b0b565b6001600160a01b03161461041f576040805162461bcd60e51b815260206004820181905260248201526000805160206131a4833981519152604482015290519081900360640190fd5b60026000541415610465576040805162461bcd60e51b815260206004820152601f602482015260008051602061313d833981519152604482015290519081900360640190fd5b600260005561c35062ffffff8216111561049a5760405162461bcd60e51b815260040161049190612b29565b60405180910390fd5b600f805462ffffff191662ffffff83161790556040517ff02c81debd01d238f7814ac27bec8a7970b5271dc47842a419737b1ae313ca0f906104dd908390612f6a565b60405180910390a1506001600055565b6000806104fb868685611330565b5090508084111561051e5760405162461bcd60e51b815260040161049190612cf1565b6003546004546040805160808101825289151581528815156020820152600f5462ffffff16918101919091526060810187905261055e92919060006113a9565b9695505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600f54600160501b900463ffffffff1681565b600f546301000000900462ffffff1681565b60035460045460055460065460075460085486565b60105462ffffff8082169163010000008104821691600160301b8204811691600160481b810490911690600160601b900463ffffffff1685565b61060861132c565b6001600160a01b0316610619610b0b565b6001600160a01b031614610662576040805162461bcd60e51b815260206004820181905260248201526000805160206131a4833981519152604482015290519081900360640190fd5b6001546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600180546001600160a01b0319169055565b6003546000906106be575060006106d5565b6003546004546008546106d292919061148a565b90505b90565b6106e061132c565b6001600160a01b03166106f1610b0b565b6001600160a01b03161461073a576040805162461bcd60e51b815260206004820181905260248201526000805160206131a4833981519152604482015290519081900360640190fd5b60026000541415610780576040805162461bcd60e51b815260206004820152601f602482015260008051602061313d833981519152604482015290519081900360640190fd5b6002600055620186a062ffffff821611156107ad5760405162461bcd60e51b815260040161049190612f3d565b600f805465ffffff0000001916630100000062ffffff8416021790556040517f55647f4dd43ac173f04e53a506df46454012316d82fb04a9c1dbd8e0f21f8f76906104dd908390612f6a565b6000806108076003846114ae565b91509150915091565b600f54600160301b900463ffffffff1681565b61082b61132c565b6001600160a01b031661083c610b0b565b6001600160a01b031614610885576040805162461bcd60e51b815260206004820181905260248201526000805160206131a4833981519152604482015290519081900360640190fd5b600260005414156108cb576040805162461bcd60e51b815260206004820152601f602482015260008051602061313d833981519152604482015290519081900360640190fd5b600260005562093a8063ffffffff821611156108f95760405162461bcd60e51b815260040161049190612e46565b610e108163ffffffff1610156109215760405162461bcd60e51b815260040161049190612de3565b600f805463ffffffff60501b1916600160501b63ffffffff8416021790556040517fa703b265f29064a106acd6473c258e009bff9ac0bfd63b6f5ca4b712a25c8516906104dd908390612ff5565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146109b95760405162461bcd60e51b815260040161049190612ea1565b600260005414156109ff576040805162461bcd60e51b815260206004820152601f602482015260008051602061313d833981519152604482015290519081900360640190fd5b6002600090815580610a12878786611330565b9150915081851115610a365760405162461bcd60e51b815260040161049190612b55565b6040805160808101825288151581528715156020820152600f5462ffffff169181019190915260608101869052610a6f906003906114e2565b9250610a7c600c82611525565b7fdedf81f778c63a97f5a04bfeae9e0e04f18d283b04d930ea7b6af78b6eb50b7687878786604051610ab19493929190612a2f565b60405180910390a1610ac1611550565b50506001600055949350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600c54600d54600e5483565b600f5462ffffff1681565b6001546001600160a01b031690565b600354600090610b2c575060006106d5565b6003546004546106d29190611677565b600080610b556003800154600360040154878787611691565b915091505b935093915050565b60085490565b6002805460408051602060018416156101000260001901909316849004601f81018490048402820184019092528181529291830182828015610beb5780601f10610bc057610100808354040283529160200191610beb565b820191906000526020600020905b815481529060010190602001808311610bce57829003601f168201915b505050505081565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314610c3e5760405162461bcd60e51b815260040161049190612ea1565b60026000541415610c84576040805162461bcd60e51b815260206004820152601f602482015260008051602061313d833981519152604482015290519081900360640190fd5b60026000556040805160208101909152838152610ca3906003906116fe565b60405191935091507f0bb89aa54ed6940a7e7167bd262b2400d63945045ceff1a52a05f2601ed215f190610cdc90849084908790612fb7565b60405180910390a1610cec611550565b60016000559092909150565b600080807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314610d445760405162461bcd60e51b815260040161049190612ea1565b60026000541415610d8a576040805162461bcd60e51b815260206004820152601f602482015260008051602061313d833981519152604482015290519081900360640190fd5b6002600055600554610de257610de27f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000087876117c6565b610e0160036040518060400160405280888152602001878152506118ea565b60405192955090935091507fd7f28048575eead8851d024ead087913957dfb4fd1a02b4d1573f5352a5a2be390610e3d90859085908590612fb7565b60405180910390a1610e4d611550565b60016000819055509250925092565b610e6461132c565b6001600160a01b0316610e75610b0b565b6001600160a01b031614610ebe576040805162461bcd60e51b815260206004820181905260248201526000805160206131a4833981519152604482015290519081900360640190fd5b60026000541415610f04576040805162461bcd60e51b815260206004820152601f602482015260008051602061313d833981519152604482015290519081900360640190fd5b600260005562093a8063ffffffff82161115610f325760405162461bcd60e51b815260040161049190612d22565b600f805469ffffffff0000000000001916600160301b63ffffffff8416021790556040517f5b18da8898c1e492e6bc631eec59d143ebba7f31ca794b668f0bfa9b0d989293906104dd908390612ff5565b7f000000000000000000000000000000000000000000000000000000000000000081565b600954600a54600b5483565b610fbb61132c565b6001600160a01b0316610fcc610b0b565b6001600160a01b031614611015576040805162461bcd60e51b815260206004820181905260248201526000805160206131a4833981519152604482015290519081900360640190fd5b6002600054141561105b576040805162461bcd60e51b815260206004820152601f602482015260008051602061313d833981519152604482015290519081900360640190fd5b60026000556207a120611074604083016020840161292a565b62ffffff1611156110975760405162461bcd60e51b815260040161049190612e0f565b6110a7604082016020830161292a565b62ffffff166110b9602083018361292a565b62ffffff1611156110dc5760405162461bcd60e51b815260040161049190612c2a565b620f42406110f0608083016060840161292a565b62ffffff16106111125760405162461bcd60e51b815260040161049190612b85565b611122608082016060830161292a565b62ffffff16611137606083016040840161292a565b62ffffff16111561115a5760405162461bcd60e51b815260040161049190612f0f565b8060106111678282613043565b507fbe7eee05a638b28e8473a6f87ae310d3123f8a2a7561ce96e140f76125f746129050611198602083018361292a565b6111a8604084016020850161292a565b6111b8606085016040860161292a565b6111c8608086016060870161292a565b6111d860a08701608088016129c2565b6040516104dd959493929190612f7a565b60006111f6848484611330565b50949350505050565b6006546007549091565b61121161132c565b6001600160a01b0316611222610b0b565b6001600160a01b03161461126b576040805162461bcd60e51b815260206004820181905260248201526000805160206131a4833981519152604482015290519081900360640190fd5b6001600160a01b0381166112b05760405162461bcd60e51b815260040180806020018281038252602681526020018061315d6026913960400191505060405180910390fd5b6001546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b803b15155b919050565b42600290910155565b600160601b600590910155565b3390565b600061133a61282d565b60055461134a5760009150610b5a565b6000611354610b1a565b9050611363600c601083611a5d565b9150600061137e836000015184604001516010888b15611b10565b600354600454600f5492935061139d928a908a9062ffffff1686611bbe565b93505050935093915050565b6000806113bd620f42408560400151611d20565b90508360200151156114185760608401516000906113db9083611d52565b855190915015611400576113f986826113f48a82611d67565b611dc1565b9250611412565b61140f87826113f48982611d67565b92505b50611465565b8351156114405760608401516114399087906114348882611e70565b611ec7565b9150611458565b60608401516114559086906114348982611e70565b91505b6114628282611f01565b91505b826111f657600082116111f65760405162461bcd60e51b815260040161049190612cc2565b60006114a46114998585611677565b600160601b84611dc1565b90505b9392505050565b6000806114c48385600001548660020154611dc1565b6114d78486600101548760020154611dc1565b915091509250929050565b60006114f9836000015484600101548460006113a9565b825160208401518554600187015460608701519495506115199486611f16565b60018501559092555090565b60208101516115335761154c565b8051825560208101516001830155604081015160028301555b5050565b600061155a6106ac565b6040805160c0810182526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f0000000000000000000000000000000000000000000000000000000000000000166020820152908101829052600f5462ffffff6301000000820416606083015263ffffffff600160301b820481166080840152600160501b9091041660a08201529091506000908190819061160990600990611fa0565b92509250925082600014156116215750505050611675565b61162c600384612135565b6006546007546040517f318daee0b48d1f6a0542d8cdd35e2593d88c4fb01708f4781609494206d0705192611668928792879287928b92612a5a565b60405180910390a1505050505b565b600061168882600160601b85611dc1565b90505b92915050565b60008060006116b16116a286612234565b6116ab8a612234565b9061227c565b905060006116c16116a286612234565b90506116dc82600160601b6116d58a612234565b91906122e1565b6116ee82600160601b6116d58b612234565b9350935050509550959350505050565b81546001830154600284015483516000938493909290918490611722908584611dc1565b9050600061173588600001518585611dc1565b90506000821180156117475750600081115b6117635760405162461bcd60e51b815260040161049190612db4565b61176d8583611e70565b89556117798482611e70565b60018a0155875160009061178e908590611e70565b90506103e88110156117b25760405162461bcd60e51b815260040161049190612d4f565b60028a015590955093505050509250929050565b60006117d185612385565b905060006117de85612385565b9050600082116118005760405162461bcd60e51b815260040161049190612ed8565b600081116118205760405162461bcd60e51b815260040161049190612bf3565b600061182b8761244c565b905060006118388761244c565b9050604d60ff8316111561185e5760405162461bcd60e51b815260040161049190612af2565b604d60ff821611156118825760405162461bcd60e51b815260040161049190612c8b565b600061189386600160601b89611dc1565b905060006118a48484888886612513565b90506118b7600160601b620186a0611d52565b6118c082612590565b11156118de5760405162461bcd60e51b815260040161049190612c54565b50505050505050505050565b600282015460009081908190818161198b576020860151865160009161191891611913916125b4565b61260d565b9050611926816103e8611e70565b87519092501580159061193d575060008760200151115b80156119495750600082115b6119655760405162461bcd60e51b815260040161049190612abb565b8651808955602088015160018a0181905560028a0192909255955093509150611a569050565b86546001880154875160208901516000916119b0916119ab908686611dc1565b61265e565b905060006119cb8a602001516119ab8c600001518688611dc1565b90506119e66119db838887611dc1565b6119ab838987611dc1565b94506000821180156119f85750600081115b8015611a045750600085115b611a205760405162461bcd60e51b815260040161049190612e72565b611a2a8483611d67565b8b55611a368382611d67565b60018c0155611a458686611d67565b60028c015590975095509193505050505b9250925092565b611a6561282d565b60018401544290808211611a8857505083548152600284015460408201526114a7565b6000611a948383611e70565b8754909150611aa95760408401859052611aff565b855463ffffffff600160601b909104811690600090611acc9084908490611d6716565b9050611af7611adc888584611dc1565b611af18b600201548563ffffffff1685611dc1565b90611d67565b604087015250505b505082825260208201529392505050565b600080611b3d84611b2757855462ffffff16611b36565b85546301000000900462ffffff165b8890611d52565b90506000611b7185611b5c578654600160301b900462ffffff16611b36565b86548890600160481b900462ffffff16611d52565b90508315611b9957611b90611b868984611d67565b6119ab8984611d67565b92505050611bb5565b611b90611ba68984611e70565b611bb08984611e70565b612674565b95945050505050565b600080611bce620f424085611d20565b90506000611bdc89896125b4565b90508615611c66576000611bf582600160601b87611dc1565b90506000611c038b806125b4565b9050808211611c1957600094505050505061055e565b6000611c258383611e70565b90506000611c3d611c368e88611d52565b8e90611d67565b9050611c5b611c4c8288612684565b611c568489612684565b612699565b965050505050611cd5565b6000611c778286600160601b611dc1565b90506000611c858a806125b4565b9050808211611c9b57600094505050505061055e565b6000611ca78383611e70565b90506000611cbf611cb88d88611d52565b8d90611d67565b9050611cce611c4c8288612684565b9650505050505b85611d1457611d11898960405180608001604052808b151581526020016001151581526020018962ffffff1681526020018781525060016113a9565b92505b50509695505050505050565b60008262ffffff168262ffffff161115611d4c5760405162461bcd60e51b815260040161049190612bbc565b50900390565b6000611688838362ffffff16620f4240611dc1565b600082820183811015611688576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000808060001985870986860292508281109083900303905080611df75760008411611dec57600080fd5b5082900490506114a7565b808411611e0357600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b600082821115611d4c576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b6000611ed4848484611dc1565b905060008280611ee057fe5b84860911156114a7576000198110611ef757600080fd5b6001019392505050565b600061168883620f42408462ffffff16611ec7565b6000808615611f60578715611f4257611f2f8685611d67565b9150611f3b8584611e70565b9050611f5b565b611f4c8684611e70565b9150611f588585611d67565b90505b611f95565b8715611f7c57611f708684611d67565b9150611f588585611e70565b611f868685611e70565b9150611f928584611d67565b90505b965096945050505050565b6000806000804290506000611fc2876002015483611e7090919063ffffffff16565b905080611fdb5760008060009450945094505050611a56565b6000611fea8760000151612385565b90506000611ffb8860200151612385565b9050600061200c896000015161244c565b9050600061201d8a6020015161244c565b8b54909150841480156120335750828b60010154145b8061203c575083155b80612045575082155b806120535750604d60ff8316115b806120615750604d60ff8216115b1561207c576000806000985098509850505050505050611a56565b612090858b6080015163ffffffff1661265e565b945061209b856126cb565b97506120ae828286868e60400151612513565b965060006120d56120d08c60600151600160601b611d5290919063ffffffff16565b612234565b90506120ef6120e4828a612710565b60008390039061271f565b97506121186120fd87612234565b8c60a0015163ffffffff168a6122e19092919063ffffffff16565b948c55505050600189015560028801929092555092509250925092565b8061213f5761154c565b600061214a82612590565b905060008213156121ad576001830154600061216b8284600160601b611dc1565b90506121778282611e70565b85600101819055506121a061219582600160601b8860020154611dc1565b600487015490611d67565b6004860155506121ff9050565b825460006121c482846113f4600160601b82611d67565b90506121d08282611e70565b855560028501546121f7906121ec908390600160601b90611dc1565b600387015490611d67565b600386015550505b61222a836005015461222061221b856116ab600160601b612234565b61272f565b600160601b611dc1565b6005840155505050565b6000600160ff1b82106122785760405162461bcd60e51b81526004018080602001828103825260288152602001806131ea6028913960400191505060405180910390fd5b5090565b60008183038183128015906122915750838113155b806122a657506000831280156122a657508381135b6116885760405162461bcd60e51b81526004018080602001828103825260248152602001806132126024913960400191505060405180910390fd5b600080600085126122f257846122fb565b6122fb85612786565b9050600080851261230c5784612315565b61231585612786565b9050600080871280156123285750600086135b8061233e575060008713801561233e5750600086125b61234957600061234c565b60015b9050600061235b848488611dc1565b9050816123705761236b81612234565b612379565b612379816127b2565b98975050505050505050565b60006001600160a01b03821661239d57506001611311565b60408051600481526024810182526020810180516001600160e01b0316634c6afee560e11b179052905160009081906001600160a01b038616906123e29085906129ff565b600060405180830381855afa9150503d806000811461241d576040519150601f19603f3d011682016040523d82523d6000602084013e612422565b606091505b5091509150816124385760009350505050611311565b80806020019051810190611bb5919061295e565b60006001600160a01b03821661246457506000611311565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b179052905160009081906001600160a01b038616906124a99085906129ff565b600060405180830381855afa9150503d80600081146124e4576040519150601f19603f3d011682016040523d82523d6000602084013e6124e9565b606091505b5091509150816124ff5760ff9350505050611311565b80806020019051810190611bb591906129de565b60008160ff8716151580612528575084600114155b156125415761253e818860ff16600a0a87611dc1565b90505b60ff8616151580612553575083600114155b1561256c5761256981858860ff16600a0a611dc1565b90505b61258561257c600160601b612234565b6116ab83612234565b979650505050505050565b6000808212156125ab576125a661221b83612786565b61168b565b61168b8261272f565b6000826125c35750600061168b565b828202828482816125d057fe5b04146116885760405162461bcd60e51b81526004018080602001828103825260218152602001806131836021913960400191505060405180910390fd5b60006003821115612650575080600160028204015b8181101561264a5780915060028182858161263957fe5b04018161264257fe5b049050612622565b50611311565b811561131157506001919050565b600081831061266d5781611688565b5090919050565b60008183101561266d5781611688565b600061168883620f42408462ffffff16611dc1565b600061168860026126c5856126bf6119136126b58860046125b4565b611af18a806125b4565b90611e70565b906127c6565b600064010000000082106122785760405162461bcd60e51b81526004018080602001828103825260268152602001806131c46026913960400191505060405180910390fd5b600081831261266d5781611688565b60008183121561266d5781611688565b600080821215612278576040805162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f736974697665604482015290519081900360640190fd5b6000600160ff1b82136127ab5760405162461bcd60e51b815260040161049190612d7d565b5060000390565b60006127bd82612234565b60000392915050565b600080821161281c576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161282557fe5b049392505050565b60405180606001604052806000815260200160008152602001600081525090565b8035801515811461131157600080fd5b60006020828403121561286f578081fd5b81356001600160a01b0381168114611688578182fd5b600080600060608486031215612899578182fd5b6128a28461284e565b92506128b06020850161284e565b91506128be6040850161284e565b90509250925092565b600080600080608085870312156128dc578081fd5b6128e58561284e565b93506128f36020860161284e565b9250604085013591506129086060860161284e565b905092959194509250565b600060a08284031215612924578081fd5b50919050565b60006020828403121561293b578081fd5b813561168881613116565b600060208284031215612957578081fd5b5035919050565b60006020828403121561296f578081fd5b5051919050565b60008060408385031215612988578182fd5b50508035926020909101359150565b6000806000606084860312156129ab578283fd5b505081359360208301359350604090920135919050565b6000602082840312156129d3578081fd5b81356116888161312a565b6000602082840312156129ef578081fd5b815160ff81168114611688578182fd5b60008251612a11818460208701613006565b9190910192915050565b6001600160a01b0391909116815260200190565b931515845291151560208401526040830152606082015260800190565b918252602082015260400190565b95865263ffffffff94909416602086015260408501929092526060840152608083015260a082015260c00190565b6000602082528251806020840152612aa7816040850160208701613006565b601f01601f19169190910160400192915050565b6020808252601d908201527f504c5f414c3a20696e697469616c206c6971756964697479207a65726f000000604082015260600190565b6020808252601e908201527f464c5f56494c503a20696e76616c6964206261736520646563696d616c730000604082015260600190565b602080825260129082015271504d5f535046523a20746f6f206c6172676560701b604082015260600190565b602080825260169082015275141357d4ce881d1bdbc81b185c99d948185b5bdd5b9d60521b604082015260600190565b6020808252601a908201527f50455f53504c433a20656d6120746f6f206c61726765206c6971000000000000604082015260600190565b6020808252601e908201527f506572704d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252601c908201527f464c5f56494c503a20696e76616c69642071756f746520707269636500000000604082015260600190565b60208082526010908201526f141157d4d41310ce881a5b9d985b1a5960821b604082015260600190565b6020808252601b908201527f464c5f56494c503a20746f6f206661722066726f6d20696e6465780000000000604082015260600190565b6020808252601f908201527f464c5f56494c503a20696e76616c69642071756f746520646563696d616c7300604082015260600190565b602080825260159082015274504c5f53443a206f7574707574206973207a65726f60581b604082015260600190565b602080825260179082015276141357d414ce881d1bdbc81b185c99d948185b5bdd5b9d604a1b604082015260600190565b602080825260139082015272504d5f53464d45533a20746f6f206c6172676560681b604082015260600190565b602080825260149082015273504c5f524c3a206d696e206c697175696469747960601b604082015260600190565b6020808252601c908201527f506572704d6174683a20696e76657273696f6e206f766572666c6f7700000000604082015260600190565b602080825260159082015274504c5f524c3a206f7574707574206973207a65726f60581b604082015260600190565b602080825260129082015271141357d4d19494ce881d1bdbc81cdb585b1b60721b604082015260600190565b6020808252601e908201527f50455f53504c433a20746f6f206c61726765206c69717569646174696f6e0000604082015260600190565b602080825260129082015271504d5f534652533a20746f6f206c6172676560701b604082015260600190565b602080825260159082015274504c5f414c3a206c6971756964697479207a65726f60581b604082015260600190565b6020808252601d908201527f504d5f4f453a2063616c6c6572206973206e6f742065786368616e6765000000604082015260600190565b6020808252601b908201527f464c5f56494c503a20696e76616c696420626173652070726963650000000000604082015260600190565b602080825260149082015273141157d4d41310ce88195b58481a5b9d985b1a5960621b604082015260600190565b602080825260139082015272504d5f53464d50523a20746f6f206c6172676560681b604082015260600190565b62ffffff91909116815260200190565b62ffffff958616815293851660208501529184166040840152909216606082015263ffffffff909116608082015260a00190565b90815260200190565b9283526020830191909152604082015260600190565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b63ffffffff91909116815260200190565b60005b83811015613021578181015183820152602001613009565b83811115613030576000848401525b50505050565b6000813561168b8161312a565b813561304e81613116565b815462ffffff191662ffffff9190911617808255602083013561307081613116565b65ffffff0000008160181b1665ffffff00000019831617915050808255604083013561309b81613116565b62ffffff60301b8160301b1662ffffff60301b1983161791505080825560608301356130c681613116565b62ffffff60481b199190911660489190911b62ffffff60481b1617815561154c6130f260808401613036565b82805463ffffffff60601b191660609290921b63ffffffff60601b16919091179055565b62ffffff8116811461312757600080fd5b50565b63ffffffff8116811461312757600080fdfe5265656e7472616e637947756172643a207265656e7472616e742063616c6c004f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657253616665436173743a2076616c756520646f65736e27742066697420696e203332206269747353616665436173743a2076616c756520646f65736e27742066697420696e20616e20696e743235365369676e6564536166654d6174683a207375627472616374696f6e206f766572666c6f77a2646970667358221220ca1d40f4267a9067edd8aa5ec1aaed1306ba190a88da575c4ddb1247fbab0ba664736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a55760003560e01c806385aaa397116100ef5780639cd441da116100925780639cd441da146103465780639d67bf0314610359578063d2f7265a1461036c578063dba4915314610374578063e7a499311461037c578063e8fa204f1461038f578063f2289752146103a2578063f2fde38b146103aa576101a5565b806385aaa397146102d457806388e27dfb146102eb5780638da5cb5b146102f35780638ee8fe5d146102fb578063933c7979146103035780639482de1a1461031657806395d89b411461031e5780639c8f9f2314610333576101a5565b8063715018a611610157578063715018a61461025a5780637452fadd1461026257806374f256891461026a5780637640482f1461027d5780637661ce131461029e578063796c20b7146102a657806380796d55146102b9578063823f2b04146102cc576101a5565b806301e0df12146101aa57806306f429b8146101bf5780630e06e4d0146101e8578063186f181e146101fd5780633aa3e650146102125780635a2f3d09146102275780636346f32e14610241575b600080fd5b6101bd6101b836600461292a565b6103bd565b005b6101d26101cd3660046128c7565b6104ed565b6040516101df9190612fae565b60405180910390f35b6101f0610568565b6040516101df9190612a1b565b61020561058c565b6040516101df9190612ff5565b61021a61059f565b6040516101df9190612f6a565b61022f6105b1565b6040516101df96959493929190612fcd565b6102496105c6565b6040516101df959493929190612f7a565b6101bd610600565b6101d26106ac565b6101bd61027836600461292a565b6106d8565b61029061028b366004612946565b6107f9565b6040516101df929190612a4c565b610205610810565b6101bd6102b43660046129c2565b610823565b6101d26102c73660046128c7565b61096f565b6101f0610ad0565b6102dc610af4565b6040516101df93929190612fb7565b61021a610b00565b6101f0610b0b565b6101d2610b1a565b610290610311366004612997565b610b3c565b6101d2610b62565b610326610b68565b6040516101df9190612a88565b610290610341366004612946565b610bf3565b6102dc610354366004612976565b610cf8565b6101bd6103673660046129c2565b610e5c565b6101f0610f83565b6102dc610fa7565b6101bd61038a366004612913565b610fb3565b6101d261039d366004612885565b6111e9565b6102906111ff565b6101bd6103b836600461285e565b611209565b6103c561132c565b6001600160a01b03166103d6610b0b565b6001600160a01b03161461041f576040805162461bcd60e51b815260206004820181905260248201526000805160206131a4833981519152604482015290519081900360640190fd5b60026000541415610465576040805162461bcd60e51b815260206004820152601f602482015260008051602061313d833981519152604482015290519081900360640190fd5b600260005561c35062ffffff8216111561049a5760405162461bcd60e51b815260040161049190612b29565b60405180910390fd5b600f805462ffffff191662ffffff83161790556040517ff02c81debd01d238f7814ac27bec8a7970b5271dc47842a419737b1ae313ca0f906104dd908390612f6a565b60405180910390a1506001600055565b6000806104fb868685611330565b5090508084111561051e5760405162461bcd60e51b815260040161049190612cf1565b6003546004546040805160808101825289151581528815156020820152600f5462ffffff16918101919091526060810187905261055e92919060006113a9565b9695505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600f54600160501b900463ffffffff1681565b600f546301000000900462ffffff1681565b60035460045460055460065460075460085486565b60105462ffffff8082169163010000008104821691600160301b8204811691600160481b810490911690600160601b900463ffffffff1685565b61060861132c565b6001600160a01b0316610619610b0b565b6001600160a01b031614610662576040805162461bcd60e51b815260206004820181905260248201526000805160206131a4833981519152604482015290519081900360640190fd5b6001546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600180546001600160a01b0319169055565b6003546000906106be575060006106d5565b6003546004546008546106d292919061148a565b90505b90565b6106e061132c565b6001600160a01b03166106f1610b0b565b6001600160a01b03161461073a576040805162461bcd60e51b815260206004820181905260248201526000805160206131a4833981519152604482015290519081900360640190fd5b60026000541415610780576040805162461bcd60e51b815260206004820152601f602482015260008051602061313d833981519152604482015290519081900360640190fd5b6002600055620186a062ffffff821611156107ad5760405162461bcd60e51b815260040161049190612f3d565b600f805465ffffff0000001916630100000062ffffff8416021790556040517f55647f4dd43ac173f04e53a506df46454012316d82fb04a9c1dbd8e0f21f8f76906104dd908390612f6a565b6000806108076003846114ae565b91509150915091565b600f54600160301b900463ffffffff1681565b61082b61132c565b6001600160a01b031661083c610b0b565b6001600160a01b031614610885576040805162461bcd60e51b815260206004820181905260248201526000805160206131a4833981519152604482015290519081900360640190fd5b600260005414156108cb576040805162461bcd60e51b815260206004820152601f602482015260008051602061313d833981519152604482015290519081900360640190fd5b600260005562093a8063ffffffff821611156108f95760405162461bcd60e51b815260040161049190612e46565b610e108163ffffffff1610156109215760405162461bcd60e51b815260040161049190612de3565b600f805463ffffffff60501b1916600160501b63ffffffff8416021790556040517fa703b265f29064a106acd6473c258e009bff9ac0bfd63b6f5ca4b712a25c8516906104dd908390612ff5565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146109b95760405162461bcd60e51b815260040161049190612ea1565b600260005414156109ff576040805162461bcd60e51b815260206004820152601f602482015260008051602061313d833981519152604482015290519081900360640190fd5b6002600090815580610a12878786611330565b9150915081851115610a365760405162461bcd60e51b815260040161049190612b55565b6040805160808101825288151581528715156020820152600f5462ffffff169181019190915260608101869052610a6f906003906114e2565b9250610a7c600c82611525565b7fdedf81f778c63a97f5a04bfeae9e0e04f18d283b04d930ea7b6af78b6eb50b7687878786604051610ab19493929190612a2f565b60405180910390a1610ac1611550565b50506001600055949350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600c54600d54600e5483565b600f5462ffffff1681565b6001546001600160a01b031690565b600354600090610b2c575060006106d5565b6003546004546106d29190611677565b600080610b556003800154600360040154878787611691565b915091505b935093915050565b60085490565b6002805460408051602060018416156101000260001901909316849004601f81018490048402820184019092528181529291830182828015610beb5780601f10610bc057610100808354040283529160200191610beb565b820191906000526020600020905b815481529060010190602001808311610bce57829003601f168201915b505050505081565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314610c3e5760405162461bcd60e51b815260040161049190612ea1565b60026000541415610c84576040805162461bcd60e51b815260206004820152601f602482015260008051602061313d833981519152604482015290519081900360640190fd5b60026000556040805160208101909152838152610ca3906003906116fe565b60405191935091507f0bb89aa54ed6940a7e7167bd262b2400d63945045ceff1a52a05f2601ed215f190610cdc90849084908790612fb7565b60405180910390a1610cec611550565b60016000559092909150565b600080807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314610d445760405162461bcd60e51b815260040161049190612ea1565b60026000541415610d8a576040805162461bcd60e51b815260206004820152601f602482015260008051602061313d833981519152604482015290519081900360640190fd5b6002600055600554610de257610de27f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000087876117c6565b610e0160036040518060400160405280888152602001878152506118ea565b60405192955090935091507fd7f28048575eead8851d024ead087913957dfb4fd1a02b4d1573f5352a5a2be390610e3d90859085908590612fb7565b60405180910390a1610e4d611550565b60016000819055509250925092565b610e6461132c565b6001600160a01b0316610e75610b0b565b6001600160a01b031614610ebe576040805162461bcd60e51b815260206004820181905260248201526000805160206131a4833981519152604482015290519081900360640190fd5b60026000541415610f04576040805162461bcd60e51b815260206004820152601f602482015260008051602061313d833981519152604482015290519081900360640190fd5b600260005562093a8063ffffffff82161115610f325760405162461bcd60e51b815260040161049190612d22565b600f805469ffffffff0000000000001916600160301b63ffffffff8416021790556040517f5b18da8898c1e492e6bc631eec59d143ebba7f31ca794b668f0bfa9b0d989293906104dd908390612ff5565b7f000000000000000000000000000000000000000000000000000000000000000081565b600954600a54600b5483565b610fbb61132c565b6001600160a01b0316610fcc610b0b565b6001600160a01b031614611015576040805162461bcd60e51b815260206004820181905260248201526000805160206131a4833981519152604482015290519081900360640190fd5b6002600054141561105b576040805162461bcd60e51b815260206004820152601f602482015260008051602061313d833981519152604482015290519081900360640190fd5b60026000556207a120611074604083016020840161292a565b62ffffff1611156110975760405162461bcd60e51b815260040161049190612e0f565b6110a7604082016020830161292a565b62ffffff166110b9602083018361292a565b62ffffff1611156110dc5760405162461bcd60e51b815260040161049190612c2a565b620f42406110f0608083016060840161292a565b62ffffff16106111125760405162461bcd60e51b815260040161049190612b85565b611122608082016060830161292a565b62ffffff16611137606083016040840161292a565b62ffffff16111561115a5760405162461bcd60e51b815260040161049190612f0f565b8060106111678282613043565b507fbe7eee05a638b28e8473a6f87ae310d3123f8a2a7561ce96e140f76125f746129050611198602083018361292a565b6111a8604084016020850161292a565b6111b8606085016040860161292a565b6111c8608086016060870161292a565b6111d860a08701608088016129c2565b6040516104dd959493929190612f7a565b60006111f6848484611330565b50949350505050565b6006546007549091565b61121161132c565b6001600160a01b0316611222610b0b565b6001600160a01b03161461126b576040805162461bcd60e51b815260206004820181905260248201526000805160206131a4833981519152604482015290519081900360640190fd5b6001600160a01b0381166112b05760405162461bcd60e51b815260040180806020018281038252602681526020018061315d6026913960400191505060405180910390fd5b6001546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b803b15155b919050565b42600290910155565b600160601b600590910155565b3390565b600061133a61282d565b60055461134a5760009150610b5a565b6000611354610b1a565b9050611363600c601083611a5d565b9150600061137e836000015184604001516010888b15611b10565b600354600454600f5492935061139d928a908a9062ffffff1686611bbe565b93505050935093915050565b6000806113bd620f42408560400151611d20565b90508360200151156114185760608401516000906113db9083611d52565b855190915015611400576113f986826113f48a82611d67565b611dc1565b9250611412565b61140f87826113f48982611d67565b92505b50611465565b8351156114405760608401516114399087906114348882611e70565b611ec7565b9150611458565b60608401516114559086906114348982611e70565b91505b6114628282611f01565b91505b826111f657600082116111f65760405162461bcd60e51b815260040161049190612cc2565b60006114a46114998585611677565b600160601b84611dc1565b90505b9392505050565b6000806114c48385600001548660020154611dc1565b6114d78486600101548760020154611dc1565b915091509250929050565b60006114f9836000015484600101548460006113a9565b825160208401518554600187015460608701519495506115199486611f16565b60018501559092555090565b60208101516115335761154c565b8051825560208101516001830155604081015160028301555b5050565b600061155a6106ac565b6040805160c0810182526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f0000000000000000000000000000000000000000000000000000000000000000166020820152908101829052600f5462ffffff6301000000820416606083015263ffffffff600160301b820481166080840152600160501b9091041660a08201529091506000908190819061160990600990611fa0565b92509250925082600014156116215750505050611675565b61162c600384612135565b6006546007546040517f318daee0b48d1f6a0542d8cdd35e2593d88c4fb01708f4781609494206d0705192611668928792879287928b92612a5a565b60405180910390a1505050505b565b600061168882600160601b85611dc1565b90505b92915050565b60008060006116b16116a286612234565b6116ab8a612234565b9061227c565b905060006116c16116a286612234565b90506116dc82600160601b6116d58a612234565b91906122e1565b6116ee82600160601b6116d58b612234565b9350935050509550959350505050565b81546001830154600284015483516000938493909290918490611722908584611dc1565b9050600061173588600001518585611dc1565b90506000821180156117475750600081115b6117635760405162461bcd60e51b815260040161049190612db4565b61176d8583611e70565b89556117798482611e70565b60018a0155875160009061178e908590611e70565b90506103e88110156117b25760405162461bcd60e51b815260040161049190612d4f565b60028a015590955093505050509250929050565b60006117d185612385565b905060006117de85612385565b9050600082116118005760405162461bcd60e51b815260040161049190612ed8565b600081116118205760405162461bcd60e51b815260040161049190612bf3565b600061182b8761244c565b905060006118388761244c565b9050604d60ff8316111561185e5760405162461bcd60e51b815260040161049190612af2565b604d60ff821611156118825760405162461bcd60e51b815260040161049190612c8b565b600061189386600160601b89611dc1565b905060006118a48484888886612513565b90506118b7600160601b620186a0611d52565b6118c082612590565b11156118de5760405162461bcd60e51b815260040161049190612c54565b50505050505050505050565b600282015460009081908190818161198b576020860151865160009161191891611913916125b4565b61260d565b9050611926816103e8611e70565b87519092501580159061193d575060008760200151115b80156119495750600082115b6119655760405162461bcd60e51b815260040161049190612abb565b8651808955602088015160018a0181905560028a0192909255955093509150611a569050565b86546001880154875160208901516000916119b0916119ab908686611dc1565b61265e565b905060006119cb8a602001516119ab8c600001518688611dc1565b90506119e66119db838887611dc1565b6119ab838987611dc1565b94506000821180156119f85750600081115b8015611a045750600085115b611a205760405162461bcd60e51b815260040161049190612e72565b611a2a8483611d67565b8b55611a368382611d67565b60018c0155611a458686611d67565b60028c015590975095509193505050505b9250925092565b611a6561282d565b60018401544290808211611a8857505083548152600284015460408201526114a7565b6000611a948383611e70565b8754909150611aa95760408401859052611aff565b855463ffffffff600160601b909104811690600090611acc9084908490611d6716565b9050611af7611adc888584611dc1565b611af18b600201548563ffffffff1685611dc1565b90611d67565b604087015250505b505082825260208201529392505050565b600080611b3d84611b2757855462ffffff16611b36565b85546301000000900462ffffff165b8890611d52565b90506000611b7185611b5c578654600160301b900462ffffff16611b36565b86548890600160481b900462ffffff16611d52565b90508315611b9957611b90611b868984611d67565b6119ab8984611d67565b92505050611bb5565b611b90611ba68984611e70565b611bb08984611e70565b612674565b95945050505050565b600080611bce620f424085611d20565b90506000611bdc89896125b4565b90508615611c66576000611bf582600160601b87611dc1565b90506000611c038b806125b4565b9050808211611c1957600094505050505061055e565b6000611c258383611e70565b90506000611c3d611c368e88611d52565b8e90611d67565b9050611c5b611c4c8288612684565b611c568489612684565b612699565b965050505050611cd5565b6000611c778286600160601b611dc1565b90506000611c858a806125b4565b9050808211611c9b57600094505050505061055e565b6000611ca78383611e70565b90506000611cbf611cb88d88611d52565b8d90611d67565b9050611cce611c4c8288612684565b9650505050505b85611d1457611d11898960405180608001604052808b151581526020016001151581526020018962ffffff1681526020018781525060016113a9565b92505b50509695505050505050565b60008262ffffff168262ffffff161115611d4c5760405162461bcd60e51b815260040161049190612bbc565b50900390565b6000611688838362ffffff16620f4240611dc1565b600082820183811015611688576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000808060001985870986860292508281109083900303905080611df75760008411611dec57600080fd5b5082900490506114a7565b808411611e0357600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b600082821115611d4c576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b6000611ed4848484611dc1565b905060008280611ee057fe5b84860911156114a7576000198110611ef757600080fd5b6001019392505050565b600061168883620f42408462ffffff16611ec7565b6000808615611f60578715611f4257611f2f8685611d67565b9150611f3b8584611e70565b9050611f5b565b611f4c8684611e70565b9150611f588585611d67565b90505b611f95565b8715611f7c57611f708684611d67565b9150611f588585611e70565b611f868685611e70565b9150611f928584611d67565b90505b965096945050505050565b6000806000804290506000611fc2876002015483611e7090919063ffffffff16565b905080611fdb5760008060009450945094505050611a56565b6000611fea8760000151612385565b90506000611ffb8860200151612385565b9050600061200c896000015161244c565b9050600061201d8a6020015161244c565b8b54909150841480156120335750828b60010154145b8061203c575083155b80612045575082155b806120535750604d60ff8316115b806120615750604d60ff8216115b1561207c576000806000985098509850505050505050611a56565b612090858b6080015163ffffffff1661265e565b945061209b856126cb565b97506120ae828286868e60400151612513565b965060006120d56120d08c60600151600160601b611d5290919063ffffffff16565b612234565b90506120ef6120e4828a612710565b60008390039061271f565b97506121186120fd87612234565b8c60a0015163ffffffff168a6122e19092919063ffffffff16565b948c55505050600189015560028801929092555092509250925092565b8061213f5761154c565b600061214a82612590565b905060008213156121ad576001830154600061216b8284600160601b611dc1565b90506121778282611e70565b85600101819055506121a061219582600160601b8860020154611dc1565b600487015490611d67565b6004860155506121ff9050565b825460006121c482846113f4600160601b82611d67565b90506121d08282611e70565b855560028501546121f7906121ec908390600160601b90611dc1565b600387015490611d67565b600386015550505b61222a836005015461222061221b856116ab600160601b612234565b61272f565b600160601b611dc1565b6005840155505050565b6000600160ff1b82106122785760405162461bcd60e51b81526004018080602001828103825260288152602001806131ea6028913960400191505060405180910390fd5b5090565b60008183038183128015906122915750838113155b806122a657506000831280156122a657508381135b6116885760405162461bcd60e51b81526004018080602001828103825260248152602001806132126024913960400191505060405180910390fd5b600080600085126122f257846122fb565b6122fb85612786565b9050600080851261230c5784612315565b61231585612786565b9050600080871280156123285750600086135b8061233e575060008713801561233e5750600086125b61234957600061234c565b60015b9050600061235b848488611dc1565b9050816123705761236b81612234565b612379565b612379816127b2565b98975050505050505050565b60006001600160a01b03821661239d57506001611311565b60408051600481526024810182526020810180516001600160e01b0316634c6afee560e11b179052905160009081906001600160a01b038616906123e29085906129ff565b600060405180830381855afa9150503d806000811461241d576040519150601f19603f3d011682016040523d82523d6000602084013e612422565b606091505b5091509150816124385760009350505050611311565b80806020019051810190611bb5919061295e565b60006001600160a01b03821661246457506000611311565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b179052905160009081906001600160a01b038616906124a99085906129ff565b600060405180830381855afa9150503d80600081146124e4576040519150601f19603f3d011682016040523d82523d6000602084013e6124e9565b606091505b5091509150816124ff5760ff9350505050611311565b80806020019051810190611bb591906129de565b60008160ff8716151580612528575084600114155b156125415761253e818860ff16600a0a87611dc1565b90505b60ff8616151580612553575083600114155b1561256c5761256981858860ff16600a0a611dc1565b90505b61258561257c600160601b612234565b6116ab83612234565b979650505050505050565b6000808212156125ab576125a661221b83612786565b61168b565b61168b8261272f565b6000826125c35750600061168b565b828202828482816125d057fe5b04146116885760405162461bcd60e51b81526004018080602001828103825260218152602001806131836021913960400191505060405180910390fd5b60006003821115612650575080600160028204015b8181101561264a5780915060028182858161263957fe5b04018161264257fe5b049050612622565b50611311565b811561131157506001919050565b600081831061266d5781611688565b5090919050565b60008183101561266d5781611688565b600061168883620f42408462ffffff16611dc1565b600061168860026126c5856126bf6119136126b58860046125b4565b611af18a806125b4565b90611e70565b906127c6565b600064010000000082106122785760405162461bcd60e51b81526004018080602001828103825260268152602001806131c46026913960400191505060405180910390fd5b600081831261266d5781611688565b60008183121561266d5781611688565b600080821215612278576040805162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f736974697665604482015290519081900360640190fd5b6000600160ff1b82136127ab5760405162461bcd60e51b815260040161049190612d7d565b5060000390565b60006127bd82612234565b60000392915050565b600080821161281c576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161282557fe5b049392505050565b60405180606001604052806000815260200160008152602001600081525090565b8035801515811461131157600080fd5b60006020828403121561286f578081fd5b81356001600160a01b0381168114611688578182fd5b600080600060608486031215612899578182fd5b6128a28461284e565b92506128b06020850161284e565b91506128be6040850161284e565b90509250925092565b600080600080608085870312156128dc578081fd5b6128e58561284e565b93506128f36020860161284e565b9250604085013591506129086060860161284e565b905092959194509250565b600060a08284031215612924578081fd5b50919050565b60006020828403121561293b578081fd5b813561168881613116565b600060208284031215612957578081fd5b5035919050565b60006020828403121561296f578081fd5b5051919050565b60008060408385031215612988578182fd5b50508035926020909101359150565b6000806000606084860312156129ab578283fd5b505081359360208301359350604090920135919050565b6000602082840312156129d3578081fd5b81356116888161312a565b6000602082840312156129ef578081fd5b815160ff81168114611688578182fd5b60008251612a11818460208701613006565b9190910192915050565b6001600160a01b0391909116815260200190565b931515845291151560208401526040830152606082015260800190565b918252602082015260400190565b95865263ffffffff94909416602086015260408501929092526060840152608083015260a082015260c00190565b6000602082528251806020840152612aa7816040850160208701613006565b601f01601f19169190910160400192915050565b6020808252601d908201527f504c5f414c3a20696e697469616c206c6971756964697479207a65726f000000604082015260600190565b6020808252601e908201527f464c5f56494c503a20696e76616c6964206261736520646563696d616c730000604082015260600190565b602080825260129082015271504d5f535046523a20746f6f206c6172676560701b604082015260600190565b602080825260169082015275141357d4ce881d1bdbc81b185c99d948185b5bdd5b9d60521b604082015260600190565b6020808252601a908201527f50455f53504c433a20656d6120746f6f206c61726765206c6971000000000000604082015260600190565b6020808252601e908201527f506572704d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252601c908201527f464c5f56494c503a20696e76616c69642071756f746520707269636500000000604082015260600190565b60208082526010908201526f141157d4d41310ce881a5b9d985b1a5960821b604082015260600190565b6020808252601b908201527f464c5f56494c503a20746f6f206661722066726f6d20696e6465780000000000604082015260600190565b6020808252601f908201527f464c5f56494c503a20696e76616c69642071756f746520646563696d616c7300604082015260600190565b602080825260159082015274504c5f53443a206f7574707574206973207a65726f60581b604082015260600190565b602080825260179082015276141357d414ce881d1bdbc81b185c99d948185b5bdd5b9d604a1b604082015260600190565b602080825260139082015272504d5f53464d45533a20746f6f206c6172676560681b604082015260600190565b602080825260149082015273504c5f524c3a206d696e206c697175696469747960601b604082015260600190565b6020808252601c908201527f506572704d6174683a20696e76657273696f6e206f766572666c6f7700000000604082015260600190565b602080825260159082015274504c5f524c3a206f7574707574206973207a65726f60581b604082015260600190565b602080825260129082015271141357d4d19494ce881d1bdbc81cdb585b1b60721b604082015260600190565b6020808252601e908201527f50455f53504c433a20746f6f206c61726765206c69717569646174696f6e0000604082015260600190565b602080825260129082015271504d5f534652533a20746f6f206c6172676560701b604082015260600190565b602080825260159082015274504c5f414c3a206c6971756964697479207a65726f60581b604082015260600190565b6020808252601d908201527f504d5f4f453a2063616c6c6572206973206e6f742065786368616e6765000000604082015260600190565b6020808252601b908201527f464c5f56494c503a20696e76616c696420626173652070726963650000000000604082015260600190565b602080825260149082015273141157d4d41310ce88195b58481a5b9d985b1a5960621b604082015260600190565b602080825260139082015272504d5f53464d50523a20746f6f206c6172676560681b604082015260600190565b62ffffff91909116815260200190565b62ffffff958616815293851660208501529184166040840152909216606082015263ffffffff909116608082015260a00190565b90815260200190565b9283526020830191909152604082015260600190565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b63ffffffff91909116815260200190565b60005b83811015613021578181015183820152602001613009565b83811115613030576000848401525b50505050565b6000813561168b8161312a565b813561304e81613116565b815462ffffff191662ffffff9190911617808255602083013561307081613116565b65ffffff0000008160181b1665ffffff00000019831617915050808255604083013561309b81613116565b62ffffff60301b8160301b1662ffffff60301b1983161791505080825560608301356130c681613116565b62ffffff60481b199190911660489190911b62ffffff60481b1617815561154c6130f260808401613036565b82805463ffffffff60601b191660609290921b63ffffffff60601b16919091179055565b62ffffff8116811461312757600080fd5b50565b63ffffffff8116811461312757600080fdfe5265656e7472616e637947756172643a207265656e7472616e742063616c6c004f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657253616665436173743a2076616c756520646f65736e27742066697420696e203332206269747353616665436173743a2076616c756520646f65736e27742066697420696e20616e20696e743235365369676e6564536166654d6174683a207375627472616374696f6e206f766572666c6f77a2646970667358221220ca1d40f4267a9067edd8aa5ec1aaed1306ba190a88da575c4ddb1247fbab0ba664736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3005,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 290,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4759,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 4768,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "poolInfo",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(PoolInfo)8064_storage"
      },
      {
        "astId": 4770,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "fundingInfo",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(FundingInfo)8051_storage"
      },
      {
        "astId": 4772,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "priceLimitInfo",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(PriceLimitInfo)8071_storage"
      },
      {
        "astId": 4775,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "poolFeeRatio",
        "offset": 0,
        "slot": "15",
        "type": "t_uint24"
      },
      {
        "astId": 4778,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "fundingMaxPremiumRatio",
        "offset": 3,
        "slot": "15",
        "type": "t_uint24"
      },
      {
        "astId": 4781,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "fundingMaxElapsedSec",
        "offset": 6,
        "slot": "15",
        "type": "t_uint32"
      },
      {
        "astId": 4784,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "fundingRolloverSec",
        "offset": 10,
        "slot": "15",
        "type": "t_uint32"
      },
      {
        "astId": 4794,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "priceLimitConfig",
        "offset": 0,
        "slot": "16",
        "type": "t_struct(PriceLimitConfig)8082_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(FundingInfo)8051_storage": {
        "encoding": "inplace",
        "label": "struct MarketStructs.FundingInfo",
        "members": [
          {
            "astId": 8046,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "prevIndexPriceBase",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8048,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "prevIndexPriceQuote",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8050,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "prevIndexPriceTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PoolInfo)8064_storage": {
        "encoding": "inplace",
        "label": "struct MarketStructs.PoolInfo",
        "members": [
          {
            "astId": 8053,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "base",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8055,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "quote",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8057,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "totalLiquidity",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8059,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "cumBasePerLiquidityX96",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8061,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "cumQuotePerLiquidityX96",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 8063,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "baseBalancePerShareX96",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(PriceLimitConfig)8082_storage": {
        "encoding": "inplace",
        "label": "struct MarketStructs.PriceLimitConfig",
        "members": [
          {
            "astId": 8073,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "normalOrderRatio",
            "offset": 0,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 8075,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "liquidationRatio",
            "offset": 3,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 8077,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "emaNormalOrderRatio",
            "offset": 6,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 8079,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "emaLiquidationRatio",
            "offset": 9,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 8081,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "emaSec",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PriceLimitInfo)8071_storage": {
        "encoding": "inplace",
        "label": "struct MarketStructs.PriceLimitInfo",
        "members": [
          {
            "astId": 8066,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "referencePrice",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8068,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "referenceTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8070,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "emaPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}