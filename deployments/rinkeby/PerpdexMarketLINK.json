{
  "address": "0xD51a13554c501b8E657c63871040554aE94e492e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbolArg",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "exchangeArg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceFeedBaseArg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceFeedQuoteArg",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "fundingRateX96",
          "type": "int256"
        }
      ],
      "name": "FundingPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "LiquidityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isBaseToQuote",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isExactInput",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oppositeAmount",
          "type": "uint256"
        }
      ],
      "name": "Swapped",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "baseShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteBalance",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseBalancePerShareX96",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchange",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "prevIndexPriceBase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "prevIndexPriceQuote",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "prevIndexPriceTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingMaxElapsedSec",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingMaxPremiumRatio",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingRolloverSec",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCumDeleveragedPerLiquidityX96",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cumDeleveragedBasePerLiquidityX96",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cumDeleveragedQuotePerLiquidityX96",
          "type": "uint256"
        }
      ],
      "name": "getLiquidityDeleveraged",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "getLiquidityValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarkPriceX96",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getShareMarkPriceX96",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolFeeRatio",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cumDeleveragedBasePerLiquidityX96",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cumDeleveragedQuotePerLiquidityX96",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseBalancePerShareX96",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeedBase",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeedQuote",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "value",
          "type": "uint32"
        }
      ],
      "name": "setFundingMaxElapsedSec",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "setFundingMaxPremiumRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "value",
          "type": "uint32"
        }
      ],
      "name": "setFundingRolloverSec",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "setPoolFeeRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isBaseToQuote",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isExactInput",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "oppositeAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isBaseToQuote",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isExactInput",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "swapDry",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "oppositeAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3ed898d2d96d239ef5c0e2943a7e2a2a245b662ddf49a2e6fccacbb3b204fe2e",
  "receipt": {
    "to": null,
    "from": "0x4B78eCe4AA1be3495713199380635537C5fB2326",
    "contractAddress": "0xD51a13554c501b8E657c63871040554aE94e492e",
    "transactionIndex": 45,
    "gasUsed": "2219964",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000200000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000004000000000000000000000000000000000100000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xa2e45b46f49fce5e762f954f6d62e3f789a6c8b984f02e0a5cfcea25c27f551d",
    "transactionHash": "0x3ed898d2d96d239ef5c0e2943a7e2a2a245b662ddf49a2e6fccacbb3b204fe2e",
    "logs": [
      {
        "transactionIndex": 45,
        "blockNumber": 10803526,
        "transactionHash": "0x3ed898d2d96d239ef5c0e2943a7e2a2a245b662ddf49a2e6fccacbb3b204fe2e",
        "address": "0xD51a13554c501b8E657c63871040554aE94e492e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004b78ece4aa1be3495713199380635537c5fb2326"
        ],
        "data": "0x",
        "logIndex": 112,
        "blockHash": "0xa2e45b46f49fce5e762f954f6d62e3f789a6c8b984f02e0a5cfcea25c27f551d"
      }
    ],
    "blockNumber": 10803526,
    "cumulativeGasUsed": "17848890",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "LINK",
    "0x2aaFC6979b8D18D0d936C86895e84915B50F3569",
    "0x0ae9dD9d67E303FaD1028160DE202DE6e149dcFC",
    "0xBB82625d4b46ae1b4dbF519A56d4A19e2F70d63b"
  ],
  "numDeployments": 4,
  "solcInputHash": "490412bb694cd6dc2ffc2729271c7140",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbolArg\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"exchangeArg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceFeedBaseArg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceFeedQuoteArg\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fundingRateX96\",\"type\":\"int256\"}],\"name\":\"FundingPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBaseToQuote\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExactInput\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oppositeAmount\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteBalance\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseBalancePerShareX96\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"prevIndexPriceBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevIndexPriceQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevIndexPriceTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingMaxElapsedSec\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingMaxPremiumRatio\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingRolloverSec\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCumDeleveragedPerLiquidityX96\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumDeleveragedBasePerLiquidityX96\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumDeleveragedQuotePerLiquidityX96\",\"type\":\"uint256\"}],\"name\":\"getLiquidityDeleveraged\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"getLiquidityValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarkPriceX96\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getShareMarkPriceX96\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFeeRatio\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumDeleveragedBasePerLiquidityX96\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumDeleveragedQuotePerLiquidityX96\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseBalancePerShareX96\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeedBase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeedQuote\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"value\",\"type\":\"uint32\"}],\"name\":\"setFundingMaxElapsedSec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"setFundingMaxPremiumRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"value\",\"type\":\"uint32\"}],\"name\":\"setFundingRolloverSec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"setPoolFeeRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isBaseToQuote\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isExactInput\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"oppositeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isBaseToQuote\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isExactInput\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swapDry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"oppositeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PerpdexMarket.sol\":\"PerpdexMarket\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xd17ac7e1d8f83d20d80e652adfed83da122f3a3c7b69fefa2985d85aebf0a3e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x7b2b8baa20fd60ab4a328c8e34c64a353651b80ba4b5b157cbb61813f6f85d55\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe511530871deaef86692cea9adb6076d26d7b47fd4815ce51af52af981026057\",\"license\":\"MIT\"},\"contracts/PerpdexMarket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { IPerpdexMarket } from \\\"./interface/IPerpdexMarket.sol\\\";\\nimport { MarketStructs } from \\\"./lib/MarketStructs.sol\\\";\\nimport { FundingLibrary } from \\\"./lib/FundingLibrary.sol\\\";\\nimport { PoolLibrary } from \\\"./lib/PoolLibrary.sol\\\";\\n\\ncontract PerpdexMarket is IPerpdexMarket, ReentrancyGuard, Ownable {\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    string public override symbol;\\n    address public immutable override exchange;\\n    address public immutable priceFeedBase;\\n    address public immutable priceFeedQuote;\\n\\n    MarketStructs.PoolInfo public poolInfo;\\n    MarketStructs.FundingInfo public fundingInfo;\\n\\n    uint24 public poolFeeRatio = 3e3;\\n    uint24 public fundingMaxPremiumRatio = 1e4;\\n    uint32 public fundingMaxElapsedSec = 1 days;\\n    uint32 public fundingRolloverSec = 1 days;\\n\\n    modifier onlyExchange() {\\n        require(exchange == msg.sender, \\\"PM_OE: caller is not exchange\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        string memory symbolArg,\\n        address exchangeArg,\\n        address priceFeedBaseArg,\\n        address priceFeedQuoteArg\\n    ) {\\n        require(priceFeedBaseArg == address(0) || priceFeedBaseArg.isContract(), \\\"PM_C: base price feed invalid\\\");\\n        require(priceFeedQuoteArg == address(0) || priceFeedQuoteArg.isContract(), \\\"PM_C: quote price feed invalid\\\");\\n\\n        symbol = symbolArg;\\n        exchange = exchangeArg;\\n        priceFeedBase = priceFeedBaseArg;\\n        priceFeedQuote = priceFeedQuoteArg;\\n\\n        FundingLibrary.initializeFunding(fundingInfo);\\n        PoolLibrary.initializePool(poolInfo);\\n    }\\n\\n    function swap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount\\n    ) external override onlyExchange nonReentrant returns (uint256 oppositeAmount) {\\n        oppositeAmount = PoolLibrary.swap(\\n            poolInfo,\\n            PoolLibrary.SwapParams({\\n                isBaseToQuote: isBaseToQuote,\\n                isExactInput: isExactInput,\\n                amount: amount,\\n                feeRatio: poolFeeRatio\\n            })\\n        );\\n        emit Swapped(isBaseToQuote, isExactInput, amount, oppositeAmount);\\n\\n        _processFunding();\\n    }\\n\\n    function addLiquidity(uint256 baseShare, uint256 quoteBalance)\\n        external\\n        override\\n        onlyExchange\\n        nonReentrant\\n        returns (\\n            uint256 base,\\n            uint256 quote,\\n            uint256 liquidity\\n        )\\n    {\\n        if (poolInfo.totalLiquidity == 0) {\\n            FundingLibrary.validateInitialLiquidityPrice(priceFeedBase, priceFeedQuote, baseShare, quoteBalance);\\n        }\\n\\n        (base, quote, liquidity) = PoolLibrary.addLiquidity(\\n            poolInfo,\\n            PoolLibrary.AddLiquidityParams({ base: baseShare, quote: quoteBalance })\\n        );\\n        emit LiquidityAdded(base, quote, liquidity);\\n\\n        _processFunding();\\n    }\\n\\n    function removeLiquidity(uint256 liquidity)\\n        external\\n        override\\n        onlyExchange\\n        nonReentrant\\n        returns (uint256 base, uint256 quote)\\n    {\\n        (base, quote) = PoolLibrary.removeLiquidity(\\n            poolInfo,\\n            PoolLibrary.RemoveLiquidityParams({ liquidity: liquidity })\\n        );\\n        emit LiquidityRemoved(base, quote, liquidity);\\n\\n        _processFunding();\\n    }\\n\\n    function setPoolFeeRatio(uint24 value) external onlyOwner nonReentrant {\\n        require(value <= 5e4, \\\"PM_SPFR: too large\\\");\\n        poolFeeRatio = value;\\n    }\\n\\n    function setFundingMaxPremiumRatio(uint24 value) external onlyOwner nonReentrant {\\n        require(value <= 1e5, \\\"PM_SFMPR: too large\\\");\\n        fundingMaxPremiumRatio = value;\\n    }\\n\\n    function setFundingMaxElapsedSec(uint32 value) external onlyOwner nonReentrant {\\n        require(value <= 7 days, \\\"PM_SFMES: too large\\\");\\n        fundingMaxElapsedSec = value;\\n    }\\n\\n    function setFundingRolloverSec(uint32 value) external onlyOwner nonReentrant {\\n        require(value <= 7 days, \\\"PM_SFRS: too large\\\");\\n        require(value >= 1 hours, \\\"PM_SFRS: too small\\\");\\n        fundingRolloverSec = value;\\n    }\\n\\n    function swapDry(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount\\n    ) external view override returns (uint256 oppositeAmount) {\\n        oppositeAmount = PoolLibrary.swapDry(\\n            poolInfo.base,\\n            poolInfo.quote,\\n            PoolLibrary.SwapParams({\\n                isBaseToQuote: isBaseToQuote,\\n                isExactInput: isExactInput,\\n                amount: amount,\\n                feeRatio: poolFeeRatio\\n            })\\n        );\\n    }\\n\\n    function getShareMarkPriceX96() external view override returns (uint256) {\\n        return PoolLibrary.getShareMarkPriceX96(poolInfo.base, poolInfo.quote);\\n    }\\n\\n    function getLiquidityValue(uint256 liquidity) external view override returns (uint256, uint256) {\\n        return PoolLibrary.getLiquidityValue(poolInfo, liquidity);\\n    }\\n\\n    function getLiquidityDeleveraged(\\n        uint256 liquidity,\\n        uint256 cumDeleveragedBasePerLiquidityX96,\\n        uint256 cumDeleveragedQuotePerLiquidityX96\\n    ) external view override returns (uint256, uint256) {\\n        return\\n            PoolLibrary.getLiquidityDeleveraged(\\n                poolInfo.cumDeleveragedBasePerLiquidityX96,\\n                poolInfo.cumDeleveragedQuotePerLiquidityX96,\\n                liquidity,\\n                cumDeleveragedBasePerLiquidityX96,\\n                cumDeleveragedQuotePerLiquidityX96\\n            );\\n    }\\n\\n    function getCumDeleveragedPerLiquidityX96() external view override returns (uint256, uint256) {\\n        return (poolInfo.cumDeleveragedBasePerLiquidityX96, poolInfo.cumDeleveragedQuotePerLiquidityX96);\\n    }\\n\\n    function baseBalancePerShareX96() external view override returns (uint256) {\\n        return poolInfo.baseBalancePerShareX96;\\n    }\\n\\n    function getMarkPriceX96() public view override returns (uint256) {\\n        return PoolLibrary.getMarkPriceX96(poolInfo.base, poolInfo.quote, poolInfo.baseBalancePerShareX96);\\n    }\\n\\n    function _processFunding() internal {\\n        int256 fundingRateX96 =\\n            FundingLibrary.processFunding(\\n                fundingInfo,\\n                FundingLibrary.ProcessFundingParams({\\n                    priceFeedBase: priceFeedBase,\\n                    priceFeedQuote: priceFeedQuote,\\n                    markPriceX96: getMarkPriceX96(),\\n                    maxPremiumRatio: fundingMaxPremiumRatio,\\n                    maxElapsedSec: fundingMaxElapsedSec,\\n                    rolloverSec: fundingRolloverSec\\n                })\\n            );\\n        if (fundingRateX96 == 0) return;\\n\\n        PoolLibrary.applyFunding(poolInfo, fundingRateX96);\\n        emit FundingPaid(fundingRateX96);\\n    }\\n}\\n\",\"keccak256\":\"0x3446d32ac1c43bb8cd58697241afff1c22ecdd4bc80112dec7961586358512ef\",\"license\":\"GPL-3.0-or-later\"},\"contracts/amm/uniswap_v2/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe77f3770b9e458f6fd64a82af61d05614d85940acc24cfe448295a74742eed21\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IPerpdexMarket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\ninterface IPerpdexMarket {\\n    event FundingPaid(int256 fundingRateX96);\\n    event LiquidityAdded(uint256 base, uint256 quote, uint256 liquidity);\\n    event LiquidityRemoved(uint256 base, uint256 quote, uint256 liquidity);\\n    event Swapped(bool isBaseToQuote, bool isExactInput, uint256 amount, uint256 oppositeAmount);\\n\\n    function swap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount\\n    ) external returns (uint256);\\n\\n    function addLiquidity(uint256 baseShare, uint256 quoteBalance)\\n        external\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function removeLiquidity(uint256 liquidity) external returns (uint256 baseShare, uint256 quoteBalance);\\n\\n    // getters\\n\\n    function symbol() external view returns (string memory);\\n\\n    function exchange() external view returns (address);\\n\\n    function swapDry(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount\\n    ) external view returns (uint256);\\n\\n    function getMarkPriceX96() external view returns (uint256);\\n\\n    function getShareMarkPriceX96() external view returns (uint256);\\n\\n    function getLiquidityValue(uint256 liquidity) external view returns (uint256 baseShare, uint256 quoteBalance);\\n\\n    function getLiquidityDeleveraged(\\n        uint256 liquidity,\\n        uint256 cumDeleveragedBasePerLiquidityX96,\\n        uint256 cumDeleveragedQuotePerLiquidityX96\\n    ) external view returns (uint256, uint256);\\n\\n    function getCumDeleveragedPerLiquidityX96() external view returns (uint256, uint256);\\n\\n    function baseBalancePerShareX96() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x177a00d4d6c8ca925d38faf8c29d55c03ffb2a183eded75d6376f29306237df1\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IPerpdexPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\ninterface IPerpdexPriceFeed {\\n    function decimals() external view returns (uint8);\\n\\n    /// @dev Returns the index price of the token.\\n    function getPrice() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6289c246a3791213f4bd4cf2a16c8fb6876c403dd627eabea39a092af3834a55\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/FundingLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { Math } from \\\"../amm/uniswap_v2/libraries/Math.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport { MarketStructs } from \\\"./MarketStructs.sol\\\";\\nimport { IPerpdexPriceFeed } from \\\"../interface/IPerpdexPriceFeed.sol\\\";\\nimport { FullMath } from \\\"@uniswap/v3-core/contracts/libraries/FullMath.sol\\\";\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\n\\nlibrary FundingLibrary {\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    struct ProcessFundingParams {\\n        address priceFeedBase;\\n        address priceFeedQuote;\\n        uint256 markPriceX96;\\n        uint24 maxPremiumRatio;\\n        uint32 maxElapsedSec;\\n        uint32 rolloverSec;\\n    }\\n\\n    function initializeFunding(MarketStructs.FundingInfo storage fundingInfo) internal {\\n        fundingInfo.prevIndexPriceTimestamp = block.timestamp;\\n    }\\n\\n    function processFunding(MarketStructs.FundingInfo storage fundingInfo, ProcessFundingParams memory params)\\n        internal\\n        returns (int256 fundingRateX96)\\n    {\\n        uint256 currentTimestamp = block.timestamp;\\n        uint256 elapsedSec = currentTimestamp.sub(fundingInfo.prevIndexPriceTimestamp);\\n        if (elapsedSec == 0) return 0;\\n\\n        uint256 indexPriceBase = _getIndexPrice(params.priceFeedBase);\\n        uint256 indexPriceQuote = _getIndexPrice(params.priceFeedQuote);\\n        if (\\n            (fundingInfo.prevIndexPriceBase == indexPriceBase && fundingInfo.prevIndexPriceQuote == indexPriceQuote) ||\\n            indexPriceBase == 0 ||\\n            indexPriceQuote == 0\\n        ) {\\n            return 0;\\n        }\\n\\n        elapsedSec = Math.min(elapsedSec, params.maxElapsedSec);\\n\\n        int256 premiumX96 =\\n            _calcPremiumX96(\\n                params.priceFeedBase,\\n                params.priceFeedQuote,\\n                indexPriceBase,\\n                indexPriceQuote,\\n                params.markPriceX96\\n            );\\n\\n        int256 maxPremiumX96 = FixedPoint96.Q96.mulRatio(params.maxPremiumRatio).toInt256();\\n        premiumX96 = (-maxPremiumX96).max(maxPremiumX96.min(premiumX96));\\n        fundingRateX96 = premiumX96.mulDiv(elapsedSec.toInt256(), params.rolloverSec);\\n\\n        fundingInfo.prevIndexPriceBase = indexPriceBase;\\n        fundingInfo.prevIndexPriceQuote = indexPriceQuote;\\n        fundingInfo.prevIndexPriceTimestamp = currentTimestamp;\\n    }\\n\\n    function validateInitialLiquidityPrice(\\n        address priceFeedBase,\\n        address priceFeedQuote,\\n        uint256 base,\\n        uint256 quote\\n    ) internal view {\\n        uint256 indexPriceBase = _getIndexPrice(priceFeedBase);\\n        uint256 indexPriceQuote = _getIndexPrice(priceFeedQuote);\\n        require(indexPriceBase > 0, \\\"FL_VILP: invalid base price\\\");\\n        require(indexPriceQuote > 0, \\\"FL_VILP: invalid quote price\\\");\\n\\n        uint256 markPriceX96 = FullMath.mulDiv(quote, FixedPoint96.Q96, base);\\n        int256 premiumX96 =\\n            _calcPremiumX96(priceFeedBase, priceFeedQuote, indexPriceBase, indexPriceQuote, markPriceX96);\\n\\n        require(premiumX96.abs() <= FixedPoint96.Q96.mulRatio(1e5), \\\"FL_VILP: too far from index\\\");\\n    }\\n\\n    function _getIndexPrice(address priceFeed) private view returns (uint256) {\\n        return priceFeed != address(0) ? IPerpdexPriceFeed(priceFeed).getPrice() : 1;\\n    }\\n\\n    function _calcPremiumX96(\\n        address priceFeedBase,\\n        address priceFeedQuote,\\n        uint256 indexPriceBase,\\n        uint256 indexPriceQuote,\\n        uint256 markPriceX96\\n    ) private view returns (int256 premiumX96) {\\n        uint256 priceRatioX96 = markPriceX96;\\n        if (priceFeedBase != address(0)) {\\n            priceRatioX96 = FullMath.mulDiv(\\n                priceRatioX96,\\n                10**IPerpdexPriceFeed(priceFeedBase).decimals(),\\n                indexPriceBase\\n            );\\n        }\\n        if (priceFeedQuote != address(0)) {\\n            priceRatioX96 = FullMath.mulDiv(\\n                priceRatioX96,\\n                indexPriceQuote,\\n                10**IPerpdexPriceFeed(priceFeedQuote).decimals()\\n            );\\n        }\\n        premiumX96 = priceRatioX96.toInt256().sub(FixedPoint96.Q96.toInt256());\\n    }\\n}\\n\",\"keccak256\":\"0xa7b52f7312c0cd6d06c292bcca748caeaa9d636a6d5273c1b903ff6259079aee\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/MarketStructs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nlibrary MarketStructs {\\n    struct FundingInfo {\\n        uint256 prevIndexPriceBase;\\n        uint256 prevIndexPriceQuote;\\n        uint256 prevIndexPriceTimestamp;\\n    }\\n\\n    struct PoolInfo {\\n        uint256 base;\\n        uint256 quote;\\n        uint256 totalLiquidity;\\n        uint256 cumDeleveragedBasePerLiquidityX96;\\n        uint256 cumDeleveragedQuotePerLiquidityX96;\\n        uint256 baseBalancePerShareX96;\\n    }\\n}\\n\",\"keccak256\":\"0x75da4c55844ef081f5ea78c44ef434bef7582e6b39eb1095f573adc6e7f1d36c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PerpMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { FullMath } from \\\"@uniswap/v3-core/contracts/libraries/FullMath.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\n\\nlibrary PerpMath {\\n    using SafeCast for int256;\\n    using SignedSafeMath for int256;\\n    using SafeMath for uint256;\\n\\n    function formatSqrtPriceX96ToPriceX96(uint160 sqrtPriceX96) internal pure returns (uint256) {\\n        return FullMath.mulDiv(sqrtPriceX96, sqrtPriceX96, FixedPoint96.Q96);\\n    }\\n\\n    function formatX10_18ToX96(uint256 valueX10_18) internal pure returns (uint256) {\\n        return FullMath.mulDiv(valueX10_18, FixedPoint96.Q96, 1 ether);\\n    }\\n\\n    function formatX96ToX10_18(uint256 valueX96) internal pure returns (uint256) {\\n        return FullMath.mulDiv(valueX96, 1 ether, FixedPoint96.Q96);\\n    }\\n\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function abs(int256 value) internal pure returns (uint256) {\\n        return value >= 0 ? value.toUint256() : neg256(value).toUint256();\\n    }\\n\\n    function neg256(int256 a) internal pure returns (int256) {\\n        require(a > -2**255, \\\"PerpMath: inversion overflow\\\");\\n        return -a;\\n    }\\n\\n    function neg256(uint256 a) internal pure returns (int256) {\\n        return -SafeCast.toInt256(a);\\n    }\\n\\n    function divBy10_18(int256 value) internal pure returns (int256) {\\n        // no overflow here\\n        return value / (1 ether);\\n    }\\n\\n    function divBy10_18(uint256 value) internal pure returns (uint256) {\\n        // no overflow here\\n        return value / (1 ether);\\n    }\\n\\n    function subRatio(uint24 a, uint24 b) internal pure returns (uint24) {\\n        require(b <= a, \\\"PerpMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    function mulRatio(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return FullMath.mulDiv(value, ratio, 1e6);\\n    }\\n\\n    function divRatio(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return FullMath.mulDiv(value, 1e6, ratio);\\n    }\\n\\n    /// @param denominator cannot be 0 and is checked in FullMath.mulDiv()\\n    function mulDiv(\\n        int256 a,\\n        int256 b,\\n        uint256 denominator\\n    ) internal pure returns (int256 result) {\\n        uint256 unsignedA = a < 0 ? uint256(neg256(a)) : uint256(a);\\n        uint256 unsignedB = b < 0 ? uint256(neg256(b)) : uint256(b);\\n        bool negative = ((a < 0 && b > 0) || (a > 0 && b < 0)) ? true : false;\\n\\n        uint256 unsignedResult = FullMath.mulDiv(unsignedA, unsignedB, denominator);\\n\\n        result = negative ? neg256(unsignedResult) : SafeCast.toInt256(unsignedResult);\\n\\n        return result;\\n    }\\n\\n    function sign(int256 value) internal pure returns (int256) {\\n        return value > 0 ? 1 : (value < 0 ? -1 : int256(0));\\n    }\\n}\\n\",\"keccak256\":\"0xc9009fda84def8c6299f4801b38985c57020634bb1ca79ffc8a4099f2e2c011d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PoolLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { Math } from \\\"../amm/uniswap_v2/libraries/Math.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport { MarketStructs } from \\\"./MarketStructs.sol\\\";\\nimport { FullMath } from \\\"@uniswap/v3-core/contracts/libraries/FullMath.sol\\\";\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\n\\nlibrary PoolLibrary {\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    struct SwapParams {\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n        uint256 amount;\\n        uint24 feeRatio;\\n    }\\n\\n    struct AddLiquidityParams {\\n        uint256 base;\\n        uint256 quote;\\n    }\\n\\n    struct RemoveLiquidityParams {\\n        uint256 liquidity;\\n    }\\n\\n    uint256 public constant MINIMUM_LIQUIDITY = 1e3;\\n\\n    function initializePool(MarketStructs.PoolInfo storage poolInfo) internal {\\n        poolInfo.baseBalancePerShareX96 = FixedPoint96.Q96;\\n    }\\n\\n    function applyFunding(MarketStructs.PoolInfo storage poolInfo, int256 fundingRateX96) internal {\\n        if (fundingRateX96 == 0) return;\\n\\n        if (fundingRateX96 > 0) {\\n            uint256 poolQuote = poolInfo.quote;\\n            uint256 deleveratedQuote = FullMath.mulDiv(poolQuote, fundingRateX96.abs(), FixedPoint96.Q96);\\n            poolInfo.quote = poolQuote.sub(deleveratedQuote);\\n            poolInfo.cumDeleveragedQuotePerLiquidityX96 = poolInfo.cumDeleveragedQuotePerLiquidityX96.add(\\n                FullMath.mulDiv(deleveratedQuote, FixedPoint96.Q96, poolInfo.totalLiquidity)\\n            );\\n        } else {\\n            uint256 poolBase = poolInfo.base;\\n            uint256 deleveratedBase =\\n                poolBase.sub(FullMath.mulDiv(poolBase, FixedPoint96.Q96, FixedPoint96.Q96.add(fundingRateX96.abs())));\\n            poolInfo.base = poolBase.sub(deleveratedBase);\\n            poolInfo.cumDeleveragedBasePerLiquidityX96 = poolInfo.cumDeleveragedBasePerLiquidityX96.add(\\n                FullMath.mulDiv(deleveratedBase, FixedPoint96.Q96, poolInfo.totalLiquidity)\\n            );\\n        }\\n\\n        poolInfo.baseBalancePerShareX96 = FullMath.mulDiv(\\n            poolInfo.baseBalancePerShareX96,\\n            FixedPoint96.Q96.toInt256().sub(fundingRateX96).toUint256(),\\n            FixedPoint96.Q96\\n        );\\n    }\\n\\n    function swap(MarketStructs.PoolInfo storage poolInfo, SwapParams memory params) internal returns (uint256) {\\n        uint256 output = swapDry(poolInfo.base, poolInfo.quote, params);\\n        if (params.isExactInput) {\\n            if (params.isBaseToQuote) {\\n                poolInfo.base = poolInfo.base.add(params.amount);\\n                poolInfo.quote = poolInfo.quote.sub(output);\\n            } else {\\n                poolInfo.base = poolInfo.base.sub(output);\\n                poolInfo.quote = poolInfo.quote.add(params.amount);\\n            }\\n        } else {\\n            if (params.isBaseToQuote) {\\n                poolInfo.base = poolInfo.base.add(output);\\n                poolInfo.quote = poolInfo.quote.sub(params.amount);\\n            } else {\\n                poolInfo.base = poolInfo.base.sub(params.amount);\\n                poolInfo.quote = poolInfo.quote.add(output);\\n            }\\n        }\\n        return output;\\n    }\\n\\n    function addLiquidity(MarketStructs.PoolInfo storage poolInfo, AddLiquidityParams memory params)\\n        internal\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 poolTotalLiquidity = poolInfo.totalLiquidity;\\n        uint256 liquidity;\\n\\n        if (poolTotalLiquidity == 0) {\\n            uint256 totalLiquidity = Math.sqrt(params.base.mul(params.quote));\\n            liquidity = totalLiquidity.sub(MINIMUM_LIQUIDITY);\\n            require(params.base > 0 && params.quote > 0 && liquidity > 0, \\\"PL_AL: initial liquidity zero\\\");\\n\\n            poolInfo.base = params.base;\\n            poolInfo.quote = params.quote;\\n            poolInfo.totalLiquidity = totalLiquidity;\\n            return (params.base, params.quote, liquidity);\\n        }\\n\\n        uint256 poolBase = poolInfo.base;\\n        uint256 poolQuote = poolInfo.quote;\\n\\n        uint256 base = Math.min(params.base, FullMath.mulDiv(params.quote, poolBase, poolQuote));\\n        uint256 quote = Math.min(params.quote, FullMath.mulDiv(params.base, poolQuote, poolBase));\\n        liquidity = Math.min(\\n            FullMath.mulDiv(base, poolTotalLiquidity, poolBase),\\n            FullMath.mulDiv(quote, poolTotalLiquidity, poolQuote)\\n        );\\n        require(base > 0 && quote > 0 && liquidity > 0, \\\"PL_AL: liquidity zero\\\");\\n\\n        poolInfo.base = poolBase.add(base);\\n        poolInfo.quote = poolQuote.add(quote);\\n        poolInfo.totalLiquidity = poolTotalLiquidity.add(liquidity);\\n\\n        return (base, quote, liquidity);\\n    }\\n\\n    function removeLiquidity(MarketStructs.PoolInfo storage poolInfo, RemoveLiquidityParams memory params)\\n        internal\\n        returns (uint256, uint256)\\n    {\\n        uint256 poolBase = poolInfo.base;\\n        uint256 poolQuote = poolInfo.quote;\\n        uint256 poolTotalLiquidity = poolInfo.totalLiquidity;\\n        uint256 base = FullMath.mulDiv(params.liquidity, poolBase, poolTotalLiquidity);\\n        uint256 quote = FullMath.mulDiv(params.liquidity, poolQuote, poolTotalLiquidity);\\n        require(base > 0 && quote > 0, \\\"PL_RL: output is zero\\\");\\n        poolInfo.base = poolBase.sub(base);\\n        poolInfo.quote = poolQuote.sub(quote);\\n        uint256 totalLiquidity = poolTotalLiquidity.sub(params.liquidity);\\n        require(totalLiquidity >= MINIMUM_LIQUIDITY, \\\"PL_RL: min liquidity\\\");\\n        poolInfo.totalLiquidity = totalLiquidity;\\n        return (base, quote);\\n    }\\n\\n    function getLiquidityValue(MarketStructs.PoolInfo storage poolInfo, uint256 liquidity)\\n        internal\\n        view\\n        returns (uint256, uint256)\\n    {\\n        return (\\n            FullMath.mulDiv(liquidity, poolInfo.base, poolInfo.totalLiquidity),\\n            FullMath.mulDiv(liquidity, poolInfo.quote, poolInfo.totalLiquidity)\\n        );\\n    }\\n\\n    function swapDry(\\n        uint256 base,\\n        uint256 quote,\\n        SwapParams memory params\\n    ) internal pure returns (uint256 output) {\\n        uint24 onePlusFeeRatio = 1e6 + params.feeRatio;\\n\\n        if (params.isExactInput) {\\n            uint256 amountDivFee = params.amount.divRatio(onePlusFeeRatio);\\n            if (params.isBaseToQuote) {\\n                output = quote.sub(FullMath.mulDivRoundingUp(base, quote, base.add(amountDivFee)));\\n            } else {\\n                output = base.sub(FullMath.mulDivRoundingUp(base, quote, quote.add(amountDivFee)));\\n            }\\n        } else {\\n            if (params.isBaseToQuote) {\\n                output = FullMath.mulDivRoundingUp(base, quote, quote.sub(params.amount)).sub(base);\\n            } else {\\n                output = FullMath.mulDivRoundingUp(base, quote, base.sub(params.amount)).sub(quote);\\n            }\\n            output = output.mulRatio(onePlusFeeRatio);\\n        }\\n        require(output > 0, \\\"PL_SD: output is zero\\\");\\n    }\\n\\n    function getMarkPriceX96(\\n        uint256 base,\\n        uint256 quote,\\n        uint256 baseBalancePerShareX96\\n    ) internal pure returns (uint256) {\\n        return FullMath.mulDiv(getShareMarkPriceX96(base, quote), FixedPoint96.Q96, baseBalancePerShareX96);\\n    }\\n\\n    function getShareMarkPriceX96(uint256 base, uint256 quote) internal pure returns (uint256) {\\n        return FullMath.mulDiv(quote, FixedPoint96.Q96, base);\\n    }\\n\\n    function getLiquidityDeleveraged(\\n        uint256 poolCumDeleveragedBasePerLiquidityX96,\\n        uint256 poolCumDeleveragedQuotePerLiquidityX96,\\n        uint256 liquidity,\\n        uint256 cumDeleveragedBasePerLiquidityX96,\\n        uint256 cumDeleveragedQuotePerLiquidityX96\\n    ) internal pure returns (uint256, uint256) {\\n        uint256 deleveragedBasePerLiquidityX96 =\\n            poolCumDeleveragedBasePerLiquidityX96.sub(cumDeleveragedBasePerLiquidityX96);\\n        uint256 deleveragedQuotePerLiquidityX96 =\\n            poolCumDeleveragedQuotePerLiquidityX96.sub(cumDeleveragedQuotePerLiquidityX96);\\n\\n        return (\\n            FullMath.mulDiv(liquidity, deleveragedBasePerLiquidityX96, FixedPoint96.Q96),\\n            FullMath.mulDiv(liquidity, deleveragedQuotePerLiquidityX96, FixedPoint96.Q96)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xed812835f7c6c7e039eedbc8b7c878b8b35f4bf5de5fc6d74c4aab2734d130cb\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101795760003560e01c8063823f2b04116100d95780639c8f9f23116100875780639c8f9f231461040f5780639cd441da1461042c5780639d67bf031461046d578063d2f7265a14610490578063dba4915314610498578063f2289752146104a0578063f2fde38b146104a857610179565b8063823f2b041461034157806388e27dfb146103495780638da5cb5b146103515780638ee8fe5d14610359578063933c7979146103615780639482de1a1461038a57806395d89b411461039257610179565b8063630e375f11610136578063630e375f14610281578063715018a6146102ae5780637452fadd146102b657806374f25689146102be5780637640482f146102e05780637661ce1314610316578063796c20b71461031e57610179565b8063017dab941461017e57806301e0df12146101bd5780630e06e4d0146101e1578063186f181e146102055780633aa3e650146102265780635a2f3d0914610246575b600080fd5b6101ab6004803603606081101561019457600080fd5b5080351515906020810135151590604001356104ce565b60408051918252519081900360200190f35b6101df600480360360208110156101d357600080fd5b503562ffffff16610514565b005b6101e9610631565b604080516001600160a01b039092168252519081900360200190f35b61020d610655565b6040805163ffffffff9092168252519081900360200190f35b61022e610668565b6040805162ffffff9092168252519081900360200190f35b61024e61067a565b604080519687526020870195909552858501939093526060850191909152608084015260a0830152519081900360c00190f35b6101ab6004803603606081101561029757600080fd5b50803515159060208101351515906040013561068f565b6101df6107df565b6101ab61088b565b6101df600480360360208110156102d457600080fd5b503562ffffff166108a7565b6102fd600480360360208110156102f657600080fd5b50356109d0565b6040805192835260208301919091528051918290030190f35b61020d6109e7565b6101df6004803603602081101561033457600080fd5b503563ffffffff166109fa565b6101e9610b77565b61022e610b9b565b6101e9610ba6565b6101ab610bb5565b6102fd6004803603606081101561037757600080fd5b5080359060208101359060400135610bc7565b6101ab610bec565b61039a610bf2565b6040805160208082528351818301528351919283929083019185019080838360005b838110156103d45781810151838201526020016103bc565b50505050905090810190601f1680156104015780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102fd6004803603602081101561042557600080fd5b5035610c7d565b61044f6004803603604081101561044257600080fd5b5080359060200135610dab565b60408051938452602084019290925282820152519081900360600190f35b6101df6004803603602081101561048357600080fd5b503563ffffffff16610f37565b6101e9611066565b61044f61108a565b6102fd611096565b6101df600480360360208110156104be57600080fd5b50356001600160a01b03166110a0565b6003546004546040805160808101825286151581528515156020820152908101849052600c5462ffffff16606082015260009261050c9290916111c3565b949350505050565b61051c6112d3565b6001600160a01b031661052d610ba6565b6001600160a01b031614610576576040805162461bcd60e51b815260206004820181905260248201526000805160206123c4833981519152604482015290519081900360640190fd5b600260005414156105bc576040805162461bcd60e51b815260206004820152601f602482015260008051602061233d833981519152604482015290519081900360640190fd5b600260005561c35062ffffff82161115610612576040805162461bcd60e51b8152602060048201526012602482015271504d5f535046523a20746f6f206c6172676560701b604482015290519081900360640190fd5b600c805462ffffff191662ffffff929092169190911790556001600055565b7f000000000000000000000000000000000000000000000000000000000000000081565b600c54600160501b900463ffffffff1681565b600c546301000000900462ffffff1681565b60035460045460055460065460075460085486565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146106fc576040805162461bcd60e51b815260206004820152601d6024820152600080516020612383833981519152604482015290519081900360640190fd5b60026000541415610742576040805162461bcd60e51b815260206004820152601f602482015260008051602061233d833981519152604482015290519081900360640190fd5b60026000556040805160808101825285151581528415156020820152908101839052600c5462ffffff16606082015261077d906003906112d7565b60408051861515815285151560208201528082018590526060810183905290519192507fdedf81f778c63a97f5a04bfeae9e0e04f18d283b04d930ea7b6af78b6eb50b76919081900360800190a16107d36113af565b60016000559392505050565b6107e76112d3565b6001600160a01b03166107f8610ba6565b6001600160a01b031614610841576040805162461bcd60e51b815260206004820181905260248201526000805160206123c4833981519152604482015290519081900360640190fd5b6001546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600180546001600160a01b0319169055565b6003546004546008546000926108a29290916114b3565b905090565b6108af6112d3565b6001600160a01b03166108c0610ba6565b6001600160a01b031614610909576040805162461bcd60e51b815260206004820181905260248201526000805160206123c4833981519152604482015290519081900360640190fd5b6002600054141561094f576040805162461bcd60e51b815260206004820152601f602482015260008051602061233d833981519152604482015290519081900360640190fd5b6002600055620186a062ffffff821611156109a7576040805162461bcd60e51b8152602060048201526013602482015272504d5f53464d50523a20746f6f206c6172676560681b604482015290519081900360640190fd5b600c805462ffffff90921663010000000265ffffff000000199092169190911790556001600055565b6000806109de6003846114d4565b91509150915091565b600c54600160301b900463ffffffff1681565b610a026112d3565b6001600160a01b0316610a13610ba6565b6001600160a01b031614610a5c576040805162461bcd60e51b815260206004820181905260248201526000805160206123c4833981519152604482015290519081900360640190fd5b60026000541415610aa2576040805162461bcd60e51b815260206004820152601f602482015260008051602061233d833981519152604482015290519081900360640190fd5b600260005562093a8063ffffffff82161115610afa576040805162461bcd60e51b8152602060048201526012602482015271504d5f534652533a20746f6f206c6172676560701b604482015290519081900360640190fd5b610e108163ffffffff161015610b4c576040805162461bcd60e51b8152602060048201526012602482015271141357d4d19494ce881d1bdbc81cdb585b1b60721b604482015290519081900360640190fd5b600c805463ffffffff909216600160501b0263ffffffff60501b199092169190911790556001600055565b7f000000000000000000000000000000000000000000000000000000000000000081565b600c5462ffffff1681565b6001546001600160a01b031690565b6003546004546000916108a291611508565b600080610be06003800154600360040154878787611519565b91509150935093915050565b60085490565b6002805460408051602060018416156101000260001901909316849004601f81018490048402820184019092528181529291830182828015610c755780601f10610c4a57610100808354040283529160200191610c75565b820191906000526020600020905b815481529060010190602001808311610c5857829003601f168201915b505050505081565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314610ceb576040805162461bcd60e51b815260206004820152601d6024820152600080516020612383833981519152604482015290519081900360640190fd5b60026000541415610d31576040805162461bcd60e51b815260206004820152601f602482015260008051602061233d833981519152604482015290519081900360640190fd5b60026000556040805160208101909152838152610d5090600390611565565b604080518381526020810183905280820187905290519294509092507f0bb89aa54ed6940a7e7167bd262b2400d63945045ceff1a52a05f2601ed215f1919081900360600190a1610d9f6113af565b60016000559092909150565b600080807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314610e1a576040805162461bcd60e51b815260206004820152601d6024820152600080516020612383833981519152604482015290519081900360640190fd5b60026000541415610e60576040805162461bcd60e51b815260206004820152601f602482015260008051602061233d833981519152604482015290519081900360640190fd5b6002600055600554610eb857610eb87f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000878761162d565b610ed760036040518060400160405280888152602001878152506116ed565b6040805184815260208101849052808201839052905193965091945092507fd7f28048575eead8851d024ead087913957dfb4fd1a02b4d1573f5352a5a2be3919081900360600190a1610f286113af565b60016000819055509250925092565b610f3f6112d3565b6001600160a01b0316610f50610ba6565b6001600160a01b031614610f99576040805162461bcd60e51b815260206004820181905260248201526000805160206123c4833981519152604482015290519081900360640190fd5b60026000541415610fdf576040805162461bcd60e51b815260206004820152601f602482015260008051602061233d833981519152604482015290519081900360640190fd5b600260005562093a8063ffffffff82161115611038576040805162461bcd60e51b8152602060048201526013602482015272504d5f53464d45533a20746f6f206c6172676560681b604482015290519081900360640190fd5b600c805463ffffffff909216600160301b0269ffffffff000000000000199092169190911790556001600055565b7f000000000000000000000000000000000000000000000000000000000000000081565b600954600a54600b5483565b6006546007549091565b6110a86112d3565b6001600160a01b03166110b9610ba6565b6001600160a01b031614611102576040805162461bcd60e51b815260206004820181905260248201526000805160206123c4833981519152604482015290519081900360640190fd5b6001600160a01b0381166111475760405162461bcd60e51b815260040180806020018281038252602681526020018061235d6026913960400191505060405180910390fd5b6001546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b803b15155b919050565b42600290910155565b600160601b600590910155565b60608101516020820151600091620f424001901561123e5760408301516000906111ed9083611860565b84519091501561121c5761121561120e87876112098286611875565b6118cf565b8690611909565b9250611238565b61123561122e87876112098186611875565b8790611909565b92505b506112a2565b8251156112725761126b85611265878761120988604001518a61190990919063ffffffff16565b90611909565b9150611295565b61129284611265878761120988604001518b61190990919063ffffffff16565b91505b61129f8282611966565b91505b600082116112cb5760405162461bcd60e51b81526004016112c290612213565b60405180910390fd5b509392505050565b3390565b6000806112ed84600001548560010154856111c3565b90508260200151156113575782511561132b576040830151845461131091611875565b845560018401546113219082611909565b6001850155611352565b83546113379082611909565b84556040830151600185015461134c91611875565b60018501555b6113a6565b82511561137f57835461136a9082611875565b84556040830151600185015461134c91611909565b6040830151845461138f91611909565b845560018401546113a09082611875565b60018501555b90505b92915050565b600061146460096040518060c001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316815260200161142761088b565b8152600c5462ffffff6301000000820416602083015263ffffffff600160301b820481166040840152600160501b9091041660609091015261197b565b90508061147157506114b1565b61147c600382611ab4565b6040805182815290517f17fe63f809d31aafb4dd2ddd369caefb907bcce929adc2847faa6e06f729ac519181900360200190a1505b565b600061050c6114c28585611508565b600160601b84611bc6565b9392505050565b6000806114ea8385600001548660020154611bc6565b6114fd8486600101548760020154611bc6565b915091509250929050565b60006113a682600160601b85611bc6565b600080806115278886611909565b905060006115358886611909565b90506115468783600160601b611bc6565b6115558883600160601b611bc6565b9350935050509550959350505050565b81546001830154600284015483516000938493909290918490611589908584611bc6565b9050600061159c88600001518585611bc6565b90506000821180156115ae5750600081115b6115ca5760405162461bcd60e51b81526004016112c2906122a7565b6115d48583611909565b89556115e08482611909565b60018a015587516000906115f5908590611909565b90506103e88110156116195760405162461bcd60e51b81526004016112c290612242565b60028a015590955093505050509250929050565b600061163885611c75565b9050600061164585611c75565b9050600082116116675760405162461bcd60e51b81526004016112c290612305565b600081116116875760405162461bcd60e51b81526004016112c2906121a5565b600061169884600160601b87611bc6565b905060006116a98888868686611cfd565b90506116bc600160601b620186a0611966565b6116c582611e4a565b11156116e35760405162461bcd60e51b81526004016112c2906121dc565b5050505050505050565b600282015460009081908190818161178e576020860151865160009161171b9161171691611e6e565b611ec7565b9050611729816103e8611909565b875190925015801590611740575060008760200151115b801561174c5750600082115b6117685760405162461bcd60e51b81526004016112c29061216e565b8651808955602088015160018a0181905560028a01929092559550935091506118599050565b86546001880154875160208901516000916117b3916117ae908686611bc6565b611f18565b905060006117ce8a602001516117ae8c600001518688611bc6565b90506117e96117de838887611bc6565b6117ae838987611bc6565b94506000821180156117fb5750600081115b80156118075750600085115b6118235760405162461bcd60e51b81526004016112c2906122d6565b61182d8483611875565b8b556118398382611875565b60018c01556118488686611875565b60028c015590975095509193505050505b9250925092565b60006113a683620f42408462ffffff16611bc6565b6000828201838110156113a6576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60006118dc848484611bc6565b9050600082806118e857fe5b84860911156114cd5760001981106118ff57600080fd5b6001019392505050565b600082821115611960576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60006113a6838362ffffff16620f4240611bc6565b600282015460009042908290611992908390611909565b9050806119a4576000925050506113a9565b60006119b38560000151611c75565b905060006119c48660200151611c75565b8754909150821480156119da5750808760010154145b806119e3575081155b806119ec575080155b156119fe5760009450505050506113a9565b611a1283876080015163ffffffff16611f18565b92506000611a2f8760000151886020015185858b60400151611cfd565b90506000611a56611a518960600151600160601b61196690919063ffffffff16565b611f2e565b9050611a70611a658284611f76565b600083900390611f85565b9150611a99611a7e86611f2e565b8960a0015163ffffffff1684611f959092919063ffffffff16565b93895550506001870155600286019290925550905092915050565b80611abe57611bc2565b6000811315611b275760018201546000611ae582611adb85611e4a565b600160601b611bc6565b9050611af18282611909565b8460010181905550611b1a611b0f82600160601b8760020154611bc6565b600486015490611875565b600485015550611b959050565b81546000611b5a611b5383600160601b611b4e611b4388611e4a565b600160601b90611875565b611bc6565b8390611909565b9050611b668282611909565b84556002840154611b8d90611b82908390600160601b90611bc6565b600386015490611875565b600385015550505b611bbc8260050154611adb611bb784611bb1600160601b611f2e565b90612039565b61209e565b60058301555b5050565b6000808060001985870986860292508281109083900303905080611bfc5760008411611bf157600080fd5b5082900490506114cd565b808411611c0857600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b60006001600160a01b038216611c8c5760016113a9565b816001600160a01b03166398d5fdca6040518163ffffffff1660e01b815260040160206040518083038186803b158015611cc557600080fd5b505afa158015611cd9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a99190612135565b6000816001600160a01b03871615611d9357611d9081886001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611d4c57600080fd5b505afa158015611d60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d84919061214d565b60ff16600a0a87611bc6565b90505b6001600160a01b03861615611e2657611e238185886001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611de057600080fd5b505afa158015611df4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e18919061214d565b60ff16600a0a611bc6565b90505b611e3f611e36600160601b611f2e565b611bb183611f2e565b979650505050505050565b600080821215611e6557611e60611bb7836120f5565b6113a9565b6113a98261209e565b600082611e7d575060006113a9565b82820282848281611e8a57fe5b04146113a65760405162461bcd60e51b81526004018080602001828103825260218152602001806123a36021913960400191505060405180910390fd5b60006003821115611f0a575080600160028204015b81811015611f0457809150600281828581611ef357fe5b040181611efc57fe5b049050611edc565b506111a8565b81156111a857506001919050565b6000818310611f2757816113a6565b5090919050565b6000600160ff1b8210611f725760405162461bcd60e51b81526004018080602001828103825260288152602001806123e46028913960400191505060405180910390fd5b5090565b6000818312611f2757816113a6565b600081831215611f2757816113a6565b60008060008512611fa65784611faf565b611faf856120f5565b90506000808512611fc05784611fc9565b611fc9856120f5565b905060008087128015611fdc5750600086135b80611ff25750600087138015611ff25750600086125b611ffd576000612000565b60015b9050600061200f848488611bc6565b9050816120245761201f81611f2e565b61202d565b61202d81612121565b98975050505050505050565b600081830381831280159061204e5750838113155b80612063575060008312801561206357508381135b6113a65760405162461bcd60e51b815260040180806020018281038252602481526020018061240c6024913960400191505060405180910390fd5b600080821215611f72576040805162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f736974697665604482015290519081900360640190fd5b6000600160ff1b821361211a5760405162461bcd60e51b81526004016112c290612270565b5060000390565b600061212c82611f2e565b60000392915050565b600060208284031215612146578081fd5b5051919050565b60006020828403121561215e578081fd5b815160ff811681146113a6578182fd5b6020808252601d908201527f504c5f414c3a20696e697469616c206c6971756964697479207a65726f000000604082015260600190565b6020808252601c908201527f464c5f56494c503a20696e76616c69642071756f746520707269636500000000604082015260600190565b6020808252601b908201527f464c5f56494c503a20746f6f206661722066726f6d20696e6465780000000000604082015260600190565b602080825260159082015274504c5f53443a206f7574707574206973207a65726f60581b604082015260600190565b602080825260149082015273504c5f524c3a206d696e206c697175696469747960601b604082015260600190565b6020808252601c908201527f506572704d6174683a20696e76657273696f6e206f766572666c6f7700000000604082015260600190565b602080825260159082015274504c5f524c3a206f7574707574206973207a65726f60581b604082015260600190565b602080825260159082015274504c5f414c3a206c6971756964697479207a65726f60581b604082015260600190565b6020808252601b908201527f464c5f56494c503a20696e76616c69642062617365207072696365000000000060408201526060019056fe5265656e7472616e637947756172643a207265656e7472616e742063616c6c004f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373504d5f4f453a2063616c6c6572206973206e6f742065786368616e6765000000536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657253616665436173743a2076616c756520646f65736e27742066697420696e20616e20696e743235365369676e6564536166654d6174683a207375627472616374696f6e206f766572666c6f77a264697066735822122011fdcf5dbbadf2a5c11d4a63f8c21ce762b6b900f229b9648bfc97f6fc4a261d64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2932,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 290,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4544,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 4553,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "poolInfo",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(PoolInfo)7386_storage"
      },
      {
        "astId": 4555,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "fundingInfo",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(FundingInfo)7373_storage"
      },
      {
        "astId": 4558,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "poolFeeRatio",
        "offset": 0,
        "slot": "12",
        "type": "t_uint24"
      },
      {
        "astId": 4561,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "fundingMaxPremiumRatio",
        "offset": 3,
        "slot": "12",
        "type": "t_uint24"
      },
      {
        "astId": 4564,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "fundingMaxElapsedSec",
        "offset": 6,
        "slot": "12",
        "type": "t_uint32"
      },
      {
        "astId": 4567,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "fundingRolloverSec",
        "offset": 10,
        "slot": "12",
        "type": "t_uint32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(FundingInfo)7373_storage": {
        "encoding": "inplace",
        "label": "struct MarketStructs.FundingInfo",
        "members": [
          {
            "astId": 7368,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "prevIndexPriceBase",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7370,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "prevIndexPriceQuote",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7372,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "prevIndexPriceTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PoolInfo)7386_storage": {
        "encoding": "inplace",
        "label": "struct MarketStructs.PoolInfo",
        "members": [
          {
            "astId": 7375,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "base",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7377,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "quote",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7379,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "totalLiquidity",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7381,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "cumDeleveragedBasePerLiquidityX96",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7383,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "cumDeleveragedQuotePerLiquidityX96",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7385,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "baseBalancePerShareX96",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}