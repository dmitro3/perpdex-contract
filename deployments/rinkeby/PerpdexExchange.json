{
  "address": "0xf5382704abe9252Ae93a37dAeB53324d822b85dF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "settlementTokenArg",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "InsuranceFundTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isMarketAllowed",
          "type": "bool"
        }
      ],
      "name": "IsMarketAllowedChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "base",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "quote",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "liquidity",
          "type": "int256"
        }
      ],
      "name": "LiquidityChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "exchangedPositionSize",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "exchangedPositionNotional",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "openNotional",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "realizedPnl",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceAfterX96",
          "type": "uint256"
        }
      ],
      "name": "PositionChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionNotional",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionSize",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidationFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        }
      ],
      "name": "PositionLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ProtocolFeeTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accountInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "collateralBalance",
              "type": "int256"
            }
          ],
          "internalType": "struct PerpdexStructs.VaultInfo",
          "name": "vaultInfo",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "market",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "base",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quote",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minQuote",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPerpdexExchange.AddLiquidityParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "base",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quote",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPerpdexExchange.AddLiquidityResponse",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getAccountMarkets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "getMakerInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "baseDebtShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quoteDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cumDeleveragedBaseSharePerLiquidityX96",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cumDeleveragedQuotePerLiquidityX96",
              "type": "uint256"
            }
          ],
          "internalType": "struct PerpdexStructs.MakerInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "getOpenPositionNotional",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "getOpenPositionShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "getPositionNotional",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "getPositionShare",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "getTakerInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "baseBalanceShare",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "quoteBalance",
              "type": "int256"
            }
          ],
          "internalType": "struct PerpdexStructs.TakerInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getTotalAccountValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getTotalOpenPositionNotional",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getTotalPositionNotional",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "hasEnoughInitialMargin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "hasEnoughMaintenanceMargin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "imRatio",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "insuranceFundInfo",
      "outputs": [
        {
          "internalType": "int256",
          "name": "balance",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isMarketAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "market",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "oppositeAmountBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPerpdexExchange.LiquidateParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "liquidate",
      "outputs": [
        {
          "internalType": "int256",
          "name": "base",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "quote",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationRewardRatio",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMarketsPerAccount",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mmRatio",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "market",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isBaseToQuote",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isExactInput",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "oppositeAmountBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPerpdexExchange.OpenPositionParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "openPosition",
      "outputs": [
        {
          "internalType": "int256",
          "name": "base",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "quote",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "market",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isBaseToQuote",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isExactInput",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "oppositeAmountBound",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPerpdexExchange.OpenPositionDryParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "openPositionDry",
      "outputs": [
        {
          "internalType": "int256",
          "name": "base",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "quote",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceLimitConfig",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "priceLimitNormalOrderRatio",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "priceLimitLiquidationRatio",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "priceLimitInfos",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "referencePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "referenceBlockNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeRatio",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "market",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minQuote",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPerpdexExchange.RemoveLiquidityParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "maker",
          "type": "address"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "base",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quote",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPerpdexExchange.RemoveLiquidityResponse",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "setImRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setIsMarketAllowed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "setLiquidationRewardRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "value",
          "type": "uint8"
        }
      ],
      "name": "setMaxMarketsPerAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "setMmRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint24",
              "name": "priceLimitNormalOrderRatio",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "priceLimitLiquidationRatio",
              "type": "uint24"
            }
          ],
          "internalType": "struct PerpdexStructs.PriceLimitConfig",
          "name": "value",
          "type": "tuple"
        }
      ],
      "name": "setPriceLimitConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "setProtocolFeeRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settlementToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferInsuranceFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x754f4f6b43361d434e99d4f7a795fdb0e45888884ad631705955c88d65538194",
  "receipt": {
    "to": null,
    "from": "0x4B78eCe4AA1be3495713199380635537C5fB2326",
    "contractAddress": "0xf5382704abe9252Ae93a37dAeB53324d822b85dF",
    "transactionIndex": 22,
    "gasUsed": "5027963",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000200000000000000000000000000000000000000000000800000000000000000000000000000000000000000000010000000000000000004000000000000000000000000000000000000000000000000000000020000021000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x04200d20b77faf94e47c42d24e2641075116e73238fbe388da0402f95e42551d",
    "transactionHash": "0x754f4f6b43361d434e99d4f7a795fdb0e45888884ad631705955c88d65538194",
    "logs": [
      {
        "transactionIndex": 22,
        "blockNumber": 10796753,
        "transactionHash": "0x754f4f6b43361d434e99d4f7a795fdb0e45888884ad631705955c88d65538194",
        "address": "0xf5382704abe9252Ae93a37dAeB53324d822b85dF",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004b78ece4aa1be3495713199380635537c5fb2326"
        ],
        "data": "0x",
        "logIndex": 56,
        "blockHash": "0x04200d20b77faf94e47c42d24e2641075116e73238fbe388da0402f95e42551d"
      }
    ],
    "blockNumber": 10796753,
    "cumulativeGasUsed": "8522001",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000000"
  ],
  "numDeployments": 4,
  "solcInputHash": "423b173af149ed9cd964bbb8243fa373",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"settlementTokenArg\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InsuranceFundTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isMarketAllowed\",\"type\":\"bool\"}],\"name\":\"IsMarketAllowedChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"base\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"quote\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"liquidity\",\"type\":\"int256\"}],\"name\":\"LiquidityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"exchangedPositionSize\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"exchangedPositionNotional\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"openNotional\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"realizedPnl\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceAfterX96\",\"type\":\"uint256\"}],\"name\":\"PositionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionNotional\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"PositionLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeeTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"collateralBalance\",\"type\":\"int256\"}],\"internalType\":\"struct PerpdexStructs.VaultInfo\",\"name\":\"vaultInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IPerpdexExchange.AddLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"internalType\":\"struct IPerpdexExchange.AddLiquidityResponse\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getAccountMarkets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getMakerInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"baseDebtShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumDeleveragedBaseSharePerLiquidityX96\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumDeleveragedQuotePerLiquidityX96\",\"type\":\"uint256\"}],\"internalType\":\"struct PerpdexStructs.MakerInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getOpenPositionNotional\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getOpenPositionShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getPositionNotional\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getPositionShare\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getTakerInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"baseBalanceShare\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quoteBalance\",\"type\":\"int256\"}],\"internalType\":\"struct PerpdexStructs.TakerInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getTotalAccountValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getTotalOpenPositionNotional\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getTotalPositionNotional\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"hasEnoughInitialMargin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"hasEnoughMaintenanceMargin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"imRatio\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insuranceFundInfo\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"balance\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMarketAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oppositeAmountBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IPerpdexExchange.LiquidateParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"base\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quote\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationRewardRatio\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMarketsPerAccount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mmRatio\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBaseToQuote\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isExactInput\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oppositeAmountBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IPerpdexExchange.OpenPositionParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"openPosition\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"base\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quote\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBaseToQuote\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isExactInput\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oppositeAmountBound\",\"type\":\"uint256\"}],\"internalType\":\"struct IPerpdexExchange.OpenPositionDryParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"openPositionDry\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"base\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quote\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceLimitConfig\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"priceLimitNormalOrderRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"priceLimitLiquidationRatio\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"priceLimitInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"referencePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referenceBlockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeRatio\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IPerpdexExchange.RemoveLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"}],\"internalType\":\"struct IPerpdexExchange.RemoveLiquidityResponse\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"setImRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setIsMarketAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"setLiquidationRewardRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"value\",\"type\":\"uint8\"}],\"name\":\"setMaxMarketsPerAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"setMmRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint24\",\"name\":\"priceLimitNormalOrderRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"priceLimitLiquidationRatio\",\"type\":\"uint24\"}],\"internalType\":\"struct PerpdexStructs.PriceLimitConfig\",\"name\":\"value\",\"type\":\"tuple\"}],\"name\":\"setPriceLimitConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"setProtocolFeeRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settlementToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferInsuranceFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PerpdexExchange.sol\":\"PerpdexExchange\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xd17ac7e1d8f83d20d80e652adfed83da122f3a3c7b69fefa2985d85aebf0a3e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x7b2b8baa20fd60ab4a328c8e34c64a353651b80ba4b5b157cbb61813f6f85d55\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe511530871deaef86692cea9adb6076d26d7b47fd4815ce51af52af981026057\",\"license\":\"MIT\"},\"contracts/PerpdexExchange.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IPerpdexExchange } from \\\"./interface/IPerpdexExchange.sol\\\";\\nimport { PerpdexStructs } from \\\"./lib/PerpdexStructs.sol\\\";\\nimport { AccountLibrary } from \\\"./lib/AccountLibrary.sol\\\";\\nimport { MakerLibrary } from \\\"./lib/MakerLibrary.sol\\\";\\nimport { TakerLibrary } from \\\"./lib/TakerLibrary.sol\\\";\\nimport { VaultLibrary } from \\\"./lib/VaultLibrary.sol\\\";\\nimport { PerpMath } from \\\"./lib/PerpMath.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\n\\ncontract PerpdexExchange is IPerpdexExchange, ReentrancyGuard, Ownable {\\n    using Address for address;\\n    using PerpMath for uint256;\\n    using SafeCast for uint256;\\n\\n    // states\\n    // trader\\n    mapping(address => PerpdexStructs.AccountInfo) public override accountInfos;\\n    // market\\n    mapping(address => PerpdexStructs.PriceLimitInfo) public override priceLimitInfos;\\n    PerpdexStructs.InsuranceFundInfo public override insuranceFundInfo;\\n    PerpdexStructs.ProtocolInfo public override protocolInfo;\\n\\n    // config\\n    address public immutable override settlementToken;\\n    PerpdexStructs.PriceLimitConfig public override priceLimitConfig =\\n        PerpdexStructs.PriceLimitConfig({ priceLimitNormalOrderRatio: 5e4, priceLimitLiquidationRatio: 10e4 });\\n    uint8 public override maxMarketsPerAccount = 16;\\n    uint24 public override imRatio = 10e4;\\n    uint24 public override mmRatio = 5e4;\\n    uint24 public override liquidationRewardRatio = 20e4;\\n    uint24 public override protocolFeeRatio = 0;\\n    mapping(address => bool) public override isMarketAllowed;\\n\\n    modifier checkDeadline(uint256 deadline) {\\n        require(block.timestamp <= deadline, \\\"PE_CD: too late\\\");\\n        _;\\n    }\\n\\n    constructor(address settlementTokenArg) {\\n        require(settlementTokenArg == address(0) || settlementTokenArg.isContract(), \\\"PE_C: token address invalid\\\");\\n\\n        settlementToken = settlementTokenArg;\\n    }\\n\\n    function deposit(uint256 amount) external payable override nonReentrant {\\n        address trader = _msgSender();\\n\\n        if (settlementToken == address(0)) {\\n            require(amount == 0, \\\"PE_D: amount not zero\\\");\\n            VaultLibrary.depositEth(accountInfos[trader], msg.value);\\n            emit Deposited(trader, msg.value);\\n        } else {\\n            require(msg.value == 0, \\\"PE_D: msg.value not zero\\\");\\n            VaultLibrary.deposit(\\n                accountInfos[trader],\\n                VaultLibrary.DepositParams({ settlementToken: settlementToken, amount: amount, from: trader })\\n            );\\n            emit Deposited(trader, amount);\\n        }\\n    }\\n\\n    function withdraw(uint256 amount) external override nonReentrant {\\n        address payable trader = _msgSender();\\n\\n        VaultLibrary.withdraw(\\n            accountInfos[trader],\\n            VaultLibrary.WithdrawParams({\\n                settlementToken: settlementToken,\\n                amount: amount,\\n                to: trader,\\n                imRatio: imRatio\\n            })\\n        );\\n        emit Withdrawn(trader, amount);\\n    }\\n\\n    function transferInsuranceFund(uint256 amount) external override onlyOwner nonReentrant {\\n        address trader = _msgSender();\\n        VaultLibrary.transferInsuranceFund(accountInfos[trader], insuranceFundInfo, amount);\\n        emit InsuranceFundTransferred(trader, amount);\\n    }\\n\\n    function transferProtocolFee(uint256 amount) external override onlyOwner nonReentrant {\\n        address trader = _msgSender();\\n        VaultLibrary.transferProtocolFee(accountInfos[trader], protocolInfo, amount);\\n        emit ProtocolFeeTransferred(trader, amount);\\n    }\\n\\n    function openPosition(OpenPositionParams calldata params)\\n        external\\n        override\\n        nonReentrant\\n        checkDeadline(params.deadline)\\n        returns (int256 base, int256 quote)\\n    {\\n        address trader = _msgSender();\\n\\n        TakerLibrary.OpenPositionResponse memory response =\\n            TakerLibrary.openPosition(\\n                accountInfos[trader],\\n                priceLimitInfos[params.market],\\n                protocolInfo,\\n                TakerLibrary.OpenPositionParams({\\n                    market: params.market,\\n                    isBaseToQuote: params.isBaseToQuote,\\n                    isExactInput: params.isExactInput,\\n                    amount: params.amount,\\n                    oppositeAmountBound: params.oppositeAmountBound,\\n                    priceLimitConfig: priceLimitConfig,\\n                    isMarketAllowed: isMarketAllowed[params.market],\\n                    mmRatio: mmRatio,\\n                    imRatio: imRatio,\\n                    maxMarketsPerAccount: maxMarketsPerAccount,\\n                    protocolFeeRatio: protocolFeeRatio\\n                })\\n            );\\n\\n        emit PositionChanged(\\n            trader,\\n            params.market,\\n            response.exchangedBase,\\n            response.exchangedQuote,\\n            accountInfos[trader].takerInfos[params.market].quoteBalance,\\n            response.realizedPnL,\\n            response.priceAfterX96\\n        );\\n\\n        return (response.exchangedBase, response.exchangedQuote);\\n    }\\n\\n    function liquidate(LiquidateParams calldata params)\\n        external\\n        override\\n        nonReentrant\\n        checkDeadline(params.deadline)\\n        returns (int256 base, int256 quote)\\n    {\\n        address trader = params.trader;\\n        address liquidator = _msgSender();\\n\\n        TakerLibrary.LiquidateResponse memory response =\\n            TakerLibrary.liquidate(\\n                accountInfos[trader],\\n                accountInfos[liquidator],\\n                priceLimitInfos[params.market],\\n                protocolInfo,\\n                insuranceFundInfo,\\n                TakerLibrary.LiquidateParams({\\n                    market: params.market,\\n                    amount: params.amount,\\n                    oppositeAmountBound: params.oppositeAmountBound,\\n                    priceLimitConfig: priceLimitConfig,\\n                    mmRatio: mmRatio,\\n                    liquidationRewardRatio: liquidationRewardRatio,\\n                    maxMarketsPerAccount: maxMarketsPerAccount,\\n                    protocolFeeRatio: protocolFeeRatio\\n                })\\n            );\\n\\n        emit PositionChanged(\\n            trader,\\n            params.market,\\n            response.exchangedBase,\\n            response.exchangedQuote,\\n            accountInfos[trader].takerInfos[params.market].quoteBalance,\\n            response.realizedPnL,\\n            response.priceAfterX96\\n        );\\n\\n        return (response.exchangedBase, response.exchangedQuote);\\n    }\\n\\n    function addLiquidity(AddLiquidityParams calldata params)\\n        external\\n        override\\n        nonReentrant\\n        checkDeadline(params.deadline)\\n        returns (AddLiquidityResponse memory)\\n    {\\n        address maker = _msgSender();\\n\\n        MakerLibrary.AddLiquidityResponse memory response =\\n            MakerLibrary.addLiquidity(\\n                accountInfos[maker],\\n                MakerLibrary.AddLiquidityParams({\\n                    market: params.market,\\n                    base: params.base,\\n                    quote: params.quote,\\n                    minBase: params.minBase,\\n                    minQuote: params.minQuote,\\n                    isMarketAllowed: isMarketAllowed[params.market],\\n                    imRatio: imRatio,\\n                    maxMarketsPerAccount: maxMarketsPerAccount\\n                })\\n            );\\n\\n        emit LiquidityChanged(\\n            maker,\\n            params.market,\\n            response.base.toInt256(),\\n            response.quote.toInt256(),\\n            response.liquidity.toInt256()\\n        );\\n\\n        return AddLiquidityResponse({ base: response.base, quote: response.quote, liquidity: response.liquidity });\\n    }\\n\\n    function removeLiquidity(RemoveLiquidityParams calldata params, address maker)\\n        external\\n        override\\n        nonReentrant\\n        checkDeadline(params.deadline)\\n        returns (RemoveLiquidityResponse memory)\\n    {\\n        MakerLibrary.RemoveLiquidityResponse memory response =\\n            MakerLibrary.removeLiquidity(\\n                accountInfos[maker],\\n                MakerLibrary.RemoveLiquidityParams({\\n                    market: params.market,\\n                    liquidity: params.liquidity,\\n                    minBase: params.minBase,\\n                    minQuote: params.minQuote,\\n                    makerIsSender: maker == _msgSender(),\\n                    mmRatio: mmRatio,\\n                    maxMarketsPerAccount: maxMarketsPerAccount\\n                })\\n            );\\n\\n        emit LiquidityChanged(\\n            maker,\\n            params.market,\\n            response.base.neg256(),\\n            response.quote.neg256(),\\n            params.liquidity.neg256()\\n        );\\n\\n        emit PositionChanged(\\n            maker,\\n            params.market,\\n            response.takerBase, // exchangedPositionSize\\n            response.takerQuote, // exchangedPositionNotional\\n            accountInfos[maker].takerInfos[params.market].quoteBalance,\\n            response.realizedPnL, // realizedPnl\\n            response.priceAfterX96\\n        );\\n\\n        return RemoveLiquidityResponse({ base: response.base, quote: response.quote });\\n    }\\n\\n    function setPriceLimitConfig(PerpdexStructs.PriceLimitConfig calldata value)\\n        external\\n        override\\n        onlyOwner\\n        nonReentrant\\n    {\\n        require(value.priceLimitLiquidationRatio <= 5e5, \\\"PE_SPLC: too large liquidation\\\");\\n        require(value.priceLimitNormalOrderRatio <= value.priceLimitLiquidationRatio, \\\"PE_SPLC: invalid\\\");\\n        priceLimitConfig = value;\\n    }\\n\\n    function setMaxMarketsPerAccount(uint8 value) external override onlyOwner nonReentrant {\\n        maxMarketsPerAccount = value;\\n    }\\n\\n    function setImRatio(uint24 value) external override onlyOwner nonReentrant {\\n        require(value < 1e6, \\\"PE_SIR: too large\\\");\\n        require(value >= mmRatio, \\\"PE_SIR: smaller than mmRatio\\\");\\n        imRatio = value;\\n    }\\n\\n    function setMmRatio(uint24 value) external override onlyOwner nonReentrant {\\n        require(value <= imRatio, \\\"PE_SMR: bigger than imRatio\\\");\\n        require(value > 0, \\\"PE_SMR: zero\\\");\\n        mmRatio = value;\\n    }\\n\\n    function setLiquidationRewardRatio(uint24 value) external override onlyOwner nonReentrant {\\n        require(value < 1e6, \\\"PE_SLRR: too large\\\");\\n        liquidationRewardRatio = value;\\n    }\\n\\n    function setProtocolFeeRatio(uint24 value) external override onlyOwner nonReentrant {\\n        require(value <= 1e4, \\\"PE_SPFR: too large\\\");\\n        protocolFeeRatio = value;\\n    }\\n\\n    function setIsMarketAllowed(address market, bool value) external override onlyOwner nonReentrant {\\n        require(market.isContract(), \\\"PE_SIMA: market address invalid\\\");\\n        if (isMarketAllowed[market] != value) {\\n            isMarketAllowed[market] = value;\\n            emit IsMarketAllowedChanged(market, value);\\n        }\\n    }\\n\\n    //\\n    // EXTERNAL VIEW\\n    //\\n\\n    // all raw information can be retrieved through getters (including default getters)\\n\\n    function getTakerInfo(address trader, address market)\\n        external\\n        view\\n        override\\n        returns (PerpdexStructs.TakerInfo memory)\\n    {\\n        return accountInfos[trader].takerInfos[market];\\n    }\\n\\n    function getMakerInfo(address trader, address market)\\n        external\\n        view\\n        override\\n        returns (PerpdexStructs.MakerInfo memory)\\n    {\\n        return accountInfos[trader].makerInfos[market];\\n    }\\n\\n    function getAccountMarkets(address trader) external view override returns (address[] memory) {\\n        return accountInfos[trader].markets;\\n    }\\n\\n    // dry run\\n\\n    function openPositionDry(OpenPositionDryParams calldata params, address trader)\\n        external\\n        view\\n        override\\n        returns (int256 base, int256 quote)\\n    {\\n        TakerLibrary.OpenPositionResponse memory response =\\n            TakerLibrary.openPositionDry(\\n                accountInfos[trader],\\n                priceLimitInfos[params.market],\\n                TakerLibrary.OpenPositionParams({\\n                    market: params.market,\\n                    isBaseToQuote: params.isBaseToQuote,\\n                    isExactInput: params.isExactInput,\\n                    amount: params.amount,\\n                    oppositeAmountBound: params.oppositeAmountBound,\\n                    priceLimitConfig: priceLimitConfig,\\n                    isMarketAllowed: isMarketAllowed[params.market],\\n                    mmRatio: mmRatio,\\n                    imRatio: imRatio,\\n                    maxMarketsPerAccount: maxMarketsPerAccount,\\n                    protocolFeeRatio: protocolFeeRatio\\n                })\\n            );\\n\\n        return (response.exchangedBase, response.exchangedQuote);\\n    }\\n\\n    // convenient getters\\n\\n    function getTotalAccountValue(address trader) external view override returns (int256) {\\n        return AccountLibrary.getTotalAccountValue(accountInfos[trader]);\\n    }\\n\\n    function getPositionShare(address trader, address market) external view override returns (int256) {\\n        return AccountLibrary.getPositionShare(accountInfos[trader], market);\\n    }\\n\\n    function getPositionNotional(address trader, address market) external view override returns (int256) {\\n        return AccountLibrary.getPositionNotional(accountInfos[trader], market);\\n    }\\n\\n    function getTotalPositionNotional(address trader) external view override returns (uint256) {\\n        return AccountLibrary.getTotalPositionNotional(accountInfos[trader]);\\n    }\\n\\n    function getOpenPositionShare(address trader, address market) external view override returns (uint256) {\\n        return AccountLibrary.getOpenPositionShare(accountInfos[trader], market);\\n    }\\n\\n    function getOpenPositionNotional(address trader, address market) external view override returns (uint256) {\\n        return AccountLibrary.getOpenPositionNotional(accountInfos[trader], market);\\n    }\\n\\n    function getTotalOpenPositionNotional(address trader) external view override returns (uint256) {\\n        return AccountLibrary.getTotalOpenPositionNotional(accountInfos[trader]);\\n    }\\n\\n    function hasEnoughMaintenanceMargin(address trader) external view override returns (bool) {\\n        return AccountLibrary.hasEnoughMaintenanceMargin(accountInfos[trader], mmRatio);\\n    }\\n\\n    function hasEnoughInitialMargin(address trader) external view override returns (bool) {\\n        return AccountLibrary.hasEnoughInitialMargin(accountInfos[trader], imRatio);\\n    }\\n}\\n\",\"keccak256\":\"0x87a630dc02d3bcd48546d9ded0e1e752890773a330591648632c575d867344ee\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.7.6;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x0ded61799fbba3a2364d09ceee767ec9f1df2b474afa560ff032f34916aee6cb\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IPerpdexExchange.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { PerpdexStructs } from \\\"../lib/PerpdexStructs.sol\\\";\\n\\ninterface IPerpdexExchange {\\n    struct AddLiquidityParams {\\n        address market;\\n        uint256 base;\\n        uint256 quote;\\n        uint256 minBase;\\n        uint256 minQuote;\\n        uint256 deadline;\\n    }\\n\\n    struct RemoveLiquidityParams {\\n        address market;\\n        uint256 liquidity;\\n        uint256 minBase;\\n        uint256 minQuote;\\n        uint256 deadline;\\n    }\\n\\n    struct AddLiquidityResponse {\\n        uint256 base;\\n        uint256 quote;\\n        uint256 liquidity;\\n    }\\n\\n    struct RemoveLiquidityResponse {\\n        uint256 base;\\n        uint256 quote;\\n    }\\n\\n    struct OpenPositionParams {\\n        address market;\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n        uint256 amount;\\n        uint256 oppositeAmountBound;\\n        uint256 deadline;\\n    }\\n\\n    struct OpenPositionDryParams {\\n        address market;\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n        uint256 amount;\\n        uint256 oppositeAmountBound;\\n    }\\n\\n    struct LiquidateParams {\\n        address trader;\\n        address market;\\n        uint256 amount;\\n        uint256 oppositeAmountBound;\\n        uint256 deadline;\\n    }\\n\\n    event Deposited(address indexed trader, uint256 amount);\\n    event Withdrawn(address indexed trader, uint256 amount);\\n    event InsuranceFundTransferred(address indexed trader, uint256 amount);\\n    event ProtocolFeeTransferred(address indexed trader, uint256 amount);\\n\\n    event PositionLiquidated(\\n        address indexed trader,\\n        address indexed market,\\n        uint256 positionNotional,\\n        uint256 positionSize,\\n        uint256 liquidationFee,\\n        address liquidator\\n    );\\n\\n    event LiquidityChanged(address indexed maker, address indexed market, int256 base, int256 quote, int256 liquidity);\\n\\n    event PositionChanged(\\n        address indexed trader,\\n        address indexed market,\\n        int256 exchangedPositionSize,\\n        int256 exchangedPositionNotional,\\n        int256 openNotional,\\n        int256 realizedPnl,\\n        uint256 priceAfterX96\\n    );\\n\\n    event IsMarketAllowedChanged(address indexed market, bool isMarketAllowed);\\n\\n    function deposit(uint256 amount) external payable;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function transferInsuranceFund(uint256 amount) external;\\n\\n    function transferProtocolFee(uint256 amount) external;\\n\\n    function addLiquidity(AddLiquidityParams calldata params) external returns (AddLiquidityResponse memory);\\n\\n    function removeLiquidity(RemoveLiquidityParams calldata params, address maker)\\n        external\\n        returns (RemoveLiquidityResponse memory response);\\n\\n    function openPosition(OpenPositionParams calldata params) external returns (int256 base, int256 quote);\\n\\n    function liquidate(LiquidateParams calldata params) external returns (int256 base, int256 quote);\\n\\n    // setters\\n\\n    function setPriceLimitConfig(PerpdexStructs.PriceLimitConfig calldata value) external;\\n\\n    function setMaxMarketsPerAccount(uint8 value) external;\\n\\n    function setImRatio(uint24 value) external;\\n\\n    function setMmRatio(uint24 value) external;\\n\\n    function setLiquidationRewardRatio(uint24 value) external;\\n\\n    function setProtocolFeeRatio(uint24 value) external;\\n\\n    function setIsMarketAllowed(address market, bool value) external;\\n\\n    // dry run getters\\n\\n    function openPositionDry(OpenPositionDryParams calldata params, address trader)\\n        external\\n        view\\n        returns (int256 base, int256 quote);\\n\\n    // default getters\\n\\n    function accountInfos(address trader) external view returns (PerpdexStructs.VaultInfo memory);\\n\\n    function priceLimitInfos(address market)\\n        external\\n        view\\n        returns (uint256 referencePrice, uint256 referenceBlockNumber);\\n\\n    function insuranceFundInfo() external view returns (int256 balance);\\n\\n    function protocolInfo() external view returns (uint256 protocolFee);\\n\\n    function settlementToken() external view returns (address);\\n\\n    function priceLimitConfig()\\n        external\\n        view\\n        returns (uint24 priceLimitNormalOrderRatio, uint24 priceLimitLiquidationRatio);\\n\\n    function maxMarketsPerAccount() external view returns (uint8);\\n\\n    function imRatio() external view returns (uint24);\\n\\n    function mmRatio() external view returns (uint24);\\n\\n    function liquidationRewardRatio() external view returns (uint24);\\n\\n    function protocolFeeRatio() external view returns (uint24);\\n\\n    function isMarketAllowed(address market) external view returns (bool);\\n\\n    // getters not covered by default getters\\n\\n    function getTakerInfo(address trader, address market) external view returns (PerpdexStructs.TakerInfo memory);\\n\\n    function getMakerInfo(address trader, address market) external view returns (PerpdexStructs.MakerInfo memory);\\n\\n    function getAccountMarkets(address trader) external view returns (address[] memory);\\n\\n    // convenient getters\\n\\n    function getTotalAccountValue(address trader) external view returns (int256);\\n\\n    function getPositionShare(address trader, address market) external view returns (int256);\\n\\n    function getPositionNotional(address trader, address market) external view returns (int256);\\n\\n    function getTotalPositionNotional(address trader) external view returns (uint256);\\n\\n    function getOpenPositionShare(address trader, address market) external view returns (uint256);\\n\\n    function getOpenPositionNotional(address trader, address market) external view returns (uint256);\\n\\n    function getTotalOpenPositionNotional(address trader) external view returns (uint256);\\n\\n    function hasEnoughMaintenanceMargin(address trader) external view returns (bool);\\n\\n    function hasEnoughInitialMargin(address trader) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf71cae348cbfe2404d7067cdec802feabf9d57ce16398982cbd957dc0c200261\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IPerpdexMarket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\ninterface IPerpdexMarket {\\n    event FundingPaid(int256 fundingRateX96);\\n    event LiquidityAdded(uint256 base, uint256 quote, uint256 liquidity);\\n    event LiquidityRemoved(uint256 base, uint256 quote, uint256 liquidity);\\n    event Swapped(bool isBaseToQuote, bool isExactInput, uint256 amount, uint256 oppositeAmount);\\n\\n    function swap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount\\n    ) external returns (uint256);\\n\\n    function addLiquidity(uint256 baseShare, uint256 quoteBalance)\\n        external\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function removeLiquidity(uint256 liquidity) external returns (uint256 baseShare, uint256 quoteBalance);\\n\\n    // getters\\n\\n    function symbol() external view returns (string memory);\\n\\n    function exchange() external view returns (address);\\n\\n    function swapDry(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount\\n    ) external view returns (uint256);\\n\\n    function getMarkPriceX96() external view returns (uint256);\\n\\n    function getShareMarkPriceX96() external view returns (uint256);\\n\\n    function getLiquidityValue(uint256 liquidity) external view returns (uint256 baseShare, uint256 quoteBalance);\\n\\n    function getLiquidityDeleveraged(\\n        uint256 liquidity,\\n        uint256 cumDeleveragedBasePerLiquidityX96,\\n        uint256 cumDeleveragedQuotePerLiquidityX96\\n    ) external view returns (uint256, uint256);\\n\\n    function getCumDeleveragedPerLiquidityX96() external view returns (uint256, uint256);\\n\\n    function baseBalancePerShareX96() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x177a00d4d6c8ca925d38faf8c29d55c03ffb2a183eded75d6376f29306237df1\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/AccountLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\nimport { FullMath } from \\\"@uniswap/v3-core/contracts/libraries/FullMath.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport { IPerpdexMarket } from \\\"../interface/IPerpdexMarket.sol\\\";\\nimport { PerpdexStructs } from \\\"./PerpdexStructs.sol\\\";\\n\\n// https://help.ftx.com/hc/en-us/articles/360024780511-Complete-Futures-Specs\\nlibrary AccountLibrary {\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    function updateMarkets(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address market,\\n        uint8 maxMarketsPerAccount\\n    ) internal {\\n        require(market != address(0), \\\"AL_UP: market address is zero\\\");\\n\\n        bool enabled =\\n            accountInfo.takerInfos[market].baseBalanceShare != 0 || accountInfo.makerInfos[market].liquidity != 0;\\n        address[] storage markets = accountInfo.markets;\\n        uint256 length = markets.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            if (markets[i] == market) {\\n                if (!enabled) {\\n                    markets[i] = markets[length - 1];\\n                    markets.pop();\\n                }\\n                return;\\n            }\\n        }\\n        markets.push(market);\\n        require(markets.length <= maxMarketsPerAccount, \\\"AL_UP: too many markets\\\");\\n    }\\n\\n    function getTotalAccountValue(PerpdexStructs.AccountInfo storage accountInfo) internal view returns (int256) {\\n        address[] storage markets = accountInfo.markets;\\n        int256 accountValue = accountInfo.vaultInfo.collateralBalance;\\n        uint256 length = markets.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            address market = markets[i];\\n\\n            PerpdexStructs.MakerInfo storage makerInfo = accountInfo.makerInfos[market];\\n            int256 baseShare = accountInfo.takerInfos[market].baseBalanceShare.sub(makerInfo.baseDebtShare.toInt256());\\n            int256 quoteBalance = accountInfo.takerInfos[market].quoteBalance.sub(makerInfo.quoteDebt.toInt256());\\n\\n            if (makerInfo.liquidity != 0) {\\n                (uint256 poolBaseShare, uint256 poolQuoteBalance) =\\n                    IPerpdexMarket(market).getLiquidityValue(makerInfo.liquidity);\\n                (uint256 deleveragedBaseShare, uint256 deleveragedQuoteBalance) =\\n                    IPerpdexMarket(market).getLiquidityDeleveraged(\\n                        makerInfo.liquidity,\\n                        makerInfo.cumDeleveragedBaseSharePerLiquidityX96,\\n                        makerInfo.cumDeleveragedQuotePerLiquidityX96\\n                    );\\n                baseShare = baseShare.add(poolBaseShare.add(deleveragedBaseShare).toInt256());\\n                quoteBalance = quoteBalance.add(poolQuoteBalance.add(deleveragedQuoteBalance).toInt256());\\n            }\\n\\n            if (baseShare != 0) {\\n                uint256 sharePriceX96 = IPerpdexMarket(market).getShareMarkPriceX96();\\n                accountValue = accountValue.add(baseShare.mulDiv(sharePriceX96.toInt256(), FixedPoint96.Q96));\\n            }\\n            accountValue = accountValue.add(quoteBalance);\\n        }\\n        return accountValue;\\n    }\\n\\n    function getPositionShare(PerpdexStructs.AccountInfo storage accountInfo, address market)\\n        internal\\n        view\\n        returns (int256 baseShare)\\n    {\\n        PerpdexStructs.MakerInfo storage makerInfo = accountInfo.makerInfos[market];\\n        baseShare = accountInfo.takerInfos[market].baseBalanceShare.sub(makerInfo.baseDebtShare.toInt256());\\n        if (makerInfo.liquidity != 0) {\\n            (uint256 poolBaseShare, ) = IPerpdexMarket(market).getLiquidityValue(makerInfo.liquidity);\\n            (uint256 deleveragedBaseShare, ) =\\n                IPerpdexMarket(market).getLiquidityDeleveraged(\\n                    makerInfo.liquidity,\\n                    makerInfo.cumDeleveragedBaseSharePerLiquidityX96,\\n                    makerInfo.cumDeleveragedQuotePerLiquidityX96\\n                );\\n            baseShare = baseShare.add(poolBaseShare.add(deleveragedBaseShare).toInt256());\\n        }\\n    }\\n\\n    function getPositionNotional(PerpdexStructs.AccountInfo storage accountInfo, address market)\\n        internal\\n        view\\n        returns (int256)\\n    {\\n        int256 positionShare = getPositionShare(accountInfo, market);\\n        if (positionShare == 0) return 0;\\n        uint256 sharePriceX96 = IPerpdexMarket(market).getShareMarkPriceX96();\\n        return positionShare.mulDiv(sharePriceX96.toInt256(), FixedPoint96.Q96);\\n    }\\n\\n    function getTotalPositionNotional(PerpdexStructs.AccountInfo storage accountInfo) internal view returns (uint256) {\\n        address[] storage markets = accountInfo.markets;\\n        uint256 totalPositionNotional;\\n        uint256 length = markets.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            uint256 positionNotional = getPositionNotional(accountInfo, markets[i]).abs();\\n            totalPositionNotional = totalPositionNotional.add(positionNotional);\\n        }\\n        return totalPositionNotional;\\n    }\\n\\n    function getOpenPositionShare(PerpdexStructs.AccountInfo storage accountInfo, address market)\\n        internal\\n        view\\n        returns (uint256 result)\\n    {\\n        PerpdexStructs.MakerInfo storage makerInfo = accountInfo.makerInfos[market];\\n        result = getPositionShare(accountInfo, market).abs();\\n        if (makerInfo.liquidity != 0) {\\n            (uint256 poolBaseShare, ) = IPerpdexMarket(market).getLiquidityValue(makerInfo.liquidity);\\n            result = result.add(poolBaseShare);\\n        }\\n    }\\n\\n    function getOpenPositionNotional(PerpdexStructs.AccountInfo storage accountInfo, address market)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 positionShare = getOpenPositionShare(accountInfo, market);\\n        if (positionShare == 0) return 0;\\n        uint256 sharePriceX96 = IPerpdexMarket(market).getShareMarkPriceX96();\\n        return FullMath.mulDiv(positionShare, sharePriceX96, FixedPoint96.Q96);\\n    }\\n\\n    function getTotalOpenPositionNotional(PerpdexStructs.AccountInfo storage accountInfo)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        address[] storage markets = accountInfo.markets;\\n        uint256 totalOpenPositionNotional;\\n        uint256 length = markets.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            uint256 positionNotional = getOpenPositionNotional(accountInfo, markets[i]);\\n            totalOpenPositionNotional = totalOpenPositionNotional.add(positionNotional);\\n        }\\n        return totalOpenPositionNotional;\\n    }\\n\\n    // always true when hasEnoughMaintenanceMargin is true\\n    function hasEnoughMaintenanceMargin(PerpdexStructs.AccountInfo storage accountInfo, uint24 mmRatio)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        int256 accountValue = getTotalAccountValue(accountInfo);\\n        uint256 totalPositionNotional = getTotalPositionNotional(accountInfo);\\n        return accountValue >= totalPositionNotional.mulRatio(mmRatio).toInt256();\\n    }\\n\\n    function hasEnoughInitialMargin(PerpdexStructs.AccountInfo storage accountInfo, uint24 imRatio)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        int256 accountValue = getTotalAccountValue(accountInfo);\\n        uint256 totalOpenPositionNotional = getTotalOpenPositionNotional(accountInfo);\\n        return\\n            accountValue.min(accountInfo.vaultInfo.collateralBalance) >=\\n            totalOpenPositionNotional.mulRatio(imRatio).toInt256();\\n    }\\n}\\n\",\"keccak256\":\"0x8ed4c638cfbb9d873c0fc478c779a47bc8a16c1a745dd29327e2388c87ca5b72\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/MakerLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { FullMath } from \\\"@uniswap/v3-core/contracts/libraries/FullMath.sol\\\";\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport { IPerpdexMarket } from \\\"../interface/IPerpdexMarket.sol\\\";\\nimport { MarketLibrary } from \\\"./MarketLibrary.sol\\\";\\nimport { PerpdexStructs } from \\\"./PerpdexStructs.sol\\\";\\nimport { AccountLibrary } from \\\"./AccountLibrary.sol\\\";\\nimport { TakerLibrary } from \\\"./TakerLibrary.sol\\\";\\n\\nlibrary MakerLibrary {\\n    using PerpMath for int256;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    struct AddLiquidityParams {\\n        address market;\\n        uint256 base;\\n        uint256 quote;\\n        uint256 minBase;\\n        uint256 minQuote;\\n        bool isMarketAllowed;\\n        uint24 imRatio;\\n        uint8 maxMarketsPerAccount;\\n    }\\n\\n    struct AddLiquidityResponse {\\n        uint256 base;\\n        uint256 quote;\\n        uint256 liquidity;\\n    }\\n\\n    struct RemoveLiquidityParams {\\n        address market;\\n        uint256 liquidity;\\n        uint256 minBase;\\n        uint256 minQuote;\\n        bool makerIsSender;\\n        uint24 mmRatio;\\n        uint8 maxMarketsPerAccount;\\n    }\\n\\n    struct RemoveLiquidityResponse {\\n        uint256 base;\\n        uint256 quote;\\n        int256 takerBase;\\n        int256 takerQuote;\\n        int256 realizedPnL;\\n        uint256 priceAfterX96;\\n    }\\n\\n    function addLiquidity(PerpdexStructs.AccountInfo storage accountInfo, AddLiquidityParams memory params)\\n        internal\\n        returns (AddLiquidityResponse memory)\\n    {\\n        require(params.isMarketAllowed, \\\"ML_AL: add liquidity forbidden\\\");\\n\\n        PerpdexStructs.MakerInfo storage makerInfo = accountInfo.makerInfos[params.market];\\n        _applyDeleveraged(makerInfo, params.market);\\n\\n        (uint256 baseShare, uint256 quoteBalance, uint256 liquidity) =\\n            IPerpdexMarket(params.market).addLiquidity(params.base, params.quote);\\n\\n        require(baseShare >= params.minBase, \\\"ML_AL: too small output base\\\");\\n        require(quoteBalance >= params.minQuote, \\\"ML_AL: too small output quote\\\");\\n\\n        (uint256 cumDeleveragedBaseSharePerLiquidityX96, uint256 cumDeleveragedQuotePerLiquidityX96) =\\n            IPerpdexMarket(params.market).getCumDeleveragedPerLiquidityX96();\\n\\n        makerInfo.baseDebtShare = makerInfo.baseDebtShare.add(baseShare);\\n        makerInfo.quoteDebt = makerInfo.quoteDebt.add(quoteBalance);\\n        makerInfo.liquidity = makerInfo.liquidity.add(liquidity);\\n        makerInfo.cumDeleveragedBaseSharePerLiquidityX96 = cumDeleveragedBaseSharePerLiquidityX96;\\n        makerInfo.cumDeleveragedQuotePerLiquidityX96 = cumDeleveragedQuotePerLiquidityX96;\\n\\n        AccountLibrary.updateMarkets(accountInfo, params.market, params.maxMarketsPerAccount);\\n\\n        require(AccountLibrary.hasEnoughInitialMargin(accountInfo, params.imRatio), \\\"ML_AL: not enough im\\\");\\n\\n        return AddLiquidityResponse({ base: baseShare, quote: quoteBalance, liquidity: liquidity });\\n    }\\n\\n    function removeLiquidity(PerpdexStructs.AccountInfo storage accountInfo, RemoveLiquidityParams memory params)\\n        internal\\n        returns (RemoveLiquidityResponse memory funcResponse)\\n    {\\n        if (!params.makerIsSender) {\\n            require(!AccountLibrary.hasEnoughMaintenanceMargin(accountInfo, params.mmRatio), \\\"ML_RL: enough mm\\\");\\n        }\\n\\n        {\\n            _applyDeleveraged(accountInfo.makerInfos[params.market], params.market);\\n        }\\n\\n        {\\n            (uint256 resBaseShare, uint256 resQuoteBalance) =\\n                IPerpdexMarket(params.market).removeLiquidity(params.liquidity);\\n\\n            require(resBaseShare >= params.minBase, \\\"ML_RL: too small output base\\\");\\n            require(resQuoteBalance >= params.minQuote, \\\"ML_RL: too small output base\\\");\\n\\n            funcResponse.base = resBaseShare;\\n            funcResponse.quote = resQuoteBalance;\\n        }\\n\\n        {\\n            (uint256 cumDeleveragedBaseSharePerLiquidityX96, uint256 cumDeleveragedQuotePerLiquidityX96) =\\n                IPerpdexMarket(params.market).getCumDeleveragedPerLiquidityX96();\\n\\n            PerpdexStructs.MakerInfo storage makerInfo = accountInfo.makerInfos[params.market];\\n            makerInfo.cumDeleveragedBaseSharePerLiquidityX96 = cumDeleveragedBaseSharePerLiquidityX96;\\n            makerInfo.cumDeleveragedQuotePerLiquidityX96 = cumDeleveragedQuotePerLiquidityX96;\\n        }\\n\\n        {\\n            (uint256 baseDebtShare, uint256 quoteDebt) =\\n                _removeLiquidityFromOrder(accountInfo.makerInfos[params.market], params.liquidity);\\n            AccountLibrary.updateMarkets(accountInfo, params.market, params.maxMarketsPerAccount);\\n\\n            funcResponse.priceAfterX96 = IPerpdexMarket(params.market).getMarkPriceX96();\\n            funcResponse.takerBase = funcResponse.base.toInt256().sub(baseDebtShare.toInt256());\\n            funcResponse.takerQuote = funcResponse.quote.toInt256().sub(quoteDebt.toInt256());\\n        }\\n\\n        {\\n            int256 takerQuoteCalculatedAtCurrentPrice =\\n                -funcResponse.takerBase.mulDiv(funcResponse.priceAfterX96.toInt256(), FixedPoint96.Q96);\\n            funcResponse.realizedPnL = TakerLibrary.addToTakerBalance(\\n                accountInfo,\\n                params.market,\\n                funcResponse.takerBase,\\n                takerQuoteCalculatedAtCurrentPrice,\\n                funcResponse.takerQuote.sub(takerQuoteCalculatedAtCurrentPrice),\\n                params.maxMarketsPerAccount\\n            );\\n        }\\n    }\\n\\n    function _applyDeleveraged(PerpdexStructs.MakerInfo storage makerInfo, address market) private {\\n        (uint256 deleveragedBaseShare, uint256 deleveragedQuoteBalance) =\\n            IPerpdexMarket(market).getLiquidityDeleveraged(\\n                makerInfo.liquidity,\\n                makerInfo.cumDeleveragedBaseSharePerLiquidityX96,\\n                makerInfo.cumDeleveragedQuotePerLiquidityX96\\n            );\\n        makerInfo.baseDebtShare = makerInfo.baseDebtShare.sub(deleveragedBaseShare);\\n        makerInfo.quoteDebt = makerInfo.quoteDebt.sub(deleveragedQuoteBalance);\\n    }\\n\\n    function _removeLiquidityFromOrder(PerpdexStructs.MakerInfo storage makerInfo, uint256 liquidity)\\n        private\\n        returns (uint256 baseDebtShare, uint256 quoteDebt)\\n    {\\n        if (liquidity != 0) {\\n            if (makerInfo.baseDebtShare != 0) {\\n                baseDebtShare = FullMath.mulDiv(makerInfo.baseDebtShare, liquidity, makerInfo.liquidity);\\n                makerInfo.baseDebtShare = makerInfo.baseDebtShare.sub(baseDebtShare);\\n            }\\n            if (makerInfo.quoteDebt != 0) {\\n                quoteDebt = FullMath.mulDiv(makerInfo.quoteDebt, liquidity, makerInfo.liquidity);\\n                makerInfo.quoteDebt = makerInfo.quoteDebt.sub(quoteDebt);\\n            }\\n            makerInfo.liquidity = makerInfo.liquidity.sub(liquidity);\\n        }\\n\\n        return (baseDebtShare, quoteDebt);\\n    }\\n}\\n\",\"keccak256\":\"0x64f1d2c091c52d70730ac5a4088d46f4139466d2d56c7304ee02e4357bfbd829\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/MarketLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nimport { IPerpdexMarket } from \\\"../interface/IPerpdexMarket.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\n\\nlibrary MarketLibrary {\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using SafeCast for uint256;\\n\\n    function swap(\\n        address market,\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount\\n    ) internal returns (int256, int256) {\\n        uint256 resAmount = IPerpdexMarket(market).swap(isBaseToQuote, isExactInput, amount);\\n        return _processSwapResponse(isBaseToQuote, isExactInput, amount, resAmount);\\n    }\\n\\n    function swapDry(\\n        address market,\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount\\n    ) internal view returns (int256, int256) {\\n        uint256 resAmount = IPerpdexMarket(market).swapDry(isBaseToQuote, isExactInput, amount);\\n        return _processSwapResponse(isBaseToQuote, isExactInput, amount, resAmount);\\n    }\\n\\n    function _processSwapResponse(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        uint256 resAmount\\n    ) private pure returns (int256, int256) {\\n        if (isExactInput) {\\n            if (isBaseToQuote) {\\n                return (amount.neg256(), resAmount.toInt256());\\n            } else {\\n                return (resAmount.toInt256(), amount.neg256());\\n            }\\n        } else {\\n            if (isBaseToQuote) {\\n                return (resAmount.neg256(), amount.toInt256());\\n            } else {\\n                return (amount.toInt256(), resAmount.neg256());\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7f7e1e18ea1125c517902bc24bf2b559617cc445363ab44b41973d27f970f477\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PerpMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { FullMath } from \\\"@uniswap/v3-core/contracts/libraries/FullMath.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\n\\nlibrary PerpMath {\\n    using SafeCast for int256;\\n    using SignedSafeMath for int256;\\n    using SafeMath for uint256;\\n\\n    function formatSqrtPriceX96ToPriceX96(uint160 sqrtPriceX96) internal pure returns (uint256) {\\n        return FullMath.mulDiv(sqrtPriceX96, sqrtPriceX96, FixedPoint96.Q96);\\n    }\\n\\n    function formatX10_18ToX96(uint256 valueX10_18) internal pure returns (uint256) {\\n        return FullMath.mulDiv(valueX10_18, FixedPoint96.Q96, 1 ether);\\n    }\\n\\n    function formatX96ToX10_18(uint256 valueX96) internal pure returns (uint256) {\\n        return FullMath.mulDiv(valueX96, 1 ether, FixedPoint96.Q96);\\n    }\\n\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function abs(int256 value) internal pure returns (uint256) {\\n        return value >= 0 ? value.toUint256() : neg256(value).toUint256();\\n    }\\n\\n    function neg256(int256 a) internal pure returns (int256) {\\n        require(a > -2**255, \\\"PerpMath: inversion overflow\\\");\\n        return -a;\\n    }\\n\\n    function neg256(uint256 a) internal pure returns (int256) {\\n        return -SafeCast.toInt256(a);\\n    }\\n\\n    function divBy10_18(int256 value) internal pure returns (int256) {\\n        // no overflow here\\n        return value / (1 ether);\\n    }\\n\\n    function divBy10_18(uint256 value) internal pure returns (uint256) {\\n        // no overflow here\\n        return value / (1 ether);\\n    }\\n\\n    function mulRatio(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return FullMath.mulDiv(value, ratio, 1e6);\\n    }\\n\\n    function divRatio(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return FullMath.mulDiv(value, 1e6, ratio);\\n    }\\n\\n    /// @param denominator cannot be 0 and is checked in FullMath.mulDiv()\\n    function mulDiv(\\n        int256 a,\\n        int256 b,\\n        uint256 denominator\\n    ) internal pure returns (int256 result) {\\n        uint256 unsignedA = a < 0 ? uint256(neg256(a)) : uint256(a);\\n        uint256 unsignedB = b < 0 ? uint256(neg256(b)) : uint256(b);\\n        bool negative = ((a < 0 && b > 0) || (a > 0 && b < 0)) ? true : false;\\n\\n        uint256 unsignedResult = FullMath.mulDiv(unsignedA, unsignedB, denominator);\\n\\n        result = negative ? neg256(unsignedResult) : SafeCast.toInt256(unsignedResult);\\n\\n        return result;\\n    }\\n\\n    function sign(int256 value) internal pure returns (int256) {\\n        return value > 0 ? 1 : (value < 0 ? -1 : int256(0));\\n    }\\n}\\n\",\"keccak256\":\"0x0e99eb79ee0891c26fca3243dac32a6455fd7fa3c601632ab49985dc1f90b08c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PerpdexStructs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\n\\nlibrary PerpdexStructs {\\n    struct TakerInfo {\\n        int256 baseBalanceShare;\\n        int256 quoteBalance;\\n    }\\n\\n    struct MakerInfo {\\n        uint256 baseDebtShare;\\n        uint256 quoteDebt;\\n        uint256 liquidity;\\n        uint256 cumDeleveragedBaseSharePerLiquidityX96;\\n        uint256 cumDeleveragedQuotePerLiquidityX96;\\n    }\\n\\n    struct VaultInfo {\\n        int256 collateralBalance;\\n    }\\n\\n    struct AccountInfo {\\n        // market\\n        mapping(address => TakerInfo) takerInfos;\\n        // market\\n        mapping(address => MakerInfo) makerInfos;\\n        VaultInfo vaultInfo;\\n        address[] markets;\\n    }\\n\\n    struct InsuranceFundInfo {\\n        int256 balance;\\n    }\\n\\n    struct ProtocolInfo {\\n        uint256 protocolFee;\\n    }\\n\\n    struct PriceLimitInfo {\\n        uint256 referencePrice;\\n        uint256 referenceBlockNumber;\\n    }\\n\\n    struct PriceLimitConfig {\\n        uint24 priceLimitNormalOrderRatio;\\n        uint24 priceLimitLiquidationRatio;\\n    }\\n}\\n\",\"keccak256\":\"0xe72b4408a19e329fa85174d813dbe6a339b45cd93f63295377e5ac3086e795a8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PriceLimitLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { PerpdexStructs } from \\\"./PerpdexStructs.sol\\\";\\n\\nlibrary PriceLimitLibrary {\\n    using PerpMath for uint256;\\n    using SafeMath for uint256;\\n\\n    // should call before all price changes\\n    function update(PerpdexStructs.PriceLimitInfo storage priceLimitInfo, uint256 price) internal {\\n        if (priceLimitInfo.referenceBlockNumber < block.number) {\\n            priceLimitInfo.referencePrice = price;\\n            priceLimitInfo.referenceBlockNumber = block.number;\\n        }\\n    }\\n\\n    function isNormalOrderAllowed(\\n        PerpdexStructs.PriceLimitInfo storage priceLimitInfo,\\n        PerpdexStructs.PriceLimitConfig memory config,\\n        uint256 price\\n    ) internal view returns (bool) {\\n        return _isWithinPriceLimit(priceLimitInfo.referencePrice, price, config.priceLimitNormalOrderRatio);\\n    }\\n\\n    function isLiquidationAllowed(\\n        PerpdexStructs.PriceLimitInfo storage priceLimitInfo,\\n        PerpdexStructs.PriceLimitConfig memory config,\\n        uint256 price\\n    ) internal view returns (bool) {\\n        return _isWithinPriceLimit(priceLimitInfo.referencePrice, price, config.priceLimitLiquidationRatio);\\n    }\\n\\n    function _isWithinPriceLimit(\\n        uint256 referencePrice,\\n        uint256 price,\\n        uint24 priceLimitRatio\\n    ) private pure returns (bool) {\\n        uint256 maxChange = referencePrice.mulRatio(priceLimitRatio);\\n        uint256 upperBound = referencePrice.add(maxChange);\\n        uint256 lowerBound = referencePrice.sub(maxChange);\\n        return (lowerBound <= price && price <= upperBound);\\n    }\\n}\\n\",\"keccak256\":\"0x4b4001bfb9379641d6b6b56e1960a7a511560b326d582f3a3077d671a6c1d12c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/TakerLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\nimport { FullMath } from \\\"@uniswap/v3-core/contracts/libraries/FullMath.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport { IPerpdexMarket } from \\\"../interface/IPerpdexMarket.sol\\\";\\nimport { MarketLibrary } from \\\"./MarketLibrary.sol\\\";\\nimport { PerpdexStructs } from \\\"./PerpdexStructs.sol\\\";\\nimport { AccountLibrary } from \\\"./AccountLibrary.sol\\\";\\nimport { PriceLimitLibrary } from \\\"./PriceLimitLibrary.sol\\\";\\n\\nlibrary TakerLibrary {\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    struct OpenPositionParams {\\n        address market;\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n        uint256 amount;\\n        uint256 oppositeAmountBound;\\n        PerpdexStructs.PriceLimitConfig priceLimitConfig;\\n        bool isMarketAllowed;\\n        uint24 mmRatio;\\n        uint24 imRatio;\\n        uint8 maxMarketsPerAccount;\\n        uint24 protocolFeeRatio;\\n    }\\n\\n    struct OpenPositionResponse {\\n        int256 exchangedBase;\\n        int256 exchangedQuote;\\n        int256 realizedPnL;\\n        uint256 priceAfterX96;\\n    }\\n\\n    struct LiquidateParams {\\n        address market;\\n        uint256 amount;\\n        uint256 oppositeAmountBound;\\n        PerpdexStructs.PriceLimitConfig priceLimitConfig;\\n        uint24 mmRatio;\\n        uint24 liquidationRewardRatio;\\n        uint8 maxMarketsPerAccount;\\n        uint24 protocolFeeRatio;\\n    }\\n\\n    struct LiquidateResponse {\\n        int256 exchangedBase;\\n        int256 exchangedQuote;\\n        int256 realizedPnL;\\n        uint256 priceAfterX96;\\n    }\\n\\n    function openPosition(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        PerpdexStructs.PriceLimitInfo storage priceLimitInfo,\\n        PerpdexStructs.ProtocolInfo storage protocolInfo,\\n        OpenPositionParams memory params\\n    ) internal returns (OpenPositionResponse memory) {\\n        require(AccountLibrary.hasEnoughMaintenanceMargin(accountInfo, params.mmRatio), \\\"TL_OP: not enough mm\\\");\\n\\n        (int256 exchangedBase, int256 exchangedQuote, int256 realizedPnL) =\\n            _doSwap(\\n                accountInfo,\\n                priceLimitInfo,\\n                protocolInfo,\\n                params.market,\\n                params.isBaseToQuote,\\n                params.isExactInput,\\n                params.amount,\\n                params.oppositeAmountBound,\\n                params.maxMarketsPerAccount,\\n                params.protocolFeeRatio\\n            );\\n\\n        if (!params.isMarketAllowed) {\\n            require(\\n                accountInfo.takerInfos[params.market].baseBalanceShare.sign() * exchangedBase.sign() <= 0,\\n                \\\"TL_OP: open is forbidden\\\"\\n            );\\n        }\\n\\n        uint256 priceAfterX96 = _getPriceX96(params.market);\\n        require(\\n            PriceLimitLibrary.isNormalOrderAllowed(priceLimitInfo, params.priceLimitConfig, priceAfterX96),\\n            \\\"TL_OP: normal order forbidden\\\"\\n        );\\n\\n        require(AccountLibrary.hasEnoughInitialMargin(accountInfo, params.imRatio), \\\"TL_OP: not enough im\\\");\\n\\n        return\\n            OpenPositionResponse({\\n                exchangedBase: exchangedBase,\\n                exchangedQuote: exchangedQuote,\\n                realizedPnL: realizedPnL,\\n                priceAfterX96: priceAfterX96\\n            });\\n    }\\n\\n    function liquidate(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        PerpdexStructs.AccountInfo storage liquidatorAccountInfo,\\n        PerpdexStructs.PriceLimitInfo storage priceLimitInfo,\\n        PerpdexStructs.ProtocolInfo storage protocolInfo,\\n        PerpdexStructs.InsuranceFundInfo storage insuranceFundInfo,\\n        LiquidateParams memory params\\n    ) internal returns (LiquidateResponse memory result) {\\n        require(!AccountLibrary.hasEnoughMaintenanceMargin(accountInfo, params.mmRatio), \\\"TL_L: enough mm\\\");\\n\\n        bool isLong;\\n        {\\n            PerpdexStructs.TakerInfo storage takerInfo = accountInfo.takerInfos[params.market];\\n            isLong = takerInfo.baseBalanceShare > 0 ? true : false;\\n            require(params.amount <= takerInfo.baseBalanceShare.abs(), \\\"TL_L: too large amount\\\");\\n        }\\n\\n        (result.exchangedBase, result.exchangedQuote, result.realizedPnL) = _doSwap(\\n            accountInfo,\\n            priceLimitInfo,\\n            protocolInfo,\\n            params.market,\\n            isLong, // isBaseToQuote,\\n            isLong, // isExactInput,\\n            params.amount,\\n            params.oppositeAmountBound,\\n            params.maxMarketsPerAccount,\\n            params.protocolFeeRatio\\n        );\\n\\n        result.priceAfterX96 = _getPriceX96(params.market);\\n        require(\\n            PriceLimitLibrary.isLiquidationAllowed(priceLimitInfo, params.priceLimitConfig, result.priceAfterX96),\\n            \\\"TL_L: liquidation forbidden\\\"\\n        );\\n\\n        _processLiquidationFee(\\n            accountInfo.vaultInfo,\\n            liquidatorAccountInfo.vaultInfo,\\n            insuranceFundInfo,\\n            params.mmRatio,\\n            params.liquidationRewardRatio,\\n            result.exchangedQuote.abs()\\n        );\\n    }\\n\\n    function addToTakerBalance(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address market,\\n        int256 baseShare,\\n        int256 quoteBalance,\\n        int256 quoteFee,\\n        uint8 maxMarketsPerAccount\\n    ) internal returns (int256) {\\n        require(baseShare.sign() * quoteBalance.sign() == -1, \\\"TL_ATTB: invalid input\\\");\\n\\n        PerpdexStructs.TakerInfo storage takerInfo = accountInfo.takerInfos[market];\\n\\n        int256 realizedPnL;\\n\\n        if (takerInfo.baseBalanceShare.sign() * baseShare.sign() == -1) {\\n            uint256 FULLY_CLOSED_RATIO = 1e18;\\n            uint256 closedRatio =\\n                FullMath.mulDiv(baseShare.abs(), FULLY_CLOSED_RATIO, takerInfo.baseBalanceShare.abs());\\n\\n            if (closedRatio <= FULLY_CLOSED_RATIO) {\\n                int256 reducedOpenNotional = takerInfo.quoteBalance.mulDiv(closedRatio.toInt256(), FULLY_CLOSED_RATIO);\\n                realizedPnL = quoteBalance.add(reducedOpenNotional).add(quoteFee);\\n            } else {\\n                int256 closedPositionNotional = quoteBalance.mulDiv(int256(FULLY_CLOSED_RATIO), closedRatio);\\n                realizedPnL = takerInfo.quoteBalance.add(closedPositionNotional).add(quoteFee);\\n            }\\n        } else {\\n            realizedPnL = quoteFee;\\n        }\\n\\n        takerInfo.baseBalanceShare = takerInfo.baseBalanceShare.add(baseShare);\\n        takerInfo.quoteBalance = takerInfo.quoteBalance.add(quoteBalance).add(quoteFee).sub(realizedPnL);\\n        accountInfo.vaultInfo.collateralBalance = accountInfo.vaultInfo.collateralBalance.add(realizedPnL);\\n\\n        AccountLibrary.updateMarkets(accountInfo, market, maxMarketsPerAccount);\\n\\n        return realizedPnL;\\n    }\\n\\n    function openPositionDry(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        PerpdexStructs.PriceLimitInfo storage priceLimitInfo,\\n        OpenPositionParams memory params\\n    ) internal view returns (OpenPositionResponse memory) {\\n        require(AccountLibrary.hasEnoughMaintenanceMargin(accountInfo, params.mmRatio), \\\"TL_OPD: not enough mm\\\");\\n\\n        (int256 exchangedBase, int256 exchangedQuote) =\\n            _doSwapDry(\\n                accountInfo,\\n                priceLimitInfo,\\n                params.market,\\n                params.isBaseToQuote,\\n                params.isExactInput,\\n                params.amount,\\n                params.oppositeAmountBound,\\n                params.protocolFeeRatio\\n            );\\n\\n        if (!params.isMarketAllowed) {\\n            require(\\n                accountInfo.takerInfos[params.market].baseBalanceShare.sign() * exchangedBase.sign() <= 0,\\n                \\\"TL_OPD: open is forbidden\\\"\\n            );\\n        }\\n\\n        // disable price limit\\n\\n        require(AccountLibrary.hasEnoughInitialMargin(accountInfo, params.imRatio), \\\"TL_OPD: not enough im\\\");\\n\\n        return\\n            OpenPositionResponse({\\n                exchangedBase: exchangedBase,\\n                exchangedQuote: exchangedQuote,\\n                realizedPnL: 0,\\n                priceAfterX96: 0\\n            });\\n    }\\n\\n    function _doSwap(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        PerpdexStructs.PriceLimitInfo storage priceLimitInfo,\\n        PerpdexStructs.ProtocolInfo storage protocolInfo,\\n        address market,\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        uint256 oppositeAmountBound,\\n        uint8 maxMarketsPerAccount,\\n        uint24 protocolFeeRatio\\n    )\\n        private\\n        returns (\\n            int256 base,\\n            int256 quote,\\n            int256 realizedPnL\\n        )\\n    {\\n        {\\n            uint256 priceBeforeX96 = _getPriceX96(market);\\n            PriceLimitLibrary.update(priceLimitInfo, priceBeforeX96);\\n        }\\n\\n        if (protocolFeeRatio > 0) {\\n            (base, quote) = _swapWithProtocolFee(\\n                protocolInfo,\\n                market,\\n                isBaseToQuote,\\n                isExactInput,\\n                amount,\\n                protocolFeeRatio\\n            );\\n        } else {\\n            (base, quote) = MarketLibrary.swap(market, isBaseToQuote, isExactInput, amount);\\n        }\\n\\n        _validateSlippage(isBaseToQuote, isExactInput, base, quote, oppositeAmountBound);\\n\\n        realizedPnL = addToTakerBalance(accountInfo, market, base, quote, 0, maxMarketsPerAccount);\\n    }\\n\\n    function _swapWithProtocolFee(\\n        PerpdexStructs.ProtocolInfo storage protocolInfo,\\n        address market,\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        uint24 protocolFeeRatio\\n    ) private returns (int256 base, int256 quote) {\\n        uint256 protocolFee;\\n\\n        if (isBaseToQuote == isExactInput) {\\n            // exact base\\n            (base, quote) = MarketLibrary.swap(market, isBaseToQuote, isExactInput, amount);\\n\\n            protocolFee = quote.abs().mulRatio(protocolFeeRatio);\\n            quote = quote.sub(protocolFee.toInt256());\\n        } else {\\n            // exact quote\\n            protocolFee = amount.sub(amount.divRatio(1e6 + protocolFeeRatio));\\n\\n            (base, ) = MarketLibrary.swap(market, isBaseToQuote, isExactInput, amount.sub(protocolFee));\\n            quote = isBaseToQuote ? amount.toInt256() : amount.neg256();\\n        }\\n\\n        protocolInfo.protocolFee = protocolInfo.protocolFee.add(protocolFee);\\n    }\\n\\n    function _processLiquidationFee(\\n        PerpdexStructs.VaultInfo storage vaultInfo,\\n        PerpdexStructs.VaultInfo storage liquidatorVaultInfo,\\n        PerpdexStructs.InsuranceFundInfo storage insuranceFundInfo,\\n        uint24 mmRatio,\\n        uint24 liquidatorRewardRatio,\\n        uint256 exchangedQuote\\n    ) private returns (uint256) {\\n        uint256 penalty = exchangedQuote.mulRatio(mmRatio);\\n        uint256 liquidatorReward = penalty.mulRatio(liquidatorRewardRatio);\\n        uint256 insuranceFundReward = penalty.sub(liquidatorReward);\\n\\n        vaultInfo.collateralBalance = vaultInfo.collateralBalance.sub(penalty.toInt256());\\n        liquidatorVaultInfo.collateralBalance = liquidatorVaultInfo.collateralBalance.add(liquidatorReward.toInt256());\\n        insuranceFundInfo.balance = insuranceFundInfo.balance.add(insuranceFundReward.toInt256());\\n\\n        return penalty;\\n    }\\n\\n    function _getPriceX96(address market) private view returns (uint256) {\\n        return IPerpdexMarket(market).getMarkPriceX96();\\n    }\\n\\n    function _doSwapDry(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        PerpdexStructs.PriceLimitInfo storage priceLimitInfo,\\n        address market,\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        uint256 oppositeAmountBound,\\n        uint24 protocolFeeRatio\\n    ) private view returns (int256 base, int256 quote) {\\n        // disable price limit\\n\\n        uint256 protocolFee;\\n\\n        if (isBaseToQuote == isExactInput) {\\n            // exact base\\n            (base, quote) = MarketLibrary.swapDry(market, isBaseToQuote, isExactInput, amount);\\n\\n            protocolFee = quote.abs().mulRatio(protocolFeeRatio);\\n            quote = quote.sub(protocolFee.toInt256());\\n        } else {\\n            // exact quote\\n            protocolFee = amount.sub(amount.divRatio(1e6 + protocolFeeRatio));\\n\\n            (base, ) = MarketLibrary.swapDry(market, isBaseToQuote, isExactInput, amount.sub(protocolFee));\\n            quote = isBaseToQuote ? amount.toInt256() : amount.neg256();\\n        }\\n\\n        _validateSlippage(isBaseToQuote, isExactInput, base, quote, oppositeAmountBound);\\n    }\\n\\n    function _validateSlippage(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        int256 base,\\n        int256 quote,\\n        uint256 oppositeAmountBound\\n    ) private pure {\\n        uint256 oppositeAmount = isBaseToQuote == isExactInput ? quote.abs() : base.abs();\\n        if (isExactInput) {\\n            require(oppositeAmount >= oppositeAmountBound, \\\"TL_VS: too small opposite amount\\\");\\n        } else {\\n            require(oppositeAmount <= oppositeAmountBound, \\\"TL_VS: too large opposite amount\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x554d0cfe3048ea5ca07ec0864b075d22e25f4394f6588f6873a34d3ab605f055\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/VaultLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport { IERC20Metadata } from \\\"../interface/IERC20Metadata.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport { AccountLibrary } from \\\"./AccountLibrary.sol\\\";\\nimport { PerpdexStructs } from \\\"./PerpdexStructs.sol\\\";\\n\\nlibrary VaultLibrary {\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    struct DepositParams {\\n        address settlementToken;\\n        uint256 amount;\\n        address from;\\n    }\\n\\n    struct WithdrawParams {\\n        address settlementToken;\\n        uint256 amount;\\n        address payable to;\\n        uint24 imRatio;\\n    }\\n\\n    function deposit(PerpdexStructs.AccountInfo storage accountInfo, DepositParams memory params) internal {\\n        require(params.amount > 0, \\\"VL_D: zero amount\\\");\\n        _transferTokenIn(params.settlementToken, params.from, params.amount);\\n        accountInfo.vaultInfo.collateralBalance = accountInfo.vaultInfo.collateralBalance.add(params.amount.toInt256());\\n    }\\n\\n    function depositEth(PerpdexStructs.AccountInfo storage accountInfo, uint256 amount) internal {\\n        require(amount > 0, \\\"VL_DE: zero amount\\\");\\n        accountInfo.vaultInfo.collateralBalance = accountInfo.vaultInfo.collateralBalance.add(amount.toInt256());\\n    }\\n\\n    function withdraw(PerpdexStructs.AccountInfo storage accountInfo, WithdrawParams memory params) internal {\\n        require(params.amount > 0, \\\"VL_W: zero amount\\\");\\n        accountInfo.vaultInfo.collateralBalance = accountInfo.vaultInfo.collateralBalance.sub(params.amount.toInt256());\\n\\n        require(AccountLibrary.hasEnoughInitialMargin(accountInfo, params.imRatio), \\\"VL_W: not enough initial margin\\\");\\n\\n        if (params.settlementToken == address(0)) {\\n            params.to.transfer(params.amount);\\n        } else {\\n            SafeERC20.safeTransfer(IERC20(params.settlementToken), params.to, params.amount);\\n        }\\n    }\\n\\n    function transferInsuranceFund(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        PerpdexStructs.InsuranceFundInfo storage insuranceFundInfo,\\n        uint256 amount\\n    ) internal {\\n        accountInfo.vaultInfo.collateralBalance = accountInfo.vaultInfo.collateralBalance.add(amount.toInt256());\\n        insuranceFundInfo.balance = insuranceFundInfo.balance.sub(amount.toInt256());\\n        require(insuranceFundInfo.balance >= 0, \\\"VL_TIF: negative balance\\\");\\n    }\\n\\n    function transferProtocolFee(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        PerpdexStructs.ProtocolInfo storage protocolInfo,\\n        uint256 amount\\n    ) internal {\\n        accountInfo.vaultInfo.collateralBalance = accountInfo.vaultInfo.collateralBalance.add(amount.toInt256());\\n        protocolInfo.protocolFee = protocolInfo.protocolFee.sub(amount);\\n    }\\n\\n    function _transferTokenIn(\\n        address token,\\n        address from,\\n        uint256 amount\\n    ) private {\\n        // check for deflationary tokens by assuring balances before and after transferring to be the same\\n        uint256 balanceBefore = IERC20Metadata(token).balanceOf(address(this));\\n        SafeERC20.safeTransferFrom(IERC20(token), from, address(this), amount);\\n        require(\\n            (IERC20Metadata(token).balanceOf(address(this)).sub(balanceBefore)) == amount,\\n            \\\"VL_TTI: inconsistent balance\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xb755da2cab0002f0dac8d625128b731eb4c69ae6fa9ab0180f12d5c27bdc791b\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061025c5760003560e01c80639317b19311610144578063ca5b721e116100b6578063e00617e81161007a578063e00617e814610722578063e72e436314610742578063ec6cca8414610762578063f2fde38b14610782578063f652b527146107a2578063fa8f0368146107c45761025c565b8063ca5b721e14610668578063d11102c514610688578063d1ce35e3146106b5578063d1ead563146106d5578063dfe1cb92146106f55761025c565b8063b53c512511610108578063b53c5125146105be578063b6261643146105eb578063b6b55f2514610600578063c3afe1ce14610613578063c66fa8e614610633578063c9ca7b18146106485761025c565b80639317b1931461052757806393420cf414610547578063996fbf941461055c5780639dce9e191461057c5780639f044f31146105a95761025c565b80634ef9951a116101dd57806373f62501116101a157806373f625011461046e5780637a27d9f61461048e5780637b9e618d146104a35780637c88490a146104c557806387cad0bf146104e55780638da5cb5b146105125761025c565b80634ef9951a146103d657806359af74f7146103f65780636346f32e146104165780636e838bad14610439578063715018a6146104595761025c565b80632f60a151116102245780632f60a1511461033457806333ff1577146103565780633a921051146103765780633d46396a146103965780634b4aa735146103b65761025c565b80630674fa4114610261578063093eb8201461029757806319be4975146102c45780632e1a7d4d146102f25780632e78434314610314575b600080fd5b34801561026d57600080fd5b5061028161027c366004614bf6565b6107e4565b60405161028e9190614e1f565b60405180910390f35b3480156102a357600080fd5b506102b76102b2366004614cbb565b61080d565b60405161028e9190615610565b3480156102d057600080fd5b506102e46102df366004614bf6565b610a79565b60405161028e929190614e28565b3480156102fe57600080fd5b5061031261030d366004614d12565b610a92565b005b34801561032057600080fd5b506102b761032f366004614c10565b610ba8565b34801561034057600080fd5b50610349610bf4565b60405161028e9190615631565b34801561036257600080fd5b50610281610371366004614c10565b610c04565b34801561038257600080fd5b50610281610391366004614bf6565b610c2d565b3480156103a257600080fd5b506103126103b1366004614d12565b610c4e565b3480156103c257600080fd5b506102816103d1366004614bf6565b610d65565b3480156103e257600080fd5b506103126103f1366004614d12565b610d86565b34801561040257600080fd5b506102e4610411366004614ca0565b610e9d565b34801561042257600080fd5b5061042b611174565b60405161028e929190615641565b34801561044557600080fd5b50610312610454366004614cf6565b61118a565b34801561046557600080fd5b506103126112b5565b34801561047a57600080fd5b50610312610489366004614d92565b611361565b34801561049a57600080fd5b50610349611424565b3480156104af57600080fd5b506104b8611436565b60405161028e9190614db3565b3480156104d157600080fd5b506102816104e0366004614c10565b61145a565b3480156104f157600080fd5b50610505610500366004614bf6565b61147c565b60405161028e9190615627565b34801561051e57600080fd5b506104b861149e565b34801561053357600080fd5b50610312610542366004614c42565b6114ad565b34801561055357600080fd5b5061028161160b565b34801561056857600080fd5b50610281610577366004614c10565b611611565b34801561058857600080fd5b5061059c610597366004614bf6565b611633565b60405161028e9190614e14565b3480156105b557600080fd5b50610349611664565b3480156105ca57600080fd5b506105de6105d9366004614c10565b611676565b60405161028e91906155d6565b3480156105f757600080fd5b506103496116e5565b61031261060e366004614d12565b6116f7565b34801561061f57600080fd5b506102e461062e366004614c85565b6118d3565b34801561063f57600080fd5b50610281611b77565b34801561065457600080fd5b50610312610663366004614cf6565b611b7d565b34801561067457600080fd5b50610281610683366004614c10565b611ca9565b34801561069457600080fd5b506106a86106a3366004614bf6565b611ccb565b60405161028e9190614dc7565b3480156106c157600080fd5b506103126106d0366004614cf6565b611d44565b3480156106e157600080fd5b506103126106f0366004614cf6565b611e41565b34801561070157600080fd5b50610715610710366004614c85565b611f3e565b60405161028e91906155b5565b34801561072e57600080fd5b506102e461073d366004614cbb565b61214c565b34801561074e57600080fd5b5061059c61075d366004614bf6565b6122d0565b34801561076e57600080fd5b5061059c61077d366004614bf6565b6122e5565b34801561078e57600080fd5b5061031261079d366004614bf6565b612314565b3480156107ae57600080fd5b506107b7612417565b60405161028e9190615657565b3480156107d057600080fd5b506103126107df366004614ce5565b612420565b6001600160a01b038116600090815260026020526040812061080590612566565b90505b919050565b610815614adf565b6002600054141561085b576040805162461bcd60e51b815260206004820152601f60248201526000805160206156c6833981519152604482015290519081900360640190fd5b600260005560808301354281101561088e5760405162461bcd60e51b8152600401610885906152d2565b60405180910390fd5b6001600160a01b0383166000908152600260209081526040808320815160e0810190925261092d9290919081906108c7908a018a614bf6565b6001600160a01b031681526020018860200135815260200188604001358152602001886060013581526020016108fb612841565b6001600160a01b03898116911614815260075462ffffff600160201b820416602083015260ff16604090910152612845565b905061093c6020860186614bf6565b6001600160a01b0316846001600160a01b03167fc7a00e3ec61b8c6f80d9561dbdeddc6fe70a2a76339c92541b2bc31b4b65978161097d8460000151612b87565b61098a8560200151612b87565b6109978a60200135612b87565b6040516109a693929190614e36565b60405180910390a36109bb6020860186614bf6565b60408083015160608401516001600160a01b038881166000818152600260209081529581209690921695909460008051602061577383398151915294939290610a06908d018d614bf6565b6001600160a01b03166001600160a01b031681526020019081526020016000206001015486608001518760a00151604051610a45959493929190614e4c565b60405180910390a3604051806040016040528082600001518152602001826020015181525092505050600160005592915050565b6003602052600090815260409020805460019091015482565b60026000541415610ad8576040805162461bcd60e51b815260206004820152601f60248201526000805160206156c6833981519152604482015290519081900360640190fd5b60026000908155610ae7612841565b6001600160a01b0381811660008181526002602090815260409182902082516080810184527f0000000000000000000000000000000000000000000000000000000000000000909516855290840187905290830191909152600754610100900462ffffff166060830152919250610b5e9190612b9b565b806001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d583604051610b979190614e1f565b60405180910390a250506001600055565b610bb0614adf565b506001600160a01b03808316600090815260026020908152604080832093851683529281529082902082518084019093528054835260010154908201525b92915050565b600754610100900462ffffff1681565b6001600160a01b0382166000908152600260205260408120610c269083612c7c565b9392505050565b6001600160a01b038116600090815260026020526040812061080590612e01565b610c56612841565b6001600160a01b0316610c6761149e565b6001600160a01b031614610cb0576040805162461bcd60e51b81526020600482018190526024820152600080516020615753833981519152604482015290519081900360640190fd5b60026000541415610cf6576040805162461bcd60e51b815260206004820152601f60248201526000805160206156c6833981519152604482015290519081900360640190fd5b60026000908155610d05612841565b6001600160a01b0381166000908152600260205260409020909150610d2c90600584612e62565b806001600160a01b03167f0880b0e717a57f3b5cbd3fc19396ae3c8cdee5c624c9289477869c38014c849583604051610b979190614e1f565b6001600160a01b038116600090815260026020526040812061080590612e91565b610d8e612841565b6001600160a01b0316610d9f61149e565b6001600160a01b031614610de8576040805162461bcd60e51b81526020600482018190526024820152600080516020615753833981519152604482015290519081900360640190fd5b60026000541415610e2e576040805162461bcd60e51b815260206004820152601f60248201526000805160206156c6833981519152604482015290519081900360640190fd5b60026000908155610e3d612841565b6001600160a01b0381166000908152600260205260409020909150610e6490600484612eea565b806001600160a01b03167fc5f8d0712530f513c8ff696f9d12d32b95faeef78155912e567eca0284adf94f83604051610b979190614e1f565b60008060026000541415610ee6576040805162461bcd60e51b815260206004820152601f60248201526000805160206156c6833981519152604482015290519081900360640190fd5b6002600055608083013542811015610f105760405162461bcd60e51b8152600401610885906152d2565b6000610f1f6020860186614bf6565b90506000610f2b612841565b6001600160a01b03808416600090815260026020908152604080832093851683528083209495509193611098939290916003918691610f6e918e01908e01614bf6565b6001600160a01b03166001600160a01b03168152602001908152602001600020600560046040518061010001604052808e6020016020810190610fb19190614bf6565b6001600160a01b031681526020018e6040013581526020018e60600135815260200160066040518060400160405290816000820160009054906101000a900462ffffff1662ffffff1662ffffff1681526020016000820160039054906101000a900462ffffff1662ffffff1662ffffff16815250508152602001600760049054906101000a900462ffffff1662ffffff16815260200160078054906101000a900462ffffff1662ffffff168152602001600760009054906101000a900460ff1660ff1681526020016007600a9054906101000a900462ffffff1662ffffff16815250612f37565b90506110aa6040880160208901614bf6565b6001600160a01b0316836001600160a01b03166000805160206157738339815191528360000151846020015160026000896001600160a01b03166001600160a01b0316815260200190815260200160002060000160008d60200160208101906111139190614bf6565b6001600160a01b03166001600160a01b031681526020019081526020016000206001015486604001518760600151604051611152959493929190614e4c565b60405180910390a3805160209091015160016000559097909650945050505050565b60065462ffffff80821691630100000090041682565b611192612841565b6001600160a01b03166111a361149e565b6001600160a01b0316146111ec576040805162461bcd60e51b81526020600482018190526024820152600080516020615753833981519152604482015290519081900360640190fd5b60026000541415611232576040805162461bcd60e51b815260206004820152601f60248201526000805160206156c6833981519152604482015290519081900360640190fd5b6002600055620f424062ffffff82161061125e5760405162461bcd60e51b81526004016108859061552c565b60075462ffffff600160201b909104811690821610156112905760405162461bcd60e51b8152600401610885906154be565b6007805462ffffff9092166101000263ffffff00199092169190911790556001600055565b6112bd612841565b6001600160a01b03166112ce61149e565b6001600160a01b031614611317576040805162461bcd60e51b81526020600482018190526024820152600080516020615753833981519152604482015290519081900360640190fd5b6001546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600180546001600160a01b0319169055565b611369612841565b6001600160a01b031661137a61149e565b6001600160a01b0316146113c3576040805162461bcd60e51b81526020600482018190526024820152600080516020615753833981519152604482015290519081900360640190fd5b60026000541415611409576040805162461bcd60e51b815260206004820152601f60248201526000805160206156c6833981519152604482015290519081900360640190fd5b6007805460ff191660ff929092169190911790556001600055565b600754600160501b900462ffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b0382166000908152600260205260408120610c26908361306c565b6002602081815260009283526040928390208351918201909352910154815281565b6001546001600160a01b031690565b6114b5612841565b6001600160a01b03166114c661149e565b6001600160a01b03161461150f576040805162461bcd60e51b81526020600482018190526024820152600080516020615753833981519152604482015290519081900360640190fd5b60026000541415611555576040805162461bcd60e51b815260206004820152601f60248201526000805160206156c6833981519152604482015290519081900360640190fd5b600260005561156c6001600160a01b038316612560565b6115885760405162461bcd60e51b81526004016108859061519f565b6001600160a01b03821660009081526008602052604090205460ff16151581151514611602576001600160a01b03821660008181526008602052604090819020805460ff1916841515179055517fd5d4c2e150c76234e0f5d390162d34c5c1e1405df2194cfbd63b12d9521b102790610b97908490614e14565b50506001600055565b60055481565b6001600160a01b0382166000908152600260205260408120610c269083613114565b6001600160a01b03811660009081526002602052604081206007546108059190600160201b900462ffffff166131aa565b600754600160201b900462ffffff1681565b61167e614af9565b506001600160a01b0391821660009081526002602081815260408084209490951683526001938401815291849020845160a0810186528154815293810154928401929092528101549282019290925260038201546060820152600490910154608082015290565b600754600160381b900462ffffff1681565b6002600054141561173d576040805162461bcd60e51b815260206004820152601f60248201526000805160206156c6833981519152604482015290519081900360640190fd5b6002600090815561174c612841565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661180257811561179a5760405162461bcd60e51b815260040161088590614ecc565b6001600160a01b03811660009081526002602052604090206117bc90346131de565b806001600160a01b03167f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4346040516117f59190614e1f565b60405180910390a2611602565b34156118205760405162461bcd60e51b8152600401610885906151d6565b61189a60026000836001600160a01b03166001600160a01b0316815260200190815260200160002060405180606001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001858152602001846001600160a01b0316815250613221565b806001600160a01b03167f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c483604051610b979190614e1f565b6000806002600054141561191c576040805162461bcd60e51b815260206004820152601f60248201526000805160206156c6833981519152604482015290519081900360640190fd5b600260005560a0830135428110156119465760405162461bcd60e51b8152600401610885906152d2565b6000611950612841565b6001600160a01b038116600090815260026020908152604082209293509091611ac1916003908490611984908b018b614bf6565b6001600160a01b03166001600160a01b0316815260200190815260200160002060056040518061016001604052808b60000160208101906119c59190614bf6565b6001600160a01b031681526020018b60200160208101906119e69190614c6b565b151581526020016119fd60608d0160408e01614c6b565b151581526060808d01356020808401919091526080808f0135604080860191909152805180820190915260065462ffffff80821683526301000000909104168184015292840192909252910190600890600090611a5c908f018f614bf6565b6001600160a01b0316815260208082019290925260409081016000205460ff9081161515845260075462ffffff600160201b8204811694860194909452610100810484169285019290925281166060840152600160501b90041660809091015261326c565b9050611ad06020870187614bf6565b81516020808401516001600160a01b0386811660008181526002855260408120969092169590946000805160206157738339815191529490939290611b17908e018e614bf6565b6001600160a01b03166001600160a01b031681526020019081526020016000206001015486604001518760600151604051611b56959493929190614e4c565b60405180910390a38051602090910151600160005590969095509350505050565b60045481565b611b85612841565b6001600160a01b0316611b9661149e565b6001600160a01b031614611bdf576040805162461bcd60e51b81526020600482018190526024820152600080516020615753833981519152604482015290519081900360640190fd5b60026000541415611c25576040805162461bcd60e51b815260206004820152601f60248201526000805160206156c6833981519152604482015290519081900360640190fd5b600260005560075462ffffff61010090910481169082161115611c5a5760405162461bcd60e51b815260040161088590615040565b60008162ffffff1611611c7f5760405162461bcd60e51b8152600401610885906153d0565b6007805462ffffff909216600160201b0266ffffff00000000199092169190911790556001600055565b6001600160a01b0382166000908152600260205260408120610c2690836133bd565b6001600160a01b038116600090815260026020908152604091829020600301805483518184028101840190945280845260609392830182828015611d3857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611d1a575b50505050509050919050565b611d4c612841565b6001600160a01b0316611d5d61149e565b6001600160a01b031614611da6576040805162461bcd60e51b81526020600482018190526024820152600080516020615753833981519152604482015290519081900360640190fd5b60026000541415611dec576040805162461bcd60e51b815260206004820152601f60248201526000805160206156c6833981519152604482015290519081900360640190fd5b600260005561271062ffffff82161115611e185760405162461bcd60e51b815260040161088590615014565b6007805462ffffff909216600160501b0262ffffff60501b199092169190911790556001600055565b611e49612841565b6001600160a01b0316611e5a61149e565b6001600160a01b031614611ea3576040805162461bcd60e51b81526020600482018190526024820152600080516020615753833981519152604482015290519081900360640190fd5b60026000541415611ee9576040805162461bcd60e51b815260206004820152601f60248201526000805160206156c6833981519152604482015290519081900360640190fd5b6002600055620f424062ffffff821610611f155760405162461bcd60e51b815260040161088590614fb9565b6007805462ffffff909216600160381b0262ffffff60381b199092169190911790556001600055565b611f46614b28565b60026000541415611f8c576040805162461bcd60e51b815260206004820152601f60248201526000805160206156c6833981519152604482015290519081900360640190fd5b600260005560a082013542811015611fb65760405162461bcd60e51b8152600401610885906152d2565b6000611fc0612841565b9050600061209e60026000846001600160a01b03166001600160a01b0316815260200190815260200160002060405180610100016040528088600001602081019061200b9190614bf6565b6001600160a01b0316815260200188602001358152602001886040013581526020018860600135815260200188608001358152602001600860008a60000160208101906120589190614bf6565b6001600160a01b0316815260208082019290925260409081016000205460ff9081161515845260075462ffffff6101008204169385019390935291909116910152613473565b90506120ad6020860186614bf6565b6001600160a01b0316826001600160a01b03167fc7a00e3ec61b8c6f80d9561dbdeddc6fe70a2a76339c92541b2bc31b4b6597816120ee84600001516136c2565b6120fb85602001516136c2565b61210886604001516136c2565b60405161211793929190614e36565b60405180910390a360408051606081018252825181526020808401519082015291810151908201526001600055949350505050565b6001600160a01b03811660009081526002602090815260408220829182916122ba91600390849061217f908a018a614bf6565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518061016001604052808960000160208101906121be9190614bf6565b6001600160a01b031681526020018960200160208101906121df9190614c6b565b151581526020016121f660608b0160408c01614c6b565b151581526060808b01356020808401919091526080808d0135604080860191909152805180820190915260065462ffffff80821683526301000000909104168184015292840192909252910190600890600090612255908d018d614bf6565b6001600160a01b0316815260208082019290925260409081016000205460ff9081161515845260075462ffffff600160201b8204811694860194909452610100810484169285019290925281166060840152600160501b90041660809091015261370a565b80516020909101519093509150505b9250929050565b60086020526000908152604090205460ff1681565b6001600160a01b03811660009081526002602052604081206007546108059190610100900462ffffff16613817565b61231c612841565b6001600160a01b031661232d61149e565b6001600160a01b031614612376576040805162461bcd60e51b81526020600482018190526024820152600080516020615753833981519152604482015290519081900360640190fd5b6001600160a01b0381166123bb5760405162461bcd60e51b81526004018080602001828103825260268152602001806156e66026913960400191505060405180910390fd5b6001546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b60075460ff1681565b612428612841565b6001600160a01b031661243961149e565b6001600160a01b031614612482576040805162461bcd60e51b81526020600482018190526024820152600080516020615753833981519152604482015290519081900360640190fd5b600260005414156124c8576040805162461bcd60e51b815260206004820152601f60248201526000805160206156c6833981519152604482015290519081900360640190fd5b60026000556207a1206124e16040830160208401614cf6565b62ffffff1611156125045760405162461bcd60e51b815260040161088590615399565b6125146040820160208301614cf6565b62ffffff166125266020830183614cf6565b62ffffff1611156125495760405162461bcd60e51b815260040161088590614f58565b8060066125568282615665565b5050600160005550565b3b151590565b600281015460038201805460009290835b8181101561283757600084828154811061258d57fe5b60009182526020808320909101546001600160a01b031680835260018a0190915260408220805491935091906125e5906125c6906136c2565b6001600160a01b038516600090815260208c905260409020549061385a565b9050600061261b6125f984600101546136c2565b6001600160a01b038616600090815260208d905260409020600101549061385a565b9050826002015460001461278757600080856001600160a01b0316637640482f86600201546040518263ffffffff1660e01b815260040180828152602001915050604080518083038186803b15801561267357600080fd5b505afa158015612687573d6000803e3d6000fd5b505050506040513d604081101561269d57600080fd5b508051602090910151600287015460038801546004808a01546040805163933c797960e01b81529283019490945260248201929092526044810191909152815193955091935060009283926001600160a01b038b169263933c797992606480840193829003018186803b15801561271357600080fd5b505afa158015612727573d6000803e3d6000fd5b505050506040513d604081101561273d57600080fd5b508051602090910151909250905061276761276061275b86856138bf565b6136c2565b8790613919565b955061278061277961275b85846138bf565b8690613919565b9450505050505b811561281c576000846001600160a01b0316638ee8fe5d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156127c857600080fd5b505afa1580156127dc573d6000803e3d6000fd5b505050506040513d60208110156127f257600080fd5b50519050612818612811612805836136c2565b8590600160601b61397e565b8990613919565b9750505b6128268782613919565b965050505050806001019050612577565b5090949350505050565b3390565b61284d614b49565b816080015161288157612864838360a001516131aa565b156128815760405162461bcd60e51b815260040161088590614e6f565b81516001600160a01b03166000908152600184016020526040902082516128a89190613a22565b81516020830151604051639c8f9f2360e01b815260009283926001600160a01b0390911691639c8f9f23916128df91600401614e1f565b6040805180830381600087803b1580156128f857600080fd5b505af115801561290c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129309190614d42565b9150915083604001518210156129585760405162461bcd60e51b8152600401610885906154f5565b836060015181101561297c5760405162461bcd60e51b8152600401610885906154f5565b90825260208201528151604080516379144ba960e11b8152815160009384936001600160a01b039091169263f22897529260048083019392829003018186803b1580156129c857600080fd5b505afa1580156129dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a009190614d42565b85516001600160a01b039081166000908152600189016020908152604080832060038101969096556004909501939093558751909116815291822090860151919350839250612a4e91613ae0565b91509150612a658585600001518660c00151613b65565b83600001516001600160a01b0316637452fadd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612aa257600080fd5b505afa158015612ab6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ada9190614d2a565b60a0840152612afc612aeb836136c2565b8451612af6906136c2565b9061385a565b6040840152612b1a612b0d826136c2565b612af685602001516136c2565b6060840152505060a0810151600090612b4690612b36906136c2565b604084015190600160601b61397e565b6000039050612b7b848460000151846040015184612b7186886060015161385a90919063ffffffff16565b8860c00151613d79565b60808301525092915050565b6000612b92826136c2565b60000392915050565b6000816020015111612bbf5760405162461bcd60e51b815260040161088590615174565b612bda612bcf82602001516136c2565b60028401549061385a565b60028301556060810151612bef908390613817565b612c0b5760405162461bcd60e51b815260040161088590615077565b80516001600160a01b0316612c615780604001516001600160a01b03166108fc82602001519081150290604051600060405180830381858888f19350505050158015612c5b573d6000803e3d6000fd5b50612c78565b612c78816000015182604001518360200151613ed5565b5050565b6001600160a01b038116600090815260018301602052604081208054612cc490612ca5906136c2565b6001600160a01b0385166000908152602087905260409020549061385a565b91508060020154600014612dfa576000836001600160a01b0316637640482f83600201546040518263ffffffff1660e01b815260040180828152602001915050604080518083038186803b158015612d1b57600080fd5b505afa158015612d2f573d6000803e3d6000fd5b505050506040513d6040811015612d4557600080fd5b5051600283015460038401546004808601546040805163933c797960e01b8152928301949094526024820192909252604481019190915281519293506000926001600160a01b0388169263933c79799260648082019391829003018186803b158015612db057600080fd5b505afa158015612dc4573d6000803e3d6000fd5b505050506040513d6040811015612dda57600080fd5b50519050612df5612dee61275b84846138bf565b8590613919565b935050505b5092915050565b600381018054600091908290815b81811015612837576000612e4b612e4688878581548110612e2c57fe5b6000918252602090912001546001600160a01b031661306c565b613f27565b9050612e5784826138bf565b935050600101612e0f565b612e79612e6e826136c2565b600285015490613919565b60028401558154612e8a9082613f50565b9091555050565b600381018054600091908290815b81811015612837576000612ed387868481548110612eb957fe5b6000918252602090912001546001600160a01b0316613114565b9050612edf84826138bf565b935050600101612e9f565b612ef6612e6e826136c2565b6002840155612f0f612f07826136c2565b83549061385a565b80835560001315612f325760405162461bcd60e51b815260040161088590614f26565b505050565b612f3f614b7f565b612f4d8783608001516131aa565b15612f6a5760405162461bcd60e51b8152600401610885906150e5565b81516001600160a01b0316600090815260208890526040812080548212612f92576000612f95565b60015b9150612fa48160000154613f27565b84602001511115612fc75760405162461bcd60e51b815260040161088590615332565b50612fee8887878660000151858689602001518a604001518b60c001518c60e00151613fad565b60408501526020840152825282516130059061402c565b606080840182905284015161301c9188919061409f565b6130385760405162461bcd60e51b8152600401610885906153f6565b61306088600201886002018686608001518760a0015161305b8860200151613f27565b6140bc565b50509695505050505050565b6000806130798484612c7c565b90508061308a576000915050610bee565b6000836001600160a01b0316638ee8fe5d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156130c557600080fd5b505afa1580156130d9573d6000803e3d6000fd5b505050506040513d60208110156130ef57600080fd5b5051905061310b6130ff826136c2565b8390600160601b61397e565b95945050505050565b60008061312184846133bd565b905080613132576000915050610bee565b6000836001600160a01b0316638ee8fe5d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561316d57600080fd5b505afa158015613181573d6000803e3d6000fd5b505050506040513d602081101561319757600080fd5b5051905061310b8282600160601b614136565b6000806131b684612566565b905060006131c385612e01565b90506131d261275b82866141e5565b90911215949350505050565b600081116131fe5760405162461bcd60e51b81526004016108859061526f565b61321561320a826136c2565b600284015490613919565b60029092019190915550565b60008160200151116132455760405162461bcd60e51b815260040161088590614efb565b61325c8160000151826040015183602001516141fa565b61321561320a82602001516136c2565b613274614b7f565b613282858360e001516131aa565b61329e5760405162461bcd60e51b81526004016108859061542d565b60008060006132d3888888886000015189602001518a604001518b606001518c608001518d61012001518e6101400151613fad565b9250925092508460c0015161332f5760006132ed84614331565b86516001600160a01b0316600090815260208b9052604090205461331090614331565b02131561332f5760405162461bcd60e51b815260040161088590615208565b600061333e866000015161402c565b905061334f888760a0015183614359565b61336b5760405162461bcd60e51b815260040161088590614f82565b61337a89876101000151613817565b6133965760405162461bcd60e51b815260040161088590615490565b60408051608081018252948552602085019390935291830152606082015295945050505050565b6001600160a01b038116600090815260018301602052604081206133e4612e468585612c7c565b91508060020154600014612dfa576000836001600160a01b0316637640482f83600201546040518263ffffffff1660e01b815260040180828152602001915050604080518083038186803b15801561343b57600080fd5b505afa15801561344f573d6000803e3d6000fd5b505050506040513d604081101561346557600080fd5b5051905061310b83826138bf565b61347b614b28565b8160a0015161349c5760405162461bcd60e51b81526004016108859061529b565b81516001600160a01b03166000908152600184016020526040902082516134c4908290613a22565b600080600085600001516001600160a01b0316639cd441da876020015188604001516040518363ffffffff1660e01b8152600401613503929190614e28565b606060405180830381600087803b15801561351d57600080fd5b505af1158015613531573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135559190614d65565b925092509250856060015183101561357f5760405162461bcd60e51b81526004016108859061513d565b85608001518210156135a35760405162461bcd60e51b8152600401610885906152fb565b60008087600001516001600160a01b031663f22897526040518163ffffffff1660e01b8152600401604080518083038186803b1580156135e257600080fd5b505afa1580156135f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061361a9190614d42565b8754919350915061362b90866138bf565b8655600186015461363c90856138bf565b6001870155600286015461365090846138bf565b60028701556003860182905560048601819055875160e0890151613675918b91613b65565b613683898960c00151613817565b61369f5760405162461bcd60e51b815260040161088590615587565b505060408051606081018252938452602084019290925290820152949350505050565b6000600160ff1b82106137065760405162461bcd60e51b81526004018080602001828103825260288152602001806157936028913960400191505060405180910390fd5b5090565b613712614b7f565b613720848360e001516131aa565b61373c5760405162461bcd60e51b81526004016108859061510e565b600080613768868686600001518760200151886040015189606001518a608001518b610140015161436b565b915091508360c001516137c257600061378083614331565b85516001600160a01b03166000908152602089905260409020546137a390614331565b0213156137c25760405162461bcd60e51b815260040161088590614e99565b6137d186856101000151613817565b6137ed5760405162461bcd60e51b815260040161088590614fe5565b60408051608081018252928352602083019190915260009082018190526060820152949350505050565b60008061382384612566565b9050600061383085612e91565b905061383f61275b82866141e5565b600286015461384f908490614429565b121595945050505050565b600081830381831280159061386f5750838113155b80613884575060008312801561388457508381135b610c265760405162461bcd60e51b81526004018080602001828103825260248152602001806157bb6024913960400191505060405180910390fd5b600082820183811015610c26576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600082820181831280159061392e5750838112155b80613943575060008312801561394357508381125b610c265760405162461bcd60e51b815260040180806020018281038252602181526020018061570c6021913960400191505060405180910390fd5b6000806000851261398f5784613998565b6139988561443f565b905060008085126139a957846139b2565b6139b28561443f565b9050600080871280156139c55750600086135b806139db57506000871380156139db5750600086125b6139e65760006139e9565b60015b905060006139f8848488614136565b905081613a0d57613a08816136c2565b613a16565b613a1681612b87565b98975050505050505050565b6002820154600383015460048085015460405163933c797960e01b815260009485946001600160a01b0388169463933c797994613a6194909101614e36565b604080518083038186803b158015613a7857600080fd5b505afa158015613a8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ab09190614d42565b85549193509150613ac19083613f50565b84556001840154613ad29082613f50565b846001018190555050505050565b60008082156122c957835415613b1557613b038460000154848660020154614136565b8454909250613b129083613f50565b84555b600184015415613b4a57613b328460010154848660020154614136565b6001850154909150613b449082613f50565b60018501555b6002840154613b599084613f50565b60028501559250929050565b6001600160a01b038216613bc0576040805162461bcd60e51b815260206004820152601d60248201527f414c5f55503a206d61726b65742061646472657373206973207a65726f000000604482015290519081900360640190fd5b6001600160a01b038216600090815260208490526040812054151580613c0257506001600160a01b038316600090815260018501602052604090206002015415155b6003850180549192509060005b81811015613cf257856001600160a01b0316838281548110613c2d57fe5b6000918252602090912001546001600160a01b03161415613cea5783613ce157826001830381548110613c5c57fe5b9060005260206000200160009054906101000a90046001600160a01b0316838281548110613c8657fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555082805480613cbe57fe5b600082815260209020810160001990810180546001600160a01b03191690550190555b50505050612f32565b600101613c0f565b5081546001810183556000838152602090200180546001600160a01b0319166001600160a01b038716179055815460ff85161015613d71576040805162461bcd60e51b8152602060048201526017602482015276414c5f55503a20746f6f206d616e79206d61726b65747360481b604482015290519081900360640190fd5b505050505050565b6000613d8484614331565b613d8d86614331565b0260001914613dae5760405162461bcd60e51b815260040161088590615557565b6001600160a01b038616600090815260208890526040812090613dd087614331565b8254613ddb90614331565b026000191415613e8557670de0b6b3a76400006000613e0f613dfc8a613f27565b83613e0a8760000154613f27565b614136565b9050818111613e50576000613e32613e26836136c2565b6001870154908561397e565b9050613e4888613e428b84613919565b90613919565b935050613e7e565b6000613e5d89848461397e565b9050613e7a88613e4283886001015461391990919063ffffffff16565b9350505b5050613e88565b50835b8154613e949088613919565b82556001820154613eb1908290612af6908890613e42908b613919565b60018301556002890154613ec59082613919565b60028a0155613a16898986613b65565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052612f3290849061446b565b600080821215613f4757613f42613f3d8361443f565b61451c565b610805565b6108058261451c565b600082821115613fa7576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600080600080613fbc8b61402c565b9050613fc88d82614573565b5062ffffff841615613fec57613fe28b8b8b8b8b8961458a565b9093509150613ffe565b613ff88a8a8a8a61463c565b90935091505b61400b898985858a6146e4565b61401a8d8b858560008a613d79565b90509a509a509a975050505050505050565b6000816001600160a01b0316637452fadd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561406757600080fd5b505afa15801561407b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108059190614d2a565b60006140b48460000154838560200151614755565b949350505050565b6000806140c983866141e5565b905060006140d782866141e5565b905060006140e58383613f50565b90506140fb6140f3846136c2565b8b549061385a565b8a55614111614109836136c2565b8a5490613919565b895561412761411f826136c2565b895490613919565b90975550979650505050505050565b600080806000198587098686029250828110908390030390508061416c576000841161416157600080fd5b508290049050610c26565b80841161417857600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b6000610c26838362ffffff16620f4240614136565b6040516370a0823160e01b81526000906001600160a01b038516906370a0823190614229903090600401614db3565b60206040518083038186803b15801561424157600080fd5b505afa158015614255573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142799190614d2a565b90506142878484308561479b565b8161430e82866001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016142b89190614db3565b60206040518083038186803b1580156142d057600080fd5b505afa1580156142e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143089190614d2a565b90613f50565b1461432b5760405162461bcd60e51b8152600401610885906150ae565b50505050565b60008082136143515760008212614349576000613f42565b600019610805565b506001919050565b825482516000916140b4918490614755565b600080600086151588151514156143bc57614388898989896147f5565b90935091506143a08461439a84613f27565b906141e5565b90506143b56143ae826136c2565b839061385a565b915061440e565b6143d56143ce87620f42408701614866565b8790613f50565b90506143ec8989896143e78a86613f50565b6147f5565b50925087614402576143fd86612b87565b61440b565b61440b866136c2565b91505b61441b88888585896146e4565b509850989650505050505050565b60008183126144385781610c26565b5090919050565b6000600160ff1b82136144645760405162461bcd60e51b815260040161088590615362565b5060000390565b60006144c0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661487b9092919063ffffffff16565b805190915015612f32578080602001905160208110156144df57600080fd5b5051612f325760405162461bcd60e51b815260040180806020018281038252602a8152602001806157df602a913960400191505060405180910390fd5b600080821215613706576040805162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f736974697665604482015290519081900360640190fd5b4382600101541015612c7857815543600190910155565b600080600085151587151514156145ce576145a78888888861463c565b90935091506145b98461439a84613f27565b90506145c76143ae826136c2565b9150614620565b6145e76145e086620f42408701614866565b8690613f50565b90506145fe8888886145f98986613f50565b61463c565b509250866146145761460f85612b87565b61461d565b61461d856136c2565b91505b885461462c90826138bf565b9098559097909650945050505050565b6000806000866001600160a01b031663630e375f8787876040518463ffffffff1660e01b815260040180841515815260200183151581526020018281526020019350505050602060405180830381600087803b15801561469b57600080fd5b505af11580156146af573d6000803e3d6000fd5b505050506040513d60208110156146c557600080fd5b505190506146d58686868461488a565b92509250505b94509492505050565b6000841515861515146146ff576146fa84613f27565b614708565b61470883613f27565b9050841561473557818110156147305760405162461bcd60e51b81526004016108859061523a565b613d71565b81811115613d715760405162461bcd60e51b81526004016108859061545b565b60008061476285846141e5565b9050600061477086836138bf565b9050600061477e8784613f50565b90508581111580156147905750818611155b979650505050505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261432b90859061446b565b6000806000866001600160a01b031663017dab948787876040518463ffffffff1660e01b81526004018084151581526020018315158152602001828152602001935050505060206040518083038186803b15801561485257600080fd5b505afa1580156146af573d6000803e3d6000fd5b6000610c2683620f42408462ffffff16614136565b60606140b484846000856148f0565b60008084156148c65785156148b4576148a284612b87565b6148ab846136c2565b915091506146db565b6148bd836136c2565b6148ab85612b87565b85156148de576148d583612b87565b6148ab856136c2565b6148e7846136c2565b6148ab84612b87565b6060824710156149315760405162461bcd60e51b815260040180806020018281038252602681526020018061572d6026913960400191505060405180910390fd5b61493a85612560565b61498b576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b602083106149c95780518252601f1990920191602091820191016149aa565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114614a2b576040519150601f19603f3d011682016040523d82523d6000602084013e614a30565b606091505b509150915061479082828660608315614a4a575081610c26565b825115614a5a5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614aa4578181015183820152602001614a8c565b50505050905090810190601f168015614ad15780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b604051806040016040528060008152602001600081525090565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b60405180606001604052806000815260200160008152602001600081525090565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b80356001600160a01b038116811461080857600080fd5b8035801515811461080857600080fd5b600060c08284031215614bdf578081fd5b50919050565b600060a08284031215614bdf578081fd5b600060208284031215614c07578081fd5b610c2682614ba7565b60008060408385031215614c22578081fd5b614c2b83614ba7565b9150614c3960208401614ba7565b90509250929050565b60008060408385031215614c54578182fd5b614c5d83614ba7565b9150614c3960208401614bbe565b600060208284031215614c7c578081fd5b610c2682614bbe565b600060c08284031215614c96578081fd5b610c268383614bce565b600060a08284031215614cb1578081fd5b610c268383614be5565b60008060c08385031215614ccd578182fd5b614cd78484614be5565b9150614c3960a08401614ba7565b600060408284031215614bdf578081fd5b600060208284031215614d07578081fd5b8135610c26816156b1565b600060208284031215614d23578081fd5b5035919050565b600060208284031215614d3b578081fd5b5051919050565b60008060408385031215614d54578182fd5b505080516020909101519092909150565b600080600060608486031215614d79578081fd5b8351925060208401519150604084015190509250925092565b600060208284031215614da3578081fd5b813560ff81168114610c26578182fd5b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b81811015614e085783516001600160a01b031683529284019291840191600101614de3565b50909695505050505050565b901515815260200190565b90815260200190565b918252602082015260400190565b9283526020830191909152604082015260600190565b948552602085019390935260408401919091526060830152608082015260a00190565b60208082526010908201526f4d4c5f524c3a20656e6f756768206d6d60801b604082015260600190565b6020808252601990820152782a262fa7a8221d1037b832b71034b9903337b93134b23232b760391b604082015260600190565b60208082526015908201527450455f443a20616d6f756e74206e6f74207a65726f60581b604082015260600190565b602080825260119082015270159317d10e881e995c9bc8185b5bdd5b9d607a1b604082015260600190565b602080825260189082015277564c5f5449463a206e656761746976652062616c616e636560401b604082015260600190565b60208082526010908201526f141157d4d41310ce881a5b9d985b1a5960821b604082015260600190565b6020808252601d908201527f544c5f4f503a206e6f726d616c206f7264657220666f7262696464656e000000604082015260600190565b60208082526012908201527150455f534c52523a20746f6f206c6172676560701b604082015260600190565b602080825260159082015274544c5f4f50443a206e6f7420656e6f75676820696d60581b604082015260600190565b60208082526012908201527150455f535046523a20746f6f206c6172676560701b604082015260600190565b6020808252601b908201527f50455f534d523a20626967676572207468616e20696d526174696f0000000000604082015260600190565b6020808252601f908201527f564c5f573a206e6f7420656e6f75676820696e697469616c206d617267696e00604082015260600190565b6020808252601c908201527f564c5f5454493a20696e636f6e73697374656e742062616c616e636500000000604082015260600190565b6020808252600f908201526e544c5f4c3a20656e6f756768206d6d60881b604082015260600190565b602080825260159082015274544c5f4f50443a206e6f7420656e6f756768206d6d60581b604082015260600190565b6020808252601c908201527f4d4c5f414c3a20746f6f20736d616c6c206f7574707574206261736500000000604082015260600190565b602080825260119082015270159317d5ce881e995c9bc8185b5bdd5b9d607a1b604082015260600190565b6020808252601f908201527f50455f53494d413a206d61726b6574206164647265737320696e76616c696400604082015260600190565b60208082526018908201527750455f443a206d73672e76616c7565206e6f74207a65726f60401b604082015260600190565b6020808252601890820152772a262fa7a81d1037b832b71034b9903337b93134b23232b760411b604082015260600190565b6020808252818101527f544c5f56533a20746f6f20736d616c6c206f70706f7369746520616d6f756e74604082015260600190565b602080825260129082015271159317d1114e881e995c9bc8185b5bdd5b9d60721b604082015260600190565b6020808252601e908201527f4d4c5f414c3a20616464206c697175696469747920666f7262696464656e0000604082015260600190565b6020808252600f908201526e50455f43443a20746f6f206c61746560881b604082015260600190565b6020808252601d908201527f4d4c5f414c3a20746f6f20736d616c6c206f75747075742071756f7465000000604082015260600190565b602080825260169082015275151317d30e881d1bdbc81b185c99d948185b5bdd5b9d60521b604082015260600190565b6020808252601c908201527f506572704d6174683a20696e76657273696f6e206f766572666c6f7700000000604082015260600190565b6020808252601e908201527f50455f53504c433a20746f6f206c61726765206c69717569646174696f6e0000604082015260600190565b6020808252600c908201526b50455f534d523a207a65726f60a01b604082015260600190565b6020808252601b908201527f544c5f4c3a206c69717569646174696f6e20666f7262696464656e0000000000604082015260600190565b602080825260149082015273544c5f4f503a206e6f7420656e6f756768206d6d60601b604082015260600190565b6020808252818101527f544c5f56533a20746f6f206c61726765206f70706f7369746520616d6f756e74604082015260600190565b602080825260149082015273544c5f4f503a206e6f7420656e6f75676820696d60601b604082015260600190565b6020808252601c908201527f50455f5349523a20736d616c6c6572207468616e206d6d526174696f00000000604082015260600190565b6020808252601c908201527f4d4c5f524c3a20746f6f20736d616c6c206f7574707574206261736500000000604082015260600190565b60208082526011908201527050455f5349523a20746f6f206c6172676560781b604082015260600190565b602080825260169082015275151317d05515108e881a5b9d985b1a59081a5b9c1d5d60521b604082015260600190565b6020808252601490820152734d4c5f414c3a206e6f7420656e6f75676820696d60601b604082015260600190565b81518152602080830151908201526040918201519181019190915260600190565b600060a082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b815181526020918201519181019190915260400190565b9051815260200190565b62ffffff91909116815260200190565b62ffffff92831681529116602082015260400190565b60ff91909116815260200190565b8135615670816156b1565b815462ffffff191662ffffff91909116178082556020830135615692816156b1565b65ffffff0000008160181b1665ffffff00000019831617835550505050565b62ffffff811681146156c257600080fd5b5056fe5265656e7472616e637947756172643a207265656e7472616e742063616c6c004f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573735369676e6564536166654d6174683a206164646974696f6e206f766572666c6f77416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572adf7293c36a87213f46d9ad13f46093b4c6becaecc1a3c4b6be2aad2f60676cf53616665436173743a2076616c756520646f65736e27742066697420696e20616e20696e743235365369676e6564536166654d6174683a207375627472616374696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a264697066735822122093bd554d6635a041f8104a6747ec9c2323566bbd774ce4ae80009e2e630be13864736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2932,
        "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 290,
        "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3502,
        "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
        "label": "accountInfos",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(AccountInfo)7961_storage)"
      },
      {
        "astId": 3507,
        "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
        "label": "priceLimitInfos",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(PriceLimitInfo)7972_storage)"
      },
      {
        "astId": 3510,
        "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
        "label": "insuranceFundInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(InsuranceFundInfo)7964_storage"
      },
      {
        "astId": 3513,
        "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
        "label": "protocolInfo",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(ProtocolInfo)7967_storage"
      },
      {
        "astId": 3524,
        "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
        "label": "priceLimitConfig",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(PriceLimitConfig)7977_storage"
      },
      {
        "astId": 3528,
        "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
        "label": "maxMarketsPerAccount",
        "offset": 0,
        "slot": "7",
        "type": "t_uint8"
      },
      {
        "astId": 3532,
        "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
        "label": "imRatio",
        "offset": 1,
        "slot": "7",
        "type": "t_uint24"
      },
      {
        "astId": 3536,
        "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
        "label": "mmRatio",
        "offset": 4,
        "slot": "7",
        "type": "t_uint24"
      },
      {
        "astId": 3540,
        "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
        "label": "liquidationRewardRatio",
        "offset": 7,
        "slot": "7",
        "type": "t_uint24"
      },
      {
        "astId": 3544,
        "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
        "label": "protocolFeeRatio",
        "offset": 10,
        "slot": "7",
        "type": "t_uint24"
      },
      {
        "astId": 3549,
        "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
        "label": "isMarketAllowed",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(AccountInfo)7961_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PerpdexStructs.AccountInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(AccountInfo)7961_storage"
      },
      "t_mapping(t_address,t_struct(MakerInfo)7944_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PerpdexStructs.MakerInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(MakerInfo)7944_storage"
      },
      "t_mapping(t_address,t_struct(PriceLimitInfo)7972_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PerpdexStructs.PriceLimitInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PriceLimitInfo)7972_storage"
      },
      "t_mapping(t_address,t_struct(TakerInfo)7933_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PerpdexStructs.TakerInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TakerInfo)7933_storage"
      },
      "t_struct(AccountInfo)7961_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.AccountInfo",
        "members": [
          {
            "astId": 7951,
            "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
            "label": "takerInfos",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_struct(TakerInfo)7933_storage)"
          },
          {
            "astId": 7955,
            "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
            "label": "makerInfos",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_struct(MakerInfo)7944_storage)"
          },
          {
            "astId": 7957,
            "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
            "label": "vaultInfo",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(VaultInfo)7947_storage"
          },
          {
            "astId": 7960,
            "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
            "label": "markets",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(InsuranceFundInfo)7964_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.InsuranceFundInfo",
        "members": [
          {
            "astId": 7963,
            "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(MakerInfo)7944_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.MakerInfo",
        "members": [
          {
            "astId": 7935,
            "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
            "label": "baseDebtShare",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7937,
            "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
            "label": "quoteDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7939,
            "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
            "label": "liquidity",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7941,
            "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
            "label": "cumDeleveragedBaseSharePerLiquidityX96",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7943,
            "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
            "label": "cumDeleveragedQuotePerLiquidityX96",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(PriceLimitConfig)7977_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.PriceLimitConfig",
        "members": [
          {
            "astId": 7974,
            "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
            "label": "priceLimitNormalOrderRatio",
            "offset": 0,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 7976,
            "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
            "label": "priceLimitLiquidationRatio",
            "offset": 3,
            "slot": "0",
            "type": "t_uint24"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PriceLimitInfo)7972_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.PriceLimitInfo",
        "members": [
          {
            "astId": 7969,
            "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
            "label": "referencePrice",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7971,
            "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
            "label": "referenceBlockNumber",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ProtocolInfo)7967_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.ProtocolInfo",
        "members": [
          {
            "astId": 7966,
            "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
            "label": "protocolFee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TakerInfo)7933_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.TakerInfo",
        "members": [
          {
            "astId": 7930,
            "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
            "label": "baseBalanceShare",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 7932,
            "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
            "label": "quoteBalance",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(VaultInfo)7947_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.VaultInfo",
        "members": [
          {
            "astId": 7946,
            "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
            "label": "collateralBalance",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}