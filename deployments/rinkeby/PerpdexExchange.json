{
  "address": "0xE17a0424AD921ef4c3F1FbD445Eb3903Ec2EAC40",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "settlementTokenArg",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "base",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "quote",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "liquidity",
          "type": "int256"
        }
      ],
      "name": "LiquidityChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "exchangedPositionSize",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "exchangedPositionNotional",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "openNotional",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "realizedPnl",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceAfterX96",
          "type": "uint256"
        }
      ],
      "name": "PositionChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionNotional",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionSize",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidationFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        }
      ],
      "name": "PositionLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accountInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "collateralBalance",
              "type": "int256"
            }
          ],
          "internalType": "struct PerpdexStructs.VaultInfo",
          "name": "vaultInfo",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "market",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "base",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quote",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minQuote",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPerpdexExchange.AddLiquidityParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "base",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quote",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPerpdexExchange.AddLiquidityResponse",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getAccountMarkets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "getMakerInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "baseDebtShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quoteDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            }
          ],
          "internalType": "struct PerpdexStructs.MakerInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "getOpenPositionNotional",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "getOpenPositionSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "getPositionNotional",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "getPositionSize",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "getTakerInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "baseBalanceShare",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "quoteBalance",
              "type": "int256"
            }
          ],
          "internalType": "struct PerpdexStructs.TakerInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getTotalAccountValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getTotalOpenPositionNotional",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getTotalPositionNotional",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "hasEnoughInitialMargin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "hasEnoughMaintenanceMargin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "imRatio",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "insuranceFundInfo",
      "outputs": [
        {
          "internalType": "int256",
          "name": "balance",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isMarketAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "market",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "oppositeAmountBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPerpdexExchange.LiquidateParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "liquidate",
      "outputs": [
        {
          "internalType": "int256",
          "name": "base",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "quote",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationRewardRatio",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMarketsPerAccount",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mmRatio",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "market",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isBaseToQuote",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isExactInput",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "oppositeAmountBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPerpdexExchange.OpenPositionParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "openPosition",
      "outputs": [
        {
          "internalType": "int256",
          "name": "base",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "quote",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceLimitConfig",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "priceLimitNormalOrderRatio",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "priceLimitLiquidationRatio",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "priceLimitInfos",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "referencePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "referenceTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "market",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minQuote",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPerpdexExchange.RemoveLiquidityParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "maker",
          "type": "address"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "base",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quote",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPerpdexExchange.RemoveLiquidityResponse",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "market",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minQuote",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPerpdexExchange.RemoveLiquidityParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "base",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quote",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPerpdexExchange.RemoveLiquidityResponse",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "setImRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setIsMarketAllowed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "setLiquidationRewardRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "value",
          "type": "uint8"
        }
      ],
      "name": "setMaxMarketsPerAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "setMmRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint24",
              "name": "priceLimitNormalOrderRatio",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "priceLimitLiquidationRatio",
              "type": "uint24"
            }
          ],
          "internalType": "struct PerpdexStructs.PriceLimitConfig",
          "name": "value",
          "type": "tuple"
        }
      ],
      "name": "setPriceLimitConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settlementToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa000381e1ce4e7d0eb4ca907a07febedbf476c6f88f8b53994c908368e15274e",
  "receipt": {
    "to": null,
    "from": "0x4B78eCe4AA1be3495713199380635537C5fB2326",
    "contractAddress": "0xE17a0424AD921ef4c3F1FbD445Eb3903Ec2EAC40",
    "transactionIndex": 16,
    "gasUsed": "3688750",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000080001000000000000000000000000000000000000020000000000000000000a00000000000000000000000000000000400000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000004000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xdcf3e93141b4d04c7bf90fae95722fcbd934edca9ded5f535f9be08be6d36da1",
    "transactionHash": "0xa000381e1ce4e7d0eb4ca907a07febedbf476c6f88f8b53994c908368e15274e",
    "logs": [
      {
        "transactionIndex": 16,
        "blockNumber": 10756452,
        "transactionHash": "0xa000381e1ce4e7d0eb4ca907a07febedbf476c6f88f8b53994c908368e15274e",
        "address": "0xE17a0424AD921ef4c3F1FbD445Eb3903Ec2EAC40",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004b78ece4aa1be3495713199380635537c5fb2326"
        ],
        "data": "0x",
        "logIndex": 29,
        "blockHash": "0xdcf3e93141b4d04c7bf90fae95722fcbd934edca9ded5f535f9be08be6d36da1"
      }
    ],
    "blockNumber": 10756452,
    "cumulativeGasUsed": "5315740",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc778417E063141139Fce010982780140Aa0cD5Ab"
  ],
  "numDeployments": 1,
  "solcInputHash": "450e65f1140574bc8035fce2ec09b9c0",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"settlementTokenArg\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"base\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"quote\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"liquidity\",\"type\":\"int256\"}],\"name\":\"LiquidityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"exchangedPositionSize\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"exchangedPositionNotional\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"openNotional\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"realizedPnl\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceAfterX96\",\"type\":\"uint256\"}],\"name\":\"PositionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionNotional\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"PositionLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"collateralBalance\",\"type\":\"int256\"}],\"internalType\":\"struct PerpdexStructs.VaultInfo\",\"name\":\"vaultInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IPerpdexExchange.AddLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"internalType\":\"struct IPerpdexExchange.AddLiquidityResponse\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getAccountMarkets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getMakerInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"baseDebtShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"internalType\":\"struct PerpdexStructs.MakerInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getOpenPositionNotional\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getOpenPositionSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getPositionNotional\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getPositionSize\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getTakerInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"baseBalanceShare\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quoteBalance\",\"type\":\"int256\"}],\"internalType\":\"struct PerpdexStructs.TakerInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getTotalAccountValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getTotalOpenPositionNotional\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getTotalPositionNotional\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"hasEnoughInitialMargin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"hasEnoughMaintenanceMargin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"imRatio\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insuranceFundInfo\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"balance\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMarketAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oppositeAmountBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IPerpdexExchange.LiquidateParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"base\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quote\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationRewardRatio\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMarketsPerAccount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mmRatio\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBaseToQuote\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isExactInput\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oppositeAmountBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IPerpdexExchange.OpenPositionParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"openPosition\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"base\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quote\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceLimitConfig\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"priceLimitNormalOrderRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"priceLimitLiquidationRatio\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"priceLimitInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"referencePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referenceTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IPerpdexExchange.RemoveLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"}],\"internalType\":\"struct IPerpdexExchange.RemoveLiquidityResponse\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IPerpdexExchange.RemoveLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"}],\"internalType\":\"struct IPerpdexExchange.RemoveLiquidityResponse\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"setImRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setIsMarketAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"setLiquidationRewardRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"value\",\"type\":\"uint8\"}],\"name\":\"setMaxMarketsPerAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"setMmRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint24\",\"name\":\"priceLimitNormalOrderRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"priceLimitLiquidationRatio\",\"type\":\"uint24\"}],\"internalType\":\"struct PerpdexStructs.PriceLimitConfig\",\"name\":\"value\",\"type\":\"tuple\"}],\"name\":\"setPriceLimitConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settlementToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PerpdexExchange.sol\":\"PerpdexExchange\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x0dd1e9b19801e3e7d900fbf4182d81e1afd23ad7be39504e33df6bbcba91d724\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMathUpgradeable {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xe391db37b722a67addfa9fce3101edf44ba68e2e12ae6fd74d68677b04ffd5a8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa1931c47a617014f858580db625aa0dcf343796f39acd4b5b51effc092a1f0a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8457e15aa90badabe0d6ef6f572f1ebd47bebf156921c825ae6e009dda15b706\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xd17ac7e1d8f83d20d80e652adfed83da122f3a3c7b69fefa2985d85aebf0a3e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-4.0\\npragma solidity >=0.4.0;\\n\\n// taken from https://medium.com/coinmonks/math-in-solidity-part-3-percents-and-proportions-4db014e080b1\\n// license is CC-BY-4.0\\nlibrary FullMath {\\n    function fullMul(uint256 x, uint256 y) internal pure returns (uint256 l, uint256 h) {\\n        uint256 mm = mulmod(x, y, uint256(-1));\\n        l = x * y;\\n        h = mm - l;\\n        if (mm < l) h -= 1;\\n    }\\n\\n    function fullDiv(\\n        uint256 l,\\n        uint256 h,\\n        uint256 d\\n    ) private pure returns (uint256) {\\n        uint256 pow2 = d & -d;\\n        d /= pow2;\\n        l /= pow2;\\n        l += h * ((-pow2) / pow2 + 1);\\n        uint256 r = 1;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        return l * r;\\n    }\\n\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 d\\n    ) internal pure returns (uint256) {\\n        (uint256 l, uint256 h) = fullMul(x, y);\\n\\n        uint256 mm = mulmod(x, y, d);\\n        if (mm > l) h -= 1;\\n        l -= mm;\\n\\n        if (h == 0) return l / d;\\n\\n        require(h < d, 'FullMath: FULLDIV_OVERFLOW');\\n        return fullDiv(l, h, d);\\n    }\\n}\\n\",\"keccak256\":\"0xc4ffcf28169f73fc9fdd1f82345d6d4fcccf3fd5aea83c133437c25e4e0950a9\",\"license\":\"CC-BY-4.0\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe511530871deaef86692cea9adb6076d26d7b47fd4815ce51af52af981026057\",\"license\":\"MIT\"},\"contracts/PerpdexExchange.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IPerpdexExchange } from \\\"./interface/IPerpdexExchange.sol\\\";\\nimport { PerpdexStructs } from \\\"./lib/PerpdexStructs.sol\\\";\\nimport { AccountLibrary } from \\\"./lib/AccountLibrary.sol\\\";\\nimport { MakerLibrary } from \\\"./lib/MakerLibrary.sol\\\";\\nimport { TakerLibrary } from \\\"./lib/TakerLibrary.sol\\\";\\nimport { VaultLibrary } from \\\"./lib/VaultLibrary.sol\\\";\\nimport { PerpMath } from \\\"./lib/PerpMath.sol\\\";\\nimport { PerpSafeCast } from \\\"./lib/PerpSafeCast.sol\\\";\\n\\ncontract PerpdexExchange is IPerpdexExchange, ReentrancyGuard, Ownable {\\n    using Address for address;\\n    using PerpMath for uint256;\\n    using PerpSafeCast for uint256;\\n\\n    // states\\n    // trader\\n    mapping(address => PerpdexStructs.AccountInfo) public override accountInfos;\\n    // market\\n    mapping(address => PerpdexStructs.PriceLimitInfo) public override priceLimitInfos;\\n    PerpdexStructs.InsuranceFundInfo public override insuranceFundInfo;\\n\\n    // config\\n    address public immutable override settlementToken;\\n    PerpdexStructs.PriceLimitConfig public override priceLimitConfig;\\n    uint8 public override maxMarketsPerAccount;\\n    uint24 public override imRatio;\\n    uint24 public override mmRatio;\\n    uint24 public override liquidationRewardRatio;\\n    mapping(address => bool) public override isMarketAllowed;\\n\\n    //\\n    // EXTERNAL NON-VIEW\\n    //\\n\\n    constructor(address settlementTokenArg) {\\n        // CH_SANC: Settlement token address is not contract\\n        require(settlementTokenArg.isContract(), \\\"CH_SANC\\\");\\n\\n        settlementToken = settlementTokenArg;\\n\\n        priceLimitConfig.priceLimitLiquidationRatio = 10e4;\\n        priceLimitConfig.priceLimitLiquidationRatio = 5e4;\\n        maxMarketsPerAccount = 16;\\n        imRatio = 10e4;\\n        mmRatio = 5e4;\\n        liquidationRewardRatio = 20e4;\\n    }\\n\\n    function deposit(uint256 amount) external override nonReentrant {\\n        address trader = _msgSender();\\n        VaultLibrary.deposit(\\n            accountInfos[trader],\\n            VaultLibrary.DepositParams({ settlementToken: settlementToken, amount: amount, from: trader })\\n        );\\n        emit Deposited(trader, amount);\\n    }\\n\\n    function withdraw(uint256 amount) external override nonReentrant {\\n        address trader = _msgSender();\\n        VaultLibrary.withdraw(\\n            accountInfos[trader],\\n            VaultLibrary.WithdrawParams({\\n                settlementToken: settlementToken,\\n                amount: amount,\\n                to: trader,\\n                imRatio: imRatio\\n            })\\n        );\\n        emit Withdrawn(trader, amount);\\n    }\\n\\n    function openPosition(OpenPositionParams calldata params)\\n        external\\n        override\\n        nonReentrant\\n        returns (int256 base, int256 quote)\\n    {\\n        address trader = _msgSender();\\n\\n        TakerLibrary.OpenPositionResponse memory response =\\n            TakerLibrary.openPosition(\\n                accountInfos[trader],\\n                priceLimitInfos[params.market],\\n                TakerLibrary.OpenPositionParams({\\n                    market: params.market,\\n                    isBaseToQuote: params.isBaseToQuote,\\n                    isExactInput: params.isExactInput,\\n                    amount: params.amount,\\n                    oppositeAmountBound: params.oppositeAmountBound,\\n                    deadline: params.deadline,\\n                    priceLimitConfig: priceLimitConfig,\\n                    isMarketAllowed: isMarketAllowed[params.market],\\n                    mmRatio: mmRatio,\\n                    imRatio: imRatio,\\n                    maxMarketsPerAccount: maxMarketsPerAccount\\n                })\\n            );\\n\\n        emit PositionChanged(\\n            trader,\\n            params.market,\\n            response.exchangedBase,\\n            response.exchangedQuote,\\n            accountInfos[trader].takerInfos[params.market].quoteBalance,\\n            response.realizedPnL,\\n            response.priceAfterX96\\n        );\\n\\n        return (response.exchangedBase, response.exchangedQuote);\\n    }\\n\\n    function liquidate(LiquidateParams calldata params)\\n        external\\n        override\\n        nonReentrant\\n        returns (int256 base, int256 quote)\\n    {\\n        address trader = params.trader;\\n        address liquidator = _msgSender();\\n\\n        TakerLibrary.LiquidateResponse memory response =\\n            TakerLibrary.liquidate(\\n                accountInfos[trader],\\n                accountInfos[liquidator],\\n                priceLimitInfos[params.market],\\n                insuranceFundInfo,\\n                TakerLibrary.LiquidateParams({\\n                    market: params.market,\\n                    amount: params.amount,\\n                    oppositeAmountBound: params.oppositeAmountBound,\\n                    deadline: params.deadline,\\n                    priceLimitConfig: priceLimitConfig,\\n                    mmRatio: mmRatio,\\n                    liquidationRewardRatio: liquidationRewardRatio,\\n                    maxMarketsPerAccount: maxMarketsPerAccount\\n                })\\n            );\\n\\n        emit PositionChanged(\\n            trader,\\n            params.market,\\n            response.exchangedBase,\\n            response.exchangedQuote,\\n            accountInfos[trader].takerInfos[params.market].quoteBalance,\\n            response.realizedPnL,\\n            response.priceAfterX96\\n        );\\n\\n        return (response.exchangedBase, response.exchangedQuote);\\n    }\\n\\n    function addLiquidity(AddLiquidityParams calldata params)\\n        external\\n        override\\n        nonReentrant\\n        returns (AddLiquidityResponse memory)\\n    {\\n        address maker = _msgSender();\\n\\n        MakerLibrary.AddLiquidityResponse memory response =\\n            MakerLibrary.addLiquidity(\\n                accountInfos[maker],\\n                MakerLibrary.AddLiquidityParams({\\n                    market: params.market,\\n                    base: params.base,\\n                    quote: params.quote,\\n                    minBase: params.minBase,\\n                    minQuote: params.minQuote,\\n                    deadline: params.deadline,\\n                    isMarketAllowed: isMarketAllowed[params.market],\\n                    imRatio: imRatio,\\n                    maxMarketsPerAccount: maxMarketsPerAccount\\n                })\\n            );\\n\\n        emit LiquidityChanged(\\n            maker,\\n            params.market,\\n            response.base.toInt256(),\\n            response.quote.toInt256(),\\n            response.liquidity.toInt256()\\n        );\\n\\n        return AddLiquidityResponse({ base: response.base, quote: response.quote, liquidity: response.liquidity });\\n    }\\n\\n    function removeLiquidity(RemoveLiquidityParams calldata params)\\n        external\\n        override\\n        returns (RemoveLiquidityResponse memory)\\n    {\\n        return removeLiquidity(params, _msgSender());\\n    }\\n\\n    function removeLiquidity(RemoveLiquidityParams calldata params, address maker)\\n        public\\n        override\\n        nonReentrant\\n        returns (RemoveLiquidityResponse memory)\\n    {\\n        MakerLibrary.RemoveLiquidityResponse memory response =\\n            MakerLibrary.removeLiquidity(\\n                accountInfos[maker],\\n                MakerLibrary.RemoveLiquidityParams({\\n                    market: params.market,\\n                    liquidity: params.liquidity,\\n                    minBase: params.minBase,\\n                    minQuote: params.minQuote,\\n                    deadline: params.deadline,\\n                    makerIsSender: maker == _msgSender(),\\n                    mmRatio: mmRatio,\\n                    maxMarketsPerAccount: maxMarketsPerAccount\\n                })\\n            );\\n\\n        emit LiquidityChanged(\\n            maker,\\n            params.market,\\n            response.base.neg256(),\\n            response.quote.neg256(),\\n            params.liquidity.neg256()\\n        );\\n\\n        emit PositionChanged(\\n            maker,\\n            params.market,\\n            response.takerBase, // exchangedPositionSize\\n            response.takerQuote, // exchangedPositionNotional\\n            accountInfos[maker].takerInfos[params.market].quoteBalance,\\n            response.realizedPnL, // realizedPnl\\n            response.priceAfterX96\\n        );\\n\\n        return RemoveLiquidityResponse({ base: response.base, quote: response.quote });\\n    }\\n\\n    function setPriceLimitConfig(PerpdexStructs.PriceLimitConfig calldata value)\\n        external\\n        override\\n        onlyOwner\\n        nonReentrant\\n    {\\n        priceLimitConfig = value;\\n    }\\n\\n    function setMaxMarketsPerAccount(uint8 value) external override onlyOwner nonReentrant {\\n        maxMarketsPerAccount = value;\\n    }\\n\\n    function setImRatio(uint24 value) external override onlyOwner nonReentrant {\\n        require(value < 1e6);\\n        require(value >= mmRatio);\\n        imRatio = value;\\n    }\\n\\n    function setMmRatio(uint24 value) external override onlyOwner nonReentrant {\\n        require(value <= imRatio);\\n        require(value > 0);\\n        mmRatio = value;\\n    }\\n\\n    function setLiquidationRewardRatio(uint24 value) external override onlyOwner nonReentrant {\\n        require(value < 1e6);\\n        liquidationRewardRatio = value;\\n    }\\n\\n    function setIsMarketAllowed(address market, bool value) external override onlyOwner nonReentrant {\\n        isMarketAllowed[market] = value;\\n    }\\n\\n    //\\n    // EXTERNAL VIEW\\n    //\\n\\n    // all raw information can be retrieved through getters (including default getters)\\n\\n    function getTakerInfo(address trader, address market) external returns (PerpdexStructs.TakerInfo memory) {\\n        return accountInfos[trader].takerInfos[market];\\n    }\\n\\n    function getMakerInfo(address trader, address market) external returns (PerpdexStructs.MakerInfo memory) {\\n        return accountInfos[trader].makerInfos[market];\\n    }\\n\\n    function getAccountMarkets(address trader) external returns (address[] memory) {\\n        return accountInfos[trader].markets;\\n    }\\n\\n    // convenient getters\\n\\n    function getTotalAccountValue(address trader) external view override returns (int256) {\\n        return AccountLibrary.getTotalAccountValue(accountInfos[trader]);\\n    }\\n\\n    function getPositionSize(address trader, address market) external view override returns (int256) {\\n        return AccountLibrary.getPositionSize(accountInfos[trader], market);\\n    }\\n\\n    function getPositionNotional(address trader, address market) external view override returns (int256) {\\n        return AccountLibrary.getPositionNotional(accountInfos[trader], market);\\n    }\\n\\n    function getTotalPositionNotional(address trader) external view override returns (uint256) {\\n        return AccountLibrary.getTotalPositionNotional(accountInfos[trader]);\\n    }\\n\\n    function getOpenPositionSize(address trader, address market) external view override returns (uint256) {\\n        return AccountLibrary.getOpenPositionSize(accountInfos[trader], market);\\n    }\\n\\n    function getOpenPositionNotional(address trader, address market) external view override returns (uint256) {\\n        return AccountLibrary.getOpenPositionNotional(accountInfos[trader], market);\\n    }\\n\\n    function getTotalOpenPositionNotional(address trader) external view override returns (uint256) {\\n        return AccountLibrary.getTotalOpenPositionNotional(accountInfos[trader]);\\n    }\\n\\n    function hasEnoughMaintenanceMargin(address trader) external view override returns (bool) {\\n        return AccountLibrary.hasEnoughMaintenanceMargin(accountInfos[trader], mmRatio);\\n    }\\n\\n    function hasEnoughInitialMargin(address trader) external view override returns (bool) {\\n        return AccountLibrary.hasEnoughInitialMargin(accountInfos[trader], imRatio);\\n    }\\n}\\n\",\"keccak256\":\"0xa7bbf9450b4130f5be1a82594e01475c1d42a9cb7e614606f244c06859b7138d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.7.6;\\n\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8deb4b358e75223f7de598764fb2b014065a172a9e5d91a77210cf556ddafd7c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IPerpdexExchange.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { PerpdexStructs } from \\\"../lib/PerpdexStructs.sol\\\";\\n\\ninterface IPerpdexExchange {\\n    struct AddLiquidityParams {\\n        address market;\\n        uint256 base;\\n        uint256 quote;\\n        uint256 minBase;\\n        uint256 minQuote;\\n        uint256 deadline;\\n    }\\n\\n    struct RemoveLiquidityParams {\\n        address market;\\n        uint256 liquidity;\\n        uint256 minBase;\\n        uint256 minQuote;\\n        uint256 deadline;\\n    }\\n\\n    struct AddLiquidityResponse {\\n        uint256 base;\\n        uint256 quote;\\n        uint256 liquidity;\\n    }\\n\\n    struct RemoveLiquidityResponse {\\n        uint256 base;\\n        uint256 quote;\\n    }\\n\\n    struct OpenPositionParams {\\n        address market;\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n        uint256 amount;\\n        uint256 oppositeAmountBound;\\n        uint256 deadline;\\n    }\\n\\n    struct LiquidateParams {\\n        address trader;\\n        address market;\\n        uint256 amount;\\n        uint256 oppositeAmountBound;\\n        uint256 deadline;\\n    }\\n\\n    event Deposited(address indexed trader, uint256 amount);\\n    event Withdrawn(address indexed trader, uint256 amount);\\n\\n    event PositionLiquidated(\\n        address indexed trader,\\n        address indexed market,\\n        uint256 positionNotional,\\n        uint256 positionSize,\\n        uint256 liquidationFee,\\n        address liquidator\\n    );\\n\\n    event LiquidityChanged(address indexed maker, address indexed market, int256 base, int256 quote, int256 liquidity);\\n\\n    event PositionChanged(\\n        address indexed trader,\\n        address indexed market,\\n        int256 exchangedPositionSize,\\n        int256 exchangedPositionNotional,\\n        int256 openNotional,\\n        int256 realizedPnl,\\n        uint256 priceAfterX96\\n    );\\n\\n    function deposit(uint256 amount) external;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function addLiquidity(AddLiquidityParams calldata params) external returns (AddLiquidityResponse memory);\\n\\n    function removeLiquidity(RemoveLiquidityParams calldata params)\\n        external\\n        returns (RemoveLiquidityResponse memory response);\\n\\n    function removeLiquidity(RemoveLiquidityParams calldata params, address maker)\\n        external\\n        returns (RemoveLiquidityResponse memory response);\\n\\n    function openPosition(OpenPositionParams calldata params) external returns (int256 base, int256 quote);\\n\\n    function liquidate(LiquidateParams calldata params) external returns (int256 base, int256 quote);\\n\\n    // setters\\n\\n    function setPriceLimitConfig(PerpdexStructs.PriceLimitConfig calldata value) external;\\n\\n    function setMaxMarketsPerAccount(uint8 value) external;\\n\\n    function setImRatio(uint24 value) external;\\n\\n    function setMmRatio(uint24 value) external;\\n\\n    function setLiquidationRewardRatio(uint24 value) external;\\n\\n    function setIsMarketAllowed(address market, bool value) external;\\n\\n    // default getters\\n\\n    function accountInfos(address trader) external view returns (PerpdexStructs.VaultInfo memory);\\n\\n    function priceLimitInfos(address market) external view returns (uint256 referencePrice, uint256 referenceTimestamp);\\n\\n    function insuranceFundInfo() external view returns (int256 balance);\\n\\n    function settlementToken() external view returns (address);\\n\\n    function priceLimitConfig()\\n        external\\n        view\\n        returns (uint24 priceLimitNormalOrderRatio, uint24 priceLimitLiquidationRatio);\\n\\n    function maxMarketsPerAccount() external view returns (uint8);\\n\\n    function imRatio() external view returns (uint24);\\n\\n    function mmRatio() external view returns (uint24);\\n\\n    function liquidationRewardRatio() external view returns (uint24);\\n\\n    function isMarketAllowed(address market) external view returns (bool);\\n\\n    // convenient getters\\n\\n    function getTotalAccountValue(address trader) external view returns (int256);\\n\\n    function getPositionSize(address trader, address market) external view returns (int256);\\n\\n    function getPositionNotional(address trader, address market) external view returns (int256);\\n\\n    function getTotalPositionNotional(address trader) external view returns (uint256);\\n\\n    function getOpenPositionSize(address trader, address market) external view returns (uint256);\\n\\n    function getOpenPositionNotional(address trader, address market) external view returns (uint256);\\n\\n    function getTotalOpenPositionNotional(address trader) external view returns (uint256);\\n\\n    function hasEnoughMaintenanceMargin(address trader) external view returns (bool);\\n\\n    function hasEnoughInitialMargin(address trader) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc0af964c8bedaf264e9dce86e0003d609ef3e266ee5b893fbf632b1fc0409545\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IPerpdexMarket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { PerpdexStructs } from \\\"../lib/PerpdexStructs.sol\\\";\\n\\ninterface IPerpdexMarket {\\n    function swap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount\\n    ) external returns (uint256);\\n\\n    function addLiquidity(uint256 baseShare, uint256 quoteBalance)\\n        external\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function removeLiquidity(uint256 liquidity) external returns (uint256 baseShare, uint256 quoteBalance);\\n\\n    // getters\\n\\n    function symbol() external view returns (string memory);\\n\\n    function exchange() external view returns (address);\\n\\n    function getMarkPriceX96() external view returns (uint256);\\n\\n    function getLiquidityValue(uint256 liquidity) external view returns (uint256 baseShare, uint256 quoteBalance);\\n\\n    function shareToBalance(uint256 baseShare) external view returns (uint256);\\n\\n    function balanceToShare(uint256 baseBalance) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x850da92ae991a1d77805cad4919e5bbb52065795d32e37ff2e83fdeffbc49ff6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/AccountLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\nimport { FullMath } from \\\"@uniswap/lib/contracts/libraries/FullMath.sol\\\";\\nimport { PerpSafeCast } from \\\"./PerpSafeCast.sol\\\";\\nimport { IPerpdexMarket } from \\\"../interface/IPerpdexMarket.sol\\\";\\nimport { MarketLibrary } from \\\"./MarketLibrary.sol\\\";\\nimport { PerpdexStructs } from \\\"./PerpdexStructs.sol\\\";\\n\\n// https://help.ftx.com/hc/en-us/articles/360024780511-Complete-Futures-Specs\\nlibrary AccountLibrary {\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using PerpSafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    function getTotalAccountValue(PerpdexStructs.AccountInfo storage accountInfo) internal view returns (int256) {\\n        address[] storage markets = accountInfo.markets;\\n        int256 accountValue = accountInfo.vaultInfo.collateralBalance;\\n        uint256 length = markets.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            address market = markets[i];\\n            PerpdexStructs.MakerInfo storage makerInfo = accountInfo.makerInfos[market];\\n            int256 baseShare = accountInfo.takerInfos[market].baseBalanceShare.sub(makerInfo.baseDebtShare.toInt256());\\n            int256 quoteBalance = accountInfo.takerInfos[market].quoteBalance.sub(makerInfo.quoteDebt.toInt256());\\n            (uint256 poolBaseShare, uint256 poolQuoteBalance) =\\n                IPerpdexMarket(market).getLiquidityValue(makerInfo.liquidity);\\n\\n            int256 positionSize = MarketLibrary.shareToBalance(market, baseShare.add(poolBaseShare.toInt256()));\\n            uint256 priceX96 = IPerpdexMarket(market).getMarkPriceX96();\\n\\n            accountValue = accountValue.add(positionSize.mulDiv(priceX96.toInt256(), FixedPoint96.Q96));\\n            accountValue = accountValue.add(quoteBalance.add(poolQuoteBalance.toInt256()));\\n        }\\n        return accountValue;\\n    }\\n\\n    function getPositionSize(PerpdexStructs.AccountInfo storage accountInfo, address market)\\n        internal\\n        view\\n        returns (int256)\\n    {\\n        PerpdexStructs.MakerInfo storage makerInfo = accountInfo.makerInfos[market];\\n        int256 baseShare = accountInfo.takerInfos[market].baseBalanceShare.sub(makerInfo.baseDebtShare.toInt256());\\n        (uint256 poolBaseShare, ) = IPerpdexMarket(market).getLiquidityValue(makerInfo.liquidity);\\n        return MarketLibrary.shareToBalance(market, baseShare.add(poolBaseShare.toInt256()));\\n    }\\n\\n    function getPositionNotional(PerpdexStructs.AccountInfo storage accountInfo, address market)\\n        internal\\n        view\\n        returns (int256)\\n    {\\n        int256 positionSize = getPositionSize(accountInfo, market);\\n        uint256 priceX96 = IPerpdexMarket(market).getMarkPriceX96();\\n        return positionSize.mulDiv(priceX96.toInt256(), FixedPoint96.Q96);\\n    }\\n\\n    function getTotalPositionNotional(PerpdexStructs.AccountInfo storage accountInfo) internal view returns (uint256) {\\n        address[] storage markets = accountInfo.markets;\\n        uint256 totalPositionNotional;\\n        uint256 length = markets.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            uint256 positionNotional = getPositionNotional(accountInfo, markets[i]).abs();\\n            totalPositionNotional = totalPositionNotional.add(positionNotional);\\n        }\\n        return totalPositionNotional;\\n    }\\n\\n    function getOpenPositionSize(PerpdexStructs.AccountInfo storage accountInfo, address market)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        PerpdexStructs.MakerInfo storage makerInfo = accountInfo.makerInfos[market];\\n        (uint256 poolBaseShare, ) = IPerpdexMarket(market).getLiquidityValue(makerInfo.liquidity);\\n        return getPositionSize(accountInfo, market).abs().add(poolBaseShare);\\n    }\\n\\n    function getOpenPositionNotional(PerpdexStructs.AccountInfo storage accountInfo, address market)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 positionSize = getOpenPositionSize(accountInfo, market);\\n        uint256 priceX96 = IPerpdexMarket(market).getMarkPriceX96();\\n        return FullMath.mulDiv(positionSize, priceX96, FixedPoint96.Q96);\\n    }\\n\\n    function getTotalOpenPositionNotional(PerpdexStructs.AccountInfo storage accountInfo)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        address[] storage markets = accountInfo.markets;\\n        uint256 totalOpenPositionNotional;\\n        uint256 length = markets.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            uint256 positionNotional = getOpenPositionNotional(accountInfo, markets[i]);\\n            totalOpenPositionNotional = totalOpenPositionNotional.add(positionNotional);\\n        }\\n        return totalOpenPositionNotional;\\n    }\\n\\n    // always true when hasEnoughMaintenanceMargin is true\\n    function hasEnoughMaintenanceMargin(PerpdexStructs.AccountInfo storage accountInfo, uint24 mmRatio)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        int256 accountValue = getTotalAccountValue(accountInfo);\\n        uint256 totalPositionNotional = getTotalPositionNotional(accountInfo);\\n        return accountValue >= totalPositionNotional.mulRatio(mmRatio).toInt256();\\n    }\\n\\n    function hasEnoughInitialMargin(PerpdexStructs.AccountInfo storage accountInfo, uint24 imRatio)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        int256 accountValue = getTotalAccountValue(accountInfo);\\n        uint256 totalOpenPositionNotional = getTotalOpenPositionNotional(accountInfo);\\n        return\\n            accountValue.min(accountInfo.vaultInfo.collateralBalance) >=\\n            totalOpenPositionNotional.mulRatio(imRatio).toInt256();\\n    }\\n\\n    function updateMarkets(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address market,\\n        uint8 maxMarketsPerAccount\\n    ) internal {\\n        require(market != address(0));\\n\\n        bool enabled =\\n            accountInfo.takerInfos[market].baseBalanceShare != 0 || accountInfo.makerInfos[market].liquidity != 0;\\n        address[] storage markets = accountInfo.markets;\\n        uint256 length = markets.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            if (markets[i] == market) {\\n                if (!enabled) {\\n                    markets[i] = markets[length - 1];\\n                    markets.pop();\\n                }\\n                return;\\n            }\\n        }\\n        markets.push(market);\\n        require(markets.length <= maxMarketsPerAccount);\\n    }\\n}\\n\",\"keccak256\":\"0x0abdb9520e4a28e5c55467a3babb4be154a7bbdb48564f756373c943ccb15473\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/MakerLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { FullMath } from \\\"@uniswap/lib/contracts/libraries/FullMath.sol\\\";\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { PerpSafeCast } from \\\"./PerpSafeCast.sol\\\";\\nimport { IPerpdexMarket } from \\\"../interface/IPerpdexMarket.sol\\\";\\nimport { MarketLibrary } from \\\"./MarketLibrary.sol\\\";\\nimport { PerpdexStructs } from \\\"./PerpdexStructs.sol\\\";\\nimport { AccountLibrary } from \\\"./AccountLibrary.sol\\\";\\nimport { TakerLibrary } from \\\"./TakerLibrary.sol\\\";\\n\\nlibrary MakerLibrary {\\n    using PerpMath for int256;\\n    using PerpSafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    struct AddLiquidityParams {\\n        address market;\\n        uint256 base;\\n        uint256 quote;\\n        uint256 minBase;\\n        uint256 minQuote;\\n        uint256 deadline;\\n        bool isMarketAllowed;\\n        uint24 imRatio;\\n        uint8 maxMarketsPerAccount;\\n    }\\n\\n    struct AddLiquidityResponse {\\n        uint256 base;\\n        uint256 quote;\\n        uint256 liquidity;\\n    }\\n\\n    struct RemoveLiquidityParams {\\n        address market;\\n        uint256 liquidity;\\n        uint256 minBase;\\n        uint256 minQuote;\\n        uint256 deadline;\\n        bool makerIsSender;\\n        uint24 mmRatio;\\n        uint8 maxMarketsPerAccount;\\n    }\\n\\n    struct RemoveLiquidityResponse {\\n        uint256 base;\\n        uint256 quote;\\n        int256 takerBase;\\n        int256 takerQuote;\\n        int256 realizedPnL;\\n        uint256 priceAfterX96;\\n    }\\n\\n    modifier checkDeadline(uint256 deadline) {\\n        require(block.timestamp <= deadline, \\\"CH_TE\\\");\\n        _;\\n    }\\n\\n    function addLiquidity(PerpdexStructs.AccountInfo storage accountInfo, AddLiquidityParams memory params)\\n        internal\\n        checkDeadline(params.deadline)\\n        returns (AddLiquidityResponse memory)\\n    {\\n        require(params.isMarketAllowed);\\n\\n        (uint256 baseShare, uint256 quoteBalance, uint256 liquidity) =\\n            IPerpdexMarket(params.market).addLiquidity(params.base, params.quote);\\n\\n        PerpdexStructs.MakerInfo storage makerInfo = accountInfo.makerInfos[params.market];\\n        makerInfo.baseDebtShare = makerInfo.baseDebtShare.add(baseShare);\\n        makerInfo.quoteDebt = makerInfo.quoteDebt.add(quoteBalance);\\n        makerInfo.liquidity = makerInfo.liquidity.add(liquidity);\\n\\n        AccountLibrary.updateMarkets(accountInfo, params.market, params.maxMarketsPerAccount);\\n\\n        require(AccountLibrary.hasEnoughInitialMargin(accountInfo, params.imRatio));\\n\\n        return AddLiquidityResponse({ base: baseShare, quote: quoteBalance, liquidity: liquidity });\\n    }\\n\\n    function removeLiquidity(PerpdexStructs.AccountInfo storage accountInfo, RemoveLiquidityParams memory params)\\n        internal\\n        checkDeadline(params.deadline)\\n        returns (RemoveLiquidityResponse memory funcResponse)\\n    {\\n        if (!params.makerIsSender) {\\n            require(!AccountLibrary.hasEnoughMaintenanceMargin(accountInfo, params.mmRatio));\\n        }\\n\\n        {\\n            (uint256 resBaseShare, uint256 resQuoteBalance) =\\n                IPerpdexMarket(params.market).removeLiquidity(params.liquidity);\\n\\n            require(resBaseShare >= params.minBase);\\n            require(resQuoteBalance >= params.minQuote);\\n\\n            funcResponse.base = resBaseShare;\\n            funcResponse.quote = resQuoteBalance;\\n        }\\n\\n        {\\n            (uint256 baseDebtShare, uint256 quoteDebt) =\\n                _removeLiquidityFromOrder(accountInfo.makerInfos[params.market], params.liquidity);\\n            AccountLibrary.updateMarkets(accountInfo, params.market, params.maxMarketsPerAccount);\\n\\n            funcResponse.priceAfterX96 = IPerpdexMarket(params.market).getMarkPriceX96();\\n            funcResponse.takerBase = funcResponse.base.toInt256().sub(\\n                IPerpdexMarket(params.market).shareToBalance(baseDebtShare).toInt256()\\n            );\\n            funcResponse.takerQuote = funcResponse.quote.toInt256().sub(quoteDebt.toInt256());\\n        }\\n\\n        {\\n            int256 takerQuoteCalculatedAtCurrentPrice =\\n                -funcResponse.takerBase.mulDiv(funcResponse.priceAfterX96.toInt256(), FixedPoint96.Q96);\\n            funcResponse.realizedPnL = TakerLibrary.addToTakerBalance(\\n                accountInfo,\\n                params.market,\\n                funcResponse.takerBase,\\n                takerQuoteCalculatedAtCurrentPrice,\\n                funcResponse.takerQuote.sub(takerQuoteCalculatedAtCurrentPrice),\\n                params.maxMarketsPerAccount\\n            );\\n        }\\n    }\\n\\n    function _removeLiquidityFromOrder(PerpdexStructs.MakerInfo storage makerInfo, uint256 liquidity)\\n        private\\n        returns (uint256 baseDebtShare, uint256 quoteDebt)\\n    {\\n        if (liquidity != 0) {\\n            if (makerInfo.baseDebtShare != 0) {\\n                baseDebtShare = FullMath.mulDiv(makerInfo.baseDebtShare, liquidity, makerInfo.liquidity);\\n                makerInfo.baseDebtShare = makerInfo.baseDebtShare.sub(baseDebtShare);\\n            }\\n            if (makerInfo.quoteDebt != 0) {\\n                quoteDebt = FullMath.mulDiv(makerInfo.quoteDebt, liquidity, makerInfo.liquidity);\\n                makerInfo.quoteDebt = makerInfo.quoteDebt.sub(quoteDebt);\\n            }\\n            makerInfo.liquidity = makerInfo.liquidity.sub(liquidity);\\n        }\\n\\n        return (baseDebtShare, quoteDebt);\\n    }\\n}\\n\",\"keccak256\":\"0x1d278e04d704309dbac6ed9c95886ecce4051edec229563c0617fac6ef7668a8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/MarketLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nimport { IPerpdexMarket } from \\\"../interface/IPerpdexMarket.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { PerpSafeCast } from \\\"./PerpSafeCast.sol\\\";\\n\\nlibrary MarketLibrary {\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using PerpSafeCast for uint256;\\n\\n    function swap(\\n        address market,\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        uint256 oppositeAmountBound\\n    ) internal returns (int256, int256) {\\n        uint256 resAmount = IPerpdexMarket(market).swap(isBaseToQuote, isExactInput, amount);\\n\\n        if (isExactInput) {\\n            require(resAmount >= oppositeAmountBound);\\n            if (isBaseToQuote) {\\n                return (amount.neg256(), resAmount.toInt256());\\n            } else {\\n                return (resAmount.toInt256(), amount.neg256());\\n            }\\n        } else {\\n            require(resAmount <= oppositeAmountBound);\\n            if (isBaseToQuote) {\\n                return (resAmount.neg256(), amount.toInt256());\\n            } else {\\n                return (amount.toInt256(), resAmount.neg256());\\n            }\\n        }\\n    }\\n\\n    function balanceToShare(address market, int256 balance) internal view returns (int256) {\\n        uint256 shareAbs = IPerpdexMarket(market).balanceToShare(balance.abs());\\n        return balance < 0 ? shareAbs.neg256() : shareAbs.toInt256();\\n    }\\n\\n    function shareToBalance(address market, int256 share) internal view returns (int256) {\\n        uint256 balanceAbs = IPerpdexMarket(market).shareToBalance(share.abs());\\n        return share < 0 ? balanceAbs.neg256() : balanceAbs.toInt256();\\n    }\\n}\\n\",\"keccak256\":\"0xc07f257a432e324d18c5e0dce44665ce308cf9343184e6ffd1509c53d5851d5b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PerpMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { FullMath } from \\\"@uniswap/v3-core/contracts/libraries/FullMath.sol\\\";\\nimport { PerpSafeCast } from \\\"./PerpSafeCast.sol\\\";\\nimport { SafeMathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport { SignedSafeMathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol\\\";\\n\\nlibrary PerpMath {\\n    using PerpSafeCast for int256;\\n    using SignedSafeMathUpgradeable for int256;\\n    using SafeMathUpgradeable for uint256;\\n\\n    function formatSqrtPriceX96ToPriceX96(uint160 sqrtPriceX96) internal pure returns (uint256) {\\n        return FullMath.mulDiv(sqrtPriceX96, sqrtPriceX96, FixedPoint96.Q96);\\n    }\\n\\n    function formatX10_18ToX96(uint256 valueX10_18) internal pure returns (uint256) {\\n        return FullMath.mulDiv(valueX10_18, FixedPoint96.Q96, 1 ether);\\n    }\\n\\n    function formatX96ToX10_18(uint256 valueX96) internal pure returns (uint256) {\\n        return FullMath.mulDiv(valueX96, 1 ether, FixedPoint96.Q96);\\n    }\\n\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function abs(int256 value) internal pure returns (uint256) {\\n        return value >= 0 ? value.toUint256() : neg256(value).toUint256();\\n    }\\n\\n    function neg256(int256 a) internal pure returns (int256) {\\n        require(a > -2**255, \\\"PerpMath: inversion overflow\\\");\\n        return -a;\\n    }\\n\\n    function neg256(uint256 a) internal pure returns (int256) {\\n        return -PerpSafeCast.toInt256(a);\\n    }\\n\\n    function neg128(int128 a) internal pure returns (int128) {\\n        require(a > -2**127, \\\"PerpMath: inversion overflow\\\");\\n        return -a;\\n    }\\n\\n    function neg128(uint128 a) internal pure returns (int128) {\\n        return -PerpSafeCast.toInt128(a);\\n    }\\n\\n    function divBy10_18(int256 value) internal pure returns (int256) {\\n        // no overflow here\\n        return value / (1 ether);\\n    }\\n\\n    function divBy10_18(uint256 value) internal pure returns (uint256) {\\n        // no overflow here\\n        return value / (1 ether);\\n    }\\n\\n    function subRatio(uint24 a, uint24 b) internal pure returns (uint24) {\\n        require(b <= a, \\\"PerpMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    function mulRatio(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return FullMath.mulDiv(value, ratio, 1e6);\\n    }\\n\\n    function divRatio(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return FullMath.mulDiv(value, 1e6, ratio);\\n    }\\n\\n    /// @param denominator cannot be 0 and is checked in FullMath.mulDiv()\\n    function mulDiv(\\n        int256 a,\\n        int256 b,\\n        uint256 denominator\\n    ) internal pure returns (int256 result) {\\n        uint256 unsignedA = a < 0 ? uint256(neg256(a)) : uint256(a);\\n        uint256 unsignedB = b < 0 ? uint256(neg256(b)) : uint256(b);\\n        bool negative = ((a < 0 && b > 0) || (a > 0 && b < 0)) ? true : false;\\n\\n        uint256 unsignedResult = FullMath.mulDiv(unsignedA, unsignedB, denominator);\\n\\n        result = negative ? neg256(unsignedResult) : PerpSafeCast.toInt256(unsignedResult);\\n\\n        return result;\\n    }\\n\\n    function sign(int256 value) internal pure returns (int256) {\\n        return value > 0 ? 1 : (value < 0 ? -1 : int256(0));\\n    }\\n}\\n\",\"keccak256\":\"0xe4d7752bfc35e9b67fd81b7485a880f5e76c2744ff7f984204180ca5dea99d9f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PerpSafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev copy from \\\"@openzeppelin/contracts-upgradeable/utils/SafeCastUpgradeable.sol\\\"\\n * and rename to avoid naming conflict with uniswap\\n */\\nlibrary PerpSafeCast {\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128 returnValue) {\\n        require(((returnValue = uint128(value)) == value), \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64 returnValue) {\\n        require(((returnValue = uint64(value)) == value), \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32 returnValue) {\\n        require(((returnValue = uint32(value)) == value), \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16 returnValue) {\\n        require(((returnValue = uint16(value)) == value), \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8 returnValue) {\\n        require(((returnValue = uint8(value)) == value), \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 returnValue) {\\n        require(((returnValue = int128(value)) == value), \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 returnValue) {\\n        require(((returnValue = int64(value)) == value), \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 returnValue) {\\n        require(((returnValue = int32(value)) == value), \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 returnValue) {\\n        require(((returnValue = int16(value)) == value), \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 returnValue) {\\n        require(((returnValue = int8(value)) == value), \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from int256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0 and into 24 bit.\\n     */\\n    function toUint24(int256 value) internal pure returns (uint24 returnValue) {\\n        require(\\n            ((returnValue = uint24(value)) == value),\\n            \\\"SafeCast: value must be positive or value doesn't fit in an 24 bits\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 returnValue) {\\n        require(((returnValue = int24(value)) == value), \\\"SafeCast: value doesn't fit in an 24 bits\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x6aba2cd6fe208ea413e3e087540ab092c2f3e9455e317de485bd82a81769e381\",\"license\":\"MIT\"},\"contracts/lib/PerpdexStructs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nlibrary PerpdexStructs {\\n    struct TakerInfo {\\n        int256 baseBalanceShare;\\n        int256 quoteBalance;\\n    }\\n\\n    struct MakerInfo {\\n        uint256 baseDebtShare;\\n        uint256 quoteDebt;\\n        uint256 liquidity;\\n    }\\n\\n    struct VaultInfo {\\n        int256 collateralBalance;\\n    }\\n\\n    struct AccountInfo {\\n        // market\\n        mapping(address => TakerInfo) takerInfos;\\n        // market\\n        mapping(address => MakerInfo) makerInfos;\\n        VaultInfo vaultInfo;\\n        address[] markets;\\n    }\\n\\n    struct InsuranceFundInfo {\\n        int256 balance;\\n    }\\n\\n    struct PriceLimitInfo {\\n        uint256 referencePrice;\\n        uint256 referenceTimestamp;\\n    }\\n\\n    struct PriceLimitConfig {\\n        uint24 priceLimitNormalOrderRatio;\\n        uint24 priceLimitLiquidationRatio;\\n    }\\n}\\n\",\"keccak256\":\"0x585b91719421236ceca61cfc2dd33055f703bfe30e2b389e347cdb5ba067c102\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PriceLimitLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { PerpdexStructs } from \\\"./PerpdexStructs.sol\\\";\\n\\nlibrary PriceLimitLibrary {\\n    using PerpMath for uint256;\\n    using SafeMath for uint256;\\n\\n    function isNormalOrderAllowed(\\n        PerpdexStructs.PriceLimitInfo storage priceLimitInfo,\\n        PerpdexStructs.PriceLimitConfig memory config,\\n        uint256 price\\n    ) internal view returns (bool) {\\n        return _isWithinPriceLimit(priceLimitInfo.referencePrice, price, config.priceLimitNormalOrderRatio);\\n    }\\n\\n    function isLiquidationAllowed(\\n        PerpdexStructs.PriceLimitInfo storage priceLimitInfo,\\n        PerpdexStructs.PriceLimitConfig memory config,\\n        uint256 price\\n    ) internal view returns (bool) {\\n        return _isWithinPriceLimit(priceLimitInfo.referencePrice, price, config.priceLimitLiquidationRatio);\\n    }\\n\\n    // should call before all price changes\\n    function update(PerpdexStructs.PriceLimitInfo storage priceLimitInfo, uint256 price) internal {\\n        if (priceLimitInfo.referenceTimestamp < block.timestamp) {\\n            priceLimitInfo.referencePrice = price;\\n            priceLimitInfo.referenceTimestamp = block.timestamp;\\n        }\\n    }\\n\\n    function _isWithinPriceLimit(\\n        uint256 referencePrice,\\n        uint256 price,\\n        uint24 priceLimitRatio\\n    ) private pure returns (bool) {\\n        uint256 maxChange = referencePrice.mulRatio(priceLimitRatio);\\n        uint256 upperBound = referencePrice.add(maxChange);\\n        uint256 lowerBound = referencePrice.sub(maxChange);\\n        return (lowerBound <= price && price <= upperBound);\\n    }\\n}\\n\",\"keccak256\":\"0x9131dd722d1239ca9b4b4ab723e9c7d5e5f34e7e1cf0856b82958bf58a3d69ff\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/TakerLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\nimport { FullMath } from \\\"@uniswap/lib/contracts/libraries/FullMath.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { PerpSafeCast } from \\\"./PerpSafeCast.sol\\\";\\nimport { IPerpdexMarket } from \\\"../interface/IPerpdexMarket.sol\\\";\\nimport { MarketLibrary } from \\\"./MarketLibrary.sol\\\";\\nimport { PerpdexStructs } from \\\"./PerpdexStructs.sol\\\";\\nimport { AccountLibrary } from \\\"./AccountLibrary.sol\\\";\\nimport { PriceLimitLibrary } from \\\"./PriceLimitLibrary.sol\\\";\\n\\nlibrary TakerLibrary {\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using PerpSafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    struct OpenPositionParams {\\n        address market;\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n        uint256 amount;\\n        uint256 oppositeAmountBound;\\n        uint256 deadline;\\n        PerpdexStructs.PriceLimitConfig priceLimitConfig;\\n        bool isMarketAllowed;\\n        uint24 mmRatio;\\n        uint24 imRatio;\\n        uint8 maxMarketsPerAccount;\\n    }\\n\\n    struct OpenPositionResponse {\\n        int256 exchangedBase;\\n        int256 exchangedQuote;\\n        int256 realizedPnL;\\n        uint256 priceAfterX96;\\n    }\\n\\n    struct LiquidateParams {\\n        address market;\\n        uint256 amount;\\n        uint256 oppositeAmountBound;\\n        uint256 deadline;\\n        PerpdexStructs.PriceLimitConfig priceLimitConfig;\\n        uint24 mmRatio;\\n        uint24 liquidationRewardRatio;\\n        uint8 maxMarketsPerAccount;\\n    }\\n\\n    struct LiquidateResponse {\\n        int256 exchangedBase;\\n        int256 exchangedQuote;\\n        int256 realizedPnL;\\n        uint256 priceAfterX96;\\n    }\\n\\n    modifier checkDeadline(uint256 deadline) {\\n        require(block.timestamp <= deadline, \\\"CH_TE\\\");\\n        _;\\n    }\\n\\n    function openPosition(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        PerpdexStructs.PriceLimitInfo storage priceLimitInfo,\\n        OpenPositionParams memory params\\n    ) internal checkDeadline(params.deadline) returns (OpenPositionResponse memory) {\\n        require(!AccountLibrary.hasEnoughMaintenanceMargin(accountInfo, params.mmRatio));\\n\\n        (int256 exchangedBase, int256 exchangedQuote, int256 realizedPnL) =\\n            _doSwap(\\n                accountInfo,\\n                priceLimitInfo,\\n                params.market,\\n                params.isBaseToQuote,\\n                params.isExactInput,\\n                params.amount,\\n                params.oppositeAmountBound,\\n                params.maxMarketsPerAccount\\n            );\\n\\n        if (!params.isMarketAllowed) {\\n            require(accountInfo.takerInfos[params.market].baseBalanceShare.sign() * exchangedBase.sign() <= 0);\\n        }\\n\\n        uint256 priceAfterX96 = _getPriceX96(params.market);\\n        require(PriceLimitLibrary.isNormalOrderAllowed(priceLimitInfo, params.priceLimitConfig, priceAfterX96));\\n\\n        require(AccountLibrary.hasEnoughInitialMargin(accountInfo, params.imRatio));\\n\\n        return\\n            OpenPositionResponse({\\n                exchangedBase: exchangedBase,\\n                exchangedQuote: exchangedQuote,\\n                realizedPnL: realizedPnL,\\n                priceAfterX96: priceAfterX96\\n            });\\n    }\\n\\n    function liquidate(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        PerpdexStructs.AccountInfo storage liquidatorAccountInfo,\\n        PerpdexStructs.PriceLimitInfo storage priceLimitInfo,\\n        PerpdexStructs.InsuranceFundInfo storage insuranceFundInfo,\\n        LiquidateParams memory params\\n    ) internal checkDeadline(params.deadline) returns (LiquidateResponse memory) {\\n        require(!AccountLibrary.hasEnoughMaintenanceMargin(accountInfo, params.mmRatio));\\n\\n        bool isLong;\\n        {\\n            PerpdexStructs.TakerInfo storage takerInfo = accountInfo.takerInfos[params.market];\\n            isLong = takerInfo.baseBalanceShare > 0 ? true : false;\\n            require(params.amount <= IPerpdexMarket(params.market).shareToBalance(takerInfo.baseBalanceShare.abs()));\\n        }\\n\\n        (int256 exchangedBase, int256 exchangedQuote, int256 realizedPnL) =\\n            _doSwap(\\n                accountInfo,\\n                priceLimitInfo,\\n                params.market,\\n                isLong, // isBaseToQuote,\\n                isLong, // isExactInput,\\n                params.amount,\\n                params.oppositeAmountBound,\\n                params.maxMarketsPerAccount\\n            );\\n\\n        uint256 priceAfterX96 = _getPriceX96(params.market);\\n        require(PriceLimitLibrary.isLiquidationAllowed(priceLimitInfo, params.priceLimitConfig, priceAfterX96));\\n\\n        _processLiquidationFee(\\n            accountInfo.vaultInfo,\\n            liquidatorAccountInfo.vaultInfo,\\n            insuranceFundInfo,\\n            params.mmRatio,\\n            params.liquidationRewardRatio,\\n            exchangedQuote.abs()\\n        );\\n\\n        return\\n            LiquidateResponse({\\n                exchangedBase: exchangedBase,\\n                exchangedQuote: exchangedQuote,\\n                realizedPnL: realizedPnL,\\n                priceAfterX96: priceAfterX96\\n            });\\n    }\\n\\n    function addToTakerBalance(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address market,\\n        int256 baseBalance,\\n        int256 quoteBalance,\\n        int256 quoteFee,\\n        uint8 maxMarketsPerAccount\\n    ) internal returns (int256) {\\n        require(baseBalance.sign() * quoteBalance.sign() == -1);\\n\\n        int256 baseShare = MarketLibrary.balanceToShare(market, baseBalance);\\n        PerpdexStructs.TakerInfo storage takerInfo = accountInfo.takerInfos[market];\\n\\n        int256 realizedPnL;\\n\\n        if (takerInfo.baseBalanceShare.sign() * baseShare.sign() == -1) {\\n            uint256 FULLY_CLOSED_RATIO = 1e18;\\n            uint256 closedRatio =\\n                FullMath.mulDiv(baseShare.abs(), FULLY_CLOSED_RATIO, takerInfo.baseBalanceShare.abs());\\n\\n            if (closedRatio <= FULLY_CLOSED_RATIO) {\\n                int256 reducedOpenNotional = takerInfo.quoteBalance.mulDiv(closedRatio.toInt256(), FULLY_CLOSED_RATIO);\\n                realizedPnL = quoteBalance.add(reducedOpenNotional).add(quoteFee);\\n            } else {\\n                int256 closedPositionNotional = quoteBalance.mulDiv(int256(FULLY_CLOSED_RATIO), closedRatio);\\n                realizedPnL = takerInfo.quoteBalance.add(closedPositionNotional).add(quoteFee);\\n            }\\n        } else {\\n            realizedPnL = quoteFee;\\n        }\\n\\n        takerInfo.baseBalanceShare = takerInfo.baseBalanceShare.add(baseShare);\\n        takerInfo.quoteBalance = takerInfo.quoteBalance.add(quoteBalance).add(quoteFee).sub(realizedPnL);\\n        accountInfo.vaultInfo.collateralBalance = accountInfo.vaultInfo.collateralBalance.add(realizedPnL);\\n\\n        AccountLibrary.updateMarkets(accountInfo, market, maxMarketsPerAccount);\\n\\n        return realizedPnL;\\n    }\\n\\n    function _getPriceX96(address market) private returns (uint256) {\\n        return IPerpdexMarket(market).getMarkPriceX96();\\n    }\\n\\n    function _doSwap(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        PerpdexStructs.PriceLimitInfo storage priceLimitInfo,\\n        address market,\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        uint256 oppositeAmountBound,\\n        uint8 maxMarketsPerAccount\\n    )\\n        private\\n        returns (\\n            int256,\\n            int256,\\n            int256\\n        )\\n    {\\n        {\\n            uint256 priceBeforeX96 = _getPriceX96(market);\\n            PriceLimitLibrary.update(priceLimitInfo, priceBeforeX96);\\n        }\\n\\n        (int256 exchangedPositionSize, int256 exchangedPositionNotional) =\\n            MarketLibrary.swap(market, isBaseToQuote, isExactInput, amount, oppositeAmountBound);\\n\\n        int256 realizedPnL =\\n            addToTakerBalance(\\n                accountInfo,\\n                market,\\n                exchangedPositionSize,\\n                exchangedPositionNotional,\\n                0,\\n                maxMarketsPerAccount\\n            );\\n\\n        return (exchangedPositionSize, exchangedPositionNotional, realizedPnL);\\n    }\\n\\n    function _processLiquidationFee(\\n        PerpdexStructs.VaultInfo storage vaultInfo,\\n        PerpdexStructs.VaultInfo storage liquidatorVaultInfo,\\n        PerpdexStructs.InsuranceFundInfo storage insuranceFundInfo,\\n        uint24 mmRatio,\\n        uint24 liquidatorRewardRatio,\\n        uint256 exchangedQuote\\n    ) private returns (uint256) {\\n        uint256 penalty = exchangedQuote.mulRatio(mmRatio);\\n        uint256 liquidatorReward = penalty.mulRatio(liquidatorRewardRatio);\\n        uint256 insuranceFundReward = penalty.sub(liquidatorReward);\\n\\n        vaultInfo.collateralBalance = vaultInfo.collateralBalance.sub(penalty.toInt256());\\n        liquidatorVaultInfo.collateralBalance = liquidatorVaultInfo.collateralBalance.add(liquidatorReward.toInt256());\\n        insuranceFundInfo.balance = insuranceFundInfo.balance.add(insuranceFundReward.toInt256());\\n\\n        return penalty;\\n    }\\n}\\n\",\"keccak256\":\"0xa8192471d8199738d587129f2b274acbc4124df0f1544d461bb73591475a5a0d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/VaultLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport { SafeERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\nimport { IERC20Metadata } from \\\"../interface/IERC20Metadata.sol\\\";\\nimport { PerpSafeCast } from \\\"./PerpSafeCast.sol\\\";\\nimport { AccountLibrary } from \\\"./AccountLibrary.sol\\\";\\nimport { PerpdexStructs } from \\\"./PerpdexStructs.sol\\\";\\n\\nlibrary VaultLibrary {\\n    using PerpSafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    struct DepositParams {\\n        address settlementToken;\\n        uint256 amount;\\n        address from;\\n    }\\n\\n    struct WithdrawParams {\\n        address settlementToken;\\n        uint256 amount;\\n        address to;\\n        uint24 imRatio;\\n    }\\n\\n    function deposit(PerpdexStructs.AccountInfo storage accountInfo, DepositParams memory params) internal {\\n        // V_ZA: Zero amount\\n        require(params.amount > 0, \\\"V_ZA\\\");\\n        _transferTokenIn(params.settlementToken, params.from, params.amount);\\n        accountInfo.vaultInfo.collateralBalance = accountInfo.vaultInfo.collateralBalance.add(params.amount.toInt256());\\n    }\\n\\n    function withdraw(PerpdexStructs.AccountInfo storage accountInfo, WithdrawParams memory params) internal {\\n        // V_ZA: Zero amount\\n        require(params.amount > 0, \\\"V_ZA\\\");\\n        accountInfo.vaultInfo.collateralBalance = accountInfo.vaultInfo.collateralBalance.sub(params.amount.toInt256());\\n        require(AccountLibrary.hasEnoughInitialMargin(accountInfo, params.imRatio));\\n\\n        SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(params.settlementToken), params.to, params.amount);\\n    }\\n\\n    function _transferTokenIn(\\n        address token,\\n        address from,\\n        uint256 amount\\n    ) private {\\n        // check for deflationary tokens by assuring balances before and after transferring to be the same\\n        uint256 balanceBefore = IERC20Metadata(token).balanceOf(address(this));\\n        SafeERC20Upgradeable.safeTransferFrom(IERC20Upgradeable(token), from, address(this), amount);\\n        // V_IBA: inconsistent balance amount, to prevent from deflationary tokens\\n        require((IERC20Metadata(token).balanceOf(address(this)).sub(balanceBefore)) == amount, \\\"V_IBA\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xbe7f764a94f1e9fcf43fc957fd4d228bdfc03c2e49dad246ac6e285bff25cda7\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102125760003560e01c80639317b19311610120578063c66fa8e6116100b8578063e72e43631161007c578063e72e4363146104c1578063ec6cca84146104d4578063f2fde38b146104e7578063f652b527146104fa578063fa8f03681461050f57610212565b8063c66fa8e614610460578063c9ca7b1814610468578063d11102c51461047b578063d1ead5631461049b578063dfe1cb92146104ae57610212565b80639317b193146103b1578063996fbf94146103c45780639dce9e19146103d75780639f044f31146103f7578063b53c5125146103ff578063b62616431461041f578063b6b55f2514610427578063c2fdd42f1461043a578063c3afe1ce1461044d57610212565b80636346f32e116101ae5780637b9e618d116101725780637b9e618d1461034e5780637c88490a1461036357806387cad0bf146103765780638da25bbe146103965780638da5cb5b146103a957610212565b80636346f32e146102f75780636e838bad1461030d578063715018a61461032057806373f625011461032857806376c6008f1461033b57610212565b80630674fa4114610217578063093eb8201461024057806319be4975146102605780632e1a7d4d146102815780632e784343146102965780632f60a151146102a95780633a921051146102be5780634b4aa735146102d157806359af74f7146102e4575b600080fd5b61022a610225366004613ac2565b610522565b6040516102379190613d04565b60405180910390f35b61025361024e366004613b98565b61054b565b6040516102379190613df5565b61027361026e366004613ac2565b610791565b604051610237929190613d0d565b61029461028f366004613bde565b6107aa565b005b6102536102a4366004613adc565b6108c0565b6102b161090c565b6040516102379190613e16565b61022a6102cc366004613ac2565b61091c565b61022a6102df366004613ac2565b61093d565b6102736102f2366004613b6c565b61095e565b6102ff610bde565b604051610237929190613e26565b61029461031b366004613bc2565b610bf4565b610294610cf9565b610294610336366004613c5e565b610da5565b61022a610349366004613adc565b610e68565b610356610e91565b6040516102379190613c98565b61022a610371366004613adc565b610eb5565b610389610384366004613ac2565b610ed7565b6040516102379190613e0c565b61022a6103a4366004613adc565b610ef9565b610356610f1b565b6102946103bf366004613b0e565b610f2a565b61022a6103d2366004613adc565b611005565b6103ea6103e5366004613ac2565b611027565b6040516102379190613cf9565b6102b1611058565b61041261040d366004613adc565b61106a565b6040516102379190613de7565b6102b16110c2565b610294610435366004613bde565b6110d4565b610253610448366004613b6c565b6111de565b61027361045b366004613b51565b6111f2565b61022a61146b565b610294610476366004613bc2565b611471565b61048e610489366004613ac2565b611577565b6040516102379190613cac565b6102946104a9366004613bc2565b6115f0565b6104126104bc366004613b51565b6116da565b6103ea6104cf366004613ac2565b6118cc565b6103ea6104e2366004613ac2565b6118e1565b6102946104f5366004613ac2565b611910565b610502611a13565b6040516102379190613e3c565b61029461051d366004613b87565b611a1c565b6001600160a01b038116600090815260026020526040812061054390611ae6565b90505b919050565b6105536139da565b60026000541415610599576040805162461bcd60e51b815260206004820152601f6024820152600080516020613eab833981519152604482015290519081900360640190fd5b600260008181556001600160a01b03841681526020918252604080822081516101008101909252919261064692919081906105d690890189613ac2565b6001600160a01b0316815260200187602001358152602001876040013581526020018760600135815260200187608001358152602001610614611d01565b6001600160a01b03888116911614815260065462ffffff600160201b820416602083015260ff16604090910152611d05565b90506106556020850185613ac2565b6001600160a01b0316836001600160a01b03167fc7a00e3ec61b8c6f80d9561dbdeddc6fe70a2a76339c92541b2bc31b4b6597816106968460000151611ffd565b6106a38560200151611ffd565b6106b08960200135611ffd565b6040516106bf93929190613d1b565b60405180910390a36106d46020850185613ac2565b60408083015160608401516001600160a01b0387811660008181526002602090815295812096909216959094600080516020613f328339815191529493929061071f908c018c613ac2565b6001600160a01b03166001600160a01b031681526020019081526020016000206001015486608001518760a0015160405161075e959493929190613d31565b60405180910390a36040518060400160405280826000015181526020018260200151815250915050600160005592915050565b6003602052600090815260409020805460019091015482565b600260005414156107f0576040805162461bcd60e51b815260206004820152601f6024820152600080516020613eab833981519152604482015290519081900360640190fd5b600260009081556107ff611d01565b6001600160a01b0381811660008181526002602090815260409182902082516080810184527f0000000000000000000000000000000000000000000000000000000000000000909516855290840187905290830191909152600654610100900462ffffff1660608301529192506108769190612011565b806001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5836040516108af9190613d04565b60405180910390a250506001600055565b6108c86139da565b506001600160a01b03808316600090815260026020908152604080832093851683529281529082902082518084019093528054835260010154908201525b92915050565b600654610100900462ffffff1681565b6001600160a01b038116600090815260026020526040812061054390612089565b6001600160a01b0381166000908152600260205260408120610543906120ea565b600080600260005414156109a7576040805162461bcd60e51b815260206004820152601f6024820152600080516020613eab833981519152604482015290519081900360640190fd5b600260009081556109bb6020850185613ac2565b905060006109c7611d01565b6001600160a01b03808416600090815260026020908152604080832093851683528083209495509193610b22939290916003918691610a0a918d01908d01613ac2565b6001600160a01b03166001600160a01b0316815260200190815260200160002060046040518061010001604052808c6020016020810190610a4b9190613ac2565b6001600160a01b031681526020018c6040013581526020018c6060013581526020018c60800135815260200160056040518060400160405290816000820160009054906101000a900462ffffff1662ffffff1662ffffff1681526020016000820160039054906101000a900462ffffff1662ffffff1662ffffff16815250508152602001600660049054906101000a900462ffffff1662ffffff168152602001600660079054906101000a900462ffffff1662ffffff168152602001600660009054906101000a900460ff1660ff16815250612143565b9050610b346040870160208801613ac2565b81516020808401516001600160a01b03878116600081815260028552604080822097909316969195600080516020613f3283398151915295909493610b7e91908f01908f01613ac2565b6001600160a01b03166001600160a01b031681526020019081526020016000206001015486604001518760600151604051610bbd959493929190613d31565b60405180910390a38051602090910151600160005590969095509350505050565b60055462ffffff80821691630100000090041682565b610bfc611d01565b6001600160a01b0316610c0d610f1b565b6001600160a01b031614610c56576040805162461bcd60e51b81526020600482018190526024820152600080516020613f12833981519152604482015290519081900360640190fd5b60026000541415610c9c576040805162461bcd60e51b815260206004820152601f6024820152600080516020613eab833981519152604482015290519081900360640190fd5b6002600055620f424062ffffff821610610cb557600080fd5b60065462ffffff600160201b90910481169082161015610cd457600080fd5b6006805462ffffff9092166101000263ffffff00199092169190911790556001600055565b610d01611d01565b6001600160a01b0316610d12610f1b565b6001600160a01b031614610d5b576040805162461bcd60e51b81526020600482018190526024820152600080516020613f12833981519152604482015290519081900360640190fd5b6001546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600180546001600160a01b0319169055565b610dad611d01565b6001600160a01b0316610dbe610f1b565b6001600160a01b031614610e07576040805162461bcd60e51b81526020600482018190526024820152600080516020613f12833981519152604482015290519081900360640190fd5b60026000541415610e4d576040805162461bcd60e51b815260206004820152601f6024820152600080516020613eab833981519152604482015290519081900360640190fd5b6006805460ff191660ff929092169190911790556001600055565b6001600160a01b0382166000908152600260205260408120610e8a90836122f5565b9392505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b0382166000908152600260205260408120610e8a90836123a0565b6002602081815260009283526040928390208351918201909352910154815281565b6001600160a01b0382166000908152600260205260408120610e8a9083612430565b6001546001600160a01b031690565b610f32611d01565b6001600160a01b0316610f43610f1b565b6001600160a01b031614610f8c576040805162461bcd60e51b81526020600482018190526024820152600080516020613f12833981519152604482015290519081900360640190fd5b60026000541415610fd2576040805162461bcd60e51b815260206004820152601f6024820152600080516020613eab833981519152604482015290519081900360640190fd5b600260009081556001600160a01b03929092168252600760205260408220805460ff191691151591909117905560019055565b6001600160a01b0382166000908152600260205260408120610e8a9083612514565b6001600160a01b03811660009081526002602052604081206006546105439190600160201b900462ffffff1661259b565b600654600160201b900462ffffff1681565b6110726139f4565b506001600160a01b03808316600090815260026020818152604080842094861684526001948501825292839020835160608101855281548152948101549185019190915201549082015292915050565b600654600160381b900462ffffff1681565b6002600054141561111a576040805162461bcd60e51b815260206004820152601f6024820152600080516020613eab833981519152604482015290519081900360640190fd5b60026000908155611129611d01565b90506111a560026000836001600160a01b03166001600160a01b0316815260200190815260200160002060405180606001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001858152602001846001600160a01b03168152506125cf565b806001600160a01b03167f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4836040516108af9190613d04565b6111e66139da565b6105438261024e611d01565b6000806002600054141561123b576040805162461bcd60e51b815260206004820152601f6024820152600080516020613eab833981519152604482015290519081900360640190fd5b6002600090815561124a611d01565b6001600160a01b0381166000908152600260209081526040822092935090916113b691600390849061127e908a018a613ac2565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518061016001604052808960000160208101906112bd9190613ac2565b6001600160a01b031681526020018960200160208101906112de9190613b37565b151581526020016112f560608b0160408c01613b37565b151581526060808b01356020808401919091526080808d013560408086019190915260a0808f013594860194909452805180820190915260055462ffffff8082168352630100000090910416818401529084015291019060079060009061135e908d018d613ac2565b6001600160a01b0316815260208082019290925260409081016000205460ff9081161515845260065462ffffff600160201b820481169486019490945261010081049093169184019190915216606090910152612631565b90506113c56020860186613ac2565b81516020808401516001600160a01b038681166000818152600285526040812096909216959094600080516020613f32833981519152949093929061140c908d018d613ac2565b6001600160a01b03166001600160a01b03168152602001908152602001600020600101548660400151876060015160405161144b959493929190613d31565b60405180910390a380516020909101516001600055909590945092505050565b60045481565b611479611d01565b6001600160a01b031661148a610f1b565b6001600160a01b0316146114d3576040805162461bcd60e51b81526020600482018190526024820152600080516020613f12833981519152604482015290519081900360640190fd5b60026000541415611519576040805162461bcd60e51b815260206004820152601f6024820152600080516020613eab833981519152604482015290519081900360640190fd5b600260005560065462ffffff6101009091048116908216111561153b57600080fd5b60008162ffffff161161154d57600080fd5b6006805462ffffff909216600160201b0266ffffff00000000199092169190911790556001600055565b6001600160a01b0381166000908152600260209081526040918290206003018054835181840281018401909452808452606093928301828280156115e457602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116115c6575b50505050509050919050565b6115f8611d01565b6001600160a01b0316611609610f1b565b6001600160a01b031614611652576040805162461bcd60e51b81526020600482018190526024820152600080516020613f12833981519152604482015290519081900360640190fd5b60026000541415611698576040805162461bcd60e51b815260206004820152601f6024820152600080516020613eab833981519152604482015290519081900360640190fd5b6002600055620f424062ffffff8216106116b157600080fd5b6006805462ffffff909216600160381b0262ffffff60381b199092169190911790556001600055565b6116e26139f4565b60026000541415611728576040805162461bcd60e51b815260206004820152601f6024820152600080516020613eab833981519152604482015290519081900360640190fd5b60026000908155611737611d01565b9050600061181f60026000846001600160a01b03166001600160a01b031681526020019081526020016000206040518061012001604052808760000160208101906117829190613ac2565b6001600160a01b03168152602001876020013581526020018760400135815260200187606001358152602001876080013581526020018760a001358152602001600760008960000160208101906117d99190613ac2565b6001600160a01b0316815260208082019290925260409081016000205460ff9081161515845260065462ffffff6101008204169385019390935291909116910152612756565b905061182e6020850185613ac2565b6001600160a01b0316826001600160a01b03167fc7a00e3ec61b8c6f80d9561dbdeddc6fe70a2a76339c92541b2bc31b4b65978161186f84600001516128c8565b61187c85602001516128c8565b61188986604001516128c8565b60405161189893929190613d1b565b60405180910390a3604080516060810182528251815260208084015190820152918101519082015260016000559392505050565b60076020526000908152604090205460ff1681565b6001600160a01b03811660009081526002602052604081206006546105439190610100900462ffffff16612914565b611918611d01565b6001600160a01b0316611929610f1b565b6001600160a01b031614611972576040805162461bcd60e51b81526020600482018190526024820152600080516020613f12833981519152604482015290519081900360640190fd5b6001600160a01b0381166119b75760405162461bcd60e51b8152600401808060200182810382526026815260200180613ecb6026913960400191505060405180910390fd5b6001546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b60065460ff1681565b611a24611d01565b6001600160a01b0316611a35610f1b565b6001600160a01b031614611a7e576040805162461bcd60e51b81526020600482018190526024820152600080516020613f12833981519152604482015290519081900360640190fd5b60026000541415611ac4576040805162461bcd60e51b815260206004820152601f6024820152600080516020613eab833981519152604482015290519081900360640190fd5b6002600055806005611ad68282613e4a565b5050600160005550565b3b151590565b600281015460038201805460009290835b81811015611cf7576000848281548110611b0d57fe5b60009182526020808320909101546001600160a01b031680835260018a019091526040822080549193509190611b6590611b46906128c8565b6001600160a01b038516600090815260208c9052604090205490612957565b90506000611b9b611b7984600101546128c8565b6001600160a01b038616600090815260208d9052604090206001015490612957565b9050600080856001600160a01b0316637640482f86600201546040518263ffffffff1660e01b815260040180828152602001915050604080518083038186803b158015611be757600080fd5b505afa158015611bfb573d6000803e3d6000fd5b505050506040513d6040811015611c1157600080fd5b50805160209091015190925090506000611c3d87611c38611c31866128c8565b88906129bc565b612a21565b90506000876001600160a01b0316637452fadd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c7a57600080fd5b505afa158015611c8e573d6000803e3d6000fd5b505050506040513d6020811015611ca457600080fd5b50519050611cca611cc3611cb7836128c8565b8490600160601b612ac5565b8c906129bc565b9a50611ce2611cc3611cdb856128c8565b87906129bc565b9a505050505050505050806001019050611af7565b5090949350505050565b3390565b611d0d613a15565b816080015180421115611d3b5760405162461bcd60e51b8152600401611d3290613dc8565b60405180910390fd5b8260a00151611d5c57611d52848460c0015161259b565b15611d5c57600080fd5b82516020840151604051639c8f9f2360e01b815260009283926001600160a01b0390911691639c8f9f2391611d9391600401613d04565b6040805180830381600087803b158015611dac57600080fd5b505af1158015611dc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611de49190613c0e565b915091508460400151821015611df957600080fd5b8460600151811015611e0a57600080fd5b90835260208084019190915283516001600160a01b03166000908152600186018252604081209185015190918291611e429190612b69565b91509150611e598686600001518760e00151612bef565b84600001516001600160a01b0316637452fadd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611e9657600080fd5b505afa158015611eaa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ece9190613bf6565b60a08501528451604051638195510560e01b8152611f7091611f5f916001600160a01b0390911690638195510590611f0a908790600401613d04565b60206040518083038186803b158015611f2257600080fd5b505afa158015611f36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5a9190613bf6565b6128c8565b8551611f6a906128c8565b90612957565b6040850152611f8e611f81826128c8565b611f6a86602001516128c8565b6060850152505060a0820151600090611fba90611faa906128c8565b604085015190600160601b612ac5565b6000039050611fef858560000151856040015184611fe586896060015161295790919063ffffffff16565b8960e00151612d7a565b608084015250909392505050565b6000612008826128c8565b60000392915050565b60008160200151116120355760405162461bcd60e51b8152600401611d3290613d73565b61205061204582602001516128c8565b600284015490612957565b60028301556060810151612065908390612914565b61206e57600080fd5b612085816000015182604001518360200151612ede565b5050565b600381018054600091908290815b81811015611cf75760006120d36120ce888785815481106120b457fe5b6000918252602090912001546001600160a01b03166123a0565b612f30565b90506120df8482612f59565b935050600101612097565b600381018054600091908290815b81811015611cf757600061212c8786848154811061211257fe5b6000918252602090912001546001600160a01b0316612514565b90506121388482612f59565b9350506001016120f8565b61214b613a4b565b8160600151804211156121705760405162461bcd60e51b8152600401611d3290613dc8565b61217e878460a0015161259b565b1561218857600080fd5b82516001600160a01b03166000908152602088905260408120805482126121b05760006121b3565b60015b915084600001516001600160a01b031663819551056121d58360000154612f30565b6040518263ffffffff1660e01b81526004016121f19190613d04565b60206040518083038186803b15801561220957600080fd5b505afa15801561221d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122419190613bf6565b8560200151111561225157600080fd5b5060008060006122778b8a896000015187888c602001518d604001518e60e00151612fb3565b925092509250600061228c8860000151613009565b905061229d8a89608001518361307c565b6122a657600080fd5b6122ca8c6002018c6002018b8b60a001518c60c001516122c589612f30565b613091565b5060408051608081018252948552602085019390935291830152606082015298975050505050505050565b6001600160a01b038116600081815260018401602052604080822060028101548251637640482f60e01b815260048101919091528251939491938593637640482f9260248082019391829003018186803b15801561235257600080fd5b505afa158015612366573d6000803e3d6000fd5b505050506040513d604081101561237c57600080fd5b50519050612397816123916120ce8888612430565b90612f59565b95945050505050565b6000806123ad8484612430565b90506000836001600160a01b0316637452fadd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156123ea57600080fd5b505afa1580156123fe573d6000803e3d6000fd5b505050506040513d602081101561241457600080fd5b50519050612397612424826128c8565b8390600160601b612ac5565b6001600160a01b038116600090815260018301602052604081208054829061247a9061245b906128c8565b6001600160a01b03861660009081526020889052604090205490612957565b90506000846001600160a01b0316637640482f84600201546040518263ffffffff1660e01b815260040180828152602001915050604080518083038186803b1580156124c557600080fd5b505afa1580156124d9573d6000803e3d6000fd5b505050506040513d60408110156124ef57600080fd5b5051905061250a85611c38612503846128c8565b85906129bc565b9695505050505050565b60008061252184846122f5565b90506000836001600160a01b0316637452fadd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561255e57600080fd5b505afa158015612572573d6000803e3d6000fd5b505050506040513d602081101561258857600080fd5b505190506123978282600160601b61310b565b6000806125a784611ae6565b905060006125b485612089565b90506125c3611f5a82866131c4565b90911215949350505050565b60008160200151116125f35760405162461bcd60e51b8152600401611d3290613d73565b61260a8160000151826040015183602001516131d9565b61262561261a82602001516128c8565b6002840154906129bc565b60029092019190915550565b612639613a4b565b8160a001518042111561265e5760405162461bcd60e51b8152600401611d3290613dc8565b61266d8584610100015161259b565b1561267757600080fd5b60008060006126a58888886000015189602001518a604001518b606001518c608001518d6101400151612fb3565b9250925092508560e001516126ee5760006126bf84613310565b87516001600160a01b0316600090815260208b905260409020546126e290613310565b0213156126ee57600080fd5b60006126fd8760000151613009565b905061270e888860c0015183613338565b61271757600080fd5b61272689886101200151612914565b61272f57600080fd5b60408051608081018252948552602085019390935291830152606082015295945050505050565b61275e6139f4565b8160a00151804211156127835760405162461bcd60e51b8152600401611d3290613dc8565b8260c0015161279157600080fd5b600080600085600001516001600160a01b0316639cd441da876020015188604001516040518363ffffffff1660e01b81526004016127d0929190613d0d565b606060405180830381600087803b1580156127ea57600080fd5b505af11580156127fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128229190613c31565b88516001600160a01b0316600090815260018b016020526040902080549396509194509250906128529085612f59565b815560018101546128639084612f59565b600182015560028101546128779083612f59565b6002820155865161010088015161288f918a91612bef565b61289d888860e00151612914565b6128a657600080fd5b5060408051606081018252938452602084019290925290820152949350505050565b60006001600160ff1b038211156129105760405162461bcd60e51b8152600401808060200182810382526028815260200180613f526028913960400191505060405180910390fd5b5090565b60008061292084611ae6565b9050600061292d856120ea565b905061293c611f5a82866131c4565b600286015461294c90849061334a565b121595945050505050565b600081830381831280159061296c5750838113155b80612981575060008312801561298157508381135b610e8a5760405162461bcd60e51b8152600401808060200182810382526024815260200180613f7a6024913960400191505060405180910390fd5b60008282018183128015906129d15750838112155b806129e657506000831280156129e657508381125b610e8a5760405162461bcd60e51b8152600401808060200182810382526021815260200180613ef16021913960400191505060405180910390fd5b600080836001600160a01b03166381955105612a3c85612f30565b6040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015612a7057600080fd5b505afa158015612a84573d6000803e3d6000fd5b505050506040513d6020811015612a9a57600080fd5b5051905060008312612ab457612aaf816128c8565b612abd565b612abd81611ffd565b949350505050565b60008060008512612ad65784612adf565b612adf85613360565b90506000808512612af05784612af9565b612af985613360565b905060008087128015612b0c5750600086135b80612b225750600087138015612b225750600086125b612b2d576000612b30565b60015b90506000612b3f84848861338c565b905081612b5457612b4f816128c8565b612b5d565b612b5d81611ffd565b98975050505050505050565b6000808215612be857835415612b9e57612b8c846000015484866002015461310b565b8454909250612b9b908361343b565b84555b600184015415612bd357612bbb846001015484866002015461310b565b6001850154909150612bcd908261343b565b60018501555b6002840154612be2908461343b565b60028501555b9250929050565b6001600160a01b038216612c0257600080fd5b6001600160a01b038216600090815260208490526040812054151580612c4457506001600160a01b038316600090815260018501602052604090206002015415155b6003850180549192509060005b81811015612d3457856001600160a01b0316838281548110612c6f57fe5b6000918252602090912001546001600160a01b03161415612d2c5783612d2357826001830381548110612c9e57fe5b9060005260206000200160009054906101000a90046001600160a01b0316838281548110612cc857fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555082805480612d0057fe5b600082815260209020810160001990810180546001600160a01b03191690550190555b50505050612d75565b600101612c51565b5081546001810183556000838152602090200180546001600160a01b0319166001600160a01b038716179055815460ff85161015612d7157600080fd5b5050505b505050565b6000612d8584613310565b612d8e86613310565b0260001914612d9c57600080fd5b6000612da88787613498565b6001600160a01b038816600090815260208a905260408120919250612dcc83613310565b8254612dd790613310565b026000191415612e8157670de0b6b3a76400006000612e0b612df886612f30565b83612e068760000154612f30565b61310b565b9050818111612e4c576000612e2e612e22836128c8565b60018701549085612ac5565b9050612e4489612e3e8c846129bc565b906129bc565b935050612e7a565b6000612e598a8484612ac5565b9050612e7689612e3e8388600101546129bc90919063ffffffff16565b9350505b5050612e84565b50845b8154612e9090846129bc565b82556001820154612ead908290611f6a908990612e3e908c6129bc565b600183015560028a0154612ec190826129bc565b60028b0155612ed18a8a87612bef565b9998505050505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052612d759084906134b3565b600080821215612f5057612f4b612f4683613360565b613564565b610543565b61054382613564565b600082820183811015610e8a576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600080600080612fc28a613009565b9050612fce8b826135bb565b50600080612fdf8b8b8b8b8b6135d2565b915091506000612ff48e8d858560008c612d7a565b929e919d50919b509950505050505050505050565b6000816001600160a01b0316637452fadd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561304457600080fd5b505afa158015613058573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105439190613bf6565b6000612abd84600001548385602001516136e7565b60008061309e83866131c4565b905060006130ac82866131c4565b905060006130ba838361343b565b90506130d06130c8846128c8565b8b5490612957565b8a556130e66130de836128c8565b8a54906129bc565b89556130fc6130f4826128c8565b8954906129bc565b90975550979650505050505050565b600080600061311a868661372a565b915091506000848061312857fe5b86880990508281111561313c576001820391505b91829003918161315a5784838161314f57fe5b049350505050610e8a565b8482106131ae576040805162461bcd60e51b815260206004820152601a60248201527f46756c6c4d6174683a2046554c4c4449565f4f564552464c4f57000000000000604482015290519081900360640190fd5b6131b9838387613757565b979650505050505050565b6000610e8a838362ffffff16620f424061338c565b6040516370a0823160e01b81526000906001600160a01b038516906370a0823190613208903090600401613c98565b60206040518083038186803b15801561322057600080fd5b505afa158015613234573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132589190613bf6565b9050613266848430856137c7565b816132ed82866001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016132979190613c98565b60206040518083038186803b1580156132af57600080fd5b505afa1580156132c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132e79190613bf6565b9061343b565b1461330a5760405162461bcd60e51b8152600401611d3290613d54565b50505050565b60008082136133305760008212613328576000612f4b565b600019610543565b506001919050565b82548251600091612abd9184906136e7565b60008183126133595781610e8a565b5090919050565b6000600160ff1b82136133855760405162461bcd60e51b8152600401611d3290613d91565b5060000390565b60008080600019858709868602925082811090839003039050806133c257600084116133b757600080fd5b508290049050610e8a565b8084116133ce57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b600082821115613492576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600080836001600160a01b0316631363bdd3612a3c85612f30565b6000613508826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166138219092919063ffffffff16565b805190915015612d755780806020019051602081101561352757600080fd5b5051612d755760405162461bcd60e51b815260040180806020018281038252602a815260200180613f9e602a913960400191505060405180910390fd5b600080821215612910576040805162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f736974697665604482015290519081900360640190fd5b428260010154101561208557815542600190910155565b6000806000876001600160a01b031663630e375f8888886040518463ffffffff1660e01b815260040180841515815260200183151581526020018281526020019350505050602060405180830381600087803b15801561363157600080fd5b505af1158015613645573d6000803e3d6000fd5b505050506040513d602081101561365b57600080fd5b5051905085156136a6578381101561367257600080fd5b86156136945761368185611ffd565b61368a826128c8565b92509250506136dd565b61369d816128c8565b61368a86611ffd565b838111156136b357600080fd5b86156136cb576136c281611ffd565b61368a866128c8565b6136d4856128c8565b61368a82611ffd565b9550959350505050565b6000806136f485846131c4565b905060006137028683612f59565b90506000613710878461343b565b90508581111580156131b957505090931115949350505050565b600080806000198486099050838502925082810391508281101561374f576001820391505b509250929050565b6000818103821680838161376757fe5b04925080858161377357fe5b04945080816000038161378257fe5b60028581038087028203028087028203028087028203028087028203028087028203028087028203029586029003909402930460010193909302939093010292915050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261330a9085906134b3565b6060612abd84846000858561383585611ae0565b613886576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b602083106138c45780518252601f1990920191602091820191016138a5565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613926576040519150601f19603f3d011682016040523d82523d6000602084013e61392b565b606091505b50915091506131b982828660608315613945575081610e8a565b8251156139555782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561399f578181015183820152602001613987565b50505050905090810190601f1680156139cc5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b604051806040016040528060008152602001600081525090565b60405180606001604052806000815260200160008152602001600081525090565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b80356001600160a01b038116811461054657600080fd5b8035801515811461054657600080fd5b600060c08284031215613aab578081fd5b50919050565b600060a08284031215613aab578081fd5b600060208284031215613ad3578081fd5b610e8a82613a73565b60008060408385031215613aee578081fd5b613af783613a73565b9150613b0560208401613a73565b90509250929050565b60008060408385031215613b20578182fd5b613b2983613a73565b9150613b0560208401613a8a565b600060208284031215613b48578081fd5b610e8a82613a8a565b600060c08284031215613b62578081fd5b610e8a8383613a9a565b600060a08284031215613b7d578081fd5b610e8a8383613ab1565b600060408284031215613aab578081fd5b60008060c08385031215613baa578182fd5b613bb48484613ab1565b9150613b0560a08401613a73565b600060208284031215613bd3578081fd5b8135610e8a81613e96565b600060208284031215613bef578081fd5b5035919050565b600060208284031215613c07578081fd5b5051919050565b60008060408385031215613c20578182fd5b505080516020909101519092909150565b600080600060608486031215613c45578081fd5b8351925060208401519150604084015190509250925092565b600060208284031215613c6f578081fd5b813560ff81168114610e8a578182fd5b8051825260208082015190830152604090810151910152565b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b81811015613ced5783516001600160a01b031683529284019291840191600101613cc8565b50909695505050505050565b901515815260200190565b90815260200190565b918252602082015260400190565b9283526020830191909152604082015260600190565b948552602085019390935260408401919091526060830152608082015260a00190565b602080825260059082015264565f49424160d81b604082015260600190565b602080825260049082015263565f5a4160e01b604082015260600190565b6020808252601c908201527f506572704d6174683a20696e76657273696f6e206f766572666c6f7700000000604082015260600190565b60208082526005908201526443485f544560d81b604082015260600190565b606081016109068284613c7f565b815181526020918201519181019190915260400190565b9051815260200190565b62ffffff91909116815260200190565b62ffffff92831681529116602082015260400190565b60ff91909116815260200190565b8135613e5581613e96565b815462ffffff191662ffffff91909116178082556020830135613e7781613e96565b65ffffff0000008160181b1665ffffff00000019831617835550505050565b62ffffff81168114613ea757600080fd5b5056fe5265656e7472616e637947756172643a207265656e7472616e742063616c6c004f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573735369676e6564536166654d6174683a206164646974696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572adf7293c36a87213f46d9ad13f46093b4c6becaecc1a3c4b6be2aad2f60676cf53616665436173743a2076616c756520646f65736e27742066697420696e20616e20696e743235365369676e6564536166654d6174683a207375627472616374696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220f505535a879a27fc63c91b317ac9a567bdff2f3181c8999e1dc29145fbe2271764736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4694,
        "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3147,
        "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 30837,
        "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
        "label": "accountInfos",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(AccountInfo)49623_storage)"
      },
      {
        "astId": 30842,
        "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
        "label": "priceLimitInfos",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(PriceLimitInfo)49631_storage)"
      },
      {
        "astId": 30845,
        "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
        "label": "insuranceFundInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(InsuranceFundInfo)49626_storage"
      },
      {
        "astId": 30851,
        "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
        "label": "priceLimitConfig",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(PriceLimitConfig)49636_storage"
      },
      {
        "astId": 30854,
        "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
        "label": "maxMarketsPerAccount",
        "offset": 0,
        "slot": "6",
        "type": "t_uint8"
      },
      {
        "astId": 30857,
        "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
        "label": "imRatio",
        "offset": 1,
        "slot": "6",
        "type": "t_uint24"
      },
      {
        "astId": 30860,
        "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
        "label": "mmRatio",
        "offset": 4,
        "slot": "6",
        "type": "t_uint24"
      },
      {
        "astId": 30863,
        "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
        "label": "liquidationRewardRatio",
        "offset": 7,
        "slot": "6",
        "type": "t_uint24"
      },
      {
        "astId": 30868,
        "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
        "label": "isMarketAllowed",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(AccountInfo)49623_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PerpdexStructs.AccountInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(AccountInfo)49623_storage"
      },
      "t_mapping(t_address,t_struct(MakerInfo)49606_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PerpdexStructs.MakerInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(MakerInfo)49606_storage"
      },
      "t_mapping(t_address,t_struct(PriceLimitInfo)49631_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PerpdexStructs.PriceLimitInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PriceLimitInfo)49631_storage"
      },
      "t_mapping(t_address,t_struct(TakerInfo)49599_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PerpdexStructs.TakerInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TakerInfo)49599_storage"
      },
      "t_struct(AccountInfo)49623_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.AccountInfo",
        "members": [
          {
            "astId": 49613,
            "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
            "label": "takerInfos",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_struct(TakerInfo)49599_storage)"
          },
          {
            "astId": 49617,
            "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
            "label": "makerInfos",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_struct(MakerInfo)49606_storage)"
          },
          {
            "astId": 49619,
            "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
            "label": "vaultInfo",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(VaultInfo)49609_storage"
          },
          {
            "astId": 49622,
            "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
            "label": "markets",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(InsuranceFundInfo)49626_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.InsuranceFundInfo",
        "members": [
          {
            "astId": 49625,
            "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(MakerInfo)49606_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.MakerInfo",
        "members": [
          {
            "astId": 49601,
            "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
            "label": "baseDebtShare",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 49603,
            "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
            "label": "quoteDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 49605,
            "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
            "label": "liquidity",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PriceLimitConfig)49636_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.PriceLimitConfig",
        "members": [
          {
            "astId": 49633,
            "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
            "label": "priceLimitNormalOrderRatio",
            "offset": 0,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 49635,
            "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
            "label": "priceLimitLiquidationRatio",
            "offset": 3,
            "slot": "0",
            "type": "t_uint24"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PriceLimitInfo)49631_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.PriceLimitInfo",
        "members": [
          {
            "astId": 49628,
            "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
            "label": "referencePrice",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 49630,
            "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
            "label": "referenceTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TakerInfo)49599_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.TakerInfo",
        "members": [
          {
            "astId": 49596,
            "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
            "label": "baseBalanceShare",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 49598,
            "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
            "label": "quoteBalance",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(VaultInfo)49609_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.VaultInfo",
        "members": [
          {
            "astId": 49608,
            "contract": "contracts/PerpdexExchange.sol:PerpdexExchange",
            "label": "collateralBalance",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}