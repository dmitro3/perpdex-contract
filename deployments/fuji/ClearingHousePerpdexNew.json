{
  "address": "0xD39D89D1b68D93133ed0C4D978Efc1e4655f2Fd1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "quoteTokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "quoteTokenSymbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "uniV2FactoryArg",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "quoteToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "base",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "quote",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "liquidity",
          "type": "int256"
        }
      ],
      "name": "LiquidityChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "exchangedPositionSize",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "exchangedPositionNotional",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "openNotional",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "realizedPnl",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceAfterX96",
          "type": "uint256"
        }
      ],
      "name": "PositionChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionNotional",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionSize",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidationFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        }
      ],
      "name": "PositionLiquidated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accountInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "collateralBalance",
              "type": "int256"
            }
          ],
          "internalType": "struct PerpdexStructs.VaultInfo",
          "name": "vaultInfo",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "baseToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "base",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quote",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minQuote",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct IClearingHousePerpdexNew.AddLiquidityParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "base",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quote",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            }
          ],
          "internalType": "struct IClearingHousePerpdexNew.AddLiquidityResponse",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        }
      ],
      "name": "getMakerInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "baseDebtShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quoteDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            }
          ],
          "internalType": "struct PerpdexStructs.MakerInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        }
      ],
      "name": "getOpenPositionNotional",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        }
      ],
      "name": "getOpenPositionSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        }
      ],
      "name": "getPositionNotional",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        }
      ],
      "name": "getPositionSize",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        }
      ],
      "name": "getTakerInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "baseBalanceShare",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "quoteBalance",
              "type": "int256"
            }
          ],
          "internalType": "struct PerpdexStructs.TakerInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getTotalAccountValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getTotalOpenPositionNotional",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getTotalPositionNotional",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "hasEnoughInitialMargin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "hasEnoughMaintenanceMargin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "imRatio",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "insuranceFundInfo",
      "outputs": [
        {
          "internalType": "int256",
          "name": "balance",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "baseToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "oppositeAmountBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct IClearingHousePerpdexNew.LiquidateParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "liquidate",
      "outputs": [
        {
          "internalType": "int256",
          "name": "base",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "quote",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationRewardRatio",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxFundingRateRatio",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMarketsPerAccount",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mmRatio",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "baseToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isBaseToQuote",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isExactInput",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "oppositeAmountBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct IClearingHousePerpdexNew.OpenPositionParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "openPosition",
      "outputs": [
        {
          "internalType": "int256",
          "name": "base",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "quote",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceLimitConfig",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "priceLimitNormalOrderRatio",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "priceLimitLiquidationRatio",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "priceLimitInfos",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "referencePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "referenceTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "baseToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minQuote",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct IClearingHousePerpdexNew.RemoveLiquidityParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "maker",
          "type": "address"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "base",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quote",
              "type": "uint256"
            }
          ],
          "internalType": "struct IClearingHousePerpdexNew.RemoveLiquidityResponse",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "baseToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minQuote",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct IClearingHousePerpdexNew.RemoveLiquidityParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "base",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quote",
              "type": "uint256"
            }
          ],
          "internalType": "struct IClearingHousePerpdexNew.RemoveLiquidityResponse",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "setImRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setIsBaseTokenAllowed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "setLiquidationRewardRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "setMaxFundingRateRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "value",
          "type": "uint8"
        }
      ],
      "name": "setMaxMarketsPerAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "setMmRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint24",
              "name": "priceLimitNormalOrderRatio",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "priceLimitLiquidationRatio",
              "type": "uint24"
            }
          ],
          "internalType": "struct PerpdexStructs.PriceLimitConfig",
          "name": "value",
          "type": "tuple"
        }
      ],
      "name": "setPriceLimitConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbbbf26c7153d9f2209d7447810988c6791563b818153997049c1fd59df1f7924",
  "receipt": {
    "to": null,
    "from": "0x4B78eCe4AA1be3495713199380635537C5fB2326",
    "contractAddress": "0xD39D89D1b68D93133ed0C4D978Efc1e4655f2Fd1",
    "transactionIndex": 1,
    "gasUsed": "3800903",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000002000000000000000000000000000000000000000000000000000008000000000000008000000000000000000000008000000800001000000000000000000000000000000000000020000000000000000000800000000000000000000000010000000400000000000000800200000002000000000000000000000000000000000000000000000000000000000000004000000000000000000010000000400000000004000000002000000000000000000020000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x0c23837f3fdf2536378255137ff698a41b9553537532dcef5523b1e594342176",
    "transactionHash": "0xbbbf26c7153d9f2209d7447810988c6791563b818153997049c1fd59df1f7924",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 10005869,
        "transactionHash": "0xbbbf26c7153d9f2209d7447810988c6791563b818153997049c1fd59df1f7924",
        "address": "0xD39D89D1b68D93133ed0C4D978Efc1e4655f2Fd1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004b78ece4aa1be3495713199380635537c5fb2326"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x0c23837f3fdf2536378255137ff698a41b9553537532dcef5523b1e594342176"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10005869,
        "transactionHash": "0xbbbf26c7153d9f2209d7447810988c6791563b818153997049c1fd59df1f7924",
        "address": "0x7F51d82EC920691b5C5787bC8562736380bC6df7",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d39d89d1b68d93133ed0c4d978efc1e4655f2fd1"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 2,
        "blockHash": "0x0c23837f3fdf2536378255137ff698a41b9553537532dcef5523b1e594342176"
      }
    ],
    "blockNumber": 10005869,
    "cumulativeGasUsed": "3835701",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "QuoteEth",
    "QUOTEETH",
    "0x0d7c2c0c563d3d38F6BE467829431ea1EA0E8509"
  ],
  "numDeployments": 2,
  "solcInputHash": "977f5517db98087ef69dbaacf732ad99",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"quoteTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"quoteTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"uniV2FactoryArg\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"base\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"quote\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"liquidity\",\"type\":\"int256\"}],\"name\":\"LiquidityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"exchangedPositionSize\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"exchangedPositionNotional\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"openNotional\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"realizedPnl\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceAfterX96\",\"type\":\"uint256\"}],\"name\":\"PositionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionNotional\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"PositionLiquidated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"collateralBalance\",\"type\":\"int256\"}],\"internalType\":\"struct PerpdexStructs.VaultInfo\",\"name\":\"vaultInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IClearingHousePerpdexNew.AddLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"internalType\":\"struct IClearingHousePerpdexNew.AddLiquidityResponse\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"name\":\"getMakerInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"baseDebtShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"internalType\":\"struct PerpdexStructs.MakerInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"name\":\"getOpenPositionNotional\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"name\":\"getOpenPositionSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"name\":\"getPositionNotional\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"name\":\"getPositionSize\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"name\":\"getTakerInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"baseBalanceShare\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quoteBalance\",\"type\":\"int256\"}],\"internalType\":\"struct PerpdexStructs.TakerInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getTotalAccountValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getTotalOpenPositionNotional\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getTotalPositionNotional\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"hasEnoughInitialMargin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"hasEnoughMaintenanceMargin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"imRatio\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insuranceFundInfo\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"balance\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oppositeAmountBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IClearingHousePerpdexNew.LiquidateParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"base\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quote\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationRewardRatio\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFundingRateRatio\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMarketsPerAccount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mmRatio\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBaseToQuote\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isExactInput\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oppositeAmountBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IClearingHousePerpdexNew.OpenPositionParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"openPosition\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"base\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quote\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceLimitConfig\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"priceLimitNormalOrderRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"priceLimitLiquidationRatio\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"priceLimitInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"referencePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referenceTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IClearingHousePerpdexNew.RemoveLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"}],\"internalType\":\"struct IClearingHousePerpdexNew.RemoveLiquidityResponse\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IClearingHousePerpdexNew.RemoveLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"}],\"internalType\":\"struct IClearingHousePerpdexNew.RemoveLiquidityResponse\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"setImRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setIsBaseTokenAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"setLiquidationRewardRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"setMaxFundingRateRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"value\",\"type\":\"uint8\"}],\"name\":\"setMaxMarketsPerAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"setMmRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint24\",\"name\":\"priceLimitNormalOrderRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"priceLimitLiquidationRatio\",\"type\":\"uint24\"}],\"internalType\":\"struct PerpdexStructs.PriceLimitConfig\",\"name\":\"value\",\"type\":\"tuple\"}],\"name\":\"setPriceLimitConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addLiquidity((address,uint256,uint256,uint256,uint256,uint256))\":{\"details\":\"Tx will fail if adding `base == 0 && quote == 0` / `liquidity == 0`- `AddLiquidityParams.useTakerBalance` is only accept `false` now\",\"params\":{\"params\":\"AddLiquidityParams struct\"},\"returns\":{\"_0\":\"response AddLiquidityResponse struct\"}},\"liquidate((address,address,uint256,uint256,uint256))\":{\"details\":\"If trader has open orders, need to call `cancelAllExcessOrders` first\",\"returns\":{\"base\":\"The amount of baseToken the taker got or spent\",\"quote\":\"The amount of quoteToken the taker got or spent\"}},\"openPosition((address,bool,bool,uint256,uint256,uint256))\":{\"details\":\"- `OpenPositionParams.oppositeAmountBound`     - B2Q + exact input, want more output quote as possible, so we set a lower bound of output quote     - B2Q + exact output, want less input base as possible, so we set a upper bound of input base     - Q2B + exact input, want more output base as possible, so we set a lower bound of output base     - Q2B + exact output, want less input quote as possible, so we set a upper bound of input quote     > when it's set to 0, it will disable slippage protection entirely regardless of exact input or output     > when it's over or under the bound, it will be reverted- `OpenPositionParams.sqrtPriceLimitX96`     - B2Q: the price cannot be less than this value after the swap     - Q2B: the price cannot be greater than this value after the swap     > it will fill the trade until it reaches the price limit but WON'T REVERT     > when it's set to 0, it will disable price limit;     > when it's 0 and exact output, the output amount is required to be identical to the param amount\",\"params\":{\"params\":\"OpenPositionParams struct\"},\"returns\":{\"base\":\"The amount of baseToken the taker got or spent\",\"quote\":\"The amount of quoteToken the taker got or spent\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeLiquidity((address,uint256,uint256,uint256,uint256))\":{\"details\":\"remove liquidity will transfer maker impermanent position to taker position, if `liquidity` of RemoveLiquidityParams struct is zero, the action will collect fee from pool to maker\",\"params\":{\"params\":\"RemoveLiquidityParams struct\"},\"returns\":{\"_0\":\"RemoveLiquidityResponse struct\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"LiquidityChanged(address,address,address,int256,int256,int256)\":{\"notice\":\"Emitted when maker's liquidity of a order changed\"},\"PositionChanged(address,address,int256,int256,int256,int256,uint256)\":{\"notice\":\"Emitted when taker's position is being changed\"},\"PositionLiquidated(address,address,uint256,uint256,uint256,address)\":{\"notice\":\"Emitted when taker position is being liquidated\"}},\"kind\":\"user\",\"methods\":{\"addLiquidity((address,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"Maker can call `addLiquidity` to provide liquidity on Uniswap V3 pool\"},\"liquidate((address,address,uint256,uint256,uint256))\":{\"notice\":\"If trader is underwater, any one can call `liquidate` to liquidate this trader\"},\"openPosition((address,bool,bool,uint256,uint256,uint256))\":{\"notice\":\"Trader can call `openPosition` to long/short on baseToken market\"},\"removeLiquidity((address,uint256,uint256,uint256,uint256))\":{\"notice\":\"Maker can call `removeLiquidity` to remove liquidity\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ClearingHousePerpdexNew.sol\":\"ClearingHousePerpdexNew\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x0dd1e9b19801e3e7d900fbf4182d81e1afd23ad7be39504e33df6bbcba91d724\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMathUpgradeable {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xe391db37b722a67addfa9fce3101edf44ba68e2e12ae6fd74d68677b04ffd5a8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa1931c47a617014f858580db625aa0dcf343796f39acd4b5b51effc092a1f0a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8457e15aa90badabe0d6ef6f572f1ebd47bebf156921c825ae6e009dda15b706\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xd17ac7e1d8f83d20d80e652adfed83da122f3a3c7b69fefa2985d85aebf0a3e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/libraries/Babylonian.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.4.0;\\n\\n// computes square roots using the babylonian method\\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\\nlibrary Babylonian {\\n    // credit for this implementation goes to\\n    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\\n        // however that code costs significantly more gas\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) {\\n            xx >>= 128;\\n            r <<= 64;\\n        }\\n        if (xx >= 0x10000000000000000) {\\n            xx >>= 64;\\n            r <<= 32;\\n        }\\n        if (xx >= 0x100000000) {\\n            xx >>= 32;\\n            r <<= 16;\\n        }\\n        if (xx >= 0x10000) {\\n            xx >>= 16;\\n            r <<= 8;\\n        }\\n        if (xx >= 0x100) {\\n            xx >>= 8;\\n            r <<= 4;\\n        }\\n        if (xx >= 0x10) {\\n            xx >>= 4;\\n            r <<= 2;\\n        }\\n        if (xx >= 0x8) {\\n            r <<= 1;\\n        }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return (r < r1 ? r : r1);\\n    }\\n}\\n\",\"keccak256\":\"0xeb1c2a281a00f4660775f75ccfa1e51fbe1d75f86aeb9d0d297151ecdb900177\",\"license\":\"GPL-3.0-or-later\"},\"@uniswap/lib/contracts/libraries/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.5.0;\\n\\nlibrary BitMath {\\n    // returns the 0 indexed position of the most significant bit of the input x\\n    // s.t. x >= 2**msb and x < 2**(msb+1)\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0, 'BitMath::mostSignificantBit: zero');\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n\\n    // returns the 0 indexed position of the least significant bit of the input x\\n    // s.t. (x & 2**lsb) != 0 and (x & (2**(lsb) - 1)) == 0)\\n    // i.e. the bit at the index is set and the mask of all lower bits is 0\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0, 'BitMath::leastSignificantBit: zero');\\n\\n        r = 255;\\n        if (x & uint128(-1) > 0) {\\n            r -= 128;\\n        } else {\\n            x >>= 128;\\n        }\\n        if (x & uint64(-1) > 0) {\\n            r -= 64;\\n        } else {\\n            x >>= 64;\\n        }\\n        if (x & uint32(-1) > 0) {\\n            r -= 32;\\n        } else {\\n            x >>= 32;\\n        }\\n        if (x & uint16(-1) > 0) {\\n            r -= 16;\\n        } else {\\n            x >>= 16;\\n        }\\n        if (x & uint8(-1) > 0) {\\n            r -= 8;\\n        } else {\\n            x >>= 8;\\n        }\\n        if (x & 0xf > 0) {\\n            r -= 4;\\n        } else {\\n            x >>= 4;\\n        }\\n        if (x & 0x3 > 0) {\\n            r -= 2;\\n        } else {\\n            x >>= 2;\\n        }\\n        if (x & 0x1 > 0) r -= 1;\\n    }\\n}\\n\",\"keccak256\":\"0x19f84d5268286794b44939ec0d85b3c6f59e133f826cdbd9e40112fc94919bb7\",\"license\":\"GPL-3.0-or-later\"},\"@uniswap/lib/contracts/libraries/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.4.0;\\n\\nimport './FullMath.sol';\\nimport './Babylonian.sol';\\nimport './BitMath.sol';\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // range: [0, 2**144 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq144x112 {\\n        uint256 _x;\\n    }\\n\\n    uint8 public constant RESOLUTION = 112;\\n    uint256 public constant Q112 = 0x10000000000000000000000000000; // 2**112\\n    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000; // 2**224\\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\\n        return uq112x112(uint224(x) << RESOLUTION);\\n    }\\n\\n    // encodes a uint144 as a UQ144x112\\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\\n        return uq144x112(uint256(x) << RESOLUTION);\\n    }\\n\\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\n        return uint112(self._x >> RESOLUTION);\\n    }\\n\\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\\n        return uint144(self._x >> RESOLUTION);\\n    }\\n\\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\\n    // reverts on overflow\\n    function mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {\\n        uint256 z = 0;\\n        require(y == 0 || (z = self._x * y) / y == self._x, 'FixedPoint::mul: overflow');\\n        return uq144x112(z);\\n    }\\n\\n    // multiply a UQ112x112 by an int and decode, returning an int\\n    // reverts on overflow\\n    function muli(uq112x112 memory self, int256 y) internal pure returns (int256) {\\n        uint256 z = FullMath.mulDiv(self._x, uint256(y < 0 ? -y : y), Q112);\\n        require(z < 2**255, 'FixedPoint::muli: overflow');\\n        return y < 0 ? -int256(z) : int256(z);\\n    }\\n\\n    // multiply a UQ112x112 by a UQ112x112, returning a UQ112x112\\n    // lossy\\n    function muluq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\\n        if (self._x == 0 || other._x == 0) {\\n            return uq112x112(0);\\n        }\\n        uint112 upper_self = uint112(self._x >> RESOLUTION); // * 2^0\\n        uint112 lower_self = uint112(self._x & LOWER_MASK); // * 2^-112\\n        uint112 upper_other = uint112(other._x >> RESOLUTION); // * 2^0\\n        uint112 lower_other = uint112(other._x & LOWER_MASK); // * 2^-112\\n\\n        // partial products\\n        uint224 upper = uint224(upper_self) * upper_other; // * 2^0\\n        uint224 lower = uint224(lower_self) * lower_other; // * 2^-224\\n        uint224 uppers_lowero = uint224(upper_self) * lower_other; // * 2^-112\\n        uint224 uppero_lowers = uint224(upper_other) * lower_self; // * 2^-112\\n\\n        // so the bit shift does not overflow\\n        require(upper <= uint112(-1), 'FixedPoint::muluq: upper overflow');\\n\\n        // this cannot exceed 256 bits, all values are 224 bits\\n        uint256 sum = uint256(upper << RESOLUTION) + uppers_lowero + uppero_lowers + (lower >> RESOLUTION);\\n\\n        // so the cast does not overflow\\n        require(sum <= uint224(-1), 'FixedPoint::muluq: sum overflow');\\n\\n        return uq112x112(uint224(sum));\\n    }\\n\\n    // divide a UQ112x112 by a UQ112x112, returning a UQ112x112\\n    function divuq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\\n        require(other._x > 0, 'FixedPoint::divuq: division by zero');\\n        if (self._x == other._x) {\\n            return uq112x112(uint224(Q112));\\n        }\\n        if (self._x <= uint144(-1)) {\\n            uint256 value = (uint256(self._x) << RESOLUTION) / other._x;\\n            require(value <= uint224(-1), 'FixedPoint::divuq: overflow');\\n            return uq112x112(uint224(value));\\n        }\\n\\n        uint256 result = FullMath.mulDiv(Q112, self._x, other._x);\\n        require(result <= uint224(-1), 'FixedPoint::divuq: overflow');\\n        return uq112x112(uint224(result));\\n    }\\n\\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\\n    // can be lossy\\n    function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, 'FixedPoint::fraction: division by zero');\\n        if (numerator == 0) return FixedPoint.uq112x112(0);\\n\\n        if (numerator <= uint144(-1)) {\\n            uint256 result = (numerator << RESOLUTION) / denominator;\\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\\n            return uq112x112(uint224(result));\\n        } else {\\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\\n            return uq112x112(uint224(result));\\n        }\\n    }\\n\\n    // take the reciprocal of a UQ112x112\\n    // reverts on overflow\\n    // lossy\\n    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        require(self._x != 0, 'FixedPoint::reciprocal: reciprocal of zero');\\n        require(self._x != 1, 'FixedPoint::reciprocal: overflow');\\n        return uq112x112(uint224(Q224 / self._x));\\n    }\\n\\n    // square root of a UQ112x112\\n    // lossy between 0/1 and 40 bits\\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        if (self._x <= uint144(-1)) {\\n            return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << 112)));\\n        }\\n\\n        uint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\\n        safeShiftBits -= safeShiftBits % 2;\\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << safeShiftBits) << ((112 - safeShiftBits) / 2)));\\n    }\\n}\\n\",\"keccak256\":\"0xc3a39b8a11715cea45ad9f67f50e4e4c33778c1124acd59e90daf064c9a93974\",\"license\":\"GPL-3.0-or-later\"},\"@uniswap/lib/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-4.0\\npragma solidity >=0.4.0;\\n\\n// taken from https://medium.com/coinmonks/math-in-solidity-part-3-percents-and-proportions-4db014e080b1\\n// license is CC-BY-4.0\\nlibrary FullMath {\\n    function fullMul(uint256 x, uint256 y) internal pure returns (uint256 l, uint256 h) {\\n        uint256 mm = mulmod(x, y, uint256(-1));\\n        l = x * y;\\n        h = mm - l;\\n        if (mm < l) h -= 1;\\n    }\\n\\n    function fullDiv(\\n        uint256 l,\\n        uint256 h,\\n        uint256 d\\n    ) private pure returns (uint256) {\\n        uint256 pow2 = d & -d;\\n        d /= pow2;\\n        l /= pow2;\\n        l += h * ((-pow2) / pow2 + 1);\\n        uint256 r = 1;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        return l * r;\\n    }\\n\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 d\\n    ) internal pure returns (uint256) {\\n        (uint256 l, uint256 h) = fullMul(x, y);\\n\\n        uint256 mm = mulmod(x, y, d);\\n        if (mm > l) h -= 1;\\n        l -= mm;\\n\\n        if (h == 0) return l / d;\\n\\n        require(h < d, 'FullMath: FULLDIV_OVERFLOW');\\n        return fullDiv(l, h, d);\\n    }\\n}\\n\",\"keccak256\":\"0xc4ffcf28169f73fc9fdd1f82345d6d4fcccf3fd5aea83c133437c25e4e0950a9\",\"license\":\"CC-BY-4.0\"},\"@uniswap/lib/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\",\"keccak256\":\"0xaff99b54915f57e2a4e71b8d15afd4ee425410e5a6f45c07517ae1beb806f8bd\",\"license\":\"GPL-3.0-or-later\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe511530871deaef86692cea9adb6076d26d7b47fd4815ce51af52af981026057\",\"license\":\"MIT\"},\"contracts/ClearingHousePerpdexNew.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { AddressUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IERC20Metadata } from \\\"./interface/IERC20Metadata.sol\\\";\\nimport { IClearingHousePerpdexNew } from \\\"./interface/IClearingHousePerpdexNew.sol\\\";\\nimport { PerpdexStructs } from \\\"./lib/PerpdexStructs.sol\\\";\\nimport { AccountLibrary } from \\\"./lib/AccountLibrary.sol\\\";\\nimport { MakerLibrary } from \\\"./lib/MakerLibrary.sol\\\";\\nimport { TakerLibrary } from \\\"./lib/TakerLibrary.sol\\\";\\nimport { VaultLibrary } from \\\"./lib/VaultLibrary.sol\\\";\\nimport { PerpMath } from \\\"./lib/PerpMath.sol\\\";\\nimport { PerpSafeCast } from \\\"./lib/PerpSafeCast.sol\\\";\\nimport { QuoteTokenPerpdex } from \\\"./QuoteTokenPerpdex.sol\\\";\\n\\n// never inherit any new stateful contract. never change the orders of parent stateful contracts\\ncontract ClearingHousePerpdexNew is IClearingHousePerpdexNew, ReentrancyGuard, Ownable {\\n    using AddressUpgradeable for address;\\n    using PerpMath for uint256;\\n    using PerpSafeCast for uint256;\\n\\n    // states\\n    // trader\\n    mapping(address => PerpdexStructs.AccountInfo) public accountInfos;\\n    // baseToken\\n    mapping(address => PerpdexStructs.PriceLimitInfo) public priceLimitInfos;\\n    PerpdexStructs.InsuranceFundInfo public insuranceFundInfo;\\n\\n    // config\\n    address immutable quoteToken;\\n    address immutable uniV2Factory;\\n    PerpdexStructs.PriceLimitConfig public priceLimitConfig;\\n    uint8 public maxMarketsPerAccount;\\n    uint24 public imRatio;\\n    uint24 public mmRatio;\\n    uint24 public liquidationRewardRatio;\\n    uint24 public maxFundingRateRatio;\\n    mapping(address => bool) isBaseTokenAllowed;\\n\\n    //\\n    // MODIFIER\\n    //\\n\\n    //\\n    // EXTERNAL NON-VIEW\\n    //\\n\\n    constructor(\\n        string memory quoteTokenName,\\n        string memory quoteTokenSymbol,\\n        address uniV2FactoryArg\\n    ) public {\\n        // CH_UANC: UniV2Factory address is not contract\\n        require(uniV2FactoryArg.isContract(), \\\"CH_UANC\\\");\\n\\n        quoteToken = address(new QuoteTokenPerpdex{ salt: 0 }(quoteTokenName, quoteTokenSymbol, address(this)));\\n        uniV2Factory = uniV2FactoryArg;\\n\\n        priceLimitConfig.priceLimitLiquidationRatio = 10e4;\\n        priceLimitConfig.priceLimitLiquidationRatio = 5e4;\\n        maxMarketsPerAccount = 16;\\n        imRatio = 10e4;\\n        mmRatio = 5e4;\\n        liquidationRewardRatio = 20e4;\\n        maxFundingRateRatio = 5e4;\\n    }\\n\\n    function deposit(address token, uint256 amount) external override nonReentrant {\\n        address trader = _msgSender();\\n        VaultLibrary.deposit(\\n            accountInfos[trader],\\n            VaultLibrary.DepositParams({ quoteToken: quoteToken, amount: amount, from: trader })\\n        );\\n    }\\n\\n    function withdraw(address token, uint256 amount) external override nonReentrant {\\n        address trader = _msgSender();\\n        VaultLibrary.withdraw(\\n            accountInfos[trader],\\n            VaultLibrary.WithdrawParams({\\n                quoteToken: quoteToken,\\n                amount: amount,\\n                to: trader,\\n                poolFactory: uniV2Factory,\\n                imRatio: imRatio\\n            })\\n        );\\n    }\\n\\n    /// @inheritdoc IClearingHousePerpdexNew\\n    function openPosition(OpenPositionParams calldata params)\\n        external\\n        override\\n        nonReentrant\\n        returns (int256 base, int256 quote)\\n    {\\n        address trader = _msgSender();\\n\\n        TakerLibrary.OpenPositionResponse memory response =\\n            TakerLibrary.openPosition(\\n                accountInfos[trader],\\n                priceLimitInfos[params.baseToken],\\n                TakerLibrary.OpenPositionParams({\\n                    baseToken: params.baseToken,\\n                    quoteToken: quoteToken,\\n                    isBaseToQuote: params.isBaseToQuote,\\n                    isExactInput: params.isExactInput,\\n                    amount: params.amount,\\n                    oppositeAmountBound: params.oppositeAmountBound,\\n                    deadline: params.deadline,\\n                    poolFactory: uniV2Factory,\\n                    priceLimitConfig: priceLimitConfig,\\n                    isBaseTokenAllowed: isBaseTokenAllowed[params.baseToken],\\n                    mmRatio: mmRatio,\\n                    imRatio: imRatio,\\n                    maxMarketsPerAccount: maxMarketsPerAccount\\n                })\\n            );\\n\\n        emit PositionChanged(\\n            trader,\\n            params.baseToken,\\n            response.exchangedBase,\\n            response.exchangedQuote,\\n            accountInfos[trader].takerInfo[params.baseToken].quoteBalance,\\n            response.realizedPnL,\\n            response.priceAfterX96\\n        );\\n\\n        return (response.exchangedBase, response.exchangedQuote);\\n    }\\n\\n    /// @inheritdoc IClearingHousePerpdexNew\\n    function liquidate(LiquidateParams calldata params)\\n        external\\n        override\\n        nonReentrant\\n        returns (int256 base, int256 quote)\\n    {\\n        address trader = params.trader;\\n        address liquidator = _msgSender();\\n\\n        TakerLibrary.LiquidateResponse memory response =\\n            TakerLibrary.liquidate(\\n                accountInfos[trader],\\n                accountInfos[liquidator],\\n                priceLimitInfos[params.baseToken],\\n                insuranceFundInfo,\\n                TakerLibrary.LiquidateParams({\\n                    baseToken: params.baseToken,\\n                    quoteToken: quoteToken,\\n                    amount: params.amount,\\n                    oppositeAmountBound: params.oppositeAmountBound,\\n                    deadline: params.deadline,\\n                    poolFactory: uniV2Factory,\\n                    priceLimitConfig: priceLimitConfig,\\n                    mmRatio: mmRatio,\\n                    liquidationRewardRatio: liquidationRewardRatio,\\n                    maxMarketsPerAccount: maxMarketsPerAccount\\n                })\\n            );\\n\\n        emit PositionChanged(\\n            trader,\\n            params.baseToken,\\n            response.exchangedBase,\\n            response.exchangedQuote,\\n            accountInfos[trader].takerInfo[params.baseToken].quoteBalance,\\n            response.realizedPnL,\\n            response.priceAfterX96\\n        );\\n\\n        return (response.exchangedBase, response.exchangedQuote);\\n    }\\n\\n    /// @inheritdoc IClearingHousePerpdexNew\\n    function addLiquidity(AddLiquidityParams calldata params)\\n        external\\n        override\\n        nonReentrant\\n        returns (AddLiquidityResponse memory)\\n    {\\n        address maker = _msgSender();\\n\\n        MakerLibrary.AddLiquidityResponse memory response =\\n            MakerLibrary.addLiquidity(\\n                accountInfos[maker],\\n                MakerLibrary.AddLiquidityParams({\\n                    baseToken: params.baseToken,\\n                    quoteToken: quoteToken,\\n                    base: params.base,\\n                    quote: params.quote,\\n                    minBase: params.minBase,\\n                    minQuote: params.minQuote,\\n                    deadline: params.deadline,\\n                    poolFactory: uniV2Factory,\\n                    isBaseTokenAllowed: isBaseTokenAllowed[params.baseToken],\\n                    imRatio: imRatio,\\n                    maxMarketsPerAccount: maxMarketsPerAccount\\n                })\\n            );\\n\\n        emit LiquidityChanged(\\n            maker,\\n            params.baseToken,\\n            quoteToken,\\n            response.base.toInt256(),\\n            response.quote.toInt256(),\\n            response.liquidity.toInt256()\\n        );\\n\\n        return AddLiquidityResponse({ base: response.base, quote: response.quote, liquidity: response.liquidity });\\n    }\\n\\n    /// @inheritdoc IClearingHousePerpdexNew\\n    function removeLiquidity(RemoveLiquidityParams calldata params)\\n        external\\n        override\\n        returns (RemoveLiquidityResponse memory)\\n    {\\n        return removeLiquidity(params, _msgSender());\\n    }\\n\\n    /// @inheritdoc IClearingHousePerpdexNew\\n    function removeLiquidity(RemoveLiquidityParams calldata params, address maker)\\n        public\\n        override\\n        nonReentrant\\n        returns (RemoveLiquidityResponse memory)\\n    {\\n        MakerLibrary.RemoveLiquidityResponse memory response =\\n            MakerLibrary.removeLiquidity(\\n                accountInfos[maker],\\n                MakerLibrary.RemoveLiquidityParams({\\n                    baseToken: params.baseToken,\\n                    quoteToken: quoteToken,\\n                    liquidity: params.liquidity,\\n                    minBase: params.minBase,\\n                    minQuote: params.minQuote,\\n                    deadline: params.deadline,\\n                    poolFactory: uniV2Factory,\\n                    makerIsSender: maker == _msgSender(),\\n                    mmRatio: mmRatio,\\n                    maxMarketsPerAccount: maxMarketsPerAccount\\n                })\\n            );\\n\\n        emit LiquidityChanged(\\n            maker,\\n            params.baseToken,\\n            quoteToken,\\n            response.base.neg256(),\\n            response.quote.neg256(),\\n            params.liquidity.neg256()\\n        );\\n\\n        emit PositionChanged(\\n            maker,\\n            params.baseToken,\\n            response.takerBase, // exchangedPositionSize\\n            response.takerQuote, // exchangedPositionNotional\\n            accountInfos[maker].takerInfo[params.baseToken].quoteBalance,\\n            response.realizedPnL, // realizedPnl\\n            response.priceAfterX96\\n        );\\n\\n        return RemoveLiquidityResponse({ base: response.base, quote: response.quote });\\n    }\\n\\n    function setPriceLimitConfig(PerpdexStructs.PriceLimitConfig calldata value)\\n        external\\n        override\\n        onlyOwner\\n        nonReentrant\\n    {\\n        priceLimitConfig = value;\\n    }\\n\\n    function setMaxMarketsPerAccount(uint8 value) external override onlyOwner nonReentrant {\\n        maxMarketsPerAccount = value;\\n    }\\n\\n    function setImRatio(uint24 value) external override onlyOwner nonReentrant {\\n        require(value < 1e6);\\n        require(value >= mmRatio);\\n        imRatio = value;\\n    }\\n\\n    function setMmRatio(uint24 value) external override onlyOwner nonReentrant {\\n        require(value <= imRatio);\\n        require(value > 0);\\n        mmRatio = value;\\n    }\\n\\n    function setLiquidationRewardRatio(uint24 value) external override onlyOwner nonReentrant {\\n        require(value < 1e6);\\n        liquidationRewardRatio = value;\\n    }\\n\\n    function setMaxFundingRateRatio(uint24 value) external override onlyOwner nonReentrant {\\n        require(value < 1e6);\\n        maxFundingRateRatio = value;\\n    }\\n\\n    function setIsBaseTokenAllowed(address baseToken, bool value) external override onlyOwner nonReentrant {\\n        isBaseTokenAllowed[baseToken] = value;\\n    }\\n\\n    //\\n    // EXTERNAL VIEW\\n    //\\n\\n    // all raw information can be retrieved through getters (including default getters)\\n\\n    function getTakerInfo(address trader, address baseToken) external returns (PerpdexStructs.TakerInfo memory) {\\n        return accountInfos[trader].takerInfo[baseToken];\\n    }\\n\\n    function getMakerInfo(address trader, address baseToken) external returns (PerpdexStructs.MakerInfo memory) {\\n        return accountInfos[trader].makerInfo[baseToken];\\n    }\\n\\n    // convenient getters\\n\\n    function getTotalAccountValue(address trader) external view override returns (int256) {\\n        return AccountLibrary.getTotalAccountValue(accountInfos[trader], uniV2Factory, quoteToken);\\n    }\\n\\n    function getPositionSize(address trader, address baseToken) external view override returns (int256) {\\n        return AccountLibrary.getPositionSize(accountInfos[trader], uniV2Factory, baseToken, quoteToken);\\n    }\\n\\n    function getPositionNotional(address trader, address baseToken) external view override returns (int256) {\\n        return AccountLibrary.getPositionNotional(accountInfos[trader], uniV2Factory, baseToken, quoteToken);\\n    }\\n\\n    function getTotalPositionNotional(address trader) external view override returns (uint256) {\\n        return AccountLibrary.getTotalPositionNotional(accountInfos[trader], uniV2Factory, quoteToken);\\n    }\\n\\n    function getOpenPositionSize(address trader, address baseToken) external view override returns (uint256) {\\n        return AccountLibrary.getOpenPositionSize(accountInfos[trader], uniV2Factory, baseToken, quoteToken);\\n    }\\n\\n    function getOpenPositionNotional(address trader, address baseToken) external view override returns (uint256) {\\n        return AccountLibrary.getOpenPositionNotional(accountInfos[trader], uniV2Factory, baseToken, quoteToken);\\n    }\\n\\n    function getTotalOpenPositionNotional(address trader) external view override returns (uint256) {\\n        return AccountLibrary.getTotalOpenPositionNotional(accountInfos[trader], uniV2Factory, quoteToken);\\n    }\\n\\n    function hasEnoughMaintenanceMargin(address trader) external view override returns (bool) {\\n        return AccountLibrary.hasEnoughMaintenanceMargin(accountInfos[trader], uniV2Factory, quoteToken, mmRatio);\\n    }\\n\\n    function hasEnoughInitialMargin(address trader) external view override returns (bool) {\\n        return AccountLibrary.hasEnoughInitialMargin(accountInfos[trader], uniV2Factory, quoteToken, imRatio);\\n    }\\n\\n    //\\n    // INTERNAL NON-VIEW\\n    //\\n\\n    //\\n    // INTERNAL VIEW\\n    //\\n}\\n\",\"keccak256\":\"0x3ab8e1e2f8382ab804f89fa63556c0d9ead1c7de855941004a47494661feb4d2\",\"license\":\"GPL-3.0-or-later\"},\"contracts/QuoteTokenPerpdex.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\nimport { VirtualTokenPerpdex } from \\\"./VirtualTokenPerpdex.sol\\\";\\n\\ncontract QuoteTokenPerpdex is VirtualTokenPerpdex {\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        address recipient\\n    ) VirtualTokenPerpdex(name, symbol, recipient) {}\\n}\\n\",\"keccak256\":\"0xf4d847ef9187b8700ebb84381b5ba36364a40b71dd6ab1469fab864a52c16399\",\"license\":\"GPL-3.0-or-later\"},\"contracts/VirtualTokenPerpdex.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { IVirtualToken } from \\\"./interface/IVirtualToken.sol\\\";\\n\\ncontract VirtualTokenPerpdex is ERC20 {\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        address recipient\\n    ) public ERC20(name, symbol) {\\n        _mint(recipient, type(uint256).max);\\n    }\\n}\\n\",\"keccak256\":\"0xa3f2919af90eef6ab44b8b35f5fc4b402222f6a935d0251cfe2acb91e68f680d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/amm/uniswap_v2/interfaces/IUniswapV2ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\n\\ninterface IUniswapV2ERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf7f66fa0c7e7a72b876f5c5b84fbd8f76319e3988f90b0e5028f5c2fffc4f1cb\",\"license\":\"GPL-3.0-or-later\"},\"contracts/amm/uniswap_v2/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xa748246c5ad4d8ddf600dc01c73dcbfd632c047505d645270eca8ebbc072ec65\",\"license\":\"GPL-3.0-or-later\"},\"contracts/amm/uniswap_v2/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\n\\nimport \\\"./IUniswapV2ERC20.sol\\\";\\n\\ninterface IUniswapV2Pair is IUniswapV2ERC20 {\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x78967564b44fd7f48e0ac5db93da0789b5184910116d2a73007adcf2e0c6e434\",\"license\":\"GPL-3.0-or-later\"},\"contracts/amm/uniswap_v2/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe77f3770b9e458f6fd64a82af61d05614d85940acc24cfe448295a74742eed21\",\"license\":\"GPL-3.0-or-later\"},\"contracts/amm/uniswap_v2_periphery/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x34fc5b4d5480d71d5638185c987b85cabb4d5616e45c17dd37d9b12f5ce838e3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/amm/uniswap_v2_periphery/libraries/UniswapV2Library.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary UniswapV2Library {\\n    using SafeMath for uint256;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex\\\"ff\\\",\\n                        factory,\\n                        keccak256(abi.encodePacked(token0, token1)),\\n                        hex\\\"2e0018e0e4c091ec924c34a4bd44e84e31e4382cb803fe09673ed92d9bb530ea\\\" // init code hash\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n        require(reserveA > 0 && reserveB > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 amountInWithFee = amountIn.mul(997);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i], path[i + 1]);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i - 1], path[i]);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x79b4cba8bd48e9310914a95e64b7a861e50695eb855e43184c46ce0b0f54a030\",\"license\":\"GPL-3.0-or-later\"},\"contracts/amm/uniswap_v2_periphery/libraries/UniswapV2LiquidityMathLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/Babylonian.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/FullMath.sol\\\";\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./UniswapV2Library.sol\\\";\\n\\n// library containing some math for dealing with the liquidity shares of a pair, e.g. computing their exact value\\n// in terms of the underlying tokens\\nlibrary UniswapV2LiquidityMathLibrary {\\n    using SafeMath for uint256;\\n\\n    // computes the direction and magnitude of the profit-maximizing trade\\n    function computeProfitMaximizingTrade(\\n        uint256 truePriceTokenA,\\n        uint256 truePriceTokenB,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (bool aToB, uint256 amountIn) {\\n        aToB = FullMath.mulDiv(reserveA, truePriceTokenB, reserveB) < truePriceTokenA;\\n\\n        uint256 invariant = reserveA.mul(reserveB);\\n\\n        uint256 leftSide =\\n            Babylonian.sqrt(\\n                FullMath.mulDiv(\\n                    invariant.mul(1000),\\n                    aToB ? truePriceTokenA : truePriceTokenB,\\n                    (aToB ? truePriceTokenB : truePriceTokenA).mul(997)\\n                )\\n            );\\n        uint256 rightSide = (aToB ? reserveA.mul(1000) : reserveB.mul(1000)) / 997;\\n\\n        if (leftSide < rightSide) return (false, 0);\\n\\n        // compute the amount that must be sent to move the price to the profit-maximizing price\\n        amountIn = leftSide.sub(rightSide);\\n    }\\n\\n    // gets the reserves after an arbitrage moves the price\\n    // to the profit-maximizing ratio given an externally observed true price\\n    function getReservesAfterArbitrage(\\n        address factory,\\n        address tokenA,\\n        address tokenB,\\n        uint256 truePriceTokenA,\\n        uint256 truePriceTokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        // first get reserves before the swap\\n        (reserveA, reserveB) = UniswapV2Library.getReserves(factory, tokenA, tokenB);\\n\\n        require(reserveA > 0 && reserveB > 0, \\\"UniswapV2ArbitrageLibrary: ZERO_PAIR_RESERVES\\\");\\n\\n        // then compute how much to swap to arb to the true price\\n        (bool aToB, uint256 amountIn) =\\n            computeProfitMaximizingTrade(truePriceTokenA, truePriceTokenB, reserveA, reserveB);\\n\\n        if (amountIn == 0) {\\n            return (reserveA, reserveB);\\n        }\\n\\n        // now affect the trade to the reserves\\n        if (aToB) {\\n            uint256 amountOut = UniswapV2Library.getAmountOut(amountIn, reserveA, reserveB);\\n            reserveA += amountIn;\\n            reserveB -= amountOut;\\n        } else {\\n            uint256 amountOut = UniswapV2Library.getAmountOut(amountIn, reserveB, reserveA);\\n            reserveB += amountIn;\\n            reserveA -= amountOut;\\n        }\\n    }\\n\\n    // computes liquidity value given all the parameters of the pair\\n    function computeLiquidityValue(\\n        uint256 reservesA,\\n        uint256 reservesB,\\n        uint256 totalSupply,\\n        uint256 liquidityAmount,\\n        bool feeOn,\\n        uint256 kLast\\n    ) internal pure returns (uint256 tokenAAmount, uint256 tokenBAmount) {\\n        if (feeOn && kLast > 0) {\\n            uint256 rootK = Babylonian.sqrt(reservesA.mul(reservesB));\\n            uint256 rootKLast = Babylonian.sqrt(kLast);\\n            if (rootK > rootKLast) {\\n                uint256 numerator1 = totalSupply;\\n                uint256 numerator2 = rootK.sub(rootKLast);\\n                uint256 denominator = rootK.mul(5).add(rootKLast);\\n                uint256 feeLiquidity = FullMath.mulDiv(numerator1, numerator2, denominator);\\n                totalSupply = totalSupply.add(feeLiquidity);\\n            }\\n        }\\n        return (reservesA.mul(liquidityAmount) / totalSupply, reservesB.mul(liquidityAmount) / totalSupply);\\n    }\\n\\n    // get all current parameters from the pair and compute value of a liquidity amount\\n    // **note this is subject to manipulation, e.g. sandwich attacks**. prefer passing a manipulation resistant price to\\n    // #getLiquidityValueAfterArbitrageToPrice\\n    function getLiquidityValue(\\n        address factory,\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidityAmount\\n    ) internal view returns (uint256 tokenAAmount, uint256 tokenBAmount) {\\n        (uint256 reservesA, uint256 reservesB) = UniswapV2Library.getReserves(factory, tokenA, tokenB);\\n        IUniswapV2Pair pair = IUniswapV2Pair(UniswapV2Library.pairFor(factory, tokenA, tokenB));\\n        bool feeOn = IUniswapV2Factory(factory).feeTo() != address(0);\\n        uint256 kLast = feeOn ? pair.kLast() : 0;\\n        uint256 totalSupply = pair.totalSupply();\\n        return computeLiquidityValue(reservesA, reservesB, totalSupply, liquidityAmount, feeOn, kLast);\\n    }\\n\\n    // given two tokens, tokenA and tokenB, and their \\\"true price\\\",\\n    // i.e. the observed ratio of value of token A to token B,\\n    // and a liquidity amount, returns the value of the liquidity in terms of tokenA and tokenB\\n    function getLiquidityValueAfterArbitrageToPrice(\\n        address factory,\\n        address tokenA,\\n        address tokenB,\\n        uint256 truePriceTokenA,\\n        uint256 truePriceTokenB,\\n        uint256 liquidityAmount\\n    ) internal view returns (uint256 tokenAAmount, uint256 tokenBAmount) {\\n        bool feeOn = IUniswapV2Factory(factory).feeTo() != address(0);\\n        IUniswapV2Pair pair = IUniswapV2Pair(UniswapV2Library.pairFor(factory, tokenA, tokenB));\\n        uint256 kLast = feeOn ? pair.kLast() : 0;\\n        uint256 totalSupply = pair.totalSupply();\\n\\n        // this also checks that totalSupply > 0\\n        require(totalSupply >= liquidityAmount && liquidityAmount > 0, \\\"ComputeLiquidityValue: LIQUIDITY_AMOUNT\\\");\\n\\n        (uint256 reservesA, uint256 reservesB) =\\n            getReservesAfterArbitrage(factory, tokenA, tokenB, truePriceTokenA, truePriceTokenB);\\n\\n        return computeLiquidityValue(reservesA, reservesB, totalSupply, liquidityAmount, feeOn, kLast);\\n    }\\n}\\n\",\"keccak256\":\"0x41b42c35823861c70cf72122dad35565ce4cdf9cbc5a324d86cf4e2f014ff692\",\"license\":\"GPL-3.0-or-later\"},\"contracts/amm/uniswap_v2_periphery/libraries/UniswapV2OracleLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/FixedPoint.sol\\\";\\n\\n// library with helper methods for oracles that are concerned with computing average prices\\nlibrary UniswapV2OracleLibrary {\\n    using FixedPoint for *;\\n\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n    function currentBlockTimestamp() internal view returns (uint32) {\\n        return uint32(block.timestamp % 2**32);\\n    }\\n\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices(address pair)\\n        internal\\n        view\\n        returns (\\n            uint256 price0Cumulative,\\n            uint256 price1Cumulative,\\n            uint32 blockTimestamp\\n        )\\n    {\\n        blockTimestamp = currentBlockTimestamp();\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\n        if (blockTimestampLast != blockTimestamp) {\\n            // subtraction overflow is desired\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n            // addition overflow is desired\\n            // counterfactual\\n            price0Cumulative += uint256(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\n            // counterfactual\\n            price1Cumulative += uint256(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8d693a2204eb1f325e1bdbe0aef29076c54c722422afaa7b251d73d8b3e1c016\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IBaseTokenNew.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\n\\ninterface IBaseTokenNew {\\n    function shareToBalance(uint256 share) external view returns (uint256);\\n\\n    function balanceToShare(uint256 balance) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xff7550c9e984e455220244f37b4d46f1fd8da3b568bdb49f2134d72a0d727433\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IClearingHousePerpdexNew.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { PerpdexStructs } from \\\"../lib/PerpdexStructs.sol\\\";\\n\\ninterface IClearingHousePerpdexNew {\\n    struct AddLiquidityParams {\\n        address baseToken;\\n        uint256 base;\\n        uint256 quote;\\n        uint256 minBase;\\n        uint256 minQuote;\\n        uint256 deadline;\\n    }\\n\\n    struct RemoveLiquidityParams {\\n        address baseToken;\\n        uint256 liquidity;\\n        uint256 minBase;\\n        uint256 minQuote;\\n        uint256 deadline;\\n    }\\n\\n    struct AddLiquidityResponse {\\n        uint256 base;\\n        uint256 quote;\\n        uint256 liquidity;\\n    }\\n\\n    struct RemoveLiquidityResponse {\\n        uint256 base;\\n        uint256 quote;\\n    }\\n\\n    /// @param oppositeAmountBound\\n    // B2Q + exact input, want more output quote as possible, so we set a lower bound of output quote\\n    // B2Q + exact output, want less input base as possible, so we set a upper bound of input base\\n    // Q2B + exact input, want more output base as possible, so we set a lower bound of output base\\n    // Q2B + exact output, want less input quote as possible, so we set a upper bound of input quote\\n    // when it's set to 0, it will disable slippage protection entirely regardless of exact input or output\\n    // when it's over or under the bound, it will be reverted\\n    /// @param sqrtPriceLimitX96\\n    // B2Q: the price cannot be less than this value after the swap\\n    // Q2B: the price cannot be greater than this value after the swap\\n    // it will fill the trade until it reaches the price limit but WON'T REVERT\\n    // when it's set to 0, it will disable price limit;\\n    // when it's 0 and exact output, the output amount is required to be identical to the param amount\\n    struct OpenPositionParams {\\n        address baseToken;\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n        uint256 amount;\\n        uint256 oppositeAmountBound;\\n        uint256 deadline;\\n    }\\n\\n    struct LiquidateParams {\\n        address trader;\\n        address baseToken;\\n        uint256 amount;\\n        uint256 oppositeAmountBound;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Emitted when taker position is being liquidated\\n    /// @param trader The trader who has been liquidated\\n    /// @param baseToken Virtual base token(ETH, BTC, etc...) address\\n    /// @param positionNotional The cost of position\\n    /// @param positionSize The size of position\\n    /// @param liquidationFee The fee of liquidate\\n    /// @param liquidator The address of liquidator\\n    event PositionLiquidated(\\n        address indexed trader,\\n        address indexed baseToken,\\n        uint256 positionNotional,\\n        uint256 positionSize,\\n        uint256 liquidationFee,\\n        address liquidator\\n    );\\n\\n    /// @notice Emitted when maker's liquidity of a order changed\\n    /// @param maker The one who provide liquidity\\n    /// @param baseToken The address of virtual base token(ETH, BTC, etc...)\\n    /// @param quoteToken The address of virtual USD token\\n    /// @param base The amount of base token added (> 0) / removed (< 0) as liquidity; fees not included\\n    /// @param quote The amount of quote token added ... (same as the above)\\n    /// @param liquidity The amount of liquidity unit added (> 0) / removed (< 0)\\n    event LiquidityChanged(\\n        address indexed maker,\\n        address indexed baseToken,\\n        address indexed quoteToken,\\n        int256 base,\\n        int256 quote,\\n        int256 liquidity\\n    );\\n\\n    /// @notice Emitted when taker's position is being changed\\n    /// @param trader Trader address\\n    /// @param baseToken The address of virtual base token(ETH, BTC, etc...)\\n    /// @param exchangedPositionSize The actual amount swap to uniswapV3 pool\\n    /// @param exchangedPositionNotional The cost of position, include fee\\n    /// @param openNotional The cost of open/close position, < 0: long, > 0: short\\n    /// @param realizedPnl The realized Pnl after open/close position\\n    /// @param priceAfterX96 The price after swap, in X96\\n    event PositionChanged(\\n        address indexed trader,\\n        address indexed baseToken,\\n        int256 exchangedPositionSize,\\n        int256 exchangedPositionNotional,\\n        int256 openNotional,\\n        int256 realizedPnl,\\n        uint256 priceAfterX96\\n    );\\n\\n    function deposit(address token, uint256 amount) external;\\n\\n    function withdraw(address token, uint256 amount) external;\\n\\n    /// @notice Maker can call `addLiquidity` to provide liquidity on Uniswap V3 pool\\n    /// @dev Tx will fail if adding `base == 0 && quote == 0` / `liquidity == 0`\\n    /// @dev - `AddLiquidityParams.useTakerBalance` is only accept `false` now\\n    /// @param params AddLiquidityParams struct\\n    /// @return response AddLiquidityResponse struct\\n    function addLiquidity(AddLiquidityParams calldata params) external returns (AddLiquidityResponse memory);\\n\\n    /// @notice Maker can call `removeLiquidity` to remove liquidity\\n    /// @dev remove liquidity will transfer maker impermanent position to taker position,\\n    /// if `liquidity` of RemoveLiquidityParams struct is zero, the action will collect fee from\\n    /// pool to maker\\n    /// @param params RemoveLiquidityParams struct\\n    /// @return response RemoveLiquidityResponse struct\\n    function removeLiquidity(RemoveLiquidityParams calldata params)\\n        external\\n        returns (RemoveLiquidityResponse memory response);\\n\\n    function removeLiquidity(RemoveLiquidityParams calldata params, address maker)\\n        external\\n        returns (RemoveLiquidityResponse memory response);\\n\\n    /// @notice Trader can call `openPosition` to long/short on baseToken market\\n    /// @dev - `OpenPositionParams.oppositeAmountBound`\\n    ///     - B2Q + exact input, want more output quote as possible, so we set a lower bound of output quote\\n    ///     - B2Q + exact output, want less input base as possible, so we set a upper bound of input base\\n    ///     - Q2B + exact input, want more output base as possible, so we set a lower bound of output base\\n    ///     - Q2B + exact output, want less input quote as possible, so we set a upper bound of input quote\\n    ///     > when it's set to 0, it will disable slippage protection entirely regardless of exact input or output\\n    ///     > when it's over or under the bound, it will be reverted\\n    /// @dev - `OpenPositionParams.sqrtPriceLimitX96`\\n    ///     - B2Q: the price cannot be less than this value after the swap\\n    ///     - Q2B: the price cannot be greater than this value after the swap\\n    ///     > it will fill the trade until it reaches the price limit but WON'T REVERT\\n    ///     > when it's set to 0, it will disable price limit;\\n    ///     > when it's 0 and exact output, the output amount is required to be identical to the param amount\\n    /// @param params OpenPositionParams struct\\n    /// @return base The amount of baseToken the taker got or spent\\n    /// @return quote The amount of quoteToken the taker got or spent\\n    function openPosition(OpenPositionParams calldata params) external returns (int256 base, int256 quote);\\n\\n    /// @notice If trader is underwater, any one can call `liquidate` to liquidate this trader\\n    /// @dev If trader has open orders, need to call `cancelAllExcessOrders` first\\n    /// @return base The amount of baseToken the taker got or spent\\n    /// @return quote The amount of quoteToken the taker got or spent\\n    function liquidate(LiquidateParams calldata params) external returns (int256 base, int256 quote);\\n\\n    function setPriceLimitConfig(PerpdexStructs.PriceLimitConfig calldata value) external;\\n\\n    function setMaxMarketsPerAccount(uint8 value) external;\\n\\n    function setImRatio(uint24 value) external;\\n\\n    function setMmRatio(uint24 value) external;\\n\\n    function setLiquidationRewardRatio(uint24 value) external;\\n\\n    function setMaxFundingRateRatio(uint24 value) external;\\n\\n    function setIsBaseTokenAllowed(address baseToken, bool value) external;\\n\\n    function getTotalAccountValue(address trader) external view returns (int256);\\n\\n    function getPositionSize(address trader, address baseToken) external view returns (int256);\\n\\n    function getPositionNotional(address trader, address baseToken) external view returns (int256);\\n\\n    function getTotalPositionNotional(address trader) external view returns (uint256);\\n\\n    function getOpenPositionSize(address trader, address baseToken) external view returns (uint256);\\n\\n    function getOpenPositionNotional(address trader, address baseToken) external view returns (uint256);\\n\\n    function getTotalOpenPositionNotional(address trader) external view returns (uint256);\\n\\n    function hasEnoughMaintenanceMargin(address trader) external view returns (bool);\\n\\n    function hasEnoughInitialMargin(address trader) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xac35c59a235bfb1e554400dbe8c9157f7fc8f853a749d4ee8d1d760e6014d086\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.7.6;\\n\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8deb4b358e75223f7de598764fb2b014065a172a9e5d91a77210cf556ddafd7c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IVirtualToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\n\\ninterface IVirtualToken {\\n    function isInWhitelist(address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6eeda82d1f36d06e9720da91b696f53ab903436cdbea307b9f2cdf9df9219847\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/AccountLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\nimport { FullMath } from \\\"@uniswap/lib/contracts/libraries/FullMath.sol\\\";\\nimport { PerpSafeCast } from \\\"./PerpSafeCast.sol\\\";\\nimport { UniswapV2Broker } from \\\"./UniswapV2Broker.sol\\\";\\nimport { BaseTokenLibrary } from \\\"./BaseTokenLibrary.sol\\\";\\nimport \\\"./PerpdexStructs.sol\\\";\\n\\n// https://help.ftx.com/hc/en-us/articles/360024780511-Complete-Futures-Specs\\nlibrary AccountLibrary {\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using PerpSafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    function getTotalAccountValue(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address poolFactory,\\n        address quoteToken\\n    ) public view returns (int256) {\\n        address[] storage baseTokens = accountInfo.baseTokens;\\n        int256 accountValue = accountInfo.vaultInfo.collateralBalance;\\n        uint256 length = baseTokens.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            accountValue = accountValue.add(getPositionNotional(accountInfo, poolFactory, baseTokens[i], quoteToken));\\n            // TODO: implement\\n            //            accountValue = accountValue.add(getPositionNotional(accountInfo, baseTokens[i]));\\n        }\\n        return accountValue;\\n    }\\n\\n    function getPositionSize(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address poolFactory,\\n        address baseToken,\\n        address quoteToken\\n    ) public view returns (int256) {\\n        PerpdexStructs.MakerInfo storage makerInfo = accountInfo.makerInfo[baseToken];\\n        int256 baseShare = accountInfo.takerInfo[baseToken].baseBalanceShare.sub(makerInfo.baseDebtShare.toInt256());\\n        (uint256 basePool, uint256 quotePool) =\\n            UniswapV2Broker.getLiquidityValue(poolFactory, baseToken, quoteToken, makerInfo.liquidity);\\n        return BaseTokenLibrary.shareToBalance(baseToken, baseShare).add(basePool.toInt256());\\n    }\\n\\n    function getPositionNotional(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address poolFactory,\\n        address baseToken,\\n        address quoteToken\\n    ) public view returns (int256) {\\n        int256 positionSize = getPositionSize(accountInfo, poolFactory, baseToken, quoteToken);\\n        uint256 priceX96 = UniswapV2Broker.getMarkPriceX96(poolFactory, baseToken, quoteToken);\\n        return positionSize.mulDiv(priceX96.toInt256(), FixedPoint96.Q96);\\n    }\\n\\n    function getTotalPositionNotional(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address poolFactory,\\n        address quoteToken\\n    ) public view returns (uint256) {\\n        address[] storage baseTokens = accountInfo.baseTokens;\\n        uint256 totalPositionNotional;\\n        uint256 length = baseTokens.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            uint256 positionNotional = getPositionNotional(accountInfo, poolFactory, baseTokens[i], quoteToken).abs();\\n            totalPositionNotional = totalPositionNotional.add(positionNotional);\\n        }\\n        return totalPositionNotional;\\n    }\\n\\n    function getOpenPositionSize(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address poolFactory,\\n        address baseToken,\\n        address quoteToken\\n    ) public view returns (uint256) {\\n        PerpdexStructs.MakerInfo storage makerInfo = accountInfo.makerInfo[baseToken];\\n        (uint256 basePool, uint256 quotePool) =\\n            UniswapV2Broker.getLiquidityValue(poolFactory, baseToken, quoteToken, makerInfo.liquidity);\\n        return getPositionSize(accountInfo, poolFactory, baseToken, quoteToken).abs().add(basePool);\\n    }\\n\\n    function getOpenPositionNotional(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address poolFactory,\\n        address baseToken,\\n        address quoteToken\\n    ) public view returns (uint256) {\\n        uint256 positionSize = getOpenPositionSize(accountInfo, poolFactory, baseToken, quoteToken);\\n        uint256 priceX96 = UniswapV2Broker.getMarkPriceX96(poolFactory, baseToken, quoteToken);\\n        return FullMath.mulDiv(positionSize, priceX96, FixedPoint96.Q96);\\n    }\\n\\n    function getTotalOpenPositionNotional(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address poolFactory,\\n        address quoteToken\\n    ) public view returns (uint256) {\\n        address[] storage baseTokens = accountInfo.baseTokens;\\n        uint256 totalOpenPositionNotional;\\n        uint256 length = baseTokens.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            uint256 positionNotional = getOpenPositionNotional(accountInfo, poolFactory, baseTokens[i], quoteToken);\\n            totalOpenPositionNotional = totalOpenPositionNotional.add(positionNotional);\\n        }\\n        return totalOpenPositionNotional;\\n    }\\n\\n    // always true when hasEnoughMaintenanceMargin is true\\n    function hasEnoughMaintenanceMargin(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address poolFactory,\\n        address quoteToken,\\n        uint24 mmRatio\\n    ) public view returns (bool) {\\n        int256 accountValue = getTotalAccountValue(accountInfo, poolFactory, quoteToken);\\n        uint256 totalPositionNotional = getTotalPositionNotional(accountInfo, poolFactory, quoteToken);\\n        return accountValue >= totalPositionNotional.mulRatio(mmRatio).toInt256();\\n    }\\n\\n    function hasEnoughInitialMargin(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address poolFactory,\\n        address quoteToken,\\n        uint24 imRatio\\n    ) public view returns (bool) {\\n        int256 accountValue = getTotalAccountValue(accountInfo, poolFactory, quoteToken);\\n        uint256 totalOpenPositionNotional = getTotalOpenPositionNotional(accountInfo, poolFactory, quoteToken);\\n        return\\n            accountValue.min(accountInfo.vaultInfo.collateralBalance) >=\\n            totalOpenPositionNotional.mulRatio(imRatio).toInt256();\\n    }\\n\\n    function updateBaseTokens(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address baseToken,\\n        uint8 maxMarketsPerAccount\\n    ) public {\\n        bool enabled =\\n            accountInfo.takerInfo[baseToken].baseBalanceShare != 0 || accountInfo.makerInfo[baseToken].liquidity != 0;\\n        address[] storage baseTokens = accountInfo.baseTokens;\\n        uint256 length = baseTokens.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            if (baseTokens[i] == baseToken) {\\n                if (!enabled) {\\n                    baseTokens[i] = baseTokens[length - 1];\\n                    baseTokens.pop();\\n                }\\n                return;\\n            }\\n        }\\n        baseTokens.push(baseToken);\\n        require(baseTokens.length <= maxMarketsPerAccount);\\n    }\\n}\\n\",\"keccak256\":\"0x9ad80629b6d2c890b0270884015a570d3ee0563ced9cebd9f1294726cca8e4fc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/BaseTokenLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nimport { IBaseTokenNew } from \\\"../interface/IBaseTokenNew.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { PerpSafeCast } from \\\"./PerpSafeCast.sol\\\";\\n\\n// internal\\nlibrary BaseTokenLibrary {\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using PerpSafeCast for uint256;\\n\\n    function balanceToShare(address baseToken, int256 balance) internal view returns (int256) {\\n        uint256 shareAbs = IBaseTokenNew(baseToken).balanceToShare(balance.abs());\\n        return balance < 0 ? shareAbs.neg256() : shareAbs.toInt256();\\n    }\\n\\n    function shareToBalance(address baseToken, int256 share) internal view returns (int256) {\\n        uint256 balanceAbs = IBaseTokenNew(baseToken).shareToBalance(share.abs());\\n        return share < 0 ? balanceAbs.neg256() : balanceAbs.toInt256();\\n    }\\n}\\n\",\"keccak256\":\"0xe6fce07ad01d778a292d84a76fcc37611b4ebe42119f4138a07c130b4d1b8c75\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/MakerLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { UniswapV2Broker } from \\\"./UniswapV2Broker.sol\\\";\\nimport \\\"./PerpdexStructs.sol\\\";\\nimport \\\"./TakerLibrary.sol\\\";\\n\\nlibrary MakerLibrary {\\n    using PerpMath for int256;\\n    using PerpSafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    struct AddLiquidityParams {\\n        address baseToken;\\n        address quoteToken;\\n        uint256 base;\\n        uint256 quote;\\n        uint256 minBase;\\n        uint256 minQuote;\\n        uint256 deadline;\\n        address poolFactory;\\n        bool isBaseTokenAllowed;\\n        uint24 imRatio;\\n        uint8 maxMarketsPerAccount;\\n    }\\n\\n    struct AddLiquidityResponse {\\n        uint256 base;\\n        uint256 quote;\\n        uint256 liquidity;\\n    }\\n\\n    struct RemoveLiquidityParams {\\n        address baseToken;\\n        address quoteToken;\\n        uint256 liquidity;\\n        uint256 minBase;\\n        uint256 minQuote;\\n        uint256 deadline;\\n        address poolFactory;\\n        bool makerIsSender;\\n        uint24 mmRatio;\\n        uint8 maxMarketsPerAccount;\\n    }\\n\\n    struct RemoveLiquidityResponse {\\n        uint256 base;\\n        uint256 quote;\\n        int256 takerBase;\\n        int256 takerQuote;\\n        int256 realizedPnL;\\n        uint256 priceAfterX96;\\n    }\\n\\n    modifier checkDeadline(uint256 deadline) {\\n        require(block.timestamp <= deadline, \\\"CH_TE\\\");\\n        _;\\n    }\\n\\n    function addLiquidity(PerpdexStructs.AccountInfo storage accountInfo, AddLiquidityParams calldata params)\\n        public\\n        checkDeadline(params.deadline)\\n        returns (AddLiquidityResponse memory)\\n    {\\n        require(params.isBaseTokenAllowed);\\n\\n        UniswapV2Broker.AddLiquidityResponse memory response =\\n            UniswapV2Broker.addLiquidity(\\n                UniswapV2Broker.AddLiquidityParams(\\n                    params.poolFactory,\\n                    params.baseToken,\\n                    params.quoteToken,\\n                    params.base,\\n                    params.quote,\\n                    address(this)\\n                )\\n            );\\n\\n        PerpdexStructs.MakerInfo storage makerInfo = accountInfo.makerInfo[params.baseToken];\\n        makerInfo.baseDebtShare = makerInfo.baseDebtShare.add(\\n            IBaseTokenNew(params.baseToken).balanceToShare(response.base)\\n        );\\n        makerInfo.quoteDebt = makerInfo.quoteDebt.add(response.quote);\\n        makerInfo.liquidity = makerInfo.liquidity.add(response.liquidity);\\n\\n        AccountLibrary.updateBaseTokens(accountInfo, params.baseToken, params.maxMarketsPerAccount);\\n\\n        require(\\n            AccountLibrary.hasEnoughInitialMargin(accountInfo, params.poolFactory, params.quoteToken, params.imRatio)\\n        );\\n\\n        return AddLiquidityResponse({ base: response.base, quote: response.quote, liquidity: response.liquidity });\\n    }\\n\\n    function removeLiquidity(PerpdexStructs.AccountInfo storage accountInfo, RemoveLiquidityParams calldata params)\\n        public\\n        checkDeadline(params.deadline)\\n        returns (RemoveLiquidityResponse memory funcResponse)\\n    {\\n        if (!params.makerIsSender) {\\n            require(\\n                !AccountLibrary.hasEnoughMaintenanceMargin(\\n                    accountInfo,\\n                    params.poolFactory,\\n                    params.quoteToken,\\n                    params.mmRatio\\n                )\\n            );\\n        }\\n\\n        {\\n            UniswapV2Broker.RemoveLiquidityResponse memory response =\\n                UniswapV2Broker.removeLiquidity(\\n                    UniswapV2Broker.RemoveLiquidityParams(\\n                        params.poolFactory,\\n                        params.baseToken,\\n                        params.quoteToken,\\n                        address(this),\\n                        params.liquidity\\n                    )\\n                );\\n            funcResponse.base = response.base;\\n            funcResponse.quote = response.quote;\\n        }\\n\\n        // TODO: check slippage\\n\\n        {\\n            (uint256 baseDebtShare, uint256 quoteDebt) =\\n                _removeLiquidityFromOrder(accountInfo.makerInfo[params.baseToken], params.liquidity);\\n            AccountLibrary.updateBaseTokens(accountInfo, params.baseToken, params.maxMarketsPerAccount);\\n\\n            funcResponse.priceAfterX96 = UniswapV2Broker.getMarkPriceX96(\\n                params.poolFactory,\\n                params.baseToken,\\n                params.quoteToken\\n            );\\n            funcResponse.takerBase = funcResponse.base.toInt256().sub(\\n                IBaseTokenNew(params.baseToken).shareToBalance(baseDebtShare).toInt256()\\n            );\\n            funcResponse.takerQuote = funcResponse.quote.toInt256().sub(quoteDebt.toInt256());\\n        }\\n\\n        {\\n            int256 takerQuoteCalculatedAtCurrentPrice =\\n                -funcResponse.takerBase.mulDiv(funcResponse.priceAfterX96.toInt256(), FixedPoint96.Q96);\\n            funcResponse.realizedPnL = TakerLibrary.addToTakerBalance(\\n                accountInfo,\\n                params.baseToken,\\n                funcResponse.takerBase,\\n                takerQuoteCalculatedAtCurrentPrice,\\n                funcResponse.takerQuote.sub(takerQuoteCalculatedAtCurrentPrice),\\n                params.maxMarketsPerAccount\\n            );\\n        }\\n    }\\n\\n    function _removeLiquidityFromOrder(PerpdexStructs.MakerInfo storage makerInfo, uint256 liquidity)\\n        private\\n        returns (uint256 baseDebtShare, uint256 quoteDebt)\\n    {\\n        if (liquidity != 0) {\\n            if (makerInfo.baseDebtShare != 0) {\\n                baseDebtShare = FullMath.mulDiv(makerInfo.baseDebtShare, liquidity, makerInfo.liquidity);\\n                makerInfo.baseDebtShare = makerInfo.baseDebtShare.sub(baseDebtShare);\\n            }\\n            if (makerInfo.quoteDebt != 0) {\\n                quoteDebt = FullMath.mulDiv(makerInfo.quoteDebt, liquidity, makerInfo.liquidity);\\n                makerInfo.quoteDebt = makerInfo.quoteDebt.sub(quoteDebt);\\n            }\\n            makerInfo.liquidity = makerInfo.liquidity.sub(liquidity);\\n        }\\n\\n        return (baseDebtShare, quoteDebt);\\n    }\\n}\\n\",\"keccak256\":\"0x719dc7cc8ea0eced97df55ef7c74b23d07375480035c83eff69e33bb9b6440c7\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PerpMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { FullMath } from \\\"@uniswap/v3-core/contracts/libraries/FullMath.sol\\\";\\nimport { PerpSafeCast } from \\\"./PerpSafeCast.sol\\\";\\nimport { SafeMathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport { SignedSafeMathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol\\\";\\n\\nlibrary PerpMath {\\n    using PerpSafeCast for int256;\\n    using SignedSafeMathUpgradeable for int256;\\n    using SafeMathUpgradeable for uint256;\\n\\n    function formatSqrtPriceX96ToPriceX96(uint160 sqrtPriceX96) internal pure returns (uint256) {\\n        return FullMath.mulDiv(sqrtPriceX96, sqrtPriceX96, FixedPoint96.Q96);\\n    }\\n\\n    function formatX10_18ToX96(uint256 valueX10_18) internal pure returns (uint256) {\\n        return FullMath.mulDiv(valueX10_18, FixedPoint96.Q96, 1 ether);\\n    }\\n\\n    function formatX96ToX10_18(uint256 valueX96) internal pure returns (uint256) {\\n        return FullMath.mulDiv(valueX96, 1 ether, FixedPoint96.Q96);\\n    }\\n\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function abs(int256 value) internal pure returns (uint256) {\\n        return value >= 0 ? value.toUint256() : neg256(value).toUint256();\\n    }\\n\\n    function neg256(int256 a) internal pure returns (int256) {\\n        require(a > -2**255, \\\"PerpMath: inversion overflow\\\");\\n        return -a;\\n    }\\n\\n    function neg256(uint256 a) internal pure returns (int256) {\\n        return -PerpSafeCast.toInt256(a);\\n    }\\n\\n    function neg128(int128 a) internal pure returns (int128) {\\n        require(a > -2**127, \\\"PerpMath: inversion overflow\\\");\\n        return -a;\\n    }\\n\\n    function neg128(uint128 a) internal pure returns (int128) {\\n        return -PerpSafeCast.toInt128(a);\\n    }\\n\\n    function divBy10_18(int256 value) internal pure returns (int256) {\\n        // no overflow here\\n        return value / (1 ether);\\n    }\\n\\n    function divBy10_18(uint256 value) internal pure returns (uint256) {\\n        // no overflow here\\n        return value / (1 ether);\\n    }\\n\\n    function subRatio(uint24 a, uint24 b) internal pure returns (uint24) {\\n        require(b <= a, \\\"PerpMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    function mulRatio(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return FullMath.mulDiv(value, ratio, 1e6);\\n    }\\n\\n    function divRatio(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return FullMath.mulDiv(value, 1e6, ratio);\\n    }\\n\\n    /// @param denominator cannot be 0 and is checked in FullMath.mulDiv()\\n    function mulDiv(\\n        int256 a,\\n        int256 b,\\n        uint256 denominator\\n    ) internal pure returns (int256 result) {\\n        uint256 unsignedA = a < 0 ? uint256(neg256(a)) : uint256(a);\\n        uint256 unsignedB = b < 0 ? uint256(neg256(b)) : uint256(b);\\n        bool negative = ((a < 0 && b > 0) || (a > 0 && b < 0)) ? true : false;\\n\\n        uint256 unsignedResult = FullMath.mulDiv(unsignedA, unsignedB, denominator);\\n\\n        result = negative ? neg256(unsignedResult) : PerpSafeCast.toInt256(unsignedResult);\\n\\n        return result;\\n    }\\n\\n    function sign(int256 value) internal pure returns (int256) {\\n        return value > 0 ? 1 : (value < 0 ? -1 : int256(0));\\n    }\\n}\\n\",\"keccak256\":\"0xe4d7752bfc35e9b67fd81b7485a880f5e76c2744ff7f984204180ca5dea99d9f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PerpSafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev copy from \\\"@openzeppelin/contracts-upgradeable/utils/SafeCastUpgradeable.sol\\\"\\n * and rename to avoid naming conflict with uniswap\\n */\\nlibrary PerpSafeCast {\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128 returnValue) {\\n        require(((returnValue = uint128(value)) == value), \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64 returnValue) {\\n        require(((returnValue = uint64(value)) == value), \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32 returnValue) {\\n        require(((returnValue = uint32(value)) == value), \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16 returnValue) {\\n        require(((returnValue = uint16(value)) == value), \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8 returnValue) {\\n        require(((returnValue = uint8(value)) == value), \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 returnValue) {\\n        require(((returnValue = int128(value)) == value), \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 returnValue) {\\n        require(((returnValue = int64(value)) == value), \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 returnValue) {\\n        require(((returnValue = int32(value)) == value), \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 returnValue) {\\n        require(((returnValue = int16(value)) == value), \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 returnValue) {\\n        require(((returnValue = int8(value)) == value), \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from int256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0 and into 24 bit.\\n     */\\n    function toUint24(int256 value) internal pure returns (uint24 returnValue) {\\n        require(\\n            ((returnValue = uint24(value)) == value),\\n            \\\"SafeCast: value must be positive or value doesn't fit in an 24 bits\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 returnValue) {\\n        require(((returnValue = int24(value)) == value), \\\"SafeCast: value doesn't fit in an 24 bits\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x6aba2cd6fe208ea413e3e087540ab092c2f3e9455e317de485bd82a81769e381\",\"license\":\"MIT\"},\"contracts/lib/PerpdexStructs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nlibrary PerpdexStructs {\\n    struct TakerInfo {\\n        int256 baseBalanceShare;\\n        int256 quoteBalance;\\n    }\\n\\n    struct MakerInfo {\\n        uint256 baseDebtShare;\\n        uint256 quoteDebt;\\n        uint256 liquidity;\\n    }\\n\\n    struct VaultInfo {\\n        int256 collateralBalance;\\n    }\\n\\n    struct AccountInfo {\\n        // base token\\n        mapping(address => TakerInfo) takerInfo;\\n        // base token\\n        mapping(address => MakerInfo) makerInfo;\\n        VaultInfo vaultInfo;\\n        address[] baseTokens;\\n    }\\n\\n    struct InsuranceFundInfo {\\n        int256 balance;\\n    }\\n\\n    struct PriceLimitInfo {\\n        uint256 referencePrice;\\n        uint256 referenceTimestamp;\\n    }\\n\\n    struct PriceLimitConfig {\\n        uint24 priceLimitNormalOrderRatio;\\n        uint24 priceLimitLiquidationRatio;\\n    }\\n}\\n\",\"keccak256\":\"0x49ee43fe5ba33f6807dea4305550d94f5f6d762bd42e748112712bb7acc08922\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PriceLimitLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport \\\"./PerpdexStructs.sol\\\";\\n\\n// internal\\nlibrary PriceLimitLibrary {\\n    using PerpMath for uint256;\\n    using SafeMath for uint256;\\n\\n    function isNormalOrderAllowed(\\n        PerpdexStructs.PriceLimitInfo storage priceLimitInfo,\\n        PerpdexStructs.PriceLimitConfig calldata config,\\n        uint256 price\\n    ) internal view returns (bool) {\\n        return _isWithinPriceLimit(priceLimitInfo.referencePrice, price, config.priceLimitNormalOrderRatio);\\n    }\\n\\n    function isLiquidationAllowed(\\n        PerpdexStructs.PriceLimitInfo storage priceLimitInfo,\\n        PerpdexStructs.PriceLimitConfig calldata config,\\n        uint256 price\\n    ) internal view returns (bool) {\\n        return _isWithinPriceLimit(priceLimitInfo.referencePrice, price, config.priceLimitLiquidationRatio);\\n    }\\n\\n    // should call before all price changes\\n    function update(PerpdexStructs.PriceLimitInfo storage priceLimitInfo, uint256 price) internal {\\n        if (priceLimitInfo.referenceTimestamp < block.timestamp) {\\n            priceLimitInfo.referencePrice = price;\\n            priceLimitInfo.referenceTimestamp = block.timestamp;\\n        }\\n    }\\n\\n    function _isWithinPriceLimit(\\n        uint256 referencePrice,\\n        uint256 price,\\n        uint24 priceLimitRatio\\n    ) private pure returns (bool) {\\n        uint256 maxChange = referencePrice.mulRatio(priceLimitRatio);\\n        uint256 upperBound = referencePrice.add(maxChange);\\n        uint256 lowerBound = referencePrice.sub(maxChange);\\n        return (lowerBound <= price && price <= upperBound);\\n    }\\n}\\n\",\"keccak256\":\"0x136729fca15cac4ce528076064e32b8fbe994b903efc268b6dc341b3497c9bcf\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/TakerLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\nimport { UniswapV2Broker } from \\\"./UniswapV2Broker.sol\\\";\\nimport { IBaseTokenNew } from \\\"../interface/IBaseTokenNew.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { PerpSafeCast } from \\\"./PerpSafeCast.sol\\\";\\nimport { BaseTokenLibrary } from \\\"./BaseTokenLibrary.sol\\\";\\nimport \\\"./PerpdexStructs.sol\\\";\\nimport \\\"./AccountLibrary.sol\\\";\\nimport \\\"./PriceLimitLibrary.sol\\\";\\n\\nlibrary TakerLibrary {\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using PerpSafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    struct OpenPositionParams {\\n        address baseToken;\\n        address quoteToken;\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n        uint256 amount;\\n        uint256 oppositeAmountBound;\\n        uint256 deadline;\\n        address poolFactory;\\n        PerpdexStructs.PriceLimitConfig priceLimitConfig;\\n        bool isBaseTokenAllowed;\\n        uint24 mmRatio;\\n        uint24 imRatio;\\n        uint8 maxMarketsPerAccount;\\n    }\\n\\n    struct OpenPositionResponse {\\n        int256 exchangedBase;\\n        int256 exchangedQuote;\\n        int256 realizedPnL;\\n        uint256 priceAfterX96;\\n    }\\n\\n    struct LiquidateParams {\\n        address baseToken;\\n        address quoteToken;\\n        uint256 amount;\\n        uint256 oppositeAmountBound;\\n        uint256 deadline;\\n        address poolFactory;\\n        PerpdexStructs.PriceLimitConfig priceLimitConfig;\\n        uint24 mmRatio;\\n        uint24 liquidationRewardRatio;\\n        uint8 maxMarketsPerAccount;\\n    }\\n\\n    struct LiquidateResponse {\\n        int256 exchangedBase;\\n        int256 exchangedQuote;\\n        int256 realizedPnL;\\n        uint256 priceAfterX96;\\n    }\\n\\n    modifier checkDeadline(uint256 deadline) {\\n        require(block.timestamp <= deadline, \\\"CH_TE\\\");\\n        _;\\n    }\\n\\n    function openPosition(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        PerpdexStructs.PriceLimitInfo storage priceLimitInfo,\\n        OpenPositionParams calldata params\\n    ) public checkDeadline(params.deadline) returns (OpenPositionResponse memory) {\\n        require(\\n            !AccountLibrary.hasEnoughMaintenanceMargin(\\n                accountInfo,\\n                params.poolFactory,\\n                params.quoteToken,\\n                params.mmRatio\\n            )\\n        );\\n\\n        (int256 exchangedBase, int256 exchangedQuote, int256 realizedPnL) =\\n            _doSwap(\\n                accountInfo,\\n                priceLimitInfo,\\n                params.poolFactory,\\n                params.baseToken,\\n                params.quoteToken,\\n                params.isBaseToQuote,\\n                params.isExactInput,\\n                params.amount,\\n                params.maxMarketsPerAccount\\n            );\\n\\n        if (!params.isBaseTokenAllowed) {\\n            require(accountInfo.takerInfo[params.baseToken].baseBalanceShare.sign() * exchangedBase.sign() <= 0);\\n        }\\n\\n        uint256 priceAfterX96 = _getPriceX96(params.poolFactory, params.baseToken, params.quoteToken);\\n        require(PriceLimitLibrary.isNormalOrderAllowed(priceLimitInfo, params.priceLimitConfig, priceAfterX96));\\n\\n        require(\\n            AccountLibrary.hasEnoughInitialMargin(accountInfo, params.poolFactory, params.quoteToken, params.imRatio)\\n        );\\n\\n        return\\n            OpenPositionResponse({\\n                exchangedBase: exchangedBase,\\n                exchangedQuote: exchangedQuote,\\n                realizedPnL: realizedPnL,\\n                priceAfterX96: priceAfterX96\\n            });\\n    }\\n\\n    function liquidate(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        PerpdexStructs.AccountInfo storage liquidatorAccountInfo,\\n        PerpdexStructs.PriceLimitInfo storage priceLimitInfo,\\n        PerpdexStructs.InsuranceFundInfo storage insuranceFundInfo,\\n        LiquidateParams calldata params\\n    ) public checkDeadline(params.deadline) returns (LiquidateResponse memory) {\\n        require(\\n            !AccountLibrary.hasEnoughMaintenanceMargin(\\n                accountInfo,\\n                params.poolFactory,\\n                params.quoteToken,\\n                params.mmRatio\\n            )\\n        );\\n\\n        bool isLong;\\n        {\\n            PerpdexStructs.TakerInfo storage takerInfo = accountInfo.takerInfo[params.baseToken];\\n            isLong = takerInfo.baseBalanceShare > 0 ? true : false;\\n            require(params.amount <= IBaseTokenNew(params.baseToken).shareToBalance(takerInfo.baseBalanceShare.abs()));\\n        }\\n\\n        (int256 exchangedBase, int256 exchangedQuote, int256 realizedPnL) =\\n            _doSwap(\\n                accountInfo,\\n                priceLimitInfo,\\n                params.poolFactory,\\n                params.baseToken,\\n                params.quoteToken,\\n                isLong, // isBaseToQuote,\\n                isLong, // isExactInput,\\n                params.amount,\\n                params.maxMarketsPerAccount\\n            );\\n\\n        uint256 priceAfterX96 = _getPriceX96(params.poolFactory, params.baseToken, params.quoteToken);\\n        require(PriceLimitLibrary.isLiquidationAllowed(priceLimitInfo, params.priceLimitConfig, priceAfterX96));\\n\\n        _processLiquidationFee(\\n            accountInfo.vaultInfo,\\n            liquidatorAccountInfo.vaultInfo,\\n            insuranceFundInfo,\\n            params.mmRatio,\\n            params.liquidationRewardRatio,\\n            exchangedQuote.abs()\\n        );\\n\\n        return\\n            LiquidateResponse({\\n                exchangedBase: exchangedBase,\\n                exchangedQuote: exchangedQuote,\\n                realizedPnL: realizedPnL,\\n                priceAfterX96: priceAfterX96\\n            });\\n    }\\n\\n    function addToTakerBalance(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address baseToken,\\n        int256 baseBalance,\\n        int256 quoteBalance,\\n        int256 quoteFee,\\n        uint8 maxMarketsPerAccount\\n    ) public returns (int256) {\\n        require(baseBalance.sign() * quoteBalance.sign() == -1);\\n\\n        int256 baseShare = BaseTokenLibrary.balanceToShare(baseToken, baseBalance);\\n        PerpdexStructs.TakerInfo storage takerInfo = accountInfo.takerInfo[baseToken];\\n\\n        int256 realizedPnL;\\n\\n        if (takerInfo.baseBalanceShare.sign() * baseShare.sign() == -1) {\\n            uint256 FULLY_CLOSED_RATIO = 1e18;\\n            uint256 closedRatio =\\n                FullMath.mulDiv(baseShare.abs(), FULLY_CLOSED_RATIO, takerInfo.baseBalanceShare.abs());\\n\\n            if (closedRatio <= FULLY_CLOSED_RATIO) {\\n                int256 reducedOpenNotional = takerInfo.quoteBalance.mulDiv(closedRatio.toInt256(), FULLY_CLOSED_RATIO);\\n                realizedPnL = quoteBalance.add(reducedOpenNotional).add(quoteFee);\\n            } else {\\n                int256 closedPositionNotional = quoteBalance.mulDiv(int256(FULLY_CLOSED_RATIO), closedRatio);\\n                realizedPnL = takerInfo.quoteBalance.add(closedPositionNotional).add(quoteFee);\\n            }\\n        } else {\\n            realizedPnL = quoteFee;\\n        }\\n\\n        takerInfo.baseBalanceShare = takerInfo.baseBalanceShare.add(baseShare);\\n        takerInfo.quoteBalance = takerInfo.quoteBalance.add(quoteBalance).add(quoteFee).sub(realizedPnL);\\n        accountInfo.vaultInfo.collateralBalance = accountInfo.vaultInfo.collateralBalance.add(realizedPnL);\\n\\n        AccountLibrary.updateBaseTokens(accountInfo, baseToken, maxMarketsPerAccount);\\n\\n        return realizedPnL;\\n    }\\n\\n    function _getPriceX96(\\n        address poolFactory,\\n        address baseToken,\\n        address quoteToken\\n    ) private returns (uint256) {\\n        return UniswapV2Broker.getMarkPriceX96(poolFactory, baseToken, quoteToken);\\n    }\\n\\n    function _doSwap(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        PerpdexStructs.PriceLimitInfo storage priceLimitInfo,\\n        address poolFactory,\\n        address baseToken,\\n        address quoteToken,\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        uint8 maxMarketsPerAccount\\n    )\\n        private\\n        returns (\\n            int256,\\n            int256,\\n            int256\\n        )\\n    {\\n        {\\n            uint256 priceBeforeX96 = _getPriceX96(poolFactory, baseToken, quoteToken);\\n            PriceLimitLibrary.update(priceLimitInfo, priceBeforeX96);\\n        }\\n\\n        int256 exchangedPositionSize;\\n        int256 exchangedPositionNotional;\\n\\n        {\\n            UniswapV2Broker.SwapResponse memory response =\\n                UniswapV2Broker.swap(\\n                    UniswapV2Broker.SwapParams(\\n                        poolFactory,\\n                        baseToken,\\n                        quoteToken,\\n                        address(this), // recipient\\n                        isBaseToQuote,\\n                        isExactInput,\\n                        amount // amount\\n                    )\\n                );\\n\\n            if (isBaseToQuote) {\\n                // short: exchangedPositionSize <= 0 && exchangedPositionNotional >= 0\\n                exchangedPositionSize = response.base.neg256();\\n                exchangedPositionNotional = response.quote.toInt256();\\n            } else {\\n                // long: exchangedPositionSize >= 0 && exchangedPositionNotional <= 0\\n                exchangedPositionSize = response.base.toInt256();\\n                exchangedPositionNotional = response.quote.neg256();\\n            }\\n        }\\n\\n        int256 realizedPnL =\\n            addToTakerBalance(\\n                accountInfo,\\n                baseToken,\\n                exchangedPositionSize,\\n                exchangedPositionNotional,\\n                0,\\n                maxMarketsPerAccount\\n            );\\n\\n        return (exchangedPositionSize, exchangedPositionNotional, realizedPnL);\\n    }\\n\\n    function _processLiquidationFee(\\n        PerpdexStructs.VaultInfo storage vaultInfo,\\n        PerpdexStructs.VaultInfo storage liquidatorVaultInfo,\\n        PerpdexStructs.InsuranceFundInfo storage insuranceFundInfo,\\n        uint24 mmRatio,\\n        uint24 liquidatorRewardRatio,\\n        uint256 exchangedQuote\\n    ) private returns (uint256) {\\n        uint256 penalty = exchangedQuote.mulRatio(mmRatio);\\n        uint256 liquidatorReward = penalty.mulRatio(liquidatorRewardRatio);\\n        uint256 insuranceFundReward = penalty.sub(liquidatorReward);\\n\\n        vaultInfo.collateralBalance = vaultInfo.collateralBalance.sub(penalty.toInt256());\\n        liquidatorVaultInfo.collateralBalance = liquidatorVaultInfo.collateralBalance.add(liquidatorReward.toInt256());\\n        insuranceFundInfo.balance = insuranceFundInfo.balance.add(insuranceFundReward.toInt256());\\n\\n        return penalty;\\n    }\\n}\\n\",\"keccak256\":\"0x4a0e7c6ce9e36e7e3f714bffbd303d2c6d8daf5f3ea602f81c8d5ba735e3fc5c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/UniswapV2Broker.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\nimport { IUniswapV2Pair } from \\\"../amm/uniswap_v2/interfaces/IUniswapV2Pair.sol\\\";\\nimport { IUniswapV2Factory } from \\\"../amm/uniswap_v2/interfaces/IUniswapV2Factory.sol\\\";\\nimport { UniswapV2LiquidityMathLibrary } from \\\"../amm/uniswap_v2_periphery/libraries/UniswapV2LiquidityMathLibrary.sol\\\";\\nimport { UniswapV2OracleLibrary } from \\\"../amm/uniswap_v2_periphery/libraries/UniswapV2OracleLibrary.sol\\\";\\nimport { UniswapV2Library } from \\\"../amm/uniswap_v2_periphery/libraries/UniswapV2Library.sol\\\";\\nimport { Math } from \\\"../amm/uniswap_v2/libraries/Math.sol\\\";\\nimport { FullMath } from \\\"@uniswap/v3-core/contracts/libraries/FullMath.sol\\\";\\nimport { PerpSafeCast } from \\\"./PerpSafeCast.sol\\\";\\nimport { SafeMathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport { PerpMath } from \\\"../lib/PerpMath.sol\\\";\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\n\\n/**\\n * Uniswap's v2 pool: token0 & token1\\n * -> token0's price = token1 / token0\\n * Our system: base & quote\\n * -> base's price = quote / base\\n * Thus, we require that (base, quote) = (token0, token1) is always true for convenience\\n */\\nlibrary UniswapV2Broker {\\n    using SafeMathUpgradeable for uint256;\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using PerpSafeCast for uint256;\\n    using PerpSafeCast for int256;\\n\\n    //\\n    // STRUCT\\n    //\\n\\n    struct AddLiquidityParams {\\n        address factory;\\n        address baseToken;\\n        address quoteToken;\\n        uint256 base;\\n        uint256 quote;\\n        address to;\\n    }\\n\\n    struct AddLiquidityResponse {\\n        uint256 base;\\n        uint256 quote;\\n        uint256 liquidity;\\n    }\\n\\n    struct RemoveLiquidityParams {\\n        address factory;\\n        address baseToken;\\n        address quoteToken;\\n        address recipient;\\n        uint256 liquidity;\\n    }\\n\\n    /// @param base amount of base token received from burning the liquidity (excl. fee)\\n    /// @param quote amount of quote token received from burning the liquidity (excl. fee)\\n    struct RemoveLiquidityResponse {\\n        uint256 base;\\n        uint256 quote;\\n    }\\n\\n    struct SwapParams {\\n        address factory;\\n        address baseToken;\\n        address quoteToken;\\n        address recipient;\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n        uint256 amount;\\n    }\\n\\n    struct SwapResponse {\\n        uint256 base;\\n        uint256 quote;\\n    }\\n\\n    //\\n    // CONSTANT\\n    //\\n\\n    //\\n    // INTERNAL NON-VIEW\\n    //\\n\\n    function addLiquidity(AddLiquidityParams memory params) internal returns (AddLiquidityResponse memory) {\\n        (uint256 amountBase, uint256 amountQuote, uint256 liquidity) =\\n            _addLiquidity(\\n                params.factory,\\n                params.baseToken, // tokenA\\n                params.quoteToken, // tokenB\\n                params.base, // amountADesired\\n                params.quote, // amountBDesired\\n                1, // amountAMin\\n                1, // amountBMin\\n                address(params.to), // to\\n                block.timestamp // deadline\\n            );\\n\\n        return AddLiquidityResponse({ base: amountBase, quote: amountQuote, liquidity: liquidity });\\n    }\\n\\n    function removeLiquidity(RemoveLiquidityParams memory params) internal returns (RemoveLiquidityResponse memory) {\\n        (uint256 amountBase, uint256 amountQuote) =\\n            _removeLiquidity(\\n                params.factory,\\n                params.baseToken, // tokenA,\\n                params.quoteToken, // tokenB,\\n                params.liquidity, // liquidity,\\n                1, // amountAMin,\\n                1, // amountBMin,\\n                params.recipient, // to,\\n                block.timestamp // deadline\\n            );\\n\\n        return RemoveLiquidityResponse({ base: amountBase, quote: amountQuote });\\n    }\\n\\n    function swap(SwapParams memory params) internal returns (SwapResponse memory response) {\\n        uint256 amountIn;\\n        address[] memory path = new address[](2);\\n        uint256[] memory amounts;\\n\\n        if (params.isBaseToQuote) {\\n            path[0] = params.baseToken;\\n            path[1] = params.quoteToken;\\n        } else {\\n            path[0] = params.quoteToken;\\n            path[1] = params.baseToken;\\n        }\\n\\n        if (params.isExactInput) {\\n            amounts = _swapExactTokensForTokens(\\n                params.factory,\\n                params.amount, // amountIn\\n                1, // amountOutMin\\n                path, // path\\n                params.recipient, // to\\n                block.timestamp // deadline\\n            );\\n        } else {\\n            amounts = _swapTokensForExactTokens(\\n                params.factory,\\n                params.amount, // amountOut\\n                type(uint256).max, // amountInMax\\n                path, // path\\n                params.recipient, // to\\n                block.timestamp // deadline\\n            );\\n        }\\n\\n        if (params.isBaseToQuote) {\\n            return SwapResponse(amounts[0], amounts[1]);\\n        } else {\\n            return SwapResponse(amounts[1], amounts[0]);\\n        }\\n    }\\n\\n    //\\n    // INTERNAL VIEW\\n    //\\n\\n    function getLiquidityValue(\\n        address factory,\\n        address baseToken,\\n        address quoteToken,\\n        uint256 liquidityAmount\\n    ) internal view returns (uint256 baseAmount, uint256 quoteAmount) {\\n        // based on UniswapV2LiquidityMathLibrary.getLiquidityValue\\n\\n        (uint256 reservesA, uint256 reservesB) = UniswapV2Library.getReserves(factory, baseToken, quoteToken);\\n        if (reservesA == 0 || reservesB == 0) {\\n            return (0, 0);\\n        }\\n\\n        IUniswapV2Pair pair = IUniswapV2Pair(UniswapV2Library.pairFor(factory, baseToken, quoteToken));\\n        bool feeOn = IUniswapV2Factory(factory).feeTo() != address(0);\\n        uint256 kLast = feeOn ? pair.kLast() : 0;\\n        uint256 totalSupply = pair.totalSupply();\\n        return\\n            UniswapV2LiquidityMathLibrary.computeLiquidityValue(\\n                reservesA,\\n                reservesB,\\n                totalSupply,\\n                liquidityAmount,\\n                feeOn,\\n                kLast\\n            );\\n    }\\n\\n    function getMarkPriceX96(\\n        address factory,\\n        address baseToken,\\n        address quoteToken\\n    ) internal view returns (uint256 markPrice) {\\n        (uint256 baseAmount, uint256 quoteAmount) = UniswapV2Library.getReserves(factory, baseToken, quoteToken);\\n        return FullMath.mulDiv(quoteAmount, FixedPoint96.Q96, baseAmount);\\n    }\\n\\n    function getSqrtMarkPriceX96(\\n        address factory,\\n        address baseToken,\\n        address quoteToken\\n    ) internal view returns (uint160 sqrtMarkPrice) {\\n        (uint256 baseAmount, uint256 quoteAmount) = UniswapV2Library.getReserves(factory, baseToken, quoteToken);\\n        return uint160(Math.sqrt(FullMath.mulDiv(quoteAmount, FixedPoint96.Q96 * FixedPoint96.Q96, baseAmount)));\\n    }\\n\\n    function getCurrentCumulativePrice(\\n        address factory,\\n        address baseToken,\\n        address quoteToken\\n    ) internal view returns (uint256 priceCumulative, uint32 blockTimestamp) {\\n        address pair = IUniswapV2Factory(factory).getPair(baseToken, quoteToken);\\n        uint256 price0Cumulative;\\n        uint256 price1Cumulative;\\n        if (IUniswapV2Pair(pair).price0CumulativeLast() == 0) {\\n            priceCumulative = 0;\\n            blockTimestamp = 0;\\n        } else {\\n            (price0Cumulative, price1Cumulative, blockTimestamp) = UniswapV2OracleLibrary.currentCumulativePrices(pair);\\n            priceCumulative = IUniswapV2Pair(pair).token0() == baseToken ? price0Cumulative : price1Cumulative;\\n        }\\n    }\\n\\n    //\\n    // PRIVATE NON-VIEW\\n    //\\n\\n    // copied from UniswapV2Router02\\n    // modified to transfer tokens from \\\"to\\\" param\\n\\n    modifier ensure(uint256 deadline) {\\n        require(deadline >= block.timestamp, \\\"UniswapV2Router: EXPIRED\\\");\\n        _;\\n    }\\n\\n    // **** ADD LIQUIDITY ****\\n    function _doAddLiquidity(\\n        address factory,\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin\\n    ) private returns (uint256 amountA, uint256 amountB) {\\n        // create the pair if it doesn't exist yet\\n        if (IUniswapV2Factory(factory).getPair(tokenA, tokenB) == address(0)) {\\n            IUniswapV2Factory(factory).createPair(tokenA, tokenB);\\n        }\\n        (uint256 reserveA, uint256 reserveB) = UniswapV2Library.getReserves(factory, tokenA, tokenB);\\n        if (reserveA == 0 && reserveB == 0) {\\n            (amountA, amountB) = (amountADesired, amountBDesired);\\n        } else {\\n            uint256 amountBOptimal = UniswapV2Library.quote(amountADesired, reserveA, reserveB);\\n            if (amountBOptimal <= amountBDesired) {\\n                require(amountBOptimal >= amountBMin, \\\"UniswapV2Router: INSUFFICIENT_B_AMOUNT\\\");\\n                (amountA, amountB) = (amountADesired, amountBOptimal);\\n            } else {\\n                uint256 amountAOptimal = UniswapV2Library.quote(amountBDesired, reserveB, reserveA);\\n                assert(amountAOptimal <= amountADesired);\\n                require(amountAOptimal >= amountAMin, \\\"UniswapV2Router: INSUFFICIENT_A_AMOUNT\\\");\\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\\n            }\\n        }\\n    }\\n\\n    function _addLiquidity(\\n        address factory,\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        private\\n        ensure(deadline)\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        )\\n    {\\n        (amountA, amountB) = _doAddLiquidity(\\n            factory,\\n            tokenA,\\n            tokenB,\\n            amountADesired,\\n            amountBDesired,\\n            amountAMin,\\n            amountBMin\\n        );\\n        address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);\\n        TransferHelper.safeTransferFrom(tokenA, to, pair, amountA);\\n        TransferHelper.safeTransferFrom(tokenB, to, pair, amountB);\\n        liquidity = IUniswapV2Pair(pair).mint(to);\\n    }\\n\\n    // **** REMOVE LIQUIDITY ****\\n    function _removeLiquidity(\\n        address factory,\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) private ensure(deadline) returns (uint256 amountA, uint256 amountB) {\\n        address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);\\n        IUniswapV2Pair(pair).transferFrom(to, pair, liquidity); // send liquidity to pair\\n        (uint256 amount0, uint256 amount1) = IUniswapV2Pair(pair).burn(to);\\n        (address token0, ) = UniswapV2Library.sortTokens(tokenA, tokenB);\\n        (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\\n        require(amountA >= amountAMin, \\\"UniswapV2Router: INSUFFICIENT_A_AMOUNT\\\");\\n        require(amountB >= amountBMin, \\\"UniswapV2Router: INSUFFICIENT_B_AMOUNT\\\");\\n    }\\n\\n    // **** SWAP ****\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swap(\\n        address factory,\\n        uint256[] memory amounts,\\n        address[] memory path,\\n        address _to\\n    ) private {\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0, ) = UniswapV2Library.sortTokens(input, output);\\n            uint256 amountOut = amounts[i + 1];\\n            (uint256 amount0Out, uint256 amount1Out) =\\n                input == token0 ? (uint256(0), amountOut) : (amountOut, uint256(0));\\n            address to = i < path.length - 2 ? UniswapV2Library.pairFor(factory, output, path[i + 2]) : _to;\\n            IUniswapV2Pair(UniswapV2Library.pairFor(factory, input, output)).swap(\\n                amount0Out,\\n                amount1Out,\\n                to,\\n                new bytes(0)\\n            );\\n        }\\n    }\\n\\n    function _swapExactTokensForTokens(\\n        address factory,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        address to,\\n        uint256 deadline\\n    ) private ensure(deadline) returns (uint256[] memory amounts) {\\n        amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path);\\n        require(amounts[amounts.length - 1] >= amountOutMin, \\\"UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        TransferHelper.safeTransferFrom(path[0], to, UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]);\\n        _swap(factory, amounts, path, to);\\n    }\\n\\n    function _swapTokensForExactTokens(\\n        address factory,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] memory path,\\n        address to,\\n        uint256 deadline\\n    ) private ensure(deadline) returns (uint256[] memory amounts) {\\n        amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);\\n        require(amounts[0] <= amountInMax, \\\"UniswapV2Router: EXCESSIVE_INPUT_AMOUNT\\\");\\n        TransferHelper.safeTransferFrom(path[0], to, UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]);\\n        _swap(factory, amounts, path, to);\\n    }\\n\\n    //\\n    // PRIVATE VIEW\\n    //\\n}\\n\",\"keccak256\":\"0x7318442249d9ad7e44e564a2bec699563dafa8898340008fcf680054184bf306\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/VaultLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport { SafeERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\nimport { IERC20Metadata } from \\\"../interface/IERC20Metadata.sol\\\";\\nimport { PerpSafeCast } from \\\"./PerpSafeCast.sol\\\";\\nimport \\\"./AccountLibrary.sol\\\";\\nimport \\\"./PerpdexStructs.sol\\\";\\n\\n// internal\\nlibrary VaultLibrary {\\n    using PerpSafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    struct DepositParams {\\n        address quoteToken;\\n        uint256 amount;\\n        address from;\\n    }\\n\\n    struct WithdrawParams {\\n        address quoteToken;\\n        uint256 amount;\\n        address to;\\n        address poolFactory;\\n        uint24 imRatio;\\n    }\\n\\n    function deposit(PerpdexStructs.AccountInfo storage accountInfo, DepositParams memory params) internal {\\n        _transferTokenIn(params.quoteToken, params.from, params.amount);\\n        accountInfo.vaultInfo.collateralBalance = accountInfo.vaultInfo.collateralBalance.add(params.amount.toInt256());\\n    }\\n\\n    function withdraw(PerpdexStructs.AccountInfo storage accountInfo, WithdrawParams memory params) internal {\\n        accountInfo.vaultInfo.collateralBalance = accountInfo.vaultInfo.collateralBalance.sub(params.amount.toInt256());\\n        require(\\n            AccountLibrary.hasEnoughInitialMargin(accountInfo, params.poolFactory, params.quoteToken, params.imRatio)\\n        );\\n\\n        SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(params.quoteToken), params.to, params.amount);\\n    }\\n\\n    function _transferTokenIn(\\n        address token,\\n        address from,\\n        uint256 amount\\n    ) private {\\n        // check for deflationary tokens by assuring balances before and after transferring to be the same\\n        uint256 balanceBefore = IERC20Metadata(token).balanceOf(address(this));\\n        SafeERC20Upgradeable.safeTransferFrom(IERC20Upgradeable(token), from, address(this), amount);\\n        // V_IBA: inconsistent balance amount, to prevent from deflationary tokens\\n        require((IERC20Metadata(token).balanceOf(address(this)).sub(balanceBefore)) == amount, \\\"V_IBA\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x6121d57dee0aa327b4c281120087a8bfd9830c8c9593813900fb216e7bda76c7\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101f75760003560e01c80638da5cb5b11610120578063c66fa8e6116100b8578063ec6cca841161007c578063ec6cca8414610486578063f2fde38b14610499578063f3fef3a3146104ac578063f652b527146104bf578063fa8f0368146104d4576101f7565b8063c66fa8e61461043d578063c9ca7b1814610445578063d16111c114610458578063d1ead56314610460578063dfe1cb9214610473576101f7565b80638da5cb5b1461038c578063996fbf94146103a15780639dce9e19146103b45780639f044f31146103d4578063a3b6c272146103dc578063b53c5125146103ef578063b62616431461040f578063c2fdd42f14610417578063c3afe1ce1461042a576101f7565b80635f0e078e116101935780635f0e078e146102dc5780636346f32e146102ef5780636e838bad14610305578063715018a61461031857806373f625011461032057806376c6008f146103335780637c88490a1461034657806387cad0bf146103595780638da25bbe14610379576101f7565b80630674fa41146101fc578063093eb8201461022557806319be4975146102455780632e784343146102665780632f60a151146102795780633a9210511461028e57806347e7ef24146102a15780634b4aa735146102b657806359af74f7146102c9575b600080fd5b61020f61020a366004612bb5565b6104e7565b60405161021c9190612eb3565b60405180910390f35b610238610233366004612d67565b6105d1565b60405161021c91906132cf565b610258610253366004612bb5565b610922565b60405161021c929190612ebc565b610238610274366004612bcf565b61093b565b610281610987565b60405161021c91906132f0565b61020f61029c366004612bb5565b610997565b6102b46102af366004612c37565b610a29565b005b61020f6102c4366004612bb5565b610b04565b6102586102d7366004612d20565b610b96565b6102b46102ea366004612c01565b610ef6565b6102f7610fd1565b60405161021c929190613300565b6102b4610313366004612e04565b610fe7565b6102b46110ec565b6102b461032e366004612e20565b611198565b61020f610341366004612bcf565b61125b565b61020f610354366004612bcf565b611346565b61036c610367366004612bb5565b6113da565b60405161021c91906132e6565b61020f610387366004612bcf565b6113fc565b610394611490565b60405161021c9190612e94565b61020f6103af366004612bcf565b61149f565b6103c76103c2366004612bb5565b611533565b60405161021c9190612ea8565b610281611626565b6102b46103ea366004612e04565b611638565b6104026103fd366004612bcf565b611722565b60405161021c91906132c1565b61028161177a565b610238610425366004612d20565b61178c565b610258610438366004612cb0565b6117a0565b61020f611b2a565b6102b4610453366004612e04565b611b30565b610281611c36565b6102b461046e366004612e04565b611c48565b610402610481366004612cb0565b611d32565b6103c7610494366004612bb5565b612024565b6102b46104a7366004612bb5565b6120c5565b6102b46104ba366004612c37565b6121c8565b6104c76122bb565b60405161021c9190613316565b6102b46104e2366004612d56565b6122c4565b6001600160a01b03811660009081526002602052604080822090516343b362bf60e01b815273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__916343b362bf9161057991907f0000000000000000000000000000000000000000000000000000000000000000907f000000000000000000000000000000000000000000000000000000000000000090600401612f4c565b60206040518083038186803b15801561059157600080fd5b505af41580156105a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c99190612c98565b90505b919050565b6105d9612adc565b6002600054141561061f576040805162461bcd60e51b815260206004820152601f6024820152600080516020613393833981519152604482015290519081900360640190fd5b600260008181556001600160a01b03841681526020918252604080822081516101408101909252919273__$0d082d4f68cd76e21bd5ff3b4c3f93bd83$__92639b6bfbdf9290918190610674908a018a612bb5565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001886020013581526020018860400135815260200188606001358152602001886080013581526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001610710612384565b6001600160a01b03898116911614815260065462ffffff600160201b820416602083015260ff16604091820152516001600160e01b031960e085901b16815261075d92919060040161321e565b60c06040518083038186803b15801561077557600080fd5b505af4158015610789573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ad9190612d91565b90506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166107e66020860186612bb5565b6001600160a01b0316846001600160a01b03167f3fafa413f72659615af87212409788d1f1d6fa7a3a3fc3c3798b269188a4dfc66108278560000151612388565b6108348660200151612388565b6108418a60200135612388565b60405161085093929190612eca565b60405180910390a46108656020850185612bb5565b60408083015160608401516001600160a01b0387811660008181526002602090815295812096909216959094600080516020613440833981519152949392906108b0908c018c612bb5565b6001600160a01b03166001600160a01b031681526020019081526020016000206001015486608001518760a001516040516108ef959493929190612ee0565b60405180910390a36040518060400160405280826000015181526020018260200151815250915050600160005592915050565b6003602052600090815260409020805460019091015482565b610943612adc565b506001600160a01b03808316600090815260026020908152604080832093851683529281529082902082518084019093528054835260010154908201525b92915050565b600654610100900462ffffff1681565b6001600160a01b038116600090815260026020526040808220905163569c9ff360e01b815273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__9163569c9ff39161057991907f0000000000000000000000000000000000000000000000000000000000000000907f000000000000000000000000000000000000000000000000000000000000000090600401612f4c565b60026000541415610a6f576040805162461bcd60e51b815260206004820152601f6024820152600080516020613393833981519152604482015290519081900360640190fd5b60026000908155610a7e612384565b9050610afa60026000836001600160a01b03166001600160a01b0316815260200190815260200160002060405180606001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001858152602001846001600160a01b031681525061239c565b5050600160005550565b6001600160a01b0381166000908152600260205260408082209051632d4193a560e21b815273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__9163b5064e949161057991907f0000000000000000000000000000000000000000000000000000000000000000907f000000000000000000000000000000000000000000000000000000000000000090600401612f4c565b60008060026000541415610bdf576040805162461bcd60e51b815260206004820152601f6024820152600080516020613393833981519152604482015290519081900360640190fd5b60026000908155610bf36020850185612bb5565b90506000610bff612384565b6001600160a01b0380841660009081526002602090815260408083209385168352808320949550919373__$c3b980fb673d428e6ac9af0eac18f520c2$__9363937711449390926003918791610c59918e01908e01612bb5565b6001600160a01b03166001600160a01b0316815260200190815260200160002060046040518061014001604052808d6020016020810190610c9a9190612bb5565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020018d6040013581526020018d6060013581526020018d6080013581526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316815260200160056040518060400160405290816000820160009054906101000a900462ffffff1662ffffff1662ffffff1681526020016000820160039054906101000a900462ffffff1662ffffff1662ffffff16815250508152602001600660049054906101000a900462ffffff1662ffffff168152602001600660079054906101000a900462ffffff1662ffffff168152602001600660009054906101000a900460ff1660ff168152506040518663ffffffff1660e01b8152600401610dea959493929190612f92565b60806040518083038186803b158015610e0257600080fd5b505af4158015610e16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3a9190612d3b565b9050610e4c6040870160208801612bb5565b81516020808401516001600160a01b0387811660008181526002855260408082209790931696919560008051602061344083398151915295909493610e9691908f01908f01612bb5565b6001600160a01b03166001600160a01b031681526020019081526020016000206001015486604001518760600151604051610ed5959493929190612ee0565b60405180910390a38051602090910151600160005590969095509350505050565b610efe612384565b6001600160a01b0316610f0f611490565b6001600160a01b031614610f58576040805162461bcd60e51b81526020600482018190526024820152600080516020613420833981519152604482015290519081900360640190fd5b60026000541415610f9e576040805162461bcd60e51b815260206004820152601f6024820152600080516020613393833981519152604482015290519081900360640190fd5b600260009081556001600160a01b03929092168252600760205260408220805460ff191691151591909117905560019055565b60055462ffffff80821691630100000090041682565b610fef612384565b6001600160a01b0316611000611490565b6001600160a01b031614611049576040805162461bcd60e51b81526020600482018190526024820152600080516020613420833981519152604482015290519081900360640190fd5b6002600054141561108f576040805162461bcd60e51b815260206004820152601f6024820152600080516020613393833981519152604482015290519081900360640190fd5b6002600055620f424062ffffff8216106110a857600080fd5b60065462ffffff600160201b909104811690821610156110c757600080fd5b6006805462ffffff9092166101000263ffffff00199092169190911790556001600055565b6110f4612384565b6001600160a01b0316611105611490565b6001600160a01b03161461114e576040805162461bcd60e51b81526020600482018190526024820152600080516020613420833981519152604482015290519081900360640190fd5b6001546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600180546001600160a01b0319169055565b6111a0612384565b6001600160a01b03166111b1611490565b6001600160a01b0316146111fa576040805162461bcd60e51b81526020600482018190526024820152600080516020613420833981519152604482015290519081900360640190fd5b60026000541415611240576040805162461bcd60e51b815260206004820152601f6024820152600080516020613393833981519152604482015290519081900360640190fd5b6006805460ff191660ff929092169190911790556001600055565b6001600160a01b038216600090815260026020526040808220905163d1fb2a6d60e01b815273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__9163d1fb2a6d916112ef91907f00000000000000000000000000000000000000000000000000000000000000009087907f000000000000000000000000000000000000000000000000000000000000000090600401612f6b565b60206040518083038186803b15801561130757600080fd5b505af415801561131b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133f9190612c98565b9392505050565b6001600160a01b03821660009081526002602052604080822090516301eccec560e21b815273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__916307b33b14916112ef91907f00000000000000000000000000000000000000000000000000000000000000009087907f000000000000000000000000000000000000000000000000000000000000000090600401612f6b565b6002602081815260009283526040928390208351918201909352910154815281565b6001600160a01b0382166000908152600260205260408082209051636cae053560e01b815273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__91636cae0535916112ef91907f00000000000000000000000000000000000000000000000000000000000000009087907f000000000000000000000000000000000000000000000000000000000000000090600401612f6b565b6001546001600160a01b031690565b6001600160a01b038216600090815260026020526040808220905163e894916f60e01b815273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__9163e894916f916112ef91907f00000000000000000000000000000000000000000000000000000000000000009087907f000000000000000000000000000000000000000000000000000000000000000090600401612f6b565b6001600160a01b0381166000908152600260205260408082206006549151630a67766f60e41b815273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__9263a67766f0926115d69290917f0000000000000000000000000000000000000000000000000000000000000000917f000000000000000000000000000000000000000000000000000000000000000091600160201b900462ffffff1690600401612f22565b60206040518083038186803b1580156115ee57600080fd5b505af4158015611602573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c99190612c7c565b600654600160201b900462ffffff1681565b611640612384565b6001600160a01b0316611651611490565b6001600160a01b03161461169a576040805162461bcd60e51b81526020600482018190526024820152600080516020613420833981519152604482015290519081900360640190fd5b600260005414156116e0576040805162461bcd60e51b815260206004820152601f6024820152600080516020613393833981519152604482015290519081900360640190fd5b6002600055620f424062ffffff8216106116f957600080fd5b6006805462ffffff909216600160501b0262ffffff60501b199092169190911790556001600055565b61172a612af6565b506001600160a01b03808316600090815260026020818152604080842094861684526001948501825292839020835160608101855281548152948101549185019190915201549082015292915050565b600654600160381b900462ffffff1681565b611794612adc565b6105c982610233612384565b600080600260005414156117e9576040805162461bcd60e51b815260206004820152601f6024820152600080516020613393833981519152604482015290519081900360640190fd5b600260009081556117f8612384565b6001600160a01b03811660009081526002602090815260408220929350909173__$c3b980fb673d428e6ac9af0eac18f520c2$__9163967d86f091906003908590611845908b018b612bb5565b6001600160a01b03166001600160a01b03168152602001908152602001600020604051806101a001604052808a60000160208101906118849190612bb5565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020018a60200160208101906118d49190612c60565b151581526020016118eb60608c0160408d01612c60565b151581526020018a6060013581526020018a6080013581526020018a60a0013581526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316815260200160056040518060400160405290816000820160009054906101000a900462ffffff1662ffffff1662ffffff1681526020016000820160039054906101000a900462ffffff1662ffffff1662ffffff16815250508152602001600760008c60000160208101906119ae9190612bb5565b6001600160a01b0316815260208082019290925260409081016000205460ff9081161515845260065462ffffff600160201b820481169486019490945261010081049093168483015291909116606090920191909152516001600160e01b031960e086901b168152611a259392919060040161311c565b60806040518083038186803b158015611a3d57600080fd5b505af4158015611a51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a759190612d3b565b9050611a846020860186612bb5565b81516020808401516001600160a01b0386811660008181526002855260408120969092169590946000805160206134408339815191529490939290611acb908d018d612bb5565b6001600160a01b03166001600160a01b031681526020019081526020016000206001015486604001518760600151604051611b0a959493929190612ee0565b60405180910390a380516020909101516001600055909590945092505050565b60045481565b611b38612384565b6001600160a01b0316611b49611490565b6001600160a01b031614611b92576040805162461bcd60e51b81526020600482018190526024820152600080516020613420833981519152604482015290519081900360640190fd5b60026000541415611bd8576040805162461bcd60e51b815260206004820152601f6024820152600080516020613393833981519152604482015290519081900360640190fd5b600260005560065462ffffff61010090910481169082161115611bfa57600080fd5b60008162ffffff1611611c0c57600080fd5b6006805462ffffff909216600160201b0266ffffff00000000199092169190911790556001600055565b600654600160501b900462ffffff1681565b611c50612384565b6001600160a01b0316611c61611490565b6001600160a01b031614611caa576040805162461bcd60e51b81526020600482018190526024820152600080516020613420833981519152604482015290519081900360640190fd5b60026000541415611cf0576040805162461bcd60e51b815260206004820152601f6024820152600080516020613393833981519152604482015290519081900360640190fd5b6002600055620f424062ffffff821610611d0957600080fd5b6006805462ffffff909216600160381b0262ffffff60381b199092169190911790556001600055565b611d3a612af6565b60026000541415611d80576040805162461bcd60e51b815260206004820152601f6024820152600080516020613393833981519152604482015290519081900360640190fd5b60026000908155611d8f612384565b6001600160a01b038116600090815260026020908152604080832081516101608101909252939450919273__$0d082d4f68cd76e21bd5ff3b4c3f93bd83$__926360e361e0928190611de3908a018a612bb5565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001886020013581526020018860400135815260200188606001358152602001886080013581526020018860a0013581526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001600760008a6000016020810190611e989190612bb5565b6001600160a01b0316815260208082019290925260409081016000205460ff9081161515845260065462ffffff610100820416938501939093529190911691810191909152516001600160e01b031960e085901b168152611efd929190600401613066565b60606040518083038186803b158015611f1557600080fd5b505af4158015611f29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4d9190612ccb565b90506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016611f866020860186612bb5565b6001600160a01b0316836001600160a01b03167f3fafa413f72659615af87212409788d1f1d6fa7a3a3fc3c3798b269188a4dfc6611fc785600001516123da565b611fd486602001516123da565b611fe187604001516123da565b604051611ff093929190612eca565b60405180910390a4604080516060810182528251815260208084015190820152918101519082015260016000559392505050565b6001600160a01b0381166000908152600260205260408082206006549151635af8f64760e11b815273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__9263b5f1ec8e926115d69290917f0000000000000000000000000000000000000000000000000000000000000000917f000000000000000000000000000000000000000000000000000000000000000091610100900462ffffff1690600401612f22565b6120cd612384565b6001600160a01b03166120de611490565b6001600160a01b031614612127576040805162461bcd60e51b81526020600482018190526024820152600080516020613420833981519152604482015290519081900360640190fd5b6001600160a01b03811661216c5760405162461bcd60e51b81526004018080602001828103825260268152602001806133b36026913960400191505060405180910390fd5b6001546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b6002600054141561220e576040805162461bcd60e51b815260206004820152601f6024820152600080516020613393833981519152604482015290519081900360640190fd5b6002600090815561221d612384565b6001600160a01b03818116600081815260026020908152604091829020825160a0810184527f000000000000000000000000000000000000000000000000000000000000000086168152918201889052918101929092527f00000000000000000000000000000000000000000000000000000000000000009092166060820152600654610100900462ffffff166080820152919250610afa91612426565b60065460ff1681565b6122cc612384565b6001600160a01b03166122dd611490565b6001600160a01b031614612326576040805162461bcd60e51b81526020600482018190526024820152600080516020613420833981519152604482015290519081900360640190fd5b6002600054141561236c576040805162461bcd60e51b815260206004820152601f6024820152600080516020613393833981519152604482015290519081900360640190fd5b6002600055806005610afa8282613324565b3b151590565b3390565b6000612393826123da565b60000392915050565b6123b38160000151826040015183602001516124fd565b6123ce6123c382602001516123da565b60028401549061263d565b60029092019190915550565b60006001600160ff1b038211156124225760405162461bcd60e51b81526004018080602001828103825260288152602001806134606028913960400191505060405180910390fd5b5090565b61244161243682602001516123da565b6002840154906126a2565b6002830155606081015181516080830151604051635af8f64760e11b815273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__9363b5f1ec8e93612489938893600401612f22565b60206040518083038186803b1580156124a157600080fd5b505af41580156124b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d99190612c7c565b6124e257600080fd5b6124f9816000015182604001518360200151612707565b5050565b6040516370a0823160e01b81526000906001600160a01b038516906370a082319061252c903090600401612e94565b60206040518083038186803b15801561254457600080fd5b505afa158015612558573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061257c9190612c98565b905061258a8484308561275e565b8161261182866001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016125bb9190612e94565b60206040518083038186803b1580156125d357600080fd5b505afa1580156125e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061260b9190612c98565b906127b8565b146126375760405162461bcd60e51b815260040161262e90612f03565b60405180910390fd5b50505050565b60008282018183128015906126525750838112155b80612667575060008312801561266757508381125b61133f5760405162461bcd60e51b81526004018080602001828103825260218152602001806133d96021913960400191505060405180910390fd5b60008183038183128015906126b75750838113155b806126cc57506000831280156126cc57508381135b61133f5760405162461bcd60e51b81526004018080602001828103825260248152602001806134886024913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052612759908490612815565b505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052612637908590612815565b60008282111561280f576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600061286a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166128c69092919063ffffffff16565b8051909150156127595780806020019051602081101561288957600080fd5b50516127595760405162461bcd60e51b815260040180806020018281038252602a8152602001806134ac602a913960400191505060405180910390fd5b60606128d584846000856128dd565b949350505050565b60608247101561291e5760405162461bcd60e51b81526004018080602001828103825260268152602001806133fa6026913960400191505060405180910390fd5b6129278561237e565b612978576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b602083106129b65780518252601f199092019160209182019101612997565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612a18576040519150601f19603f3d011682016040523d82523d6000602084013e612a1d565b606091505b5091509150612a2d828286612a38565b979650505050505050565b60608315612a4757508161133f565b825115612a575782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612aa1578181015183820152602001612a89565b50505050905090810190601f168015612ace5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b604051806040016040528060008152602001600081525090565b60405180606001604052806000815260200160008152602001600081525090565b80356001600160a01b03811681146105cc57600080fd5b600060c08284031215612b3f578081fd5b50919050565b600060a08284031215612b3f578081fd5b600060808284031215612b67578081fd5b6040516080810181811067ffffffffffffffff82111715612b8457fe5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600060208284031215612bc6578081fd5b61133f82612b17565b60008060408385031215612be1578081fd5b612bea83612b17565b9150612bf860208401612b17565b90509250929050565b60008060408385031215612c13578182fd5b612c1c83612b17565b91506020830135612c2c81613370565b809150509250929050565b60008060408385031215612c49578182fd5b612c5283612b17565b946020939093013593505050565b600060208284031215612c71578081fd5b813561133f81613370565b600060208284031215612c8d578081fd5b815161133f81613370565b600060208284031215612ca9578081fd5b5051919050565b600060c08284031215612cc1578081fd5b61133f8383612b2e565b600060608284031215612cdc578081fd5b6040516060810181811067ffffffffffffffff82111715612cf957fe5b80604052508251815260208301516020820152604083015160408201528091505092915050565b600060a08284031215612d31578081fd5b61133f8383612b45565b600060808284031215612d4c578081fd5b61133f8383612b56565b600060408284031215612b3f578081fd5b60008060c08385031215612d79578182fd5b612d838484612b45565b9150612bf860a08401612b17565b600060c08284031215612da2578081fd5b60405160c0810181811067ffffffffffffffff82111715612dbf57fe5b8060405250825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a08201528091505092915050565b600060208284031215612e15578081fd5b813561133f81613381565b600060208284031215612e31578081fd5b813560ff8116811461133f578182fd5b6001600160a01b03169052565b15159052565b8051825260208082015190830152604090810151910152565b805162ffffff908116835260209182015116910152565b62ffffff169052565b60ff169052565b6001600160a01b0391909116815260200190565b901515815260200190565b90815260200190565b918252602082015260400190565b9283526020830191909152604082015260600190565b948552602085019390935260408401919091526060830152608082015260a00190565b602080825260059082015264565f49424160d81b604082015260600190565b9384526001600160a01b0392831660208501529116604083015262ffffff16606082015260800190565b9283526001600160a01b03918216602084015216604082015260600190565b9384526001600160a01b039283166020850152908216604084015216606082015260800190565b60006101e082019050868252856020830152846040830152836060830152612fbe608083018451612e41565b6020830151612fd060a0840182612e41565b50604083015160c0830152606083015160e08301526080830151610100818185015260a0850151915061012061300881860184612e41565b60c0860151925061301d610140860184612e6d565b60e08601519250613032610180860184612e84565b8186015192506130466101a0860184612e84565b850151915061305b90506101c0840182612e8d565b509695505050505050565b600061018082019050838252613080602083018451612e41565b60208301516130926040840182612e41565b506040830151606083015260608301516080830152608083015160a083015260a083015160c083015260c083015160e083015260e08301516101006130d981850183612e41565b84015190506101206130ed84820183612e4e565b840151905061014061310184820183612e84565b8401519050613114610160840182612e8d565b509392505050565b60006102008201905084825283602083015261313c604083018451612e41565b602083015161314e6060840182612e41565b5060408301516131616080840182612e4e565b50606083015161317460a0840182612e4e565b50608083015160c083015260a083015160e083015260c0830151610100818185015260e085015191506101206131ac81860184612e41565b908501519150610140906131c285830184612e6d565b85015191506101806131d685820184612e4e565b8186015192506131ea6101a0860184612e84565b61016086015192506132006101c0860184612e84565b850151915061321590506101e0840182612e8d565b50949350505050565b600061016082019050838252613238602083018451612e41565b602083015161324a6040840182612e41565b506040830151606083015260608301516080830152608083015160a083015260a083015160c083015260c083015161328560e0840182612e41565b5060e083015161010061329a81850183612e4e565b84015190506101206132ae84820183612e84565b8401519050613114610140840182612e8d565b606081016109818284612e54565b815181526020918201519181019190915260400190565b9051815260200190565b62ffffff91909116815260200190565b62ffffff92831681529116602082015260400190565b60ff91909116815260200190565b813561332f81613381565b815462ffffff191662ffffff9190911617808255602083013561335181613381565b65ffffff0000008160181b1665ffffff00000019831617835550505050565b801515811461337e57600080fd5b50565b62ffffff8116811461337e57600080fdfe5265656e7472616e637947756172643a207265656e7472616e742063616c6c004f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573735369676e6564536166654d6174683a206164646974696f6e206f766572666c6f77416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572adf7293c36a87213f46d9ad13f46093b4c6becaecc1a3c4b6be2aad2f60676cf53616665436173743a2076616c756520646f65736e27742066697420696e20616e20696e743235365369676e6564536166654d6174683a207375627472616374696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212208c8ae883ff7ecb1cfe355b786b8a985ad88bd2ad7453fb832931b525fc015e3564736f6c63430007060033",
  "libraries": {
    "AccountLibrary": "0x1Ca8Aa3A8E12602f2b4c7AbD9ea6D0596ff51a2d",
    "TakerLibrary": "0xeA9Ff7312Be1045196f7faf645902BE59222cA1c",
    "MakerLibrary": "0x57F644ad108AA83f9959CA3612B07301D5Ce5DC0"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addLiquidity((address,uint256,uint256,uint256,uint256,uint256))": {
        "details": "Tx will fail if adding `base == 0 && quote == 0` / `liquidity == 0`- `AddLiquidityParams.useTakerBalance` is only accept `false` now",
        "params": {
          "params": "AddLiquidityParams struct"
        },
        "returns": {
          "_0": "response AddLiquidityResponse struct"
        }
      },
      "liquidate((address,address,uint256,uint256,uint256))": {
        "details": "If trader has open orders, need to call `cancelAllExcessOrders` first",
        "returns": {
          "base": "The amount of baseToken the taker got or spent",
          "quote": "The amount of quoteToken the taker got or spent"
        }
      },
      "openPosition((address,bool,bool,uint256,uint256,uint256))": {
        "details": "- `OpenPositionParams.oppositeAmountBound`     - B2Q + exact input, want more output quote as possible, so we set a lower bound of output quote     - B2Q + exact output, want less input base as possible, so we set a upper bound of input base     - Q2B + exact input, want more output base as possible, so we set a lower bound of output base     - Q2B + exact output, want less input quote as possible, so we set a upper bound of input quote     > when it's set to 0, it will disable slippage protection entirely regardless of exact input or output     > when it's over or under the bound, it will be reverted- `OpenPositionParams.sqrtPriceLimitX96`     - B2Q: the price cannot be less than this value after the swap     - Q2B: the price cannot be greater than this value after the swap     > it will fill the trade until it reaches the price limit but WON'T REVERT     > when it's set to 0, it will disable price limit;     > when it's 0 and exact output, the output amount is required to be identical to the param amount",
        "params": {
          "params": "OpenPositionParams struct"
        },
        "returns": {
          "base": "The amount of baseToken the taker got or spent",
          "quote": "The amount of quoteToken the taker got or spent"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeLiquidity((address,uint256,uint256,uint256,uint256))": {
        "details": "remove liquidity will transfer maker impermanent position to taker position, if `liquidity` of RemoveLiquidityParams struct is zero, the action will collect fee from pool to maker",
        "params": {
          "params": "RemoveLiquidityParams struct"
        },
        "returns": {
          "_0": "RemoveLiquidityResponse struct"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "LiquidityChanged(address,address,address,int256,int256,int256)": {
        "notice": "Emitted when maker's liquidity of a order changed"
      },
      "PositionChanged(address,address,int256,int256,int256,int256,uint256)": {
        "notice": "Emitted when taker's position is being changed"
      },
      "PositionLiquidated(address,address,uint256,uint256,uint256,address)": {
        "notice": "Emitted when taker position is being liquidated"
      }
    },
    "kind": "user",
    "methods": {
      "addLiquidity((address,uint256,uint256,uint256,uint256,uint256))": {
        "notice": "Maker can call `addLiquidity` to provide liquidity on Uniswap V3 pool"
      },
      "liquidate((address,address,uint256,uint256,uint256))": {
        "notice": "If trader is underwater, any one can call `liquidate` to liquidate this trader"
      },
      "openPosition((address,bool,bool,uint256,uint256,uint256))": {
        "notice": "Trader can call `openPosition` to long/short on baseToken market"
      },
      "removeLiquidity((address,uint256,uint256,uint256,uint256))": {
        "notice": "Maker can call `removeLiquidity` to remove liquidity"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4694,
        "contract": "contracts/ClearingHousePerpdexNew.sol:ClearingHousePerpdexNew",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3147,
        "contract": "contracts/ClearingHousePerpdexNew.sol:ClearingHousePerpdexNew",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 22867,
        "contract": "contracts/ClearingHousePerpdexNew.sol:ClearingHousePerpdexNew",
        "label": "accountInfos",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(AccountInfo)48818_storage)"
      },
      {
        "astId": 22871,
        "contract": "contracts/ClearingHousePerpdexNew.sol:ClearingHousePerpdexNew",
        "label": "priceLimitInfos",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(PriceLimitInfo)48826_storage)"
      },
      {
        "astId": 22873,
        "contract": "contracts/ClearingHousePerpdexNew.sol:ClearingHousePerpdexNew",
        "label": "insuranceFundInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(InsuranceFundInfo)48821_storage"
      },
      {
        "astId": 22879,
        "contract": "contracts/ClearingHousePerpdexNew.sol:ClearingHousePerpdexNew",
        "label": "priceLimitConfig",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(PriceLimitConfig)48831_storage"
      },
      {
        "astId": 22881,
        "contract": "contracts/ClearingHousePerpdexNew.sol:ClearingHousePerpdexNew",
        "label": "maxMarketsPerAccount",
        "offset": 0,
        "slot": "6",
        "type": "t_uint8"
      },
      {
        "astId": 22883,
        "contract": "contracts/ClearingHousePerpdexNew.sol:ClearingHousePerpdexNew",
        "label": "imRatio",
        "offset": 1,
        "slot": "6",
        "type": "t_uint24"
      },
      {
        "astId": 22885,
        "contract": "contracts/ClearingHousePerpdexNew.sol:ClearingHousePerpdexNew",
        "label": "mmRatio",
        "offset": 4,
        "slot": "6",
        "type": "t_uint24"
      },
      {
        "astId": 22887,
        "contract": "contracts/ClearingHousePerpdexNew.sol:ClearingHousePerpdexNew",
        "label": "liquidationRewardRatio",
        "offset": 7,
        "slot": "6",
        "type": "t_uint24"
      },
      {
        "astId": 22889,
        "contract": "contracts/ClearingHousePerpdexNew.sol:ClearingHousePerpdexNew",
        "label": "maxFundingRateRatio",
        "offset": 10,
        "slot": "6",
        "type": "t_uint24"
      },
      {
        "astId": 22893,
        "contract": "contracts/ClearingHousePerpdexNew.sol:ClearingHousePerpdexNew",
        "label": "isBaseTokenAllowed",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(AccountInfo)48818_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PerpdexStructs.AccountInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(AccountInfo)48818_storage"
      },
      "t_mapping(t_address,t_struct(MakerInfo)48801_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PerpdexStructs.MakerInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(MakerInfo)48801_storage"
      },
      "t_mapping(t_address,t_struct(PriceLimitInfo)48826_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PerpdexStructs.PriceLimitInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PriceLimitInfo)48826_storage"
      },
      "t_mapping(t_address,t_struct(TakerInfo)48794_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PerpdexStructs.TakerInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TakerInfo)48794_storage"
      },
      "t_struct(AccountInfo)48818_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.AccountInfo",
        "members": [
          {
            "astId": 48808,
            "contract": "contracts/ClearingHousePerpdexNew.sol:ClearingHousePerpdexNew",
            "label": "takerInfo",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_struct(TakerInfo)48794_storage)"
          },
          {
            "astId": 48812,
            "contract": "contracts/ClearingHousePerpdexNew.sol:ClearingHousePerpdexNew",
            "label": "makerInfo",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_struct(MakerInfo)48801_storage)"
          },
          {
            "astId": 48814,
            "contract": "contracts/ClearingHousePerpdexNew.sol:ClearingHousePerpdexNew",
            "label": "vaultInfo",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(VaultInfo)48804_storage"
          },
          {
            "astId": 48817,
            "contract": "contracts/ClearingHousePerpdexNew.sol:ClearingHousePerpdexNew",
            "label": "baseTokens",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(InsuranceFundInfo)48821_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.InsuranceFundInfo",
        "members": [
          {
            "astId": 48820,
            "contract": "contracts/ClearingHousePerpdexNew.sol:ClearingHousePerpdexNew",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(MakerInfo)48801_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.MakerInfo",
        "members": [
          {
            "astId": 48796,
            "contract": "contracts/ClearingHousePerpdexNew.sol:ClearingHousePerpdexNew",
            "label": "baseDebtShare",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 48798,
            "contract": "contracts/ClearingHousePerpdexNew.sol:ClearingHousePerpdexNew",
            "label": "quoteDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 48800,
            "contract": "contracts/ClearingHousePerpdexNew.sol:ClearingHousePerpdexNew",
            "label": "liquidity",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PriceLimitConfig)48831_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.PriceLimitConfig",
        "members": [
          {
            "astId": 48828,
            "contract": "contracts/ClearingHousePerpdexNew.sol:ClearingHousePerpdexNew",
            "label": "priceLimitNormalOrderRatio",
            "offset": 0,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 48830,
            "contract": "contracts/ClearingHousePerpdexNew.sol:ClearingHousePerpdexNew",
            "label": "priceLimitLiquidationRatio",
            "offset": 3,
            "slot": "0",
            "type": "t_uint24"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PriceLimitInfo)48826_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.PriceLimitInfo",
        "members": [
          {
            "astId": 48823,
            "contract": "contracts/ClearingHousePerpdexNew.sol:ClearingHousePerpdexNew",
            "label": "referencePrice",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 48825,
            "contract": "contracts/ClearingHousePerpdexNew.sol:ClearingHousePerpdexNew",
            "label": "referenceTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TakerInfo)48794_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.TakerInfo",
        "members": [
          {
            "astId": 48791,
            "contract": "contracts/ClearingHousePerpdexNew.sol:ClearingHousePerpdexNew",
            "label": "baseBalanceShare",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 48793,
            "contract": "contracts/ClearingHousePerpdexNew.sol:ClearingHousePerpdexNew",
            "label": "quoteBalance",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(VaultInfo)48804_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.VaultInfo",
        "members": [
          {
            "astId": 48803,
            "contract": "contracts/ClearingHousePerpdexNew.sol:ClearingHousePerpdexNew",
            "label": "collateralBalance",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}