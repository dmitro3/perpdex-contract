{
  "address": "0x2CcAf0aDc07bA81b7CB091f6987E3601BB6Ed5EA",
  "abi": [],
  "transactionHash": "0x0e5e1f0fadeab4ac7ada1579b166c1f8731eeef80caf20b677f4a70fe5bb4b90",
  "receipt": {
    "to": null,
    "from": "0x4B78eCe4AA1be3495713199380635537C5fB2326",
    "contractAddress": "0x2CcAf0aDc07bA81b7CB091f6987E3601BB6Ed5EA",
    "transactionIndex": 1,
    "gasUsed": "1971934",
    "logsBloom": "0x
    "blockHash": "0xfa13347a321f14e13f7a0c3f8931e36bc749bb5623e1b292bd230ad32a4703d9",
    "transactionHash": "0x0e5e1f0fadeab4ac7ada1579b166c1f8731eeef80caf20b677f4a70fe5bb4b90",
    "logs": [],
    "blockNumber": 14719405,
    "cumulativeGasUsed": "1971934",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "ede8775c668a867b5b3500032ff6d979",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/OrderBookLibrary.sol\":\"OrderBookLibrary\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":170},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \\u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248) {\\n        require(value >= type(int248).min && value <= type(int248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return int248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240) {\\n        require(value >= type(int240).min && value <= type(int240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return int240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232) {\\n        require(value >= type(int232).min && value <= type(int232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return int232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224) {\\n        require(value >= type(int224).min && value <= type(int224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return int224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216) {\\n        require(value >= type(int216).min && value <= type(int216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return int216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208) {\\n        require(value >= type(int208).min && value <= type(int208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return int208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200) {\\n        require(value >= type(int200).min && value <= type(int200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return int200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192) {\\n        require(value >= type(int192).min && value <= type(int192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return int192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184) {\\n        require(value >= type(int184).min && value <= type(int184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return int184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176) {\\n        require(value >= type(int176).min && value <= type(int176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return int176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168) {\\n        require(value >= type(int168).min && value <= type(int168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return int168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160) {\\n        require(value >= type(int160).min && value <= type(int160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return int160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152) {\\n        require(value >= type(int152).min && value <= type(int152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return int152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144) {\\n        require(value >= type(int144).min && value <= type(int144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return int144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136) {\\n        require(value >= type(int136).min && value <= type(int136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return int136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120) {\\n        require(value >= type(int120).min && value <= type(int120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return int120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112) {\\n        require(value >= type(int112).min && value <= type(int112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return int112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104) {\\n        require(value >= type(int104).min && value <= type(int104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return int104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96) {\\n        require(value >= type(int96).min && value <= type(int96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return int96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88) {\\n        require(value >= type(int88).min && value <= type(int88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return int88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80) {\\n        require(value >= type(int80).min && value <= type(int80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return int80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72) {\\n        require(value >= type(int72).min && value <= type(int72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return int72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56) {\\n        require(value >= type(int56).min && value <= type(int56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return int56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48) {\\n        require(value >= type(int48).min && value <= type(int48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return int48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40) {\\n        require(value >= type(int40).min && value <= type(int40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return int40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24) {\\n        require(value >= type(int24).min && value <= type(int24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return int24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x02686c31ccb9ee77a299fa5f47327af5271f251a707a0e24f321957166ff0434\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        return a + b;\\n    }\\n}\\n\",\"keccak256\":\"0x62f53f262fabbbc6d8ab49488d8fce36370351aff2b8d3898d499d68995a71c2\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"contracts/lib/MarketStructs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\n\\nimport {\\n    BokkyPooBahsRedBlackTreeLibrary as RBTreeLibrary\\n} from \\\"../../deps/BokkyPooBahsRedBlackTreeLibrary/contracts/BokkyPooBahsRedBlackTreeLibrary.sol\\\";\\n\\nlibrary MarketStructs {\\n    struct FundingInfo {\\n        uint256 prevIndexPriceBase;\\n        uint256 prevIndexPriceQuote;\\n        uint256 prevIndexPriceTimestamp;\\n    }\\n\\n    struct PoolInfo {\\n        uint256 base;\\n        uint256 quote;\\n        uint256 totalLiquidity;\\n        uint256 cumBasePerLiquidityX96;\\n        uint256 cumQuotePerLiquidityX96;\\n        uint256 baseBalancePerShareX96;\\n    }\\n\\n    struct PriceLimitInfo {\\n        uint256 referencePrice;\\n        uint256 referenceTimestamp;\\n        uint256 emaPrice;\\n    }\\n\\n    struct PriceLimitConfig {\\n        uint24 normalOrderRatio;\\n        uint24 liquidationRatio;\\n        uint24 emaNormalOrderRatio;\\n        uint24 emaLiquidationRatio;\\n        uint32 emaSec;\\n    }\\n\\n    struct OrderInfo {\\n        uint256 base;\\n        uint256 baseSum;\\n        uint256 quoteSum;\\n        uint48 executionId;\\n    }\\n\\n    struct OrderBookSideInfo {\\n        RBTreeLibrary.Tree tree;\\n        mapping(uint40 => OrderInfo) orderInfos;\\n        uint40 seqKey;\\n    }\\n\\n    struct ExecutionInfo {\\n        uint256 baseBalancePerShareX96;\\n    }\\n\\n    struct OrderBookInfo {\\n        OrderBookSideInfo ask;\\n        OrderBookSideInfo bid;\\n        uint48 seqExecutionId;\\n        mapping(uint48 => ExecutionInfo) executionInfos;\\n    }\\n\\n    struct PoolFeeInfo {\\n        uint256 atrX96;\\n        uint256 referenceTimestamp;\\n        uint256 currentHighX96;\\n        uint256 currentLowX96;\\n    }\\n\\n    struct PoolFeeConfig {\\n        uint24 fixedFeeRatio;\\n        uint24 atrFeeRatio;\\n        uint32 atrEmaBlocks;\\n    }\\n\\n    struct Candle {\\n        uint128 closeX96;\\n        uint128 quote;\\n        uint128 highX96;\\n        uint128 lowX96;\\n    }\\n\\n    struct CandleList {\\n        mapping(uint32 => mapping(uint32 => Candle)) candles;\\n        uint32 prevTimestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x0dfc512b7ce11a367984b98943e16b3b699b471860d28008eb1fc7e68ac9cd8e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/OrderBookLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { MarketStructs } from \\\"./MarketStructs.sol\\\";\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport {\\n    BokkyPooBahsRedBlackTreeLibrary as RBTreeLibrary\\n} from \\\"../../deps/BokkyPooBahsRedBlackTreeLibrary/contracts/BokkyPooBahsRedBlackTreeLibrary.sol\\\";\\n\\nlibrary OrderBookLibrary {\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n    using RBTreeLibrary for RBTreeLibrary.Tree;\\n\\n    struct SwapResponse {\\n        uint256 oppositeAmount;\\n        uint256 basePartial;\\n        uint256 quotePartial;\\n        uint40 partialKey;\\n        uint40 fullLastKey;\\n    }\\n\\n    // to avoid stack too deep\\n    struct PreviewSwapParams {\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n        uint256 amount;\\n        uint256 baseBalancePerShareX96;\\n    }\\n\\n    // to avoid stack too deep\\n    struct PreviewSwapLocalVars {\\n        uint128 priceX96;\\n        uint256 sharePriceX96;\\n        uint256 amountPool;\\n        uint40 left;\\n        uint40 right;\\n        uint256 leftBaseSum;\\n        uint256 leftQuoteSum;\\n        uint256 rightBaseSum;\\n        uint256 rightQuoteSum;\\n    }\\n\\n    struct PreviewSwapResponse {\\n        uint256 amountPool;\\n        uint256 baseFull;\\n        uint256 quoteFull;\\n        uint256 basePartial;\\n        uint256 quotePartial;\\n        uint40 fullLastKey;\\n        uint40 partialKey;\\n    }\\n\\n    function createOrder(\\n        MarketStructs.OrderBookInfo storage orderBookInfo,\\n        bool isBid,\\n        uint256 base,\\n        uint256 priceX96,\\n        uint256 markPriceX96\\n    ) public returns (uint40) {\\n        require(base > 0, \\\"OBL_CO: base is zero\\\");\\n        require(priceX96 >= markPriceX96 / 100, \\\"OBL_CO: price too small\\\");\\n        require(priceX96 <= markPriceX96 * 100, \\\"OBL_CO: price too large\\\");\\n        MarketStructs.OrderBookSideInfo storage info = isBid ? orderBookInfo.bid : orderBookInfo.ask;\\n        uint40 key = info.seqKey + 1;\\n        info.seqKey = key;\\n        info.orderInfos[key].base = base; // before insert for aggregation\\n        uint128 userData = _makeUserData(priceX96);\\n        uint256 slot = _getSlot(orderBookInfo);\\n        if (isBid) {\\n            info.tree.insert(key, userData, _lessThanBid, _aggregateBid, slot);\\n        } else {\\n            info.tree.insert(key, userData, _lessThanAsk, _aggregateAsk, slot);\\n        }\\n        return key;\\n    }\\n\\n    function cancelOrder(\\n        MarketStructs.OrderBookInfo storage orderBookInfo,\\n        bool isBid,\\n        uint40 key\\n    ) public {\\n        MarketStructs.OrderBookSideInfo storage info = isBid ? orderBookInfo.bid : orderBookInfo.ask;\\n        require(_isFullyExecuted(info, key) == 0, \\\"OBL_CO: already fully executed\\\");\\n        uint256 slot = _getSlot(orderBookInfo);\\n        if (isBid) {\\n            info.tree.remove(key, _aggregateBid, slot);\\n        } else {\\n            info.tree.remove(key, _aggregateAsk, slot);\\n        }\\n        delete info.orderInfos[key];\\n    }\\n\\n    function getOrderInfo(\\n        MarketStructs.OrderBookInfo storage orderBookInfo,\\n        bool isBid,\\n        uint40 key\\n    ) public view returns (uint256 base, uint256 priceX96) {\\n        MarketStructs.OrderBookSideInfo storage info = isBid ? orderBookInfo.bid : orderBookInfo.ask;\\n        base = info.orderInfos[key].base;\\n        priceX96 = _userDataToPriceX96(info.tree.nodes[key].userData);\\n    }\\n\\n    function getOrderExecution(\\n        MarketStructs.OrderBookInfo storage orderBookInfo,\\n        bool isBid,\\n        uint40 key\\n    )\\n        public\\n        view\\n        returns (\\n            uint48 executionId,\\n            uint256 executedBase,\\n            uint256 executedQuote\\n        )\\n    {\\n        MarketStructs.OrderBookSideInfo storage info = isBid ? orderBookInfo.bid : orderBookInfo.ask;\\n        executionId = _isFullyExecuted(info, key);\\n        if (executionId == 0) return (0, 0, 0);\\n\\n        executedBase = info.orderInfos[key].base;\\n        // rounding error occurs, but it is negligible.\\n\\n        executedQuote = _quoteToBalance(\\n            _getQuote(info, key),\\n            orderBookInfo.executionInfos[executionId].baseBalancePerShareX96\\n        );\\n    }\\n\\n    function getBestPriceX96(MarketStructs.OrderBookSideInfo storage info) external view returns (uint256) {\\n        if (info.tree.root == 0) return 0;\\n        uint40 key = info.tree.first();\\n        return _userDataToPriceX96(info.tree.nodes[key].userData);\\n    }\\n\\n    function swap(\\n        MarketStructs.OrderBookInfo storage orderBookInfo,\\n        PreviewSwapParams memory params,\\n        function(bool, bool, uint256) view returns (uint256) maxSwapArg,\\n        function(bool, bool, uint256) returns (uint256) swapArg\\n    ) internal returns (SwapResponse memory swapResponse) {\\n        MarketStructs.OrderBookSideInfo storage info = params.isBaseToQuote ? orderBookInfo.bid : orderBookInfo.ask;\\n        PreviewSwapResponse memory response = previewSwap(info, params, maxSwapArg);\\n\\n        if (response.amountPool > 0) {\\n            swapResponse.oppositeAmount += swapArg(params.isBaseToQuote, params.isExactInput, response.amountPool);\\n        }\\n\\n        bool isBase = params.isBaseToQuote == params.isExactInput;\\n        uint256 slot = _getSlot(orderBookInfo);\\n\\n        if (response.fullLastKey != 0) {\\n            orderBookInfo.seqExecutionId += 1;\\n            orderBookInfo.executionInfos[orderBookInfo.seqExecutionId] = MarketStructs.ExecutionInfo({\\n                baseBalancePerShareX96: params.baseBalancePerShareX96\\n            });\\n            if (params.isBaseToQuote) {\\n                info.tree.removeLeft(response.fullLastKey, _lessThanBid, _aggregateBid, _subtreeRemovedBid, slot);\\n            } else {\\n                info.tree.removeLeft(response.fullLastKey, _lessThanAsk, _aggregateAsk, _subtreeRemovedAsk, slot);\\n            }\\n\\n            swapResponse.oppositeAmount += isBase ? response.quoteFull : response.baseFull;\\n            swapResponse.fullLastKey = response.fullLastKey;\\n        } else {\\n            require(response.baseFull == 0, \\\"never occur\\\");\\n            require(response.quoteFull == 0, \\\"never occur\\\");\\n        }\\n\\n        if (response.partialKey != 0) {\\n            info.orderInfos[response.partialKey].base -= response.basePartial;\\n            require(info.orderInfos[response.partialKey].base > 0, \\\"never occur\\\");\\n\\n            info.tree.aggregateRecursively(\\n                response.partialKey,\\n                params.isBaseToQuote ? _aggregateBid : _aggregateAsk,\\n                slot\\n            );\\n\\n            swapResponse.oppositeAmount += isBase ? response.quotePartial : response.basePartial;\\n            swapResponse.basePartial = response.basePartial;\\n            swapResponse.quotePartial = response.quotePartial;\\n            swapResponse.partialKey = response.partialKey;\\n        } else {\\n            require(response.basePartial == 0, \\\"never occur\\\");\\n            require(response.quotePartial == 0, \\\"never occur\\\");\\n        }\\n    }\\n\\n    function previewSwap(\\n        MarketStructs.OrderBookSideInfo storage info,\\n        PreviewSwapParams memory params,\\n        function(bool, bool, uint256) view returns (uint256) maxSwapArg\\n    ) internal view returns (PreviewSwapResponse memory response) {\\n        bool isBase = params.isBaseToQuote == params.isExactInput;\\n        uint40 key = info.tree.root;\\n        uint256 baseSum;\\n        uint256 quoteSum;\\n\\n        while (key != 0) {\\n            PreviewSwapLocalVars memory vars;\\n            vars.priceX96 = _userDataToPriceX96(info.tree.nodes[key].userData);\\n            vars.sharePriceX96 = Math.mulDiv(vars.priceX96, params.baseBalancePerShareX96, FixedPoint96.Q96);\\n            vars.amountPool = maxSwapArg(params.isBaseToQuote, params.isExactInput, vars.sharePriceX96);\\n\\n            // key - right is more gas efficient than left + key\\n            vars.left = info.tree.nodes[key].left;\\n            vars.right = info.tree.nodes[key].right;\\n            vars.leftBaseSum = baseSum + info.orderInfos[vars.left].baseSum;\\n            vars.leftQuoteSum = quoteSum + info.orderInfos[vars.left].quoteSum;\\n\\n            uint256 rangeLeft =\\n                (isBase ? vars.leftBaseSum : _quoteToBalance(vars.leftQuoteSum, params.baseBalancePerShareX96)) +\\n                    vars.amountPool;\\n            if (params.amount <= rangeLeft) {\\n                if (vars.left == 0) {\\n                    response.fullLastKey = info.tree.prev(key);\\n                }\\n                key = vars.left;\\n                continue;\\n            }\\n\\n            vars.rightBaseSum = baseSum + (info.orderInfos[key].baseSum - info.orderInfos[vars.right].baseSum);\\n            vars.rightQuoteSum = quoteSum + (info.orderInfos[key].quoteSum - info.orderInfos[vars.right].quoteSum);\\n\\n            uint256 rangeRight =\\n                (isBase ? vars.rightBaseSum : _quoteToBalance(vars.rightQuoteSum, params.baseBalancePerShareX96)) +\\n                    vars.amountPool;\\n            if (params.amount < rangeRight) {\\n                response.amountPool = vars.amountPool;\\n                response.baseFull = vars.leftBaseSum;\\n                response.quoteFull = _quoteToBalance(vars.leftQuoteSum, params.baseBalancePerShareX96);\\n                if (isBase) {\\n                    response.basePartial = params.amount - rangeLeft; // < info.orderInfos[key].base\\n                    response.quotePartial = Math.mulDiv(response.basePartial, vars.sharePriceX96, FixedPoint96.Q96);\\n                } else {\\n                    response.quotePartial = params.amount - rangeLeft;\\n                    response.basePartial = Math.mulDiv(response.quotePartial, FixedPoint96.Q96, vars.sharePriceX96);\\n                    // round to fit order size\\n                    response.basePartial = Math.min(response.basePartial, info.orderInfos[key].base - 1);\\n                }\\n                response.fullLastKey = info.tree.prev(key);\\n                response.partialKey = key;\\n                return response;\\n            }\\n\\n            {\\n                baseSum = vars.rightBaseSum;\\n                quoteSum = vars.rightQuoteSum;\\n                if (vars.right == 0) {\\n                    response.fullLastKey = key;\\n                }\\n                key = vars.right;\\n            }\\n        }\\n\\n        response.baseFull = baseSum;\\n        response.quoteFull = _quoteToBalance(quoteSum, params.baseBalancePerShareX96);\\n        response.amountPool = params.amount - (isBase ? response.baseFull : response.quoteFull);\\n    }\\n\\n    function maxSwap(\\n        MarketStructs.OrderBookSideInfo storage info,\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 sharePriceBoundX96,\\n        uint256 baseBalancePerShareX96\\n    ) public view returns (uint256 amount) {\\n        uint256 priceBoundX96 = Math.mulDiv(sharePriceBoundX96, FixedPoint96.Q96, baseBalancePerShareX96);\\n        bool isBid = isBaseToQuote;\\n        bool isBase = isBaseToQuote == isExactInput;\\n        uint40 key = info.tree.root;\\n\\n        while (key != 0) {\\n            uint128 price = _userDataToPriceX96(info.tree.nodes[key].userData);\\n            uint40 left = info.tree.nodes[key].left;\\n            if (isBid ? price >= priceBoundX96 : price <= priceBoundX96) {\\n                // key - right is more gas efficient than left + key\\n                uint40 right = info.tree.nodes[key].right;\\n                amount += isBase\\n                    ? info.orderInfos[key].baseSum - info.orderInfos[right].baseSum\\n                    : info.orderInfos[key].quoteSum - info.orderInfos[right].quoteSum;\\n                key = right;\\n            } else {\\n                key = left;\\n            }\\n        }\\n\\n        if (!isBase) {\\n            amount = _quoteToBalance(amount, baseBalancePerShareX96);\\n        }\\n    }\\n\\n    function _isFullyExecuted(MarketStructs.OrderBookSideInfo storage info, uint40 key) private view returns (uint48) {\\n        uint40 root = info.tree.root;\\n        while (key != 0 && key != root) {\\n            if (info.orderInfos[key].executionId != 0) {\\n                return info.orderInfos[key].executionId;\\n            }\\n            key = info.tree.nodes[key].parent;\\n        }\\n        return 0;\\n    }\\n\\n    function _makeUserData(uint256 priceX96) private pure returns (uint128) {\\n        return priceX96.toUint128();\\n    }\\n\\n    function _userDataToPriceX96(uint128 userData) private pure returns (uint128) {\\n        return userData;\\n    }\\n\\n    function _lessThan(\\n        RBTreeLibrary.Tree storage tree,\\n        bool isBid,\\n        uint40 key0,\\n        uint40 key1\\n    ) private view returns (bool) {\\n        uint128 price0 = _userDataToPriceX96(tree.nodes[key0].userData);\\n        uint128 price1 = _userDataToPriceX96(tree.nodes[key1].userData);\\n        if (price0 == price1) {\\n            return key0 < key1; // time priority\\n        }\\n        // price priority\\n        return isBid ? price0 > price1 : price0 < price1;\\n    }\\n\\n    function _lessThanAsk(\\n        uint40 key0,\\n        uint40 key1,\\n        uint256 slot\\n    ) private view returns (bool) {\\n        MarketStructs.OrderBookInfo storage info = _getOrderBookInfoFromSlot(slot);\\n        return _lessThan(info.ask.tree, false, key0, key1);\\n    }\\n\\n    function _lessThanBid(\\n        uint40 key0,\\n        uint40 key1,\\n        uint256 slot\\n    ) private view returns (bool) {\\n        MarketStructs.OrderBookInfo storage info = _getOrderBookInfoFromSlot(slot);\\n        return _lessThan(info.bid.tree, true, key0, key1);\\n    }\\n\\n    function _aggregate(MarketStructs.OrderBookSideInfo storage info, uint40 key) private returns (bool stop) {\\n        uint256 prevBaseSum = info.orderInfos[key].baseSum;\\n        uint256 prevQuoteSum = info.orderInfos[key].quoteSum;\\n        uint40 left = info.tree.nodes[key].left;\\n        uint40 right = info.tree.nodes[key].right;\\n\\n        uint256 baseSum = info.orderInfos[left].baseSum + info.orderInfos[right].baseSum + info.orderInfos[key].base;\\n        uint256 quoteSum = info.orderInfos[left].quoteSum + info.orderInfos[right].quoteSum + _getQuote(info, key);\\n\\n        stop = baseSum == prevBaseSum && quoteSum == prevQuoteSum;\\n        if (!stop) {\\n            info.orderInfos[key].baseSum = baseSum;\\n            info.orderInfos[key].quoteSum = quoteSum;\\n        }\\n    }\\n\\n    function _aggregateAsk(uint40 key, uint256 slot) private returns (bool stop) {\\n        MarketStructs.OrderBookInfo storage info = _getOrderBookInfoFromSlot(slot);\\n        return _aggregate(info.ask, key);\\n    }\\n\\n    function _aggregateBid(uint40 key, uint256 slot) private returns (bool stop) {\\n        MarketStructs.OrderBookInfo storage info = _getOrderBookInfoFromSlot(slot);\\n        return _aggregate(info.bid, key);\\n    }\\n\\n    function _subtreeRemoved(\\n        MarketStructs.OrderBookSideInfo storage info,\\n        MarketStructs.OrderBookInfo storage orderBookInfo,\\n        uint40 key\\n    ) private {\\n        info.orderInfos[key].executionId = orderBookInfo.seqExecutionId;\\n    }\\n\\n    function _subtreeRemovedAsk(uint40 key, uint256 slot) private {\\n        MarketStructs.OrderBookInfo storage info = _getOrderBookInfoFromSlot(slot);\\n        return _subtreeRemoved(info.ask, info, key);\\n    }\\n\\n    function _subtreeRemovedBid(uint40 key, uint256 slot) private {\\n        MarketStructs.OrderBookInfo storage info = _getOrderBookInfoFromSlot(slot);\\n        return _subtreeRemoved(info.bid, info, key);\\n    }\\n\\n    // returns quoteBalance / baseBalancePerShare\\n    function _getQuote(MarketStructs.OrderBookSideInfo storage info, uint40 key) private view returns (uint256) {\\n        uint128 priceX96 = _userDataToPriceX96(info.tree.nodes[key].userData);\\n        return Math.mulDiv(info.orderInfos[key].base, priceX96, FixedPoint96.Q96);\\n    }\\n\\n    function _quoteToBalance(uint256 quote, uint256 baseBalancePerShareX96) private pure returns (uint256) {\\n        return Math.mulDiv(quote, baseBalancePerShareX96, FixedPoint96.Q96);\\n    }\\n\\n    function _getSlot(MarketStructs.OrderBookInfo storage d) private pure returns (uint256 slot) {\\n        assembly {\\n            slot := d.slot\\n        }\\n    }\\n\\n    function _getOrderBookInfoFromSlot(uint256 slot) private pure returns (MarketStructs.OrderBookInfo storage d) {\\n        assembly {\\n            d.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfdfcfb8e00dee7d81e38e3bd6c7606a6e42a5fdc80c79f7fe147264dc99239d6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PerpMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\n\\nlibrary PerpMath {\\n    using SafeCast for int256;\\n    using SignedSafeMath for int256;\\n    using SafeMath for uint256;\\n\\n    function formatSqrtPriceX96ToPriceX96(uint160 sqrtPriceX96) internal pure returns (uint256) {\\n        return Math.mulDiv(sqrtPriceX96, sqrtPriceX96, FixedPoint96.Q96);\\n    }\\n\\n    function formatX10_18ToX96(uint256 valueX10_18) internal pure returns (uint256) {\\n        return Math.mulDiv(valueX10_18, FixedPoint96.Q96, 1 ether);\\n    }\\n\\n    function formatX96ToX10_18(uint256 valueX96) internal pure returns (uint256) {\\n        return Math.mulDiv(valueX96, 1 ether, FixedPoint96.Q96);\\n    }\\n\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function abs(int256 value) internal pure returns (uint256) {\\n        return value >= 0 ? value.toUint256() : neg256(value).toUint256();\\n    }\\n\\n    function neg256(int256 a) internal pure returns (int256) {\\n        require(a > -2**255, \\\"PerpMath: inversion overflow\\\");\\n        return -a;\\n    }\\n\\n    function neg256(uint256 a) internal pure returns (int256) {\\n        return -SafeCast.toInt256(a);\\n    }\\n\\n    function divBy10_18(int256 value) internal pure returns (int256) {\\n        // no overflow here\\n        return value / (1 ether);\\n    }\\n\\n    function divBy10_18(uint256 value) internal pure returns (uint256) {\\n        // no overflow here\\n        return value / (1 ether);\\n    }\\n\\n    function subRatio(uint24 a, uint24 b) internal pure returns (uint24) {\\n        require(b <= a, \\\"PerpMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    function mulRatio(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return Math.mulDiv(value, ratio, 1e6);\\n    }\\n\\n    function mulRatioRoundingUp(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return Math.mulDiv(value, ratio, 1e6, Math.Rounding.Up);\\n    }\\n\\n    function divRatio(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return Math.mulDiv(value, 1e6, ratio);\\n    }\\n\\n    function divRatioRoundingUp(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return Math.mulDiv(value, 1e6, ratio, Math.Rounding.Up);\\n    }\\n\\n    /// @param denominator cannot be 0 and is checked in Math.mulDiv()\\n    function mulDiv(\\n        int256 a,\\n        int256 b,\\n        uint256 denominator\\n    ) internal pure returns (int256 result) {\\n        uint256 unsignedA = a < 0 ? uint256(neg256(a)) : uint256(a);\\n        uint256 unsignedB = b < 0 ? uint256(neg256(b)) : uint256(b);\\n        bool negative = ((a < 0 && b > 0) || (a > 0 && b < 0)) ? true : false;\\n\\n        uint256 unsignedResult = Math.mulDiv(unsignedA, unsignedB, denominator);\\n\\n        result = negative ? neg256(unsignedResult) : SafeCast.toInt256(unsignedResult);\\n\\n        return result;\\n    }\\n\\n    function sign(int256 value) internal pure returns (int256) {\\n        return value > 0 ? int256(1) : (value < 0 ? int256(-1) : int256(0));\\n    }\\n}\\n\",\"keccak256\":\"0x8fb9c73930e8037da0e08fd3e3972821749739bd5ffe8fd1980dd84c3d40043e\",\"license\":\"GPL-3.0-or-later\"},\"deps/BokkyPooBahsRedBlackTreeLibrary/contracts/BokkyPooBahsRedBlackTreeLibrary.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's Red-Black Tree Library v1.0-pre-release-a\\n//\\n// A Solidity Red-Black Tree binary search library to store and access a sorted\\n// list of unsigned integer data. The Red-Black algorithm rebalances the binary\\n// search tree, resulting in O(log n) insert, remove and search time (and ~gas)\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsRedBlackTreeLibrary\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2020. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary BokkyPooBahsRedBlackTreeLibrary {\\n    struct Node {\\n        uint40 parent;\\n        uint40 left;\\n        uint40 right;\\n        bool red;\\n        uint128 userData; // use freely. this is for gas efficiency\\n    }\\n\\n    struct Tree {\\n        uint40 root;\\n        mapping(uint40 => Node) nodes;\\n    }\\n\\n    uint40 private constant EMPTY = 0;\\n\\n    function first(Tree storage self) internal view returns (uint40 _key) {\\n        _key = self.root;\\n        if (_key != EMPTY) {\\n            _key = treeMinimum(self, self.root);\\n        }\\n    }\\n\\n    function last(Tree storage self) internal view returns (uint40 _key) {\\n        _key = self.root;\\n        if (_key != EMPTY) {\\n            _key = treeMaximum(self, self.root);\\n        }\\n    }\\n\\n    function next(Tree storage self, uint40 target)\\n        internal\\n        view\\n        returns (uint40 cursor)\\n    {\\n        require(target != EMPTY, \\\"RBTL_N: target is empty\\\");\\n        if (self.nodes[target].right != EMPTY) {\\n            cursor = treeMinimum(self, self.nodes[target].right);\\n        } else {\\n            cursor = self.nodes[target].parent;\\n            while (cursor != EMPTY && target == self.nodes[cursor].right) {\\n                target = cursor;\\n                cursor = self.nodes[cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function prev(Tree storage self, uint40 target)\\n        internal\\n        view\\n        returns (uint40 cursor)\\n    {\\n        require(target != EMPTY, \\\"RBTL_P: target is empty\\\");\\n        if (self.nodes[target].left != EMPTY) {\\n            cursor = treeMaximum(self, self.nodes[target].left);\\n        } else {\\n            cursor = self.nodes[target].parent;\\n            while (cursor != EMPTY && target == self.nodes[cursor].left) {\\n                target = cursor;\\n                cursor = self.nodes[cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function exists(Tree storage self, uint40 key)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return\\n            (key != EMPTY) &&\\n            ((key == self.root) || (self.nodes[key].parent != EMPTY));\\n    }\\n\\n    function isEmpty(uint40 key) internal pure returns (bool) {\\n        return key == EMPTY;\\n    }\\n\\n    function getEmpty() internal pure returns (uint256) {\\n        return EMPTY;\\n    }\\n\\n    function getNode(Tree storage self, uint40 key)\\n        internal\\n        view\\n        returns (\\n            uint40 _returnKey,\\n            uint40 _parent,\\n            uint40 _left,\\n            uint40 _right,\\n            bool _red\\n        )\\n    {\\n        require(exists(self, key), \\\"RBTL_GN: key not exist\\\");\\n        return (\\n            key,\\n            self.nodes[key].parent,\\n            self.nodes[key].left,\\n            self.nodes[key].right,\\n            self.nodes[key].red\\n        );\\n    }\\n\\n    function insert(\\n        Tree storage self,\\n        uint40 key,\\n        uint128 userData,\\n        function(uint40, uint40, uint256) view returns (bool) lessThan,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) internal {\\n        require(key != EMPTY, \\\"RBTL_I: key is empty\\\");\\n        require(!exists(self, key), \\\"RBTL_I: key already exists\\\");\\n        uint40 cursor = EMPTY;\\n        uint40 probe = self.root;\\n        self.nodes[key] = Node({\\n            parent: EMPTY,\\n            left: EMPTY,\\n            right: EMPTY,\\n            red: true,\\n            userData: userData\\n        });\\n        while (probe != EMPTY) {\\n            cursor = probe;\\n            if (lessThan(key, probe, data)) {\\n                probe = self.nodes[probe].left;\\n            } else {\\n                probe = self.nodes[probe].right;\\n            }\\n        }\\n        self.nodes[key].parent = cursor;\\n        if (cursor == EMPTY) {\\n            self.root = key;\\n        } else if (lessThan(key, cursor, data)) {\\n            self.nodes[cursor].left = key;\\n        } else {\\n            self.nodes[cursor].right = key;\\n        }\\n        aggregateRecursively(self, key, aggregate, data);\\n        insertFixup(self, key, aggregate, data);\\n    }\\n\\n    function remove(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) internal {\\n        require(key != EMPTY, \\\"RBTL_R: key is empty\\\");\\n        require(exists(self, key), \\\"RBTL_R: key not exist\\\");\\n        uint40 probe;\\n        uint40 cursor;\\n        if (self.nodes[key].left == EMPTY || self.nodes[key].right == EMPTY) {\\n            cursor = key;\\n        } else {\\n            cursor = self.nodes[key].right;\\n            while (self.nodes[cursor].left != EMPTY) {\\n                cursor = self.nodes[cursor].left;\\n            }\\n        }\\n        if (self.nodes[cursor].left != EMPTY) {\\n            probe = self.nodes[cursor].left;\\n        } else {\\n            probe = self.nodes[cursor].right;\\n        }\\n        uint40 yParent = self.nodes[cursor].parent;\\n        self.nodes[probe].parent = yParent;\\n        if (yParent != EMPTY) {\\n            if (cursor == self.nodes[yParent].left) {\\n                self.nodes[yParent].left = probe;\\n            } else {\\n                self.nodes[yParent].right = probe;\\n            }\\n        } else {\\n            self.root = probe;\\n        }\\n        bool doFixup = !self.nodes[cursor].red;\\n        if (cursor != key) {\\n            replaceParent(self, cursor, key);\\n            self.nodes[cursor].left = self.nodes[key].left;\\n            self.nodes[self.nodes[cursor].left].parent = cursor;\\n            self.nodes[cursor].right = self.nodes[key].right;\\n            self.nodes[self.nodes[cursor].right].parent = cursor;\\n            self.nodes[cursor].red = self.nodes[key].red;\\n            (cursor, key) = (key, cursor);\\n            aggregateRecursively(self, key, aggregate, data);\\n        }\\n        if (doFixup) {\\n            removeFixup(self, probe, aggregate, data);\\n        }\\n        aggregateRecursively(self, yParent, aggregate, data);\\n\\n        // Fixed a bug that caused the parent of empty nodes to be non-zero.\\n        // TODO: Fix it the right way.\\n        if (probe == EMPTY) {\\n            self.nodes[probe].parent = EMPTY;\\n        }\\n    }\\n\\n    // https://arxiv.org/pdf/1602.02120.pdf\\n    // changes from original\\n    // - handle empty\\n    // - handle parent\\n    // - change root to black\\n\\n    // to avoid stack too deep\\n    struct JoinParams {\\n        uint40 left;\\n        uint40 key;\\n        uint40 right;\\n        uint8 leftBlackHeight;\\n        uint8 rightBlackHeight;\\n        uint256 data;\\n    }\\n\\n    // destructive func\\n    function joinRight(\\n        Tree storage self,\\n        JoinParams memory params,\\n        function(uint40, uint256) returns (bool) aggregate\\n    ) private returns (uint40, uint8) {\\n        if (\\n            !self.nodes[params.left].red &&\\n            params.leftBlackHeight == params.rightBlackHeight\\n        ) {\\n            self.nodes[params.key].red = true;\\n            self.nodes[params.key].left = params.left;\\n            self.nodes[params.key].right = params.right;\\n            aggregate(params.key, params.data);\\n            return (params.key, params.leftBlackHeight);\\n        }\\n\\n        (uint40 t, ) = joinRight(\\n            self,\\n            JoinParams({\\n                left: self.nodes[params.left].right,\\n                key: params.key,\\n                right: params.right,\\n                leftBlackHeight: params.leftBlackHeight -\\n                    (self.nodes[params.left].red ? 0 : 1),\\n                rightBlackHeight: params.rightBlackHeight,\\n                data: params.data\\n            }),\\n            aggregate\\n        );\\n        self.nodes[params.left].right = t;\\n        self.nodes[params.left].parent = EMPTY;\\n        aggregate(params.left, params.data);\\n\\n        if (\\n            !self.nodes[params.left].red &&\\n            self.nodes[t].red &&\\n            self.nodes[self.nodes[t].right].red\\n        ) {\\n            self.nodes[self.nodes[t].right].red = false;\\n            rotateLeft(self, params.left, aggregate, params.data);\\n            return (t, params.leftBlackHeight);\\n            //            return (self.nodes[params.left].parent, tBlackHeight + 1); // TODO: replace with t\\n        }\\n        return (params.left, params.leftBlackHeight);\\n        //        return (params.left, tBlackHeight + (self.nodes[params.left].red ? 0 : 1));\\n    }\\n\\n    // destructive func\\n    function joinLeft(\\n        Tree storage self,\\n        JoinParams memory params,\\n        function(uint40, uint256) returns (bool) aggregate\\n    ) internal returns (uint40 resultKey) {\\n        if (\\n            !self.nodes[params.right].red &&\\n            params.leftBlackHeight == params.rightBlackHeight\\n        ) {\\n            self.nodes[params.key].red = true;\\n            self.nodes[params.key].left = params.left;\\n            self.nodes[params.key].right = params.right;\\n            if (params.left != EMPTY) {\\n                self.nodes[params.left].parent = params.key;\\n            }\\n            if (params.right != EMPTY) {\\n                self.nodes[params.right].parent = params.key;\\n            }\\n            aggregate(params.key, params.data);\\n            return params.key;\\n        }\\n\\n        uint40 t = joinLeft(\\n            self,\\n            JoinParams({\\n                left: params.left,\\n                key: params.key,\\n                right: self.nodes[params.right].left,\\n                leftBlackHeight: params.leftBlackHeight,\\n                rightBlackHeight: params.rightBlackHeight -\\n                    (self.nodes[params.right].red ? 0 : 1),\\n                data: params.data\\n            }),\\n            aggregate\\n        );\\n        self.nodes[params.right].left = t;\\n        self.nodes[params.right].parent = EMPTY;\\n        if (t != EMPTY) {\\n            self.nodes[t].parent = params.right;\\n        }\\n        aggregate(params.right, params.data);\\n\\n        if (\\n            !self.nodes[params.right].red &&\\n            self.nodes[t].red &&\\n            self.nodes[self.nodes[t].left].red\\n        ) {\\n            self.nodes[self.nodes[t].left].red = false;\\n            rotateRight(self, params.right, aggregate, params.data);\\n            return t;\\n        }\\n        return params.right;\\n    }\\n\\n    // destructive func\\n    function join(\\n        Tree storage self,\\n        uint40 left,\\n        uint40 key,\\n        uint40 right,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint8 leftBlackHeight,\\n        uint8 rightBlackHeight,\\n        uint256 data\\n    ) private returns (uint40 t, uint8 tBlackHeight) {\\n        if (leftBlackHeight > rightBlackHeight) {\\n            (t, tBlackHeight) = joinRight(\\n                self,\\n                JoinParams({\\n                    left: left,\\n                    key: key,\\n                    right: right,\\n                    leftBlackHeight: leftBlackHeight,\\n                    rightBlackHeight: rightBlackHeight,\\n                    data: data\\n                }),\\n                aggregate\\n            );\\n            tBlackHeight = leftBlackHeight;\\n            if (self.nodes[t].red && self.nodes[self.nodes[t].right].red) {\\n                self.nodes[t].red = false;\\n                tBlackHeight += 1;\\n            }\\n        } else if (leftBlackHeight < rightBlackHeight) {\\n            t = joinLeft(\\n                self,\\n                JoinParams({\\n                    left: left,\\n                    key: key,\\n                    right: right,\\n                    leftBlackHeight: leftBlackHeight,\\n                    rightBlackHeight: rightBlackHeight,\\n                    data: data\\n                }),\\n                aggregate\\n            );\\n            tBlackHeight = rightBlackHeight;\\n            if (self.nodes[t].red && self.nodes[self.nodes[t].left].red) {\\n                self.nodes[t].red = false;\\n                tBlackHeight += 1;\\n            }\\n        } else {\\n            bool red = !self.nodes[left].red && !self.nodes[right].red;\\n            self.nodes[key].red = red;\\n            self.nodes[key].left = left;\\n            self.nodes[key].right = right;\\n            aggregate(key, data);\\n            (t, tBlackHeight) = (key, leftBlackHeight + (red ? 0 : 1));\\n        }\\n    }\\n\\n    struct SplitParams {\\n        uint40 t;\\n        uint40 key;\\n        uint8 blackHeight;\\n        uint256 data;\\n    }\\n\\n    // destructive func\\n    function splitRight(\\n        Tree storage self,\\n        SplitParams memory params,\\n        function(uint40, uint40, uint256) returns (bool) lessThan,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        function(uint40, uint256) subtreeRemoved\\n    ) private returns (uint40 resultKey, uint8 resultBlackHeight) {\\n        if (params.t == EMPTY) return (EMPTY, params.blackHeight);\\n        params.blackHeight -= (self.nodes[params.t].red ? 0 : 1);\\n        if (params.key == params.t) {\\n            subtreeRemoved(params.t, params.data);\\n            return (self.nodes[params.t].right, params.blackHeight);\\n        }\\n        if (lessThan(params.key, params.t, params.data)) {\\n            (uint40 r, uint8 rBlackHeight) = splitRight(\\n                self,\\n                SplitParams({\\n                    t: self.nodes[params.t].left,\\n                    key: params.key,\\n                    blackHeight: params.blackHeight,\\n                    data: params.data\\n                }),\\n                lessThan,\\n                aggregate,\\n                subtreeRemoved\\n            );\\n            return\\n                join(\\n                    self,\\n                    r,\\n                    params.t,\\n                    self.nodes[params.t].right,\\n                    aggregate,\\n                    rBlackHeight,\\n                    params.blackHeight,\\n                    params.data\\n                );\\n        } else {\\n            subtreeRemoved(params.t, params.data);\\n            return\\n                splitRight(\\n                    self,\\n                    SplitParams({\\n                        t: self.nodes[params.t].right,\\n                        key: params.key,\\n                        blackHeight: params.blackHeight,\\n                        data: params.data\\n                    }),\\n                    lessThan,\\n                    aggregate,\\n                    subtreeRemoved\\n                );\\n        }\\n    }\\n\\n    function removeLeft(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint40, uint256) returns (bool) lessThan,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        function(uint40, uint256) subtreeRemoved,\\n        uint256 data\\n    ) internal {\\n        require(key != EMPTY, \\\"RBTL_RL: key is empty\\\");\\n        require(exists(self, key), \\\"RBTL_RL: key not exist\\\");\\n        (self.root, ) = splitRight(\\n            self,\\n            SplitParams({t: self.root, key: key, blackHeight: 128, data: data}),\\n            lessThan,\\n            aggregate,\\n            subtreeRemoved\\n        );\\n        self.nodes[self.root].parent = EMPTY;\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function aggregateRecursively(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) internal {\\n        while (key != EMPTY) {\\n            if (aggregate(key, data)) return;\\n            key = self.nodes[key].parent;\\n        }\\n    }\\n\\n    function treeMinimum(Tree storage self, uint40 key)\\n        private\\n        view\\n        returns (uint40)\\n    {\\n        while (self.nodes[key].left != EMPTY) {\\n            key = self.nodes[key].left;\\n        }\\n        return key;\\n    }\\n\\n    function treeMaximum(Tree storage self, uint40 key)\\n        private\\n        view\\n        returns (uint40)\\n    {\\n        while (self.nodes[key].right != EMPTY) {\\n            key = self.nodes[key].right;\\n        }\\n        return key;\\n    }\\n\\n    function rotateLeft(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) private {\\n        uint40 cursor = self.nodes[key].right;\\n        uint40 keyParent = self.nodes[key].parent;\\n        uint40 cursorLeft = self.nodes[cursor].left;\\n        self.nodes[key].right = cursorLeft;\\n        if (cursorLeft != EMPTY) {\\n            self.nodes[cursorLeft].parent = key;\\n        }\\n        self.nodes[cursor].parent = keyParent;\\n        if (keyParent == EMPTY) {\\n            self.root = cursor;\\n        } else if (key == self.nodes[keyParent].left) {\\n            self.nodes[keyParent].left = cursor;\\n        } else {\\n            self.nodes[keyParent].right = cursor;\\n        }\\n        self.nodes[cursor].left = key;\\n        self.nodes[key].parent = cursor;\\n        aggregate(key, data);\\n        aggregate(cursor, data);\\n    }\\n\\n    function rotateRight(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) private {\\n        uint40 cursor = self.nodes[key].left;\\n        uint40 keyParent = self.nodes[key].parent;\\n        uint40 cursorRight = self.nodes[cursor].right;\\n        self.nodes[key].left = cursorRight;\\n        if (cursorRight != EMPTY) {\\n            self.nodes[cursorRight].parent = key;\\n        }\\n        self.nodes[cursor].parent = keyParent;\\n        if (keyParent == EMPTY) {\\n            self.root = cursor;\\n        } else if (key == self.nodes[keyParent].right) {\\n            self.nodes[keyParent].right = cursor;\\n        } else {\\n            self.nodes[keyParent].left = cursor;\\n        }\\n        self.nodes[cursor].right = key;\\n        self.nodes[key].parent = cursor;\\n        aggregate(key, data);\\n        aggregate(cursor, data);\\n    }\\n\\n    function insertFixup(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) private {\\n        uint40 cursor;\\n        while (key != self.root && self.nodes[self.nodes[key].parent].red) {\\n            uint40 keyParent = self.nodes[key].parent;\\n            if (keyParent == self.nodes[self.nodes[keyParent].parent].left) {\\n                cursor = self.nodes[self.nodes[keyParent].parent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    key = self.nodes[keyParent].parent;\\n                } else {\\n                    if (key == self.nodes[keyParent].right) {\\n                        key = keyParent;\\n                        rotateLeft(self, key, aggregate, data);\\n                    }\\n                    keyParent = self.nodes[key].parent;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    rotateRight(\\n                        self,\\n                        self.nodes[keyParent].parent,\\n                        aggregate,\\n                        data\\n                    );\\n                }\\n            } else {\\n                cursor = self.nodes[self.nodes[keyParent].parent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    key = self.nodes[keyParent].parent;\\n                } else {\\n                    if (key == self.nodes[keyParent].left) {\\n                        key = keyParent;\\n                        rotateRight(self, key, aggregate, data);\\n                    }\\n                    keyParent = self.nodes[key].parent;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    rotateLeft(\\n                        self,\\n                        self.nodes[keyParent].parent,\\n                        aggregate,\\n                        data\\n                    );\\n                }\\n            }\\n        }\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function replaceParent(\\n        Tree storage self,\\n        uint40 a,\\n        uint40 b\\n    ) private {\\n        uint40 bParent = self.nodes[b].parent;\\n        self.nodes[a].parent = bParent;\\n        if (bParent == EMPTY) {\\n            self.root = a;\\n        } else {\\n            if (b == self.nodes[bParent].left) {\\n                self.nodes[bParent].left = a;\\n            } else {\\n                self.nodes[bParent].right = a;\\n            }\\n        }\\n    }\\n\\n    function removeFixup(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) private {\\n        uint40 cursor;\\n        while (key != self.root && !self.nodes[key].red) {\\n            uint40 keyParent = self.nodes[key].parent;\\n            if (key == self.nodes[keyParent].left) {\\n                cursor = self.nodes[keyParent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[keyParent].red = true;\\n                    rotateLeft(self, keyParent, aggregate, data);\\n                    cursor = self.nodes[keyParent].right;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].left].red &&\\n                    !self.nodes[self.nodes[cursor].right].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    key = keyParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].right].red) {\\n                        self.nodes[self.nodes[cursor].left].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateRight(self, cursor, aggregate, data);\\n                        cursor = self.nodes[keyParent].right;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[keyParent].red;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[cursor].right].red = false;\\n                    rotateLeft(self, keyParent, aggregate, data);\\n                    key = self.root;\\n                }\\n            } else {\\n                cursor = self.nodes[keyParent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[keyParent].red = true;\\n                    rotateRight(self, keyParent, aggregate, data);\\n                    cursor = self.nodes[keyParent].left;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].right].red &&\\n                    !self.nodes[self.nodes[cursor].left].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    key = keyParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].left].red) {\\n                        self.nodes[self.nodes[cursor].right].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateLeft(self, cursor, aggregate, data);\\n                        cursor = self.nodes[keyParent].left;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[keyParent].red;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[cursor].left].red = false;\\n                    rotateRight(self, keyParent, aggregate, data);\\n                    key = self.root;\\n                }\\n            }\\n        }\\n        self.nodes[key].red = false;\\n    }\\n}\\n// ----------------------------------------------------------------------------\\n// End - BokkyPooBah's Red-Black Tree Library\\n// ----------------------------------------------------------------------------\\n\",\"keccak256\":\"0xcd1e5d70b48e4c611fd4b863d8413eb8000db92c875f0a2ccb60b7c374e03d7f\"}},\"version\":1}",
  "bytecode": "0x6122b461003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061006c5760003560e01c806302ea3f09146100715780635d816f161461009e57806399d50409146100c0578063a47859fc146100f7578063b2041ed91461012d578063b91554941461014e575b600080fd5b61008461007f3660046120cf565b610161565b604080519283526020830191909152015b60405180910390f35b8180156100aa57600080fd5b506100be6100b93660046120cf565b6101bc565b005b6100d36100ce3660046120cf565b610299565b6040805165ffffffffffff9094168452602084019290925290820152606001610095565b81801561010357600080fd5b50610117610112366004612119565b610332565b60405164ffffffffff9091168152602001610095565b61014061013b36600461215f565b6104cc565b604051908152602001610095565b61014061015c3660046121ad565b610654565b6000806000846101715785610176565b856004015b64ffffffffff94909416600090815260028501602090815260408083205460019097019091529020549396600160801b9094046001600160801b03169550929350505050565b6000826101c957836101ce565b836004015b90506101da81836106a8565b65ffffffffffff16156102345760405162461bcd60e51b815260206004820152601e60248201527f4f424c5f434f3a20616c72656164792066756c6c79206578656375746564000060448201526064015b60405180910390fd5b83831561024e57610249828461076184610779565b61025c565b61025c8284610b9d84610779565b5064ffffffffff90911660009081526002918201602052604081208181556001810182905591820155600301805465ffffffffffff191690555050565b600080600080856102aa57866102af565b866004015b90506102bb81866106a8565b93508365ffffffffffff166000036102de57600080600093509350935050610329565b64ffffffffff8516600090815260028201602052604090205492506103256103068287610baa565b65ffffffffffff8616600090815260098a016020526040902054610bf1565b9150505b93509350939050565b600080841161037a5760405162461bcd60e51b81526020600482015260146024820152734f424c5f434f3a2062617365206973207a65726f60601b604482015260640161022b565b6103856064836121f2565b8310156103ce5760405162461bcd60e51b815260206004820152601760248201527613d09317d0d3ce881c1c9a58d9481d1bdbc81cdb585b1b604a1b604482015260640161022b565b6103d9826064612214565b8311156104225760405162461bcd60e51b81526020600482015260176024820152764f424c5f434f3a20707269636520746f6f206c6172676560481b604482015260640161022b565b60008561042f5786610434565b866004015b60038101549091506000906104519064ffffffffff166001612233565b60038301805464ffffffffff191664ffffffffff83169081179091556000908152600284016020526040812088905590915061048c86610c09565b90508888156104ac576104a7848484610c1461076186610c30565b6104be565b6104be848484610f82610b9d86610c30565b509098975050505050505050565b6000806104de84600160601b85610f91565b87549091508690811515871515149064ffffffffff165b64ffffffffff8116156106355764ffffffffff818116600090815260018c0160205260409020546001600160801b03600160801b82041691600160281b909104168461054d5785826001600160801b0316111561055b565b85826001600160801b031610155b1561062a5764ffffffffff808416600090815260018e016020526040902054600160501b900416846105e4578c60020160008264ffffffffff1664ffffffffff168152602001908152602001600020600201548d60020160008664ffffffffff1664ffffffffff168152602001908152602001600020600201546105df9190612258565b610617565b64ffffffffff808216600090815260028f0160205260408082206001908101549388168352912001546106179190612258565b610621908961226b565b9750925061062e565b8092505b50506104f5565b81610647576106448587610bf1565b94505b5050505095945050505050565b805460009064ffffffffff16810361066e57506000919050565b600061067983611040565b64ffffffffff16600090815260019390930160205250506040902054600160801b90046001600160801b031690565b815460009064ffffffffff165b64ffffffffff8316158015906106d957508064ffffffffff168364ffffffffff1614155b156107555764ffffffffff8316600090815260028501602052604090206003015465ffffffffffff161561073257505064ffffffffff8116600090815260028301602052604090206003015465ffffffffffff1661075b565b64ffffffffff9283166000908152600185016020526040902054909216916106b5565b60009150505b92915050565b6000816107716004820185611068565b949350505050565b64ffffffffff83166107c45760405162461bcd60e51b81526020600482015260146024820152735242544c5f523a206b657920697320656d70747960601b604482015260640161022b565b6107ce8484611177565b6108125760405162461bcd60e51b81526020600482015260156024820152741490951317d48e881ad95e481b9bdd08195e1a5cdd605a1b604482015260640161022b565b64ffffffffff838116600090815260018601602052604081205490918291600160281b9004161580610863575064ffffffffff8581166000908152600188016020526040902054600160501b900416155b1561086f5750836108e1565b5064ffffffffff8085166000908152600187016020526040902054600160501b9004165b64ffffffffff8181166000908152600188016020526040902054600160281b900416156108e15764ffffffffff9081166000908152600187016020526040902054600160281b900416610893565b64ffffffffff8181166000908152600188016020526040902054600160281b900416156109315764ffffffffff8082166000908152600188016020526040902054600160281b9004169150610956565b64ffffffffff8082166000908152600188016020526040902054600160501b90041691505b64ffffffffff80821660009081526001880160205260408082205485841683529120805464ffffffffff1916919092169081179091558015610a355764ffffffffff8082166000908152600189016020526040902054600160281b90048116908316036109f95764ffffffffff808216600090815260018901602052604090208054918516600160281b0264ffffffffff60281b19909216919091179055610a4b565b64ffffffffff808216600090815260018901602052604090208054918516600160501b0264ffffffffff60501b19909216919091179055610a4b565b865464ffffffffff191664ffffffffff84161787555b64ffffffffff828116600081815260018a016020526040902054600160781b900460ff161591881614610b4457610a838884896111c2565b64ffffffffff878116600090815260018a0160205260408082208054878516808552838520805464ffffffffff60281b1916600160281b9384900488168402178082559290920486168552838520805464ffffffffff1990811683179091558354835464ffffffffff60501b1916600160501b91829004891682021780855504909616855292842080549095168317909455549152815460ff60781b1916600160781b9182900460ff161515909102179055919591610b44888888886112bc565b8015610b5657610b56888588886112fe565b610b62888388886112bc565b64ffffffffff8416610b935764ffffffffff841660009081526001890160205260409020805464ffffffffff191690555b5050505050505050565b6000816107718185611068565b64ffffffffff8116600090815260018301602090815260408083205460028601909252822054600160801b9091046001600160801b0316906107719082600160601b610f91565b6000610c028383600160601b610f91565b9392505050565b600061075b82611897565b600081610c276004820160018787611904565b95945050505050565b64ffffffffff8516610c7b5760405162461bcd60e51b81526020600482015260146024820152735242544c5f493a206b657920697320656d70747960601b604482015260640161022b565b610c858686611177565b15610cd25760405162461bcd60e51b815260206004820152601a60248201527f5242544c5f493a206b657920616c726561647920657869737473000000000000604482015260640161022b565b6000808760000160009054906101000a900464ffffffffff1690506040518060a00160405280600064ffffffffff168152602001600064ffffffffff168152602001600064ffffffffff168152602001600115158152602001876001600160801b03168152508860010160008964ffffffffff1664ffffffffff16815260200190815260200160002060008201518160000160006101000a81548164ffffffffff021916908364ffffffffff16021790555060208201518160000160056101000a81548164ffffffffff021916908364ffffffffff160217905550604082015181600001600a6101000a81548164ffffffffff021916908364ffffffffff160217905550606082015181600001600f6101000a81548160ff02191690831515021790555060808201518160000160106101000a8154816001600160801b0302191690836001600160801b031602179055509050505b64ffffffffff811615610e9957809150610e468782858863ffffffff16565b15610e725764ffffffffff9081166000908152600189016020526040902054600160281b900416610e27565b64ffffffffff9081166000908152600189016020526040902054600160501b900416610e27565b64ffffffffff878116600090815260018a0160205260409020805464ffffffffff19169184169182179055610ee257875464ffffffffff191664ffffffffff8816178855610f6a565b610ef18783858863ffffffff16565b15610f325764ffffffffff808316600090815260018a01602052604090208054918916600160281b0264ffffffffff60281b19909216919091179055610f6a565b64ffffffffff808316600090815260018a01602052604090208054918916600160501b0264ffffffffff60501b199092169190911790555b610f76888886866112bc565b610b93888886866119a3565b600081610c2781838787611904565b6000808060001985870985870292508281108382030391505080600003610fcb57838281610fc157610fc16121c6565b0492505050610c02565b808411610fd757600080fd5b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b805464ffffffffff16801561106357815461075b90839064ffffffffff16611cc8565b919050565b64ffffffffff808216600090815260028085016020818152604080852060018082015495820154818b01855283882054959094529054600160501b85048816808852838820830154600160281b909604909816808852928720909101549596949592949193919287926110da9161226b565b6110e4919061226b565b905060006110f28989610baa565b64ffffffffff80851660009081526002808d01602052604080832082015493891683529091200154611124919061226b565b61112e919061226b565b9050858214801561113e57508481145b96508661116b5764ffffffffff881660009081526002808b01602052604090912060018101849055018190555b50505050505092915050565b600064ffffffffff821615801590610c025750825464ffffffffff83811691161480610c0257505064ffffffffff908116600090815260019290920160205260409091205416151590565b64ffffffffff80821660009081526001850160205260408082205485841683529120805464ffffffffff1916919092169081179091558061121757835464ffffffffff191664ffffffffff84161784556112b6565b64ffffffffff8082166000908152600186016020526040902054600160281b900481169083160361127e5764ffffffffff808216600090815260018601602052604090208054918516600160281b0264ffffffffff60281b199092169190911790556112b6565b64ffffffffff808216600090815260018601602052604090208054918516600160501b0264ffffffffff60501b199092169190911790555b50505050565b64ffffffffff8316156112b6576112d783828463ffffffff16565b6112b65764ffffffffff9283166000908152600185016020526040902054909216916112bc565b60005b845464ffffffffff85811691161480159061133c575064ffffffffff84166000908152600186016020526040902054600160781b900460ff16155b1561186f5764ffffffffff80851660008181526001880160205260408082205484168083529120549092600160281b9091041690036115f15764ffffffffff818116600090815260018801602052604080822054600160501b900490921680825291902054909250600160781b900460ff16156114205764ffffffffff8083166000908152600188016020526040808220805460ff60781b19908116909155928416825290208054909116600160781b1790556113fb86828686611d22565b64ffffffffff8082166000908152600188016020526040902054600160501b90041691505b64ffffffffff828116600090815260018801602052604080822054600160281b900490921681522054600160781b900460ff16158015611490575064ffffffffff828116600090815260018801602052604080822054600160501b900490921681522054600160781b900460ff16155b156114c65764ffffffffff821660009081526001870160205260409020805460ff60781b1916600160781b179055935083611869565b64ffffffffff828116600090815260018801602052604080822054600160501b900490921681522054600160781b900460ff166115745764ffffffffff80831660008181526001890160205260408082208054600160281b900490941682528120805460ff60781b19908116909155919052815416600160781b17905561154f86838686611ef8565b64ffffffffff8082166000908152600188016020526040902054600160501b90041691505b64ffffffffff808216600090815260018801602052604080822080548685168452828420805460ff600160781b9384900416151590920260ff60781b19928316178155825482169092559054600160501b900490931682529020805490911690556115e186828686611d22565b855464ffffffffff169450611869565b64ffffffffff818116600090815260018801602052604080822054600160281b900490921680825291902054909250600160781b900460ff161561169c5764ffffffffff8083166000908152600188016020526040808220805460ff60781b19908116909155928416825290208054909116600160781b17905561167786828686611ef8565b64ffffffffff8082166000908152600188016020526040902054600160281b90041691505b64ffffffffff828116600090815260018801602052604080822054600160501b900490921681522054600160781b900460ff1615801561170c575064ffffffffff828116600090815260018801602052604080822054600160281b900490921681522054600160781b900460ff16155b156117425764ffffffffff821660009081526001870160205260409020805460ff60781b1916600160781b179055935083611869565b64ffffffffff828116600090815260018801602052604080822054600160281b900490921681522054600160781b900460ff166117f05764ffffffffff80831660008181526001890160205260408082208054600160501b900490941682528120805460ff60781b19908116909155919052815416600160781b1790556117cb86838686611d22565b64ffffffffff8082166000908152600188016020526040902054600160281b90041691505b64ffffffffff808216600090815260018801602052604080822080548685168452828420805460ff600160781b9384900416151590920260ff60781b19928316178155825482169092559054600160281b9004909316825290208054909116905561185d86828686611ef8565b855464ffffffffff1694505b50611301565b50505064ffffffffff166000908152600190910160205260409020805460ff60781b19169055565b60006001600160801b038211156119005760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b606482015260840161022b565b5090565b64ffffffffff828116600090815260018601602052604080822054928416825281205490916001600160801b03600160801b918290048116929190910416808203611963578364ffffffffff168564ffffffffff161092505050610771565b8561198257806001600160801b0316826001600160801b031610611998565b806001600160801b0316826001600160801b0316115b979650505050505050565b60005b845464ffffffffff8581169116148015906119e9575064ffffffffff84811660009081526001870160205260408082205490921681522054600160781b900460ff165b15611c9d5764ffffffffff808516600090815260018701602052604080822054831680835281832054841683529120549091600160281b909104168103611b635764ffffffffff8181166000908152600188016020526040808220548316825280822054600160501b900490921680825291902054909250600160781b900460ff1615611ac85764ffffffffff8082166000818152600189016020526040808220805460ff60781b19908116825587861684528284208054821690558154861684529183208054909216600160781b1790915591905254169450611c97565b64ffffffffff8082166000908152600188016020526040902054600160501b9004811690861603611b0257809450611b0286868686611d22565b5064ffffffffff8085166000908152600187016020526040808220548316808352818320805460ff60781b19808216835590861685529284208054909316600160781b1790925591829052549091611b5e918891168686611ef8565b611c97565b64ffffffffff8181166000908152600188016020526040808220548316825280822054600160281b900490921680825291902054909250600160781b900460ff1615611c015764ffffffffff8082166000818152600189016020526040808220805460ff60781b19908116825587861684528284208054821690558154861684529183208054909216600160781b1790915591905254169450611c97565b64ffffffffff8082166000908152600188016020526040902054600160281b9004811690861603611c3b57809450611c3b86868686611ef8565b5064ffffffffff8085166000908152600187016020526040808220548316808352818320805460ff60781b19808216835590861685529284208054909316600160781b1790925591829052549091611c97918891168686611d22565b506119a6565b5050825464ffffffffff1660009081526001909301602052505060409020805460ff60781b19169055565b60005b64ffffffffff8281166000908152600185016020526040902054600160281b90041615611d1c5764ffffffffff9182166000908152600184016020526040902054600160281b900490911690611ccb565b50919050565b64ffffffffff80841660008181526001870160205260408082208054600160501b80820487168086529385205495909452600160281b909404851692830264ffffffffff60501b1985161790559291909116908015611da85764ffffffffff81811660009081526001890160205260409020805464ffffffffff19169188169190911790555b64ffffffffff83811660009081526001890160205260409020805464ffffffffff19169184169182179055611df157865464ffffffffff191664ffffffffff8416178755611e90565b64ffffffffff8083166000908152600189016020526040902054600160281b9004811690871603611e585764ffffffffff808316600090815260018901602052604090208054918516600160281b0264ffffffffff60281b19909216919091179055611e90565b64ffffffffff808316600090815260018901602052604090208054918516600160501b0264ffffffffff60501b199092169190911790555b64ffffffffff838116600081815260018a016020526040808220805464ffffffffff60281b1916600160281b958c1695860217905592815291909120805464ffffffffff19169091179055611ee9868563ffffffff8816565b50610b9383858763ffffffff16565b64ffffffffff80841660008181526001870160205260408082208054600160281b80820487168086529385205495909452600160501b909404851692830264ffffffffff60281b1985161790559291909116908015611f7e5764ffffffffff81811660009081526001890160205260409020805464ffffffffff19169188169190911790555b64ffffffffff83811660009081526001890160205260409020805464ffffffffff19169184169182179055611fc757865464ffffffffff191664ffffffffff8416178755612066565b64ffffffffff8083166000908152600189016020526040902054600160501b900481169087160361202e5764ffffffffff808316600090815260018901602052604090208054918516600160501b0264ffffffffff60501b19909216919091179055612066565b64ffffffffff808316600090815260018901602052604090208054918516600160281b0264ffffffffff60281b199092169190911790555b64ffffffffff838116600081815260018a016020526040808220805464ffffffffff60501b1916600160501b958c1695860217905592815291909120805464ffffffffff19169091179055611ee9868563ffffffff8816565b8035801515811461106357600080fd5b6000806000606084860312156120e457600080fd5b833592506120f4602085016120bf565b9150604084013564ffffffffff8116811461210e57600080fd5b809150509250925092565b600080600080600060a0868803121561213157600080fd5b85359450612141602087016120bf565b94979496505050506040830135926060810135926080909101359150565b600080600080600060a0868803121561217757600080fd5b85359450612187602087016120bf565b9350612195604087016120bf565b94979396509394606081013594506080013592915050565b6000602082840312156121bf57600080fd5b5035919050565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008261220f57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561222e5761222e6121dc565b500290565b64ffffffffff818116838216019080821115612251576122516121dc565b5092915050565b8181038181111561075b5761075b6121dc565b8082018082111561075b5761075b6121dc56fea2646970667358221220c216f8abba6991012a36af7da4dd0089d4663d84282fefe59eb14099b8e5b75964736f6c63430008100033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061006c5760003560e01c806302ea3f09146100715780635d816f161461009e57806399d50409146100c0578063a47859fc146100f7578063b2041ed91461012d578063b91554941461014e575b600080fd5b61008461007f3660046120cf565b610161565b604080519283526020830191909152015b60405180910390f35b8180156100aa57600080fd5b506100be6100b93660046120cf565b6101bc565b005b6100d36100ce3660046120cf565b610299565b6040805165ffffffffffff9094168452602084019290925290820152606001610095565b81801561010357600080fd5b50610117610112366004612119565b610332565b60405164ffffffffff9091168152602001610095565b61014061013b36600461215f565b6104cc565b604051908152602001610095565b61014061015c3660046121ad565b610654565b6000806000846101715785610176565b856004015b64ffffffffff94909416600090815260028501602090815260408083205460019097019091529020549396600160801b9094046001600160801b03169550929350505050565b6000826101c957836101ce565b836004015b90506101da81836106a8565b65ffffffffffff16156102345760405162461bcd60e51b815260206004820152601e60248201527f4f424c5f434f3a20616c72656164792066756c6c79206578656375746564000060448201526064015b60405180910390fd5b83831561024e57610249828461076184610779565b61025c565b61025c8284610b9d84610779565b5064ffffffffff90911660009081526002918201602052604081208181556001810182905591820155600301805465ffffffffffff191690555050565b600080600080856102aa57866102af565b866004015b90506102bb81866106a8565b93508365ffffffffffff166000036102de57600080600093509350935050610329565b64ffffffffff8516600090815260028201602052604090205492506103256103068287610baa565b65ffffffffffff8616600090815260098a016020526040902054610bf1565b9150505b93509350939050565b600080841161037a5760405162461bcd60e51b81526020600482015260146024820152734f424c5f434f3a2062617365206973207a65726f60601b604482015260640161022b565b6103856064836121f2565b8310156103ce5760405162461bcd60e51b815260206004820152601760248201527613d09317d0d3ce881c1c9a58d9481d1bdbc81cdb585b1b604a1b604482015260640161022b565b6103d9826064612214565b8311156104225760405162461bcd60e51b81526020600482015260176024820152764f424c5f434f3a20707269636520746f6f206c6172676560481b604482015260640161022b565b60008561042f5786610434565b866004015b60038101549091506000906104519064ffffffffff166001612233565b60038301805464ffffffffff191664ffffffffff83169081179091556000908152600284016020526040812088905590915061048c86610c09565b90508888156104ac576104a7848484610c1461076186610c30565b6104be565b6104be848484610f82610b9d86610c30565b509098975050505050505050565b6000806104de84600160601b85610f91565b87549091508690811515871515149064ffffffffff165b64ffffffffff8116156106355764ffffffffff818116600090815260018c0160205260409020546001600160801b03600160801b82041691600160281b909104168461054d5785826001600160801b0316111561055b565b85826001600160801b031610155b1561062a5764ffffffffff808416600090815260018e016020526040902054600160501b900416846105e4578c60020160008264ffffffffff1664ffffffffff168152602001908152602001600020600201548d60020160008664ffffffffff1664ffffffffff168152602001908152602001600020600201546105df9190612258565b610617565b64ffffffffff808216600090815260028f0160205260408082206001908101549388168352912001546106179190612258565b610621908961226b565b9750925061062e565b8092505b50506104f5565b81610647576106448587610bf1565b94505b5050505095945050505050565b805460009064ffffffffff16810361066e57506000919050565b600061067983611040565b64ffffffffff16600090815260019390930160205250506040902054600160801b90046001600160801b031690565b815460009064ffffffffff165b64ffffffffff8316158015906106d957508064ffffffffff168364ffffffffff1614155b156107555764ffffffffff8316600090815260028501602052604090206003015465ffffffffffff161561073257505064ffffffffff8116600090815260028301602052604090206003015465ffffffffffff1661075b565b64ffffffffff9283166000908152600185016020526040902054909216916106b5565b60009150505b92915050565b6000816107716004820185611068565b949350505050565b64ffffffffff83166107c45760405162461bcd60e51b81526020600482015260146024820152735242544c5f523a206b657920697320656d70747960601b604482015260640161022b565b6107ce8484611177565b6108125760405162461bcd60e51b81526020600482015260156024820152741490951317d48e881ad95e481b9bdd08195e1a5cdd605a1b604482015260640161022b565b64ffffffffff838116600090815260018601602052604081205490918291600160281b9004161580610863575064ffffffffff8581166000908152600188016020526040902054600160501b900416155b1561086f5750836108e1565b5064ffffffffff8085166000908152600187016020526040902054600160501b9004165b64ffffffffff8181166000908152600188016020526040902054600160281b900416156108e15764ffffffffff9081166000908152600187016020526040902054600160281b900416610893565b64ffffffffff8181166000908152600188016020526040902054600160281b900416156109315764ffffffffff8082166000908152600188016020526040902054600160281b9004169150610956565b64ffffffffff8082166000908152600188016020526040902054600160501b90041691505b64ffffffffff80821660009081526001880160205260408082205485841683529120805464ffffffffff1916919092169081179091558015610a355764ffffffffff8082166000908152600189016020526040902054600160281b90048116908316036109f95764ffffffffff808216600090815260018901602052604090208054918516600160281b0264ffffffffff60281b19909216919091179055610a4b565b64ffffffffff808216600090815260018901602052604090208054918516600160501b0264ffffffffff60501b19909216919091179055610a4b565b865464ffffffffff191664ffffffffff84161787555b64ffffffffff828116600081815260018a016020526040902054600160781b900460ff161591881614610b4457610a838884896111c2565b64ffffffffff878116600090815260018a0160205260408082208054878516808552838520805464ffffffffff60281b1916600160281b9384900488168402178082559290920486168552838520805464ffffffffff1990811683179091558354835464ffffffffff60501b1916600160501b91829004891682021780855504909616855292842080549095168317909455549152815460ff60781b1916600160781b9182900460ff161515909102179055919591610b44888888886112bc565b8015610b5657610b56888588886112fe565b610b62888388886112bc565b64ffffffffff8416610b935764ffffffffff841660009081526001890160205260409020805464ffffffffff191690555b5050505050505050565b6000816107718185611068565b64ffffffffff8116600090815260018301602090815260408083205460028601909252822054600160801b9091046001600160801b0316906107719082600160601b610f91565b6000610c028383600160601b610f91565b9392505050565b600061075b82611897565b600081610c276004820160018787611904565b95945050505050565b64ffffffffff8516610c7b5760405162461bcd60e51b81526020600482015260146024820152735242544c5f493a206b657920697320656d70747960601b604482015260640161022b565b610c858686611177565b15610cd25760405162461bcd60e51b815260206004820152601a60248201527f5242544c5f493a206b657920616c726561647920657869737473000000000000604482015260640161022b565b6000808760000160009054906101000a900464ffffffffff1690506040518060a00160405280600064ffffffffff168152602001600064ffffffffff168152602001600064ffffffffff168152602001600115158152602001876001600160801b03168152508860010160008964ffffffffff1664ffffffffff16815260200190815260200160002060008201518160000160006101000a81548164ffffffffff021916908364ffffffffff16021790555060208201518160000160056101000a81548164ffffffffff021916908364ffffffffff160217905550604082015181600001600a6101000a81548164ffffffffff021916908364ffffffffff160217905550606082015181600001600f6101000a81548160ff02191690831515021790555060808201518160000160106101000a8154816001600160801b0302191690836001600160801b031602179055509050505b64ffffffffff811615610e9957809150610e468782858863ffffffff16565b15610e725764ffffffffff9081166000908152600189016020526040902054600160281b900416610e27565b64ffffffffff9081166000908152600189016020526040902054600160501b900416610e27565b64ffffffffff878116600090815260018a0160205260409020805464ffffffffff19169184169182179055610ee257875464ffffffffff191664ffffffffff8816178855610f6a565b610ef18783858863ffffffff16565b15610f325764ffffffffff808316600090815260018a01602052604090208054918916600160281b0264ffffffffff60281b19909216919091179055610f6a565b64ffffffffff808316600090815260018a01602052604090208054918916600160501b0264ffffffffff60501b199092169190911790555b610f76888886866112bc565b610b93888886866119a3565b600081610c2781838787611904565b6000808060001985870985870292508281108382030391505080600003610fcb57838281610fc157610fc16121c6565b0492505050610c02565b808411610fd757600080fd5b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b805464ffffffffff16801561106357815461075b90839064ffffffffff16611cc8565b919050565b64ffffffffff808216600090815260028085016020818152604080852060018082015495820154818b01855283882054959094529054600160501b85048816808852838820830154600160281b909604909816808852928720909101549596949592949193919287926110da9161226b565b6110e4919061226b565b905060006110f28989610baa565b64ffffffffff80851660009081526002808d01602052604080832082015493891683529091200154611124919061226b565b61112e919061226b565b9050858214801561113e57508481145b96508661116b5764ffffffffff881660009081526002808b01602052604090912060018101849055018190555b50505050505092915050565b600064ffffffffff821615801590610c025750825464ffffffffff83811691161480610c0257505064ffffffffff908116600090815260019290920160205260409091205416151590565b64ffffffffff80821660009081526001850160205260408082205485841683529120805464ffffffffff1916919092169081179091558061121757835464ffffffffff191664ffffffffff84161784556112b6565b64ffffffffff8082166000908152600186016020526040902054600160281b900481169083160361127e5764ffffffffff808216600090815260018601602052604090208054918516600160281b0264ffffffffff60281b199092169190911790556112b6565b64ffffffffff808216600090815260018601602052604090208054918516600160501b0264ffffffffff60501b199092169190911790555b50505050565b64ffffffffff8316156112b6576112d783828463ffffffff16565b6112b65764ffffffffff9283166000908152600185016020526040902054909216916112bc565b60005b845464ffffffffff85811691161480159061133c575064ffffffffff84166000908152600186016020526040902054600160781b900460ff16155b1561186f5764ffffffffff80851660008181526001880160205260408082205484168083529120549092600160281b9091041690036115f15764ffffffffff818116600090815260018801602052604080822054600160501b900490921680825291902054909250600160781b900460ff16156114205764ffffffffff8083166000908152600188016020526040808220805460ff60781b19908116909155928416825290208054909116600160781b1790556113fb86828686611d22565b64ffffffffff8082166000908152600188016020526040902054600160501b90041691505b64ffffffffff828116600090815260018801602052604080822054600160281b900490921681522054600160781b900460ff16158015611490575064ffffffffff828116600090815260018801602052604080822054600160501b900490921681522054600160781b900460ff16155b156114c65764ffffffffff821660009081526001870160205260409020805460ff60781b1916600160781b179055935083611869565b64ffffffffff828116600090815260018801602052604080822054600160501b900490921681522054600160781b900460ff166115745764ffffffffff80831660008181526001890160205260408082208054600160281b900490941682528120805460ff60781b19908116909155919052815416600160781b17905561154f86838686611ef8565b64ffffffffff8082166000908152600188016020526040902054600160501b90041691505b64ffffffffff808216600090815260018801602052604080822080548685168452828420805460ff600160781b9384900416151590920260ff60781b19928316178155825482169092559054600160501b900490931682529020805490911690556115e186828686611d22565b855464ffffffffff169450611869565b64ffffffffff818116600090815260018801602052604080822054600160281b900490921680825291902054909250600160781b900460ff161561169c5764ffffffffff8083166000908152600188016020526040808220805460ff60781b19908116909155928416825290208054909116600160781b17905561167786828686611ef8565b64ffffffffff8082166000908152600188016020526040902054600160281b90041691505b64ffffffffff828116600090815260018801602052604080822054600160501b900490921681522054600160781b900460ff1615801561170c575064ffffffffff828116600090815260018801602052604080822054600160281b900490921681522054600160781b900460ff16155b156117425764ffffffffff821660009081526001870160205260409020805460ff60781b1916600160781b179055935083611869565b64ffffffffff828116600090815260018801602052604080822054600160281b900490921681522054600160781b900460ff166117f05764ffffffffff80831660008181526001890160205260408082208054600160501b900490941682528120805460ff60781b19908116909155919052815416600160781b1790556117cb86838686611d22565b64ffffffffff8082166000908152600188016020526040902054600160281b90041691505b64ffffffffff808216600090815260018801602052604080822080548685168452828420805460ff600160781b9384900416151590920260ff60781b19928316178155825482169092559054600160281b9004909316825290208054909116905561185d86828686611ef8565b855464ffffffffff1694505b50611301565b50505064ffffffffff166000908152600190910160205260409020805460ff60781b19169055565b60006001600160801b038211156119005760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b606482015260840161022b565b5090565b64ffffffffff828116600090815260018601602052604080822054928416825281205490916001600160801b03600160801b918290048116929190910416808203611963578364ffffffffff168564ffffffffff161092505050610771565b8561198257806001600160801b0316826001600160801b031610611998565b806001600160801b0316826001600160801b0316115b979650505050505050565b60005b845464ffffffffff8581169116148015906119e9575064ffffffffff84811660009081526001870160205260408082205490921681522054600160781b900460ff165b15611c9d5764ffffffffff808516600090815260018701602052604080822054831680835281832054841683529120549091600160281b909104168103611b635764ffffffffff8181166000908152600188016020526040808220548316825280822054600160501b900490921680825291902054909250600160781b900460ff1615611ac85764ffffffffff8082166000818152600189016020526040808220805460ff60781b19908116825587861684528284208054821690558154861684529183208054909216600160781b1790915591905254169450611c97565b64ffffffffff8082166000908152600188016020526040902054600160501b9004811690861603611b0257809450611b0286868686611d22565b5064ffffffffff8085166000908152600187016020526040808220548316808352818320805460ff60781b19808216835590861685529284208054909316600160781b1790925591829052549091611b5e918891168686611ef8565b611c97565b64ffffffffff8181166000908152600188016020526040808220548316825280822054600160281b900490921680825291902054909250600160781b900460ff1615611c015764ffffffffff8082166000818152600189016020526040808220805460ff60781b19908116825587861684528284208054821690558154861684529183208054909216600160781b1790915591905254169450611c97565b64ffffffffff8082166000908152600188016020526040902054600160281b9004811690861603611c3b57809450611c3b86868686611ef8565b5064ffffffffff8085166000908152600187016020526040808220548316808352818320805460ff60781b19808216835590861685529284208054909316600160781b1790925591829052549091611c97918891168686611d22565b506119a6565b5050825464ffffffffff1660009081526001909301602052505060409020805460ff60781b19169055565b60005b64ffffffffff8281166000908152600185016020526040902054600160281b90041615611d1c5764ffffffffff9182166000908152600184016020526040902054600160281b900490911690611ccb565b50919050565b64ffffffffff80841660008181526001870160205260408082208054600160501b80820487168086529385205495909452600160281b909404851692830264ffffffffff60501b1985161790559291909116908015611da85764ffffffffff81811660009081526001890160205260409020805464ffffffffff19169188169190911790555b64ffffffffff83811660009081526001890160205260409020805464ffffffffff19169184169182179055611df157865464ffffffffff191664ffffffffff8416178755611e90565b64ffffffffff8083166000908152600189016020526040902054600160281b9004811690871603611e585764ffffffffff808316600090815260018901602052604090208054918516600160281b0264ffffffffff60281b19909216919091179055611e90565b64ffffffffff808316600090815260018901602052604090208054918516600160501b0264ffffffffff60501b199092169190911790555b64ffffffffff838116600081815260018a016020526040808220805464ffffffffff60281b1916600160281b958c1695860217905592815291909120805464ffffffffff19169091179055611ee9868563ffffffff8816565b50610b9383858763ffffffff16565b64ffffffffff80841660008181526001870160205260408082208054600160281b80820487168086529385205495909452600160501b909404851692830264ffffffffff60281b1985161790559291909116908015611f7e5764ffffffffff81811660009081526001890160205260409020805464ffffffffff19169188169190911790555b64ffffffffff83811660009081526001890160205260409020805464ffffffffff19169184169182179055611fc757865464ffffffffff191664ffffffffff8416178755612066565b64ffffffffff8083166000908152600189016020526040902054600160501b900481169087160361202e5764ffffffffff808316600090815260018901602052604090208054918516600160501b0264ffffffffff60501b19909216919091179055612066565b64ffffffffff808316600090815260018901602052604090208054918516600160281b0264ffffffffff60281b199092169190911790555b64ffffffffff838116600081815260018a016020526040808220805464ffffffffff60501b1916600160501b958c1695860217905592815291909120805464ffffffffff19169091179055611ee9868563ffffffff8816565b8035801515811461106357600080fd5b6000806000606084860312156120e457600080fd5b833592506120f4602085016120bf565b9150604084013564ffffffffff8116811461210e57600080fd5b809150509250925092565b600080600080600060a0868803121561213157600080fd5b85359450612141602087016120bf565b94979496505050506040830135926060810135926080909101359150565b600080600080600060a0868803121561217757600080fd5b85359450612187602087016120bf565b9350612195604087016120bf565b94979396509394606081013594506080013592915050565b6000602082840312156121bf57600080fd5b5035919050565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008261220f57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561222e5761222e6121dc565b500290565b64ffffffffff818116838216019080821115612251576122516121dc565b5092915050565b8181038181111561075b5761075b6121dc565b8082018082111561075b5761075b6121dc56fea2646970667358221220c216f8abba6991012a36af7da4dd0089d4663d84282fefe59eb14099b8e5b75964736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}