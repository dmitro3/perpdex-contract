{
  "address": "0xc93b56fa0B4c62E4b04d62d1A94Fb6F9A7518e99",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbolArg",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "exchangeArg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceFeedBaseArg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceFeedQuoteArg",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "value",
          "type": "uint32"
        }
      ],
      "name": "FundingMaxElapsedSecChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "FundingMaxPremiumRatioChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "fundingRateX96",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "elapsedSec",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "premiumX96",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "markPriceX96",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cumBasePerLiquidityX96",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cumQuotePerLiquidityX96",
          "type": "uint256"
        }
      ],
      "name": "FundingPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "value",
          "type": "uint32"
        }
      ],
      "name": "FundingRolloverSecChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isBid",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "LimitOrderCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isBid",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceX96",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "LimitOrderCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "LiquidityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "fixedFeeRatio",
          "type": "uint24"
        },
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "atrFeeRatio",
          "type": "uint24"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "atrEmaBlocks",
          "type": "uint32"
        }
      ],
      "name": "PoolFeeConfigChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "normalOrderRatio",
          "type": "uint24"
        },
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "liquidationRatio",
          "type": "uint24"
        },
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "emaNormalOrderRatio",
          "type": "uint24"
        },
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "emaLiquidationRatio",
          "type": "uint24"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "emaSec",
          "type": "uint32"
        }
      ],
      "name": "PriceLimitConfigChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isBaseToQuote",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isExactInput",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oppositeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint40",
          "name": "fullLastOrderId",
          "type": "uint40"
        },
        {
          "indexed": false,
          "internalType": "uint40",
          "name": "partialOrderId",
          "type": "uint40"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "basePartial",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quotePartial",
          "type": "uint256"
        }
      ],
      "name": "Swapped",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "baseShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteBalance",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseBalancePerShareX96",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isBid",
          "type": "bool"
        },
        {
          "internalType": "uint40",
          "name": "orderId",
          "type": "uint40"
        }
      ],
      "name": "cancelLimitOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isBid",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceX96",
          "type": "uint256"
        }
      ],
      "name": "createLimitOrder",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "orderId",
          "type": "uint40"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchange",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRatio",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "prevIndexPriceBase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "prevIndexPriceQuote",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "prevIndexPriceTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingMaxElapsedSec",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingMaxPremiumRatio",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingRolloverSec",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAskPriceX96",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBidPriceX96",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCumDeleveragedPerLiquidityX96",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isBid",
          "type": "bool"
        },
        {
          "internalType": "uint40",
          "name": "orderId",
          "type": "uint40"
        }
      ],
      "name": "getLimitOrderExecution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "executionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "executedBase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "executedQuote",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isBid",
          "type": "bool"
        },
        {
          "internalType": "uint40",
          "name": "orderId",
          "type": "uint40"
        }
      ],
      "name": "getLimitOrderInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceX96",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cumBasePerLiquidityX96",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cumQuotePerLiquidityX96",
          "type": "uint256"
        }
      ],
      "name": "getLiquidityDeleveraged",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "getLiquidityValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarkPriceX96",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getShareMarkPriceX96",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isBaseToQuote",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isExactInput",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isLiquidation",
          "type": "bool"
        }
      ],
      "name": "maxSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isBaseToQuote",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isExactInput",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "sharePriceX96",
          "type": "uint256"
        }
      ],
      "name": "maxSwapByPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolFeeConfig",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "fixedFeeRatio",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "atrFeeRatio",
          "type": "uint24"
        },
        {
          "internalType": "uint32",
          "name": "atrEmaBlocks",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolFeeInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "atrX96",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "referenceTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentHighX96",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentLowX96",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cumBasePerLiquidityX96",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cumQuotePerLiquidityX96",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseBalancePerShareX96",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isBaseToQuote",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isExactInput",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLiquidation",
          "type": "bool"
        }
      ],
      "name": "previewSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "oppositeAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeedBase",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeedQuote",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceLimitConfig",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "normalOrderRatio",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "liquidationRatio",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "emaNormalOrderRatio",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "emaLiquidationRatio",
          "type": "uint24"
        },
        {
          "internalType": "uint32",
          "name": "emaSec",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceLimitInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "referencePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "referenceTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "emaPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "value",
          "type": "uint32"
        }
      ],
      "name": "setFundingMaxElapsedSec",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "setFundingMaxPremiumRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "value",
          "type": "uint32"
        }
      ],
      "name": "setFundingRolloverSec",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint24",
              "name": "fixedFeeRatio",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "atrFeeRatio",
              "type": "uint24"
            },
            {
              "internalType": "uint32",
              "name": "atrEmaBlocks",
              "type": "uint32"
            }
          ],
          "internalType": "struct MarketStructs.PoolFeeConfig",
          "name": "value",
          "type": "tuple"
        }
      ],
      "name": "setPoolFeeConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint24",
              "name": "normalOrderRatio",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "liquidationRatio",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "emaNormalOrderRatio",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "emaLiquidationRatio",
              "type": "uint24"
            },
            {
              "internalType": "uint32",
              "name": "emaSec",
              "type": "uint32"
            }
          ],
          "internalType": "struct MarketStructs.PriceLimitConfig",
          "name": "value",
          "type": "tuple"
        }
      ],
      "name": "setPriceLimitConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isBaseToQuote",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isExactInput",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLiquidation",
          "type": "bool"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "oppositeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "basePartial",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quotePartial",
              "type": "uint256"
            },
            {
              "internalType": "uint40",
              "name": "partialOrderId",
              "type": "uint40"
            }
          ],
          "internalType": "struct IPerpdexMarketMinimum.SwapResponse",
          "name": "response",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x43809c473cb1662b10f339795ede39c71feb6d22cd1a6541834196c3874c0551",
  "receipt": {
    "to": null,
    "from": "0x4B78eCe4AA1be3495713199380635537C5fB2326",
    "contractAddress": "0xc93b56fa0B4c62E4b04d62d1A94Fb6F9A7518e99",
    "transactionIndex": 1,
    "gasUsed": "5495229",
    "logsBloom": "0x
    "blockHash": "0x584fdd065e255f96fba79520f8947a741d8a2ef76e9db5610f053cfc4a18f2b3",
    "transactionHash": "0x43809c473cb1662b10f339795ede39c71feb6d22cd1a6541834196c3874c0551",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 14375246,
        "transactionHash": "0x43809c473cb1662b10f339795ede39c71feb6d22cd1a6541834196c3874c0551",
        "address": "0xc93b56fa0B4c62E4b04d62d1A94Fb6F9A7518e99",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004b78ece4aa1be3495713199380635537c5fb2326"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x584fdd065e255f96fba79520f8947a741d8a2ef76e9db5610f053cfc4a18f2b3"
      }
    ],
    "blockNumber": 14375246,
    "cumulativeGasUsed": "5495229",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "USD",
    "0x6bD9e001970838eA992C579BB4b65E3a2AA8a31A",
    "0x0000000000000000000000000000000000000000",
    "0xf485d7478cCeA7ff7FDbE78957E73216CADBaC60"
  ],
  "numDeployments": 2,
  "solcInputHash": "61b0f5571c4803a51ab476ac1676a8de",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbolArg\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"exchangeArg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceFeedBaseArg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceFeedQuoteArg\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"value\",\"type\":\"uint32\"}],\"name\":\"FundingMaxElapsedSecChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"FundingMaxPremiumRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fundingRateX96\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"elapsedSec\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"premiumX96\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"markPriceX96\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cumBasePerLiquidityX96\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cumQuotePerLiquidityX96\",\"type\":\"uint256\"}],\"name\":\"FundingPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"value\",\"type\":\"uint32\"}],\"name\":\"FundingRolloverSecChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"LimitOrderCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceX96\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"LimitOrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"fixedFeeRatio\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"atrFeeRatio\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"atrEmaBlocks\",\"type\":\"uint32\"}],\"name\":\"PoolFeeConfigChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"normalOrderRatio\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"liquidationRatio\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"emaNormalOrderRatio\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"emaLiquidationRatio\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"emaSec\",\"type\":\"uint32\"}],\"name\":\"PriceLimitConfigChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBaseToQuote\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExactInput\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oppositeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"fullLastOrderId\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"partialOrderId\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"basePartial\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quotePartial\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteBalance\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseBalancePerShareX96\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"internalType\":\"uint40\",\"name\":\"orderId\",\"type\":\"uint40\"}],\"name\":\"cancelLimitOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceX96\",\"type\":\"uint256\"}],\"name\":\"createLimitOrder\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"orderId\",\"type\":\"uint40\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRatio\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"prevIndexPriceBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevIndexPriceQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevIndexPriceTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingMaxElapsedSec\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingMaxPremiumRatio\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingRolloverSec\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAskPriceX96\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBidPriceX96\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCumDeleveragedPerLiquidityX96\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"internalType\":\"uint40\",\"name\":\"orderId\",\"type\":\"uint40\"}],\"name\":\"getLimitOrderExecution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executedBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executedQuote\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"internalType\":\"uint40\",\"name\":\"orderId\",\"type\":\"uint40\"}],\"name\":\"getLimitOrderInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceX96\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumBasePerLiquidityX96\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumQuotePerLiquidityX96\",\"type\":\"uint256\"}],\"name\":\"getLiquidityDeleveraged\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"getLiquidityValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarkPriceX96\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getShareMarkPriceX96\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isBaseToQuote\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isExactInput\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isLiquidation\",\"type\":\"bool\"}],\"name\":\"maxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isBaseToQuote\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isExactInput\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"sharePriceX96\",\"type\":\"uint256\"}],\"name\":\"maxSwapByPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFeeConfig\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"fixedFeeRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"atrFeeRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"atrEmaBlocks\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFeeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"atrX96\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referenceTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentHighX96\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentLowX96\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumBasePerLiquidityX96\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumQuotePerLiquidityX96\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseBalancePerShareX96\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isBaseToQuote\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isExactInput\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLiquidation\",\"type\":\"bool\"}],\"name\":\"previewSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"oppositeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeedBase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeedQuote\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceLimitConfig\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"normalOrderRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"liquidationRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"emaNormalOrderRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"emaLiquidationRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"emaSec\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceLimitInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"referencePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referenceTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"emaPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"value\",\"type\":\"uint32\"}],\"name\":\"setFundingMaxElapsedSec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"setFundingMaxPremiumRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"value\",\"type\":\"uint32\"}],\"name\":\"setFundingRolloverSec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint24\",\"name\":\"fixedFeeRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"atrFeeRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"atrEmaBlocks\",\"type\":\"uint32\"}],\"internalType\":\"struct MarketStructs.PoolFeeConfig\",\"name\":\"value\",\"type\":\"tuple\"}],\"name\":\"setPoolFeeConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint24\",\"name\":\"normalOrderRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"liquidationRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"emaNormalOrderRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"emaLiquidationRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"emaSec\",\"type\":\"uint32\"}],\"internalType\":\"struct MarketStructs.PriceLimitConfig\",\"name\":\"value\",\"type\":\"tuple\"}],\"name\":\"setPriceLimitConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isBaseToQuote\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isExactInput\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLiquidation\",\"type\":\"bool\"}],\"name\":\"swap\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"oppositeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basePartial\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quotePartial\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"partialOrderId\",\"type\":\"uint40\"}],\"internalType\":\"struct IPerpdexMarketMinimum.SwapResponse\",\"name\":\"response\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PerpdexMarket.sol\":\"PerpdexMarket\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract Multicall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0x35e30a35e23f856cbcee3558b7efdd83f6017a8f1b419710645143d98e892463\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \\u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248) {\\n        require(value >= type(int248).min && value <= type(int248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return int248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240) {\\n        require(value >= type(int240).min && value <= type(int240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return int240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232) {\\n        require(value >= type(int232).min && value <= type(int232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return int232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224) {\\n        require(value >= type(int224).min && value <= type(int224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return int224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216) {\\n        require(value >= type(int216).min && value <= type(int216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return int216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208) {\\n        require(value >= type(int208).min && value <= type(int208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return int208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200) {\\n        require(value >= type(int200).min && value <= type(int200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return int200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192) {\\n        require(value >= type(int192).min && value <= type(int192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return int192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184) {\\n        require(value >= type(int184).min && value <= type(int184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return int184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176) {\\n        require(value >= type(int176).min && value <= type(int176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return int176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168) {\\n        require(value >= type(int168).min && value <= type(int168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return int168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160) {\\n        require(value >= type(int160).min && value <= type(int160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return int160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152) {\\n        require(value >= type(int152).min && value <= type(int152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return int152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144) {\\n        require(value >= type(int144).min && value <= type(int144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return int144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136) {\\n        require(value >= type(int136).min && value <= type(int136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return int136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120) {\\n        require(value >= type(int120).min && value <= type(int120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return int120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112) {\\n        require(value >= type(int112).min && value <= type(int112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return int112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104) {\\n        require(value >= type(int104).min && value <= type(int104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return int104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96) {\\n        require(value >= type(int96).min && value <= type(int96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return int96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88) {\\n        require(value >= type(int88).min && value <= type(int88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return int88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80) {\\n        require(value >= type(int80).min && value <= type(int80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return int80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72) {\\n        require(value >= type(int72).min && value <= type(int72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return int72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56) {\\n        require(value >= type(int56).min && value <= type(int56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return int56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48) {\\n        require(value >= type(int48).min && value <= type(int48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return int48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40) {\\n        require(value >= type(int40).min && value <= type(int40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return int40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24) {\\n        require(value >= type(int24).min && value <= type(int24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return int24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x02686c31ccb9ee77a299fa5f47327af5271f251a707a0e24f321957166ff0434\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        return a + b;\\n    }\\n}\\n\",\"keccak256\":\"0x62f53f262fabbbc6d8ab49488d8fce36370351aff2b8d3898d499d68995a71c2\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"contracts/PerpdexMarket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { Multicall } from \\\"@openzeppelin/contracts/utils/Multicall.sol\\\";\\nimport { IPerpdexMarket } from \\\"./interfaces/IPerpdexMarket.sol\\\";\\nimport { MarketStructs } from \\\"./lib/MarketStructs.sol\\\";\\nimport { FundingLibrary } from \\\"./lib/FundingLibrary.sol\\\";\\nimport { PoolLibrary } from \\\"./lib/PoolLibrary.sol\\\";\\nimport { PriceLimitLibrary } from \\\"./lib/PriceLimitLibrary.sol\\\";\\nimport { OrderBookLibrary } from \\\"./lib/OrderBookLibrary.sol\\\";\\nimport { PoolFeeLibrary } from \\\"./lib/PoolFeeLibrary.sol\\\";\\n\\ncontract PerpdexMarket is IPerpdexMarket, ReentrancyGuard, Ownable, Multicall {\\n    using Address for address;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n\\n    event PoolFeeConfigChanged(uint24 fixedFeeRatio, uint24 atrFeeRatio, uint32 atrEmaBlocks);\\n    event FundingMaxPremiumRatioChanged(uint24 value);\\n    event FundingMaxElapsedSecChanged(uint32 value);\\n    event FundingRolloverSecChanged(uint32 value);\\n    event PriceLimitConfigChanged(\\n        uint24 normalOrderRatio,\\n        uint24 liquidationRatio,\\n        uint24 emaNormalOrderRatio,\\n        uint24 emaLiquidationRatio,\\n        uint32 emaSec\\n    );\\n\\n    string public symbol;\\n    address public immutable exchange;\\n    address public immutable priceFeedBase;\\n    address public immutable priceFeedQuote;\\n\\n    MarketStructs.PoolInfo public poolInfo;\\n    MarketStructs.FundingInfo public fundingInfo;\\n    MarketStructs.PriceLimitInfo public priceLimitInfo;\\n    MarketStructs.OrderBookInfo internal _orderBookInfo;\\n    MarketStructs.PoolFeeInfo public poolFeeInfo;\\n\\n    uint24 public fundingMaxPremiumRatio = 1e4;\\n    uint32 public fundingMaxElapsedSec = 1 days;\\n    uint32 public fundingRolloverSec = 1 days;\\n    MarketStructs.PriceLimitConfig public priceLimitConfig =\\n        MarketStructs.PriceLimitConfig({\\n            normalOrderRatio: 5e4,\\n            liquidationRatio: 10e4,\\n            emaNormalOrderRatio: 20e4,\\n            emaLiquidationRatio: 25e4,\\n            emaSec: 5 minutes\\n        });\\n    MarketStructs.PoolFeeConfig public poolFeeConfig =\\n        MarketStructs.PoolFeeConfig({ fixedFeeRatio: 0, atrFeeRatio: 4e6, atrEmaBlocks: 16 });\\n\\n    modifier onlyExchange() {\\n        _onlyExchange();\\n        _;\\n    }\\n\\n    constructor(\\n        string memory symbolArg,\\n        address exchangeArg,\\n        address priceFeedBaseArg,\\n        address priceFeedQuoteArg\\n    ) {\\n        require(priceFeedBaseArg == address(0) || priceFeedBaseArg.isContract(), \\\"PM_C: base price feed invalid\\\");\\n        require(priceFeedQuoteArg == address(0) || priceFeedQuoteArg.isContract(), \\\"PM_C: quote price feed invalid\\\");\\n\\n        symbol = symbolArg;\\n        exchange = exchangeArg;\\n        priceFeedBase = priceFeedBaseArg;\\n        priceFeedQuote = priceFeedQuoteArg;\\n\\n        FundingLibrary.initializeFunding(fundingInfo);\\n        PoolLibrary.initializePool(poolInfo);\\n    }\\n\\n    function swap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        bool isLiquidation\\n    ) external onlyExchange nonReentrant returns (SwapResponse memory response) {\\n        (uint256 maxAmount, MarketStructs.PriceLimitInfo memory updated) =\\n            _doMaxSwap(isBaseToQuote, isExactInput, isLiquidation, 0);\\n        require(amount <= maxAmount, \\\"PM_S: too large amount\\\");\\n\\n        uint256 sharePriceBeforeX96 = getShareMarkPriceX96();\\n\\n        OrderBookLibrary.SwapResponse memory swapResponse =\\n            OrderBookLibrary.swap(\\n                _orderBookInfo,\\n                OrderBookLibrary.PreviewSwapParams({\\n                    isBaseToQuote: isBaseToQuote,\\n                    isExactInput: isExactInput,\\n                    amount: amount,\\n                    baseBalancePerShareX96: poolInfo.baseBalancePerShareX96\\n                }),\\n                _poolMaxSwap,\\n                _poolSwap\\n            );\\n        response = SwapResponse({\\n            oppositeAmount: swapResponse.oppositeAmount,\\n            basePartial: swapResponse.basePartial,\\n            quotePartial: swapResponse.quotePartial,\\n            partialOrderId: swapResponse.partialKey\\n        });\\n\\n        PoolFeeLibrary.update(poolFeeInfo, poolFeeConfig.atrEmaBlocks, sharePriceBeforeX96, getShareMarkPriceX96());\\n        PriceLimitLibrary.update(priceLimitInfo, updated);\\n\\n        emit Swapped(\\n            isBaseToQuote,\\n            isExactInput,\\n            amount,\\n            response.oppositeAmount,\\n            swapResponse.fullLastKey,\\n            response.partialOrderId,\\n            response.basePartial,\\n            response.quotePartial\\n        );\\n\\n        _processFunding();\\n    }\\n\\n    function _poolSwap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount\\n    ) private returns (uint256) {\\n        return\\n            PoolLibrary.swap(\\n                poolInfo,\\n                PoolLibrary.SwapParams({\\n                    isBaseToQuote: isBaseToQuote,\\n                    isExactInput: isExactInput,\\n                    amount: amount,\\n                    feeRatio: feeRatio()\\n                })\\n            );\\n    }\\n\\n    function addLiquidity(uint256 baseShare, uint256 quoteBalance)\\n        external\\n        onlyExchange\\n        nonReentrant\\n        returns (\\n            uint256 base,\\n            uint256 quote,\\n            uint256 liquidity\\n        )\\n    {\\n        if (poolInfo.totalLiquidity == 0) {\\n            FundingLibrary.validateInitialLiquidityPrice(priceFeedBase, priceFeedQuote, baseShare, quoteBalance);\\n        }\\n\\n        (base, quote, liquidity) = PoolLibrary.addLiquidity(\\n            poolInfo,\\n            PoolLibrary.AddLiquidityParams({ base: baseShare, quote: quoteBalance })\\n        );\\n        emit LiquidityAdded(base, quote, liquidity);\\n    }\\n\\n    function removeLiquidity(uint256 liquidity)\\n        external\\n        onlyExchange\\n        nonReentrant\\n        returns (uint256 base, uint256 quote)\\n    {\\n        (base, quote) = PoolLibrary.removeLiquidity(\\n            poolInfo,\\n            PoolLibrary.RemoveLiquidityParams({ liquidity: liquidity })\\n        );\\n        emit LiquidityRemoved(base, quote, liquidity);\\n    }\\n\\n    function createLimitOrder(\\n        bool isBid,\\n        uint256 base,\\n        uint256 priceX96\\n    ) external onlyExchange nonReentrant returns (uint40 orderId) {\\n        if (isBid) {\\n            require(priceX96 <= getAskPriceX96(), \\\"PM_CLO: post only bid\\\");\\n        } else {\\n            require(priceX96 >= getBidPriceX96(), \\\"PM_CLO: post only ask\\\");\\n        }\\n        orderId = OrderBookLibrary.createOrder(_orderBookInfo, isBid, base, priceX96);\\n        emit LimitOrderCreated(isBid, base, priceX96, orderId);\\n    }\\n\\n    function cancelLimitOrder(bool isBid, uint40 orderId) external onlyExchange nonReentrant {\\n        OrderBookLibrary.cancelOrder(_orderBookInfo, isBid, orderId);\\n        emit LimitOrderCanceled(isBid, orderId);\\n    }\\n\\n    function setFundingMaxPremiumRatio(uint24 value) external onlyOwner nonReentrant {\\n        require(value <= 1e5, \\\"PM_SFMPR: too large\\\");\\n        fundingMaxPremiumRatio = value;\\n        emit FundingMaxPremiumRatioChanged(value);\\n    }\\n\\n    function setFundingMaxElapsedSec(uint32 value) external onlyOwner nonReentrant {\\n        require(value <= 7 days, \\\"PM_SFMES: too large\\\");\\n        fundingMaxElapsedSec = value;\\n        emit FundingMaxElapsedSecChanged(value);\\n    }\\n\\n    function setFundingRolloverSec(uint32 value) external onlyOwner nonReentrant {\\n        require(value <= 7 days, \\\"PM_SFRS: too large\\\");\\n        require(value >= 1 hours, \\\"PM_SFRS: too small\\\");\\n        fundingRolloverSec = value;\\n        emit FundingRolloverSecChanged(value);\\n    }\\n\\n    function setPriceLimitConfig(MarketStructs.PriceLimitConfig calldata value) external onlyOwner nonReentrant {\\n        require(value.liquidationRatio <= 5e5, \\\"PE_SPLC: too large liquidation\\\");\\n        require(value.normalOrderRatio <= value.liquidationRatio, \\\"PE_SPLC: invalid\\\");\\n        require(value.emaLiquidationRatio < 1e6, \\\"PE_SPLC: ema too large liq\\\");\\n        require(value.emaNormalOrderRatio <= value.emaLiquidationRatio, \\\"PE_SPLC: ema invalid\\\");\\n        priceLimitConfig = value;\\n        emit PriceLimitConfigChanged(\\n            value.normalOrderRatio,\\n            value.liquidationRatio,\\n            value.emaNormalOrderRatio,\\n            value.emaLiquidationRatio,\\n            value.emaSec\\n        );\\n    }\\n\\n    function setPoolFeeConfig(MarketStructs.PoolFeeConfig calldata value) external onlyOwner nonReentrant {\\n        require(value.fixedFeeRatio <= 5e4, \\\"PM_SPFC: fixed fee too large\\\");\\n        require(value.atrEmaBlocks <= 1e4, \\\"PM_SPFC: atr ema blocks too big\\\");\\n        poolFeeConfig = value;\\n        emit PoolFeeConfigChanged(value.fixedFeeRatio, value.atrFeeRatio, value.atrEmaBlocks);\\n    }\\n\\n    function previewSwap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        bool isLiquidation\\n    ) external view returns (uint256 oppositeAmount) {\\n        (uint256 maxAmount, ) = _doMaxSwap(isBaseToQuote, isExactInput, isLiquidation, 0);\\n        require(amount <= maxAmount, \\\"PM_PS: too large amount\\\");\\n\\n        OrderBookLibrary.PreviewSwapResponse memory response =\\n            OrderBookLibrary.previewSwap(\\n                isBaseToQuote ? _orderBookInfo.bid : _orderBookInfo.ask,\\n                OrderBookLibrary.PreviewSwapParams({\\n                    isBaseToQuote: isBaseToQuote,\\n                    isExactInput: isExactInput,\\n                    amount: amount,\\n                    baseBalancePerShareX96: poolInfo.baseBalancePerShareX96\\n                }),\\n                _poolMaxSwap\\n            );\\n\\n        oppositeAmount = PoolLibrary.previewSwap(\\n            poolInfo.base,\\n            poolInfo.quote,\\n            PoolLibrary.SwapParams({\\n                isBaseToQuote: isBaseToQuote,\\n                isExactInput: isExactInput,\\n                amount: response.amountPool,\\n                feeRatio: feeRatio()\\n            })\\n        );\\n        bool isOppositeBase = isBaseToQuote != isExactInput;\\n        if (isOppositeBase) {\\n            oppositeAmount += response.baseFull + response.basePartial;\\n        } else {\\n            oppositeAmount += response.quoteFull + response.quotePartial;\\n        }\\n    }\\n\\n    function _poolMaxSwap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 sharePriceX96\\n    ) private view returns (uint256) {\\n        return\\n            PoolLibrary.maxSwap(poolInfo.base, poolInfo.quote, isBaseToQuote, isExactInput, feeRatio(), sharePriceX96);\\n    }\\n\\n    function maxSwap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        bool isLiquidation\\n    ) external view returns (uint256 amount) {\\n        (amount, ) = _doMaxSwap(isBaseToQuote, isExactInput, isLiquidation, 0);\\n    }\\n\\n    function maxSwapByPrice(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 sharePriceX96\\n    ) external view returns (uint256 amount) {\\n        (amount, ) = _doMaxSwap(isBaseToQuote, isExactInput, false, sharePriceX96);\\n    }\\n\\n    function getShareMarkPriceX96() public view returns (uint256) {\\n        if (poolInfo.base == 0) return 0;\\n        return PoolLibrary.getShareMarkPriceX96(poolInfo.base, poolInfo.quote);\\n    }\\n\\n    function getLiquidityValue(uint256 liquidity) external view returns (uint256, uint256) {\\n        return PoolLibrary.getLiquidityValue(poolInfo, liquidity);\\n    }\\n\\n    function getLiquidityDeleveraged(\\n        uint256 liquidity,\\n        uint256 cumBasePerLiquidityX96,\\n        uint256 cumQuotePerLiquidityX96\\n    ) external view returns (int256, int256) {\\n        return\\n            PoolLibrary.getLiquidityDeleveraged(\\n                poolInfo.cumBasePerLiquidityX96,\\n                poolInfo.cumQuotePerLiquidityX96,\\n                liquidity,\\n                cumBasePerLiquidityX96,\\n                cumQuotePerLiquidityX96\\n            );\\n    }\\n\\n    function getCumDeleveragedPerLiquidityX96() external view returns (uint256, uint256) {\\n        return (poolInfo.cumBasePerLiquidityX96, poolInfo.cumQuotePerLiquidityX96);\\n    }\\n\\n    function baseBalancePerShareX96() external view returns (uint256) {\\n        return poolInfo.baseBalancePerShareX96;\\n    }\\n\\n    function getMarkPriceX96() public view returns (uint256) {\\n        if (poolInfo.base == 0) return 0;\\n        return PoolLibrary.getMarkPriceX96(poolInfo.base, poolInfo.quote, poolInfo.baseBalancePerShareX96);\\n    }\\n\\n    function getAskPriceX96() public view returns (uint256 result) {\\n        result = PoolLibrary.getAskPriceX96(getMarkPriceX96(), feeRatio());\\n        uint256 obPrice = OrderBookLibrary.getBestPriceX96(_orderBookInfo.ask);\\n        if (obPrice != 0 && obPrice < result) {\\n            result = obPrice;\\n        }\\n    }\\n\\n    function getBidPriceX96() public view returns (uint256 result) {\\n        result = PoolLibrary.getBidPriceX96(getMarkPriceX96(), feeRatio());\\n        uint256 obPrice = OrderBookLibrary.getBestPriceX96(_orderBookInfo.bid);\\n        if (obPrice != 0 && obPrice > result) {\\n            result = obPrice;\\n        }\\n    }\\n\\n    function getLimitOrderInfo(bool isBid, uint40 orderId) external view returns (uint256 base, uint256 priceX96) {\\n        return OrderBookLibrary.getOrderInfo(_orderBookInfo, isBid, orderId);\\n    }\\n\\n    function getLimitOrderExecution(bool isBid, uint40 orderId)\\n        external\\n        view\\n        returns (\\n            uint256 executionId,\\n            uint256 executedBase,\\n            uint256 executedQuote\\n        )\\n    {\\n        return OrderBookLibrary.getOrderExecution(_orderBookInfo, isBid, orderId);\\n    }\\n\\n    function _processFunding() internal {\\n        uint256 markPriceX96 = getMarkPriceX96();\\n        (int256 fundingRateX96, uint32 elapsedSec, int256 premiumX96) =\\n            FundingLibrary.processFunding(\\n                fundingInfo,\\n                FundingLibrary.ProcessFundingParams({\\n                    priceFeedBase: priceFeedBase,\\n                    priceFeedQuote: priceFeedQuote,\\n                    markPriceX96: markPriceX96,\\n                    maxPremiumRatio: fundingMaxPremiumRatio,\\n                    maxElapsedSec: fundingMaxElapsedSec,\\n                    rolloverSec: fundingRolloverSec\\n                })\\n            );\\n        if (fundingRateX96 == 0) return;\\n\\n        PoolLibrary.applyFunding(poolInfo, fundingRateX96);\\n        emit FundingPaid(\\n            fundingRateX96,\\n            elapsedSec,\\n            premiumX96,\\n            markPriceX96,\\n            poolInfo.cumBasePerLiquidityX96,\\n            poolInfo.cumQuotePerLiquidityX96\\n        );\\n    }\\n\\n    function _doMaxSwap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        bool isLiquidation,\\n        uint256 sharePriceX96\\n    ) private view returns (uint256 amount, MarketStructs.PriceLimitInfo memory updated) {\\n        if (poolInfo.totalLiquidity == 0) return (0, updated);\\n\\n        if (sharePriceX96 == 0) {\\n            uint256 sharePriceBeforeX96 = getShareMarkPriceX96();\\n            updated = PriceLimitLibrary.updateDry(priceLimitInfo, priceLimitConfig, sharePriceBeforeX96);\\n\\n            sharePriceX96 = PriceLimitLibrary.priceBound(\\n                updated.referencePrice,\\n                updated.emaPrice,\\n                priceLimitConfig,\\n                isLiquidation,\\n                !isBaseToQuote\\n            );\\n        }\\n\\n        amount = PoolLibrary.maxSwap(\\n            poolInfo.base,\\n            poolInfo.quote,\\n            isBaseToQuote,\\n            isExactInput,\\n            feeRatio(),\\n            sharePriceX96\\n        );\\n\\n        amount += OrderBookLibrary.maxSwap(\\n            isBaseToQuote ? _orderBookInfo.bid : _orderBookInfo.ask,\\n            isBaseToQuote,\\n            isExactInput,\\n            sharePriceX96,\\n            poolInfo.baseBalancePerShareX96\\n        );\\n    }\\n\\n    function feeRatio() public view returns (uint24) {\\n        return\\n            Math\\n                .min(priceLimitConfig.normalOrderRatio / 2, PoolFeeLibrary.feeRatio(poolFeeInfo, poolFeeConfig))\\n                .toUint24();\\n    }\\n\\n    // to reduce contract size\\n    function _onlyExchange() private view {\\n        require(exchange == msg.sender, \\\"PM_OE: caller is not exchange\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x06e3329dcc1c295626fce0e6c2e700814b50b50b984aec8b732fa2aacd663dc2\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IPerpdexMarket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { IPerpdexMarketMinimum } from \\\"./IPerpdexMarketMinimum.sol\\\";\\n\\ninterface IPerpdexMarket is IPerpdexMarketMinimum {\\n    event FundingPaid(\\n        int256 fundingRateX96,\\n        uint32 elapsedSec,\\n        int256 premiumX96,\\n        uint256 markPriceX96,\\n        uint256 cumBasePerLiquidityX96,\\n        uint256 cumQuotePerLiquidityX96\\n    );\\n    event LiquidityAdded(uint256 base, uint256 quote, uint256 liquidity);\\n    event LiquidityRemoved(uint256 base, uint256 quote, uint256 liquidity);\\n    event Swapped(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        uint256 oppositeAmount,\\n        uint40 fullLastOrderId,\\n        uint40 partialOrderId,\\n        uint256 basePartial,\\n        uint256 quotePartial\\n    );\\n    event LimitOrderCreated(bool isBid, uint256 base, uint256 priceX96, uint256 orderId);\\n    event LimitOrderCanceled(bool isBid, uint256 orderId);\\n\\n    // getters\\n\\n    function symbol() external view returns (string memory);\\n\\n    function getMarkPriceX96() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe2ebd671476294806d097622392577444d20d0268e03877958034fc240d136c5\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IPerpdexMarketMinimum.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\ninterface IPerpdexMarketMinimum {\\n    struct SwapResponse {\\n        uint256 oppositeAmount;\\n        uint256 basePartial;\\n        uint256 quotePartial;\\n        uint40 partialOrderId;\\n    }\\n\\n    function swap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        bool isLiquidation\\n    ) external returns (SwapResponse memory response);\\n\\n    function addLiquidity(uint256 baseShare, uint256 quoteBalance)\\n        external\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function removeLiquidity(uint256 liquidity) external returns (uint256 baseShare, uint256 quoteBalance);\\n\\n    function createLimitOrder(\\n        bool isBid,\\n        uint256 baseShare,\\n        uint256 priceX96\\n    ) external returns (uint40 orderId);\\n\\n    function cancelLimitOrder(bool isBid, uint40 orderId) external;\\n\\n    // getters\\n\\n    function previewSwap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        bool isLiquidation\\n    ) external view returns (uint256);\\n\\n    function maxSwap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        bool isLiquidation\\n    ) external view returns (uint256 amount);\\n\\n    function exchange() external view returns (address);\\n\\n    function getShareMarkPriceX96() external view returns (uint256);\\n\\n    function getLiquidityValue(uint256 liquidity) external view returns (uint256 baseShare, uint256 quoteBalance);\\n\\n    function getLiquidityDeleveraged(\\n        uint256 liquidity,\\n        uint256 cumBasePerLiquidityX96,\\n        uint256 cumQuotePerLiquidityX96\\n    ) external view returns (int256, int256);\\n\\n    function getCumDeleveragedPerLiquidityX96() external view returns (uint256, uint256);\\n\\n    function baseBalancePerShareX96() external view returns (uint256);\\n\\n    function getLimitOrderInfo(bool isBid, uint40 orderId) external view returns (uint256 base, uint256 priceX96);\\n\\n    function getLimitOrderExecution(bool isBid, uint40 orderId)\\n        external\\n        view\\n        returns (\\n            uint256 executionId,\\n            uint256 executedBase,\\n            uint256 executedQuote\\n        );\\n}\\n\",\"keccak256\":\"0x17237b0bcb194a663d7e7e3a0d93d6a44877bcdb2cc93fbccc5955089df82b49\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IPerpdexPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\n\\ninterface IPerpdexPriceFeed {\\n    function decimals() external view returns (uint8);\\n\\n    /// @dev Returns the index price of the token.\\n    function getPrice() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x250f4b4f299e0257a3d99af442048c2bb9a2c61774ddabff11a2bae3d9553c15\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/FundingLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { MarketStructs } from \\\"./MarketStructs.sol\\\";\\nimport { IPerpdexPriceFeed } from \\\"../interfaces/IPerpdexPriceFeed.sol\\\";\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\n\\nlibrary FundingLibrary {\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    struct ProcessFundingParams {\\n        address priceFeedBase;\\n        address priceFeedQuote;\\n        uint256 markPriceX96;\\n        uint24 maxPremiumRatio;\\n        uint32 maxElapsedSec;\\n        uint32 rolloverSec;\\n    }\\n\\n    uint8 public constant MAX_DECIMALS = 77; // 10^MAX_DECIMALS < 2^256\\n\\n    function initializeFunding(MarketStructs.FundingInfo storage fundingInfo) internal {\\n        fundingInfo.prevIndexPriceTimestamp = block.timestamp;\\n    }\\n\\n    // must not revert even if priceFeed is malicious\\n    function processFunding(MarketStructs.FundingInfo storage fundingInfo, ProcessFundingParams memory params)\\n        internal\\n        returns (\\n            int256 fundingRateX96,\\n            uint32 elapsedSec,\\n            int256 premiumX96\\n        )\\n    {\\n        uint256 currentTimestamp = block.timestamp;\\n        uint256 elapsedSec256 = currentTimestamp.sub(fundingInfo.prevIndexPriceTimestamp);\\n        if (elapsedSec256 == 0) return (0, 0, 0);\\n\\n        uint256 indexPriceBase = _getIndexPriceSafe(params.priceFeedBase);\\n        uint256 indexPriceQuote = _getIndexPriceSafe(params.priceFeedQuote);\\n        uint8 decimalsBase = _getDecimalsSafe(params.priceFeedBase);\\n        uint8 decimalsQuote = _getDecimalsSafe(params.priceFeedQuote);\\n        if (\\n            (fundingInfo.prevIndexPriceBase == indexPriceBase && fundingInfo.prevIndexPriceQuote == indexPriceQuote) ||\\n            indexPriceBase == 0 ||\\n            indexPriceQuote == 0 ||\\n            decimalsBase > MAX_DECIMALS ||\\n            decimalsQuote > MAX_DECIMALS\\n        ) {\\n            return (0, 0, 0);\\n        }\\n\\n        elapsedSec256 = Math.min(elapsedSec256, params.maxElapsedSec);\\n        elapsedSec = elapsedSec256.toUint32();\\n\\n        premiumX96 = _calcPremiumX96(decimalsBase, decimalsQuote, indexPriceBase, indexPriceQuote, params.markPriceX96);\\n\\n        int256 maxPremiumX96 = FixedPoint96.Q96.mulRatio(params.maxPremiumRatio).toInt256();\\n        premiumX96 = (-maxPremiumX96).max(maxPremiumX96.min(premiumX96));\\n        fundingRateX96 = premiumX96.mulDiv(elapsedSec256.toInt256(), params.rolloverSec);\\n\\n        fundingInfo.prevIndexPriceBase = indexPriceBase;\\n        fundingInfo.prevIndexPriceQuote = indexPriceQuote;\\n        fundingInfo.prevIndexPriceTimestamp = currentTimestamp;\\n    }\\n\\n    function validateInitialLiquidityPrice(\\n        address priceFeedBase,\\n        address priceFeedQuote,\\n        uint256 base,\\n        uint256 quote\\n    ) internal view {\\n        uint256 indexPriceBase = _getIndexPriceSafe(priceFeedBase);\\n        uint256 indexPriceQuote = _getIndexPriceSafe(priceFeedQuote);\\n        require(indexPriceBase > 0, \\\"FL_VILP: invalid base price\\\");\\n        require(indexPriceQuote > 0, \\\"FL_VILP: invalid quote price\\\");\\n        uint8 decimalsBase = _getDecimalsSafe(priceFeedBase);\\n        uint8 decimalsQuote = _getDecimalsSafe(priceFeedQuote);\\n        require(decimalsBase <= MAX_DECIMALS, \\\"FL_VILP: invalid base decimals\\\");\\n        require(decimalsQuote <= MAX_DECIMALS, \\\"FL_VILP: invalid quote decimals\\\");\\n\\n        uint256 markPriceX96 = Math.mulDiv(quote, FixedPoint96.Q96, base);\\n        int256 premiumX96 = _calcPremiumX96(decimalsBase, decimalsQuote, indexPriceBase, indexPriceQuote, markPriceX96);\\n\\n        require(premiumX96.abs() <= FixedPoint96.Q96.mulRatio(1e5), \\\"FL_VILP: too far from index\\\");\\n    }\\n\\n    function _getIndexPriceSafe(address priceFeed) private view returns (uint256) {\\n        if (priceFeed == address(0)) return 1; // indicate valid\\n\\n        bytes memory payload = abi.encodeWithSignature(\\\"getPrice()\\\");\\n        (bool success, bytes memory data) = address(priceFeed).staticcall(payload);\\n        if (!success) return 0; // invalid\\n\\n        return abi.decode(data, (uint256));\\n    }\\n\\n    function _getDecimalsSafe(address priceFeed) private view returns (uint8) {\\n        if (priceFeed == address(0)) return 0; // indicate valid\\n\\n        bytes memory payload = abi.encodeWithSignature(\\\"decimals()\\\");\\n        (bool success, bytes memory data) = address(priceFeed).staticcall(payload);\\n        if (!success) return 255; // invalid\\n\\n        return abi.decode(data, (uint8));\\n    }\\n\\n    // TODO: must not revert\\n    function _calcPremiumX96(\\n        uint8 decimalsBase,\\n        uint8 decimalsQuote,\\n        uint256 indexPriceBase,\\n        uint256 indexPriceQuote,\\n        uint256 markPriceX96\\n    ) private pure returns (int256 premiumX96) {\\n        uint256 priceRatioX96 = markPriceX96;\\n\\n        if (decimalsBase != 0 || indexPriceBase != 1) {\\n            priceRatioX96 = Math.mulDiv(priceRatioX96, 10**decimalsBase, indexPriceBase);\\n        }\\n        if (decimalsQuote != 0 || indexPriceQuote != 1) {\\n            priceRatioX96 = Math.mulDiv(priceRatioX96, indexPriceQuote, 10**decimalsQuote);\\n        }\\n\\n        premiumX96 = priceRatioX96.toInt256().sub(FixedPoint96.Q96.toInt256());\\n    }\\n}\\n\",\"keccak256\":\"0x76940c5bae0ea0c2765352c6e6a6632ec2b6516ac594c7db3061547c4705db1e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/MarketStructs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\n\\nimport {\\n    BokkyPooBahsRedBlackTreeLibrary as RBTreeLibrary\\n} from \\\"../../deps/BokkyPooBahsRedBlackTreeLibrary/contracts/BokkyPooBahsRedBlackTreeLibrary.sol\\\";\\n\\nlibrary MarketStructs {\\n    struct FundingInfo {\\n        uint256 prevIndexPriceBase;\\n        uint256 prevIndexPriceQuote;\\n        uint256 prevIndexPriceTimestamp;\\n    }\\n\\n    struct PoolInfo {\\n        uint256 base;\\n        uint256 quote;\\n        uint256 totalLiquidity;\\n        uint256 cumBasePerLiquidityX96;\\n        uint256 cumQuotePerLiquidityX96;\\n        uint256 baseBalancePerShareX96;\\n    }\\n\\n    struct PriceLimitInfo {\\n        uint256 referencePrice;\\n        uint256 referenceTimestamp;\\n        uint256 emaPrice;\\n    }\\n\\n    struct PriceLimitConfig {\\n        uint24 normalOrderRatio;\\n        uint24 liquidationRatio;\\n        uint24 emaNormalOrderRatio;\\n        uint24 emaLiquidationRatio;\\n        uint32 emaSec;\\n    }\\n\\n    struct OrderInfo {\\n        uint256 base;\\n        uint256 baseSum;\\n        uint256 quoteSum;\\n        uint48 executionId;\\n    }\\n\\n    struct OrderBookSideInfo {\\n        RBTreeLibrary.Tree tree;\\n        mapping(uint40 => OrderInfo) orderInfos;\\n        uint40 seqKey;\\n    }\\n\\n    struct ExecutionInfo {\\n        uint256 baseBalancePerShareX96;\\n    }\\n\\n    struct OrderBookInfo {\\n        OrderBookSideInfo ask;\\n        OrderBookSideInfo bid;\\n        uint48 seqExecutionId;\\n        mapping(uint48 => ExecutionInfo) executionInfos;\\n    }\\n\\n    struct PoolFeeInfo {\\n        uint256 atrX96;\\n        uint256 referenceTimestamp;\\n        uint256 currentHighX96;\\n        uint256 currentLowX96;\\n    }\\n\\n    struct PoolFeeConfig {\\n        uint24 fixedFeeRatio;\\n        uint24 atrFeeRatio;\\n        uint32 atrEmaBlocks;\\n    }\\n}\\n\",\"keccak256\":\"0x4f61bbca42483dc52f3451fd3bbdbeeabf38a0d95f0063207db814789a56a6bd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/OrderBookLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { MarketStructs } from \\\"./MarketStructs.sol\\\";\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport {\\n    BokkyPooBahsRedBlackTreeLibrary as RBTreeLibrary\\n} from \\\"../../deps/BokkyPooBahsRedBlackTreeLibrary/contracts/BokkyPooBahsRedBlackTreeLibrary.sol\\\";\\n\\nlibrary OrderBookLibrary {\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n    using RBTreeLibrary for RBTreeLibrary.Tree;\\n\\n    struct SwapResponse {\\n        uint256 oppositeAmount;\\n        uint256 basePartial;\\n        uint256 quotePartial;\\n        uint40 partialKey;\\n        uint40 fullLastKey;\\n    }\\n\\n    // to avoid stack too deep\\n    struct PreviewSwapParams {\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n        uint256 amount;\\n        uint256 baseBalancePerShareX96;\\n    }\\n\\n    // to avoid stack too deep\\n    struct PreviewSwapLocalVars {\\n        uint128 priceX96;\\n        uint256 sharePriceX96;\\n        uint256 amountPool;\\n        uint40 left;\\n        uint40 right;\\n        uint256 leftBaseSum;\\n        uint256 leftQuoteSum;\\n        uint256 rightBaseSum;\\n        uint256 rightQuoteSum;\\n    }\\n\\n    struct PreviewSwapResponse {\\n        uint256 amountPool;\\n        uint256 baseFull;\\n        uint256 quoteFull;\\n        uint256 basePartial;\\n        uint256 quotePartial;\\n        uint40 fullLastKey;\\n        uint40 partialKey;\\n    }\\n\\n    function createOrder(\\n        MarketStructs.OrderBookInfo storage orderBookInfo,\\n        bool isBid,\\n        uint256 base,\\n        uint256 priceX96\\n    ) public returns (uint40) {\\n        require(base > 0, \\\"OBL_CO: base is zero\\\");\\n        require(priceX96 > 0, \\\"OBL_CO: price is zero\\\");\\n        MarketStructs.OrderBookSideInfo storage info = isBid ? orderBookInfo.bid : orderBookInfo.ask;\\n        uint40 key = info.seqKey + 1;\\n        info.seqKey = key;\\n        info.orderInfos[key].base = base; // before insert for aggregation\\n        uint128 userData = _makeUserData(priceX96);\\n        uint256 slot = _getSlot(orderBookInfo);\\n        if (isBid) {\\n            info.tree.insert(key, userData, _lessThanBid, _aggregateBid, slot);\\n        } else {\\n            info.tree.insert(key, userData, _lessThanAsk, _aggregateAsk, slot);\\n        }\\n        return key;\\n    }\\n\\n    function cancelOrder(\\n        MarketStructs.OrderBookInfo storage orderBookInfo,\\n        bool isBid,\\n        uint40 key\\n    ) public {\\n        MarketStructs.OrderBookSideInfo storage info = isBid ? orderBookInfo.bid : orderBookInfo.ask;\\n        require(_isFullyExecuted(info, key) == 0, \\\"OBL_CO: already fully executed\\\");\\n        uint256 slot = _getSlot(orderBookInfo);\\n        if (isBid) {\\n            info.tree.remove(key, _aggregateBid, slot);\\n        } else {\\n            info.tree.remove(key, _aggregateAsk, slot);\\n        }\\n        delete info.orderInfos[key];\\n    }\\n\\n    function getOrderInfo(\\n        MarketStructs.OrderBookInfo storage orderBookInfo,\\n        bool isBid,\\n        uint40 key\\n    ) public view returns (uint256 base, uint256 priceX96) {\\n        MarketStructs.OrderBookSideInfo storage info = isBid ? orderBookInfo.bid : orderBookInfo.ask;\\n        base = info.orderInfos[key].base;\\n        priceX96 = _userDataToPriceX96(info.tree.nodes[key].userData);\\n    }\\n\\n    function getOrderExecution(\\n        MarketStructs.OrderBookInfo storage orderBookInfo,\\n        bool isBid,\\n        uint40 key\\n    )\\n        public\\n        view\\n        returns (\\n            uint48 executionId,\\n            uint256 executedBase,\\n            uint256 executedQuote\\n        )\\n    {\\n        MarketStructs.OrderBookSideInfo storage info = isBid ? orderBookInfo.bid : orderBookInfo.ask;\\n        executionId = _isFullyExecuted(info, key);\\n        if (executionId == 0) return (0, 0, 0);\\n\\n        executedBase = info.orderInfos[key].base;\\n        // rounding error occurs, but it is negligible.\\n\\n        executedQuote = _quoteToBalance(\\n            _getQuote(info, key),\\n            orderBookInfo.executionInfos[executionId].baseBalancePerShareX96\\n        );\\n    }\\n\\n    function getBestPriceX96(MarketStructs.OrderBookSideInfo storage info) external view returns (uint256) {\\n        if (info.tree.root == 0) return 0;\\n        uint40 key = info.tree.first();\\n        return _userDataToPriceX96(info.tree.nodes[key].userData);\\n    }\\n\\n    function swap(\\n        MarketStructs.OrderBookInfo storage orderBookInfo,\\n        PreviewSwapParams memory params,\\n        function(bool, bool, uint256) view returns (uint256) maxSwapArg,\\n        function(bool, bool, uint256) returns (uint256) swapArg\\n    ) internal returns (SwapResponse memory swapResponse) {\\n        MarketStructs.OrderBookSideInfo storage info = params.isBaseToQuote ? orderBookInfo.bid : orderBookInfo.ask;\\n        PreviewSwapResponse memory response = previewSwap(info, params, maxSwapArg);\\n\\n        if (response.amountPool > 0) {\\n            swapResponse.oppositeAmount += swapArg(params.isBaseToQuote, params.isExactInput, response.amountPool);\\n        }\\n\\n        bool isBase = params.isBaseToQuote == params.isExactInput;\\n        uint256 slot = _getSlot(orderBookInfo);\\n\\n        if (response.fullLastKey != 0) {\\n            orderBookInfo.seqExecutionId += 1;\\n            orderBookInfo.executionInfos[orderBookInfo.seqExecutionId] = MarketStructs.ExecutionInfo({\\n                baseBalancePerShareX96: params.baseBalancePerShareX96\\n            });\\n            if (params.isBaseToQuote) {\\n                info.tree.removeLeft(response.fullLastKey, _lessThanBid, _aggregateBid, _subtreeRemovedBid, slot);\\n            } else {\\n                info.tree.removeLeft(response.fullLastKey, _lessThanAsk, _aggregateAsk, _subtreeRemovedAsk, slot);\\n            }\\n\\n            swapResponse.oppositeAmount += isBase ? response.quoteFull : response.baseFull;\\n            swapResponse.fullLastKey = response.fullLastKey;\\n        } else {\\n            require(response.baseFull == 0, \\\"never occur\\\");\\n            require(response.quoteFull == 0, \\\"never occur\\\");\\n        }\\n\\n        if (response.partialKey != 0) {\\n            info.orderInfos[response.partialKey].base -= response.basePartial;\\n            require(info.orderInfos[response.partialKey].base > 0, \\\"never occur\\\");\\n\\n            info.tree.aggregateRecursively(\\n                response.partialKey,\\n                params.isBaseToQuote ? _aggregateBid : _aggregateAsk,\\n                slot\\n            );\\n\\n            swapResponse.oppositeAmount += isBase ? response.quotePartial : response.basePartial;\\n            swapResponse.basePartial = response.basePartial;\\n            swapResponse.quotePartial = response.quotePartial;\\n            swapResponse.partialKey = response.partialKey;\\n        } else {\\n            require(response.basePartial == 0, \\\"never occur\\\");\\n            require(response.quotePartial == 0, \\\"never occur\\\");\\n        }\\n    }\\n\\n    function previewSwap(\\n        MarketStructs.OrderBookSideInfo storage info,\\n        PreviewSwapParams memory params,\\n        function(bool, bool, uint256) view returns (uint256) maxSwapArg\\n    ) internal view returns (PreviewSwapResponse memory response) {\\n        bool isBase = params.isBaseToQuote == params.isExactInput;\\n        uint40 key = info.tree.root;\\n        uint256 baseSum;\\n        uint256 quoteSum;\\n\\n        while (key != 0) {\\n            PreviewSwapLocalVars memory vars;\\n            vars.priceX96 = _userDataToPriceX96(info.tree.nodes[key].userData);\\n            vars.sharePriceX96 = Math.mulDiv(vars.priceX96, params.baseBalancePerShareX96, FixedPoint96.Q96);\\n            vars.amountPool = maxSwapArg(params.isBaseToQuote, params.isExactInput, vars.sharePriceX96);\\n\\n            // key - right is more gas efficient than left + key\\n            vars.left = info.tree.nodes[key].left;\\n            vars.right = info.tree.nodes[key].right;\\n            vars.leftBaseSum = baseSum + info.orderInfos[vars.left].baseSum;\\n            vars.leftQuoteSum = quoteSum + info.orderInfos[vars.left].quoteSum;\\n\\n            uint256 rangeLeft =\\n                (isBase ? vars.leftBaseSum : _quoteToBalance(vars.leftQuoteSum, params.baseBalancePerShareX96)) +\\n                    vars.amountPool;\\n            if (params.amount <= rangeLeft) {\\n                if (vars.left == 0) {\\n                    response.fullLastKey = info.tree.prev(key);\\n                }\\n                key = vars.left;\\n                continue;\\n            }\\n\\n            vars.rightBaseSum = baseSum + (info.orderInfos[key].baseSum - info.orderInfos[vars.right].baseSum);\\n            vars.rightQuoteSum = quoteSum + (info.orderInfos[key].quoteSum - info.orderInfos[vars.right].quoteSum);\\n\\n            uint256 rangeRight =\\n                (isBase ? vars.rightBaseSum : _quoteToBalance(vars.rightQuoteSum, params.baseBalancePerShareX96)) +\\n                    vars.amountPool;\\n            if (params.amount < rangeRight) {\\n                response.amountPool = vars.amountPool;\\n                response.baseFull = vars.leftBaseSum;\\n                response.quoteFull = _quoteToBalance(vars.leftQuoteSum, params.baseBalancePerShareX96);\\n                if (isBase) {\\n                    response.basePartial = params.amount - rangeLeft; // < info.orderInfos[key].base\\n                    response.quotePartial = Math.mulDiv(response.basePartial, vars.sharePriceX96, FixedPoint96.Q96);\\n                } else {\\n                    response.quotePartial = params.amount - rangeLeft;\\n                    response.basePartial = Math.mulDiv(response.quotePartial, FixedPoint96.Q96, vars.sharePriceX96);\\n                    // round to fit order size\\n                    response.basePartial = Math.min(response.basePartial, info.orderInfos[key].base - 1);\\n                }\\n                response.fullLastKey = info.tree.prev(key);\\n                response.partialKey = key;\\n                return response;\\n            }\\n\\n            {\\n                baseSum = vars.rightBaseSum;\\n                quoteSum = vars.rightQuoteSum;\\n                if (vars.right == 0) {\\n                    response.fullLastKey = key;\\n                }\\n                key = vars.right;\\n            }\\n        }\\n\\n        response.baseFull = baseSum;\\n        response.quoteFull = _quoteToBalance(quoteSum, params.baseBalancePerShareX96);\\n        response.amountPool = params.amount - (isBase ? response.baseFull : response.quoteFull);\\n    }\\n\\n    function maxSwap(\\n        MarketStructs.OrderBookSideInfo storage info,\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 sharePriceBoundX96,\\n        uint256 baseBalancePerShareX96\\n    ) public view returns (uint256 amount) {\\n        uint256 priceBoundX96 = Math.mulDiv(sharePriceBoundX96, FixedPoint96.Q96, baseBalancePerShareX96);\\n        bool isBid = isBaseToQuote;\\n        bool isBase = isBaseToQuote == isExactInput;\\n        uint40 key = info.tree.root;\\n\\n        while (key != 0) {\\n            uint128 price = _userDataToPriceX96(info.tree.nodes[key].userData);\\n            uint40 left = info.tree.nodes[key].left;\\n            if (isBid ? price >= priceBoundX96 : price <= priceBoundX96) {\\n                // key - right is more gas efficient than left + key\\n                uint40 right = info.tree.nodes[key].right;\\n                amount += isBase\\n                    ? info.orderInfos[key].baseSum - info.orderInfos[right].baseSum\\n                    : info.orderInfos[key].quoteSum - info.orderInfos[right].quoteSum;\\n                key = right;\\n            } else {\\n                key = left;\\n            }\\n        }\\n\\n        if (!isBase) {\\n            amount = _quoteToBalance(amount, baseBalancePerShareX96);\\n        }\\n    }\\n\\n    function _isFullyExecuted(MarketStructs.OrderBookSideInfo storage info, uint40 key) private view returns (uint48) {\\n        uint40 root = info.tree.root;\\n        while (key != 0 && key != root) {\\n            if (info.orderInfos[key].executionId != 0) {\\n                return info.orderInfos[key].executionId;\\n            }\\n            key = info.tree.nodes[key].parent;\\n        }\\n        return 0;\\n    }\\n\\n    function _makeUserData(uint256 priceX96) private pure returns (uint128) {\\n        return priceX96.toUint128();\\n    }\\n\\n    function _userDataToPriceX96(uint128 userData) private pure returns (uint128) {\\n        return userData;\\n    }\\n\\n    function _lessThan(\\n        RBTreeLibrary.Tree storage tree,\\n        bool isBid,\\n        uint40 key0,\\n        uint40 key1\\n    ) private view returns (bool) {\\n        uint128 price0 = _userDataToPriceX96(tree.nodes[key0].userData);\\n        uint128 price1 = _userDataToPriceX96(tree.nodes[key1].userData);\\n        if (price0 == price1) {\\n            return key0 < key1; // time priority\\n        }\\n        // price priority\\n        return isBid ? price0 > price1 : price0 < price1;\\n    }\\n\\n    function _lessThanAsk(\\n        uint40 key0,\\n        uint40 key1,\\n        uint256 slot\\n    ) private view returns (bool) {\\n        MarketStructs.OrderBookInfo storage info = _getOrderBookInfoFromSlot(slot);\\n        return _lessThan(info.ask.tree, false, key0, key1);\\n    }\\n\\n    function _lessThanBid(\\n        uint40 key0,\\n        uint40 key1,\\n        uint256 slot\\n    ) private view returns (bool) {\\n        MarketStructs.OrderBookInfo storage info = _getOrderBookInfoFromSlot(slot);\\n        return _lessThan(info.bid.tree, true, key0, key1);\\n    }\\n\\n    function _aggregate(MarketStructs.OrderBookSideInfo storage info, uint40 key) private returns (bool stop) {\\n        uint256 prevBaseSum = info.orderInfos[key].baseSum;\\n        uint256 prevQuoteSum = info.orderInfos[key].quoteSum;\\n        uint40 left = info.tree.nodes[key].left;\\n        uint40 right = info.tree.nodes[key].right;\\n\\n        uint256 baseSum = info.orderInfos[left].baseSum + info.orderInfos[right].baseSum + info.orderInfos[key].base;\\n        uint256 quoteSum = info.orderInfos[left].quoteSum + info.orderInfos[right].quoteSum + _getQuote(info, key);\\n\\n        stop = baseSum == prevBaseSum && quoteSum == prevQuoteSum;\\n        if (!stop) {\\n            info.orderInfos[key].baseSum = baseSum;\\n            info.orderInfos[key].quoteSum = quoteSum;\\n        }\\n    }\\n\\n    function _aggregateAsk(uint40 key, uint256 slot) private returns (bool stop) {\\n        MarketStructs.OrderBookInfo storage info = _getOrderBookInfoFromSlot(slot);\\n        return _aggregate(info.ask, key);\\n    }\\n\\n    function _aggregateBid(uint40 key, uint256 slot) private returns (bool stop) {\\n        MarketStructs.OrderBookInfo storage info = _getOrderBookInfoFromSlot(slot);\\n        return _aggregate(info.bid, key);\\n    }\\n\\n    function _subtreeRemoved(\\n        MarketStructs.OrderBookSideInfo storage info,\\n        MarketStructs.OrderBookInfo storage orderBookInfo,\\n        uint40 key\\n    ) private {\\n        info.orderInfos[key].executionId = orderBookInfo.seqExecutionId;\\n    }\\n\\n    function _subtreeRemovedAsk(uint40 key, uint256 slot) private {\\n        MarketStructs.OrderBookInfo storage info = _getOrderBookInfoFromSlot(slot);\\n        return _subtreeRemoved(info.ask, info, key);\\n    }\\n\\n    function _subtreeRemovedBid(uint40 key, uint256 slot) private {\\n        MarketStructs.OrderBookInfo storage info = _getOrderBookInfoFromSlot(slot);\\n        return _subtreeRemoved(info.bid, info, key);\\n    }\\n\\n    // returns quoteBalance / baseBalancePerShare\\n    function _getQuote(MarketStructs.OrderBookSideInfo storage info, uint40 key) private view returns (uint256) {\\n        uint128 priceX96 = _userDataToPriceX96(info.tree.nodes[key].userData);\\n        return Math.mulDiv(info.orderInfos[key].base, priceX96, FixedPoint96.Q96);\\n    }\\n\\n    function _quoteToBalance(uint256 quote, uint256 baseBalancePerShareX96) private pure returns (uint256) {\\n        return Math.mulDiv(quote, baseBalancePerShareX96, FixedPoint96.Q96);\\n    }\\n\\n    function _getSlot(MarketStructs.OrderBookInfo storage d) private pure returns (uint256 slot) {\\n        assembly {\\n            slot := d.slot\\n        }\\n    }\\n\\n    function _getOrderBookInfoFromSlot(uint256 slot) private pure returns (MarketStructs.OrderBookInfo storage d) {\\n        assembly {\\n            d.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28b733c2db3c959416e44e19d59125f51a03f3fef9c788bfbd3dc9d1ccac512e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PerpMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\n\\nlibrary PerpMath {\\n    using SafeCast for int256;\\n    using SignedSafeMath for int256;\\n    using SafeMath for uint256;\\n\\n    function formatSqrtPriceX96ToPriceX96(uint160 sqrtPriceX96) internal pure returns (uint256) {\\n        return Math.mulDiv(sqrtPriceX96, sqrtPriceX96, FixedPoint96.Q96);\\n    }\\n\\n    function formatX10_18ToX96(uint256 valueX10_18) internal pure returns (uint256) {\\n        return Math.mulDiv(valueX10_18, FixedPoint96.Q96, 1 ether);\\n    }\\n\\n    function formatX96ToX10_18(uint256 valueX96) internal pure returns (uint256) {\\n        return Math.mulDiv(valueX96, 1 ether, FixedPoint96.Q96);\\n    }\\n\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function abs(int256 value) internal pure returns (uint256) {\\n        return value >= 0 ? value.toUint256() : neg256(value).toUint256();\\n    }\\n\\n    function neg256(int256 a) internal pure returns (int256) {\\n        require(a > -2**255, \\\"PerpMath: inversion overflow\\\");\\n        return -a;\\n    }\\n\\n    function neg256(uint256 a) internal pure returns (int256) {\\n        return -SafeCast.toInt256(a);\\n    }\\n\\n    function divBy10_18(int256 value) internal pure returns (int256) {\\n        // no overflow here\\n        return value / (1 ether);\\n    }\\n\\n    function divBy10_18(uint256 value) internal pure returns (uint256) {\\n        // no overflow here\\n        return value / (1 ether);\\n    }\\n\\n    function subRatio(uint24 a, uint24 b) internal pure returns (uint24) {\\n        require(b <= a, \\\"PerpMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    function mulRatio(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return Math.mulDiv(value, ratio, 1e6);\\n    }\\n\\n    function mulRatioRoundingUp(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return Math.mulDiv(value, ratio, 1e6, Math.Rounding.Up);\\n    }\\n\\n    function divRatio(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return Math.mulDiv(value, 1e6, ratio);\\n    }\\n\\n    function divRatioRoundingUp(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return Math.mulDiv(value, 1e6, ratio, Math.Rounding.Up);\\n    }\\n\\n    /// @param denominator cannot be 0 and is checked in Math.mulDiv()\\n    function mulDiv(\\n        int256 a,\\n        int256 b,\\n        uint256 denominator\\n    ) internal pure returns (int256 result) {\\n        uint256 unsignedA = a < 0 ? uint256(neg256(a)) : uint256(a);\\n        uint256 unsignedB = b < 0 ? uint256(neg256(b)) : uint256(b);\\n        bool negative = ((a < 0 && b > 0) || (a > 0 && b < 0)) ? true : false;\\n\\n        uint256 unsignedResult = Math.mulDiv(unsignedA, unsignedB, denominator);\\n\\n        result = negative ? neg256(unsignedResult) : SafeCast.toInt256(unsignedResult);\\n\\n        return result;\\n    }\\n\\n    function sign(int256 value) internal pure returns (int256) {\\n        return value > 0 ? int256(1) : (value < 0 ? int256(-1) : int256(0));\\n    }\\n}\\n\",\"keccak256\":\"0x8fb9c73930e8037da0e08fd3e3972821749739bd5ffe8fd1980dd84c3d40043e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PoolFeeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { MarketStructs } from \\\"./MarketStructs.sol\\\";\\n\\nlibrary PoolFeeLibrary {\\n    using PerpMath for uint256;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n\\n    function update(\\n        MarketStructs.PoolFeeInfo storage poolFeeInfo,\\n        uint32 atrEmaBlocks,\\n        uint256 prevPriceX96,\\n        uint256 currentPriceX96\\n    ) internal {\\n        uint256 currentTimestamp = block.timestamp;\\n\\n        if (currentTimestamp <= poolFeeInfo.referenceTimestamp) {\\n            poolFeeInfo.currentHighX96 = Math.max(poolFeeInfo.currentHighX96, currentPriceX96);\\n            poolFeeInfo.currentLowX96 = Math.min(poolFeeInfo.currentLowX96, currentPriceX96);\\n        } else {\\n            poolFeeInfo.referenceTimestamp = currentTimestamp;\\n            poolFeeInfo.atrX96 = _calculateAtrX96(poolFeeInfo, atrEmaBlocks);\\n            poolFeeInfo.currentHighX96 = Math.max(prevPriceX96, currentPriceX96);\\n            poolFeeInfo.currentLowX96 = Math.min(prevPriceX96, currentPriceX96);\\n        }\\n    }\\n\\n    function feeRatio(MarketStructs.PoolFeeInfo storage poolFeeInfo, MarketStructs.PoolFeeConfig memory config)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 atrX96 = _calculateAtrX96(poolFeeInfo, config.atrEmaBlocks);\\n        return Math.mulDiv(config.atrFeeRatio, atrX96, FixedPoint96.Q96).add(config.fixedFeeRatio);\\n    }\\n\\n    function _calculateAtrX96(MarketStructs.PoolFeeInfo storage poolFeeInfo, uint32 atrEmaBlocks)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        if (poolFeeInfo.currentLowX96 == 0) return 0;\\n        uint256 trX96 =\\n            Math.mulDiv(poolFeeInfo.currentHighX96, FixedPoint96.Q96, poolFeeInfo.currentLowX96).sub(FixedPoint96.Q96);\\n        uint256 denominator = atrEmaBlocks + 1;\\n        return Math.mulDiv(poolFeeInfo.atrX96, atrEmaBlocks, denominator).add(trX96.div(denominator));\\n    }\\n}\\n\",\"keccak256\":\"0xfee9cd04a5b78632749159d6a4b2b3b9489e24916fe8c915f3d3c04cae7b88dc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PoolLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { MarketStructs } from \\\"./MarketStructs.sol\\\";\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\n\\nlibrary PoolLibrary {\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    struct SwapParams {\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n        uint24 feeRatio;\\n        uint256 amount;\\n    }\\n\\n    struct AddLiquidityParams {\\n        uint256 base;\\n        uint256 quote;\\n    }\\n\\n    struct RemoveLiquidityParams {\\n        uint256 liquidity;\\n    }\\n\\n    uint256 public constant MINIMUM_LIQUIDITY = 1e3;\\n\\n    function initializePool(MarketStructs.PoolInfo storage poolInfo) internal {\\n        poolInfo.baseBalancePerShareX96 = FixedPoint96.Q96;\\n    }\\n\\n    // underestimate deleveraged tokens\\n    function applyFunding(MarketStructs.PoolInfo storage poolInfo, int256 fundingRateX96) internal {\\n        if (fundingRateX96 == 0) return;\\n\\n        uint256 frAbs = fundingRateX96.abs();\\n\\n        if (fundingRateX96 > 0) {\\n            uint256 poolQuote = poolInfo.quote;\\n            uint256 deleveratedQuote = Math.mulDiv(poolQuote, frAbs, FixedPoint96.Q96);\\n            poolInfo.quote = poolQuote.sub(deleveratedQuote);\\n            poolInfo.cumQuotePerLiquidityX96 = poolInfo.cumQuotePerLiquidityX96.add(\\n                Math.mulDiv(deleveratedQuote, FixedPoint96.Q96, poolInfo.totalLiquidity)\\n            );\\n        } else {\\n            uint256 poolBase = poolInfo.base;\\n            uint256 deleveratedBase = Math.mulDiv(poolBase, frAbs, FixedPoint96.Q96.add(frAbs));\\n            poolInfo.base = poolBase.sub(deleveratedBase);\\n            poolInfo.cumBasePerLiquidityX96 = poolInfo.cumBasePerLiquidityX96.add(\\n                Math.mulDiv(deleveratedBase, FixedPoint96.Q96, poolInfo.totalLiquidity)\\n            );\\n        }\\n\\n        poolInfo.baseBalancePerShareX96 = Math.mulDiv(\\n            poolInfo.baseBalancePerShareX96,\\n            FixedPoint96.Q96.toInt256().sub(fundingRateX96).toUint256(),\\n            FixedPoint96.Q96\\n        );\\n    }\\n\\n    function swap(MarketStructs.PoolInfo storage poolInfo, SwapParams memory params)\\n        internal\\n        returns (uint256 oppositeAmount)\\n    {\\n        oppositeAmount = previewSwap(poolInfo.base, poolInfo.quote, params);\\n        (poolInfo.base, poolInfo.quote) = calcPoolAfter(\\n            params.isBaseToQuote,\\n            params.isExactInput,\\n            poolInfo.base,\\n            poolInfo.quote,\\n            params.amount,\\n            oppositeAmount\\n        );\\n    }\\n\\n    function calcPoolAfter(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 base,\\n        uint256 quote,\\n        uint256 amount,\\n        uint256 oppositeAmount\\n    ) internal pure returns (uint256 baseAfter, uint256 quoteAfter) {\\n        if (isExactInput) {\\n            if (isBaseToQuote) {\\n                baseAfter = base.add(amount);\\n                quoteAfter = quote.sub(oppositeAmount);\\n            } else {\\n                baseAfter = base.sub(oppositeAmount);\\n                quoteAfter = quote.add(amount);\\n            }\\n        } else {\\n            if (isBaseToQuote) {\\n                baseAfter = base.add(oppositeAmount);\\n                quoteAfter = quote.sub(amount);\\n            } else {\\n                baseAfter = base.sub(amount);\\n                quoteAfter = quote.add(oppositeAmount);\\n            }\\n        }\\n    }\\n\\n    function addLiquidity(MarketStructs.PoolInfo storage poolInfo, AddLiquidityParams memory params)\\n        internal\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 poolTotalLiquidity = poolInfo.totalLiquidity;\\n        uint256 liquidity;\\n\\n        if (poolTotalLiquidity == 0) {\\n            uint256 totalLiquidity = Math.sqrt(params.base.mul(params.quote));\\n            liquidity = totalLiquidity.sub(MINIMUM_LIQUIDITY);\\n            require(params.base > 0 && params.quote > 0 && liquidity > 0, \\\"PL_AL: initial liquidity zero\\\");\\n\\n            poolInfo.base = params.base;\\n            poolInfo.quote = params.quote;\\n            poolInfo.totalLiquidity = totalLiquidity;\\n            return (params.base, params.quote, liquidity);\\n        }\\n\\n        uint256 poolBase = poolInfo.base;\\n        uint256 poolQuote = poolInfo.quote;\\n\\n        uint256 base = Math.min(params.base, Math.mulDiv(params.quote, poolBase, poolQuote));\\n        uint256 quote = Math.min(params.quote, Math.mulDiv(params.base, poolQuote, poolBase));\\n        liquidity = Math.min(\\n            Math.mulDiv(base, poolTotalLiquidity, poolBase),\\n            Math.mulDiv(quote, poolTotalLiquidity, poolQuote)\\n        );\\n        require(base > 0 && quote > 0 && liquidity > 0, \\\"PL_AL: liquidity zero\\\");\\n\\n        poolInfo.base = poolBase.add(base);\\n        poolInfo.quote = poolQuote.add(quote);\\n        poolInfo.totalLiquidity = poolTotalLiquidity.add(liquidity);\\n\\n        return (base, quote, liquidity);\\n    }\\n\\n    function removeLiquidity(MarketStructs.PoolInfo storage poolInfo, RemoveLiquidityParams memory params)\\n        internal\\n        returns (uint256, uint256)\\n    {\\n        uint256 poolBase = poolInfo.base;\\n        uint256 poolQuote = poolInfo.quote;\\n        uint256 poolTotalLiquidity = poolInfo.totalLiquidity;\\n        uint256 base = Math.mulDiv(params.liquidity, poolBase, poolTotalLiquidity);\\n        uint256 quote = Math.mulDiv(params.liquidity, poolQuote, poolTotalLiquidity);\\n        require(base > 0 && quote > 0, \\\"PL_RL: output is zero\\\");\\n        poolInfo.base = poolBase.sub(base);\\n        poolInfo.quote = poolQuote.sub(quote);\\n        uint256 totalLiquidity = poolTotalLiquidity.sub(params.liquidity);\\n        require(totalLiquidity >= MINIMUM_LIQUIDITY, \\\"PL_RL: min liquidity\\\");\\n        poolInfo.totalLiquidity = totalLiquidity;\\n        return (base, quote);\\n    }\\n\\n    function getLiquidityValue(MarketStructs.PoolInfo storage poolInfo, uint256 liquidity)\\n        internal\\n        view\\n        returns (uint256, uint256)\\n    {\\n        return (\\n            Math.mulDiv(liquidity, poolInfo.base, poolInfo.totalLiquidity),\\n            Math.mulDiv(liquidity, poolInfo.quote, poolInfo.totalLiquidity)\\n        );\\n    }\\n\\n    // subtract fee from input before swap\\n    function previewSwap(\\n        uint256 base,\\n        uint256 quote,\\n        SwapParams memory params\\n    ) internal pure returns (uint256 output) {\\n        uint24 oneSubFeeRatio = PerpMath.subRatio(1e6, params.feeRatio);\\n\\n        if (params.isExactInput) {\\n            uint256 amountSubFee = params.amount.mulRatio(oneSubFeeRatio);\\n            if (params.isBaseToQuote) {\\n                // output = quote.sub(FullMath.mulDivRoundingUp(base, quote, base.add(amountSubFee)));\\n                output = Math.mulDiv(quote, amountSubFee, base.add(amountSubFee));\\n            } else {\\n                // output = base.sub(FullMath.mulDivRoundingUp(base, quote, quote.add(amountSubFee)));\\n                output = Math.mulDiv(base, amountSubFee, quote.add(amountSubFee));\\n            }\\n        } else {\\n            if (params.isBaseToQuote) {\\n                // output = FullMath.mulDivRoundingUp(base, quote, quote.sub(params.amount)).sub(base);\\n                output = Math.mulDiv(base, params.amount, quote.sub(params.amount), Math.Rounding.Up);\\n            } else {\\n                // output = FullMath.mulDivRoundingUp(base, quote, base.sub(params.amount)).sub(quote);\\n                output = Math.mulDiv(quote, params.amount, base.sub(params.amount), Math.Rounding.Up);\\n            }\\n            output = output.divRatioRoundingUp(oneSubFeeRatio);\\n        }\\n    }\\n\\n    function _solveQuadratic(uint256 b, uint256 cNeg) private pure returns (uint256) {\\n        return Math.sqrt(b.mul(b).add(cNeg.mul(4))).sub(b).div(2);\\n    }\\n\\n    function getAskPriceX96(uint256 priceX96, uint24 feeRatio) internal pure returns (uint256) {\\n        uint24 oneSubFeeRatio = PerpMath.subRatio(1e6, feeRatio);\\n        return priceX96.divRatio(oneSubFeeRatio);\\n    }\\n\\n    function getBidPriceX96(uint256 priceX96, uint24 feeRatio) internal pure returns (uint256) {\\n        uint24 oneSubFeeRatio = PerpMath.subRatio(1e6, feeRatio);\\n        return priceX96.mulRatioRoundingUp(oneSubFeeRatio);\\n    }\\n\\n    // must not revert\\n    // Trade until the trade price including fee (dy/dx) reaches priceBoundX96\\n    // not pool price (y/x)\\n    // long: trade_price = pool_price / (1 - fee)\\n    // short: trade_price = pool_price * (1 - fee)\\n    function maxSwap(\\n        uint256 base,\\n        uint256 quote,\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint24 feeRatio,\\n        uint256 priceBoundX96\\n    ) internal pure returns (uint256 output) {\\n        uint24 oneSubFeeRatio = PerpMath.subRatio(1e6, feeRatio);\\n        uint256 k = base.mul(quote);\\n\\n        if (isBaseToQuote) {\\n            uint256 kDivP = Math.mulDiv(k, FixedPoint96.Q96, priceBoundX96).mulRatio(oneSubFeeRatio);\\n            uint256 baseSqr = base.mul(base);\\n            if (kDivP <= baseSqr) return 0;\\n            uint256 cNeg = kDivP.sub(baseSqr);\\n            uint256 b = base.add(base.mulRatio(oneSubFeeRatio));\\n            output = _solveQuadratic(b.divRatio(oneSubFeeRatio), cNeg.divRatio(oneSubFeeRatio));\\n        } else {\\n            // https://www.wolframalpha.com/input?i=%28x+%2B+a%29+*+%28x+%2B+a+*+%281+-+f%29%29+%3D+kp+solve+a\\n            uint256 kp = Math.mulDiv(k, priceBoundX96, FixedPoint96.Q96).mulRatio(oneSubFeeRatio);\\n            uint256 quoteSqr = quote.mul(quote);\\n            if (kp <= quoteSqr) return 0;\\n            uint256 cNeg = kp.sub(quoteSqr);\\n            uint256 b = quote.add(quote.mulRatio(oneSubFeeRatio));\\n            output = _solveQuadratic(b.divRatio(oneSubFeeRatio), cNeg.divRatio(oneSubFeeRatio));\\n        }\\n        if (!isExactInput) {\\n            output = previewSwap(\\n                base,\\n                quote,\\n                SwapParams({ isBaseToQuote: isBaseToQuote, isExactInput: true, feeRatio: feeRatio, amount: output })\\n            );\\n        }\\n    }\\n\\n    function getMarkPriceX96(\\n        uint256 base,\\n        uint256 quote,\\n        uint256 baseBalancePerShareX96\\n    ) internal pure returns (uint256) {\\n        return Math.mulDiv(getShareMarkPriceX96(base, quote), FixedPoint96.Q96, baseBalancePerShareX96);\\n    }\\n\\n    function getShareMarkPriceX96(uint256 base, uint256 quote) internal pure returns (uint256) {\\n        return Math.mulDiv(quote, FixedPoint96.Q96, base);\\n    }\\n\\n    function getLiquidityDeleveraged(\\n        uint256 poolCumBasePerLiquidityX96,\\n        uint256 poolCumQuotePerLiquidityX96,\\n        uint256 liquidity,\\n        uint256 cumBasePerLiquidityX96,\\n        uint256 cumQuotePerLiquidityX96\\n    ) internal pure returns (int256, int256) {\\n        int256 basePerLiquidityX96 = poolCumBasePerLiquidityX96.toInt256().sub(cumBasePerLiquidityX96.toInt256());\\n        int256 quotePerLiquidityX96 = poolCumQuotePerLiquidityX96.toInt256().sub(cumQuotePerLiquidityX96.toInt256());\\n\\n        return (\\n            liquidity.toInt256().mulDiv(basePerLiquidityX96, FixedPoint96.Q96),\\n            liquidity.toInt256().mulDiv(quotePerLiquidityX96, FixedPoint96.Q96)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xde0495b4d4c9e1968544029a522d15881f579f6351fd17f020b95a0d2b176033\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PriceLimitLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { MarketStructs } from \\\"./MarketStructs.sol\\\";\\n\\nlibrary PriceLimitLibrary {\\n    using PerpMath for uint256;\\n    using SafeMath for uint256;\\n\\n    function update(MarketStructs.PriceLimitInfo storage priceLimitInfo, MarketStructs.PriceLimitInfo memory value)\\n        internal\\n    {\\n        if (value.referenceTimestamp == 0) return;\\n        priceLimitInfo.referencePrice = value.referencePrice;\\n        priceLimitInfo.referenceTimestamp = value.referenceTimestamp;\\n        priceLimitInfo.emaPrice = value.emaPrice;\\n    }\\n\\n    // referenceTimestamp == 0 indicates not updated\\n    function updateDry(\\n        MarketStructs.PriceLimitInfo storage priceLimitInfo,\\n        MarketStructs.PriceLimitConfig storage config,\\n        uint256 price\\n    ) internal view returns (MarketStructs.PriceLimitInfo memory updated) {\\n        uint256 currentTimestamp = block.timestamp;\\n        uint256 refTimestamp = priceLimitInfo.referenceTimestamp;\\n        if (currentTimestamp <= refTimestamp) {\\n            updated.referencePrice = priceLimitInfo.referencePrice;\\n            updated.emaPrice = priceLimitInfo.emaPrice;\\n            return updated;\\n        }\\n\\n        uint256 elapsed = currentTimestamp.sub(refTimestamp);\\n\\n        if (priceLimitInfo.referencePrice == 0) {\\n            updated.emaPrice = price;\\n        } else {\\n            uint32 emaSec = config.emaSec;\\n            uint256 denominator = elapsed.add(emaSec);\\n            updated.emaPrice = Math.mulDiv(priceLimitInfo.emaPrice, emaSec, denominator).add(\\n                Math.mulDiv(price, elapsed, denominator)\\n            );\\n        }\\n\\n        updated.referencePrice = price;\\n        updated.referenceTimestamp = currentTimestamp;\\n    }\\n\\n    function priceBound(\\n        uint256 referencePrice,\\n        uint256 emaPrice,\\n        MarketStructs.PriceLimitConfig storage config,\\n        bool isLiquidation,\\n        bool isUpperBound\\n    ) internal view returns (uint256 price) {\\n        uint256 referenceRange =\\n            referencePrice.mulRatio(isLiquidation ? config.liquidationRatio : config.normalOrderRatio);\\n        uint256 emaRange = emaPrice.mulRatio(isLiquidation ? config.emaLiquidationRatio : config.emaNormalOrderRatio);\\n\\n        if (isUpperBound) {\\n            return Math.min(referencePrice.add(referenceRange), emaPrice.add(emaRange));\\n        } else {\\n            return Math.max(referencePrice.sub(referenceRange), emaPrice.sub(emaRange));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc4236e1b016974ff35e2b3bf4eecfc9961342fd762c90503ca5b3c27b64a5e53\",\"license\":\"GPL-3.0-or-later\"},\"deps/BokkyPooBahsRedBlackTreeLibrary/contracts/BokkyPooBahsRedBlackTreeLibrary.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's Red-Black Tree Library v1.0-pre-release-a\\n//\\n// A Solidity Red-Black Tree binary search library to store and access a sorted\\n// list of unsigned integer data. The Red-Black algorithm rebalances the binary\\n// search tree, resulting in O(log n) insert, remove and search time (and ~gas)\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsRedBlackTreeLibrary\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2020. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary BokkyPooBahsRedBlackTreeLibrary {\\n    struct Node {\\n        uint40 parent;\\n        uint40 left;\\n        uint40 right;\\n        bool red;\\n        uint128 userData; // use freely. this is for gas efficiency\\n    }\\n\\n    struct Tree {\\n        uint40 root;\\n        mapping(uint40 => Node) nodes;\\n    }\\n\\n    uint40 private constant EMPTY = 0;\\n\\n    function first(Tree storage self) internal view returns (uint40 _key) {\\n        _key = self.root;\\n        if (_key != EMPTY) {\\n            _key = treeMinimum(self, self.root);\\n        }\\n    }\\n\\n    function last(Tree storage self) internal view returns (uint40 _key) {\\n        _key = self.root;\\n        if (_key != EMPTY) {\\n            _key = treeMaximum(self, self.root);\\n        }\\n    }\\n\\n    function next(Tree storage self, uint40 target)\\n        internal\\n        view\\n        returns (uint40 cursor)\\n    {\\n        require(target != EMPTY, \\\"RBTL_N: target is empty\\\");\\n        if (self.nodes[target].right != EMPTY) {\\n            cursor = treeMinimum(self, self.nodes[target].right);\\n        } else {\\n            cursor = self.nodes[target].parent;\\n            while (cursor != EMPTY && target == self.nodes[cursor].right) {\\n                target = cursor;\\n                cursor = self.nodes[cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function prev(Tree storage self, uint40 target)\\n        internal\\n        view\\n        returns (uint40 cursor)\\n    {\\n        require(target != EMPTY, \\\"RBTL_P: target is empty\\\");\\n        if (self.nodes[target].left != EMPTY) {\\n            cursor = treeMaximum(self, self.nodes[target].left);\\n        } else {\\n            cursor = self.nodes[target].parent;\\n            while (cursor != EMPTY && target == self.nodes[cursor].left) {\\n                target = cursor;\\n                cursor = self.nodes[cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function exists(Tree storage self, uint40 key)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return\\n            (key != EMPTY) &&\\n            ((key == self.root) || (self.nodes[key].parent != EMPTY));\\n    }\\n\\n    function isEmpty(uint40 key) internal pure returns (bool) {\\n        return key == EMPTY;\\n    }\\n\\n    function getEmpty() internal pure returns (uint256) {\\n        return EMPTY;\\n    }\\n\\n    function getNode(Tree storage self, uint40 key)\\n        internal\\n        view\\n        returns (\\n            uint40 _returnKey,\\n            uint40 _parent,\\n            uint40 _left,\\n            uint40 _right,\\n            bool _red\\n        )\\n    {\\n        require(exists(self, key), \\\"RBTL_GN: key not exist\\\");\\n        return (\\n            key,\\n            self.nodes[key].parent,\\n            self.nodes[key].left,\\n            self.nodes[key].right,\\n            self.nodes[key].red\\n        );\\n    }\\n\\n    function insert(\\n        Tree storage self,\\n        uint40 key,\\n        uint128 userData,\\n        function(uint40, uint40, uint256) view returns (bool) lessThan,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) internal {\\n        require(key != EMPTY, \\\"RBTL_I: key is empty\\\");\\n        require(!exists(self, key), \\\"RBTL_I: key already exists\\\");\\n        uint40 cursor = EMPTY;\\n        uint40 probe = self.root;\\n        self.nodes[key] = Node({\\n            parent: EMPTY,\\n            left: EMPTY,\\n            right: EMPTY,\\n            red: true,\\n            userData: userData\\n        });\\n        while (probe != EMPTY) {\\n            cursor = probe;\\n            if (lessThan(key, probe, data)) {\\n                probe = self.nodes[probe].left;\\n            } else {\\n                probe = self.nodes[probe].right;\\n            }\\n        }\\n        self.nodes[key].parent = cursor;\\n        if (cursor == EMPTY) {\\n            self.root = key;\\n        } else if (lessThan(key, cursor, data)) {\\n            self.nodes[cursor].left = key;\\n        } else {\\n            self.nodes[cursor].right = key;\\n        }\\n        aggregateRecursively(self, key, aggregate, data);\\n        insertFixup(self, key, aggregate, data);\\n    }\\n\\n    function remove(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) internal {\\n        require(key != EMPTY, \\\"RBTL_R: key is empty\\\");\\n        require(exists(self, key), \\\"RBTL_R: key not exist\\\");\\n        uint40 probe;\\n        uint40 cursor;\\n        if (self.nodes[key].left == EMPTY || self.nodes[key].right == EMPTY) {\\n            cursor = key;\\n        } else {\\n            cursor = self.nodes[key].right;\\n            while (self.nodes[cursor].left != EMPTY) {\\n                cursor = self.nodes[cursor].left;\\n            }\\n        }\\n        if (self.nodes[cursor].left != EMPTY) {\\n            probe = self.nodes[cursor].left;\\n        } else {\\n            probe = self.nodes[cursor].right;\\n        }\\n        uint40 yParent = self.nodes[cursor].parent;\\n        self.nodes[probe].parent = yParent;\\n        if (yParent != EMPTY) {\\n            if (cursor == self.nodes[yParent].left) {\\n                self.nodes[yParent].left = probe;\\n            } else {\\n                self.nodes[yParent].right = probe;\\n            }\\n        } else {\\n            self.root = probe;\\n        }\\n        bool doFixup = !self.nodes[cursor].red;\\n        if (cursor != key) {\\n            replaceParent(self, cursor, key);\\n            self.nodes[cursor].left = self.nodes[key].left;\\n            self.nodes[self.nodes[cursor].left].parent = cursor;\\n            self.nodes[cursor].right = self.nodes[key].right;\\n            self.nodes[self.nodes[cursor].right].parent = cursor;\\n            self.nodes[cursor].red = self.nodes[key].red;\\n            (cursor, key) = (key, cursor);\\n            aggregateRecursively(self, key, aggregate, data);\\n        }\\n        if (doFixup) {\\n            removeFixup(self, probe, aggregate, data);\\n        }\\n        aggregateRecursively(self, yParent, aggregate, data);\\n\\n        // Fixed a bug that caused the parent of empty nodes to be non-zero.\\n        // TODO: Fix it the right way.\\n        if (probe == EMPTY) {\\n            self.nodes[probe].parent = EMPTY;\\n        }\\n    }\\n\\n    // https://arxiv.org/pdf/1602.02120.pdf\\n    // changes from original\\n    // - handle empty\\n    // - handle parent\\n    // - change root to black\\n\\n    // to avoid stack too deep\\n    struct JoinParams {\\n        uint40 left;\\n        uint40 key;\\n        uint40 right;\\n        uint8 leftBlackHeight;\\n        uint8 rightBlackHeight;\\n        uint256 data;\\n    }\\n\\n    // destructive func\\n    function joinRight(\\n        Tree storage self,\\n        JoinParams memory params,\\n        function(uint40, uint256) returns (bool) aggregate\\n    ) private returns (uint40, uint8) {\\n        if (\\n            !self.nodes[params.left].red &&\\n            params.leftBlackHeight == params.rightBlackHeight\\n        ) {\\n            self.nodes[params.key].red = true;\\n            self.nodes[params.key].left = params.left;\\n            self.nodes[params.key].right = params.right;\\n            aggregate(params.key, params.data);\\n            return (params.key, params.leftBlackHeight);\\n        }\\n\\n        (uint40 t, ) = joinRight(\\n            self,\\n            JoinParams({\\n                left: self.nodes[params.left].right,\\n                key: params.key,\\n                right: params.right,\\n                leftBlackHeight: params.leftBlackHeight -\\n                    (self.nodes[params.left].red ? 0 : 1),\\n                rightBlackHeight: params.rightBlackHeight,\\n                data: params.data\\n            }),\\n            aggregate\\n        );\\n        self.nodes[params.left].right = t;\\n        self.nodes[params.left].parent = EMPTY;\\n        aggregate(params.left, params.data);\\n\\n        if (\\n            !self.nodes[params.left].red &&\\n            self.nodes[t].red &&\\n            self.nodes[self.nodes[t].right].red\\n        ) {\\n            self.nodes[self.nodes[t].right].red = false;\\n            rotateLeft(self, params.left, aggregate, params.data);\\n            return (t, params.leftBlackHeight);\\n            //            return (self.nodes[params.left].parent, tBlackHeight + 1); // TODO: replace with t\\n        }\\n        return (params.left, params.leftBlackHeight);\\n        //        return (params.left, tBlackHeight + (self.nodes[params.left].red ? 0 : 1));\\n    }\\n\\n    // destructive func\\n    function joinLeft(\\n        Tree storage self,\\n        JoinParams memory params,\\n        function(uint40, uint256) returns (bool) aggregate\\n    ) internal returns (uint40 resultKey) {\\n        if (\\n            !self.nodes[params.right].red &&\\n            params.leftBlackHeight == params.rightBlackHeight\\n        ) {\\n            self.nodes[params.key].red = true;\\n            self.nodes[params.key].left = params.left;\\n            self.nodes[params.key].right = params.right;\\n            if (params.left != EMPTY) {\\n                self.nodes[params.left].parent = params.key;\\n            }\\n            if (params.right != EMPTY) {\\n                self.nodes[params.right].parent = params.key;\\n            }\\n            aggregate(params.key, params.data);\\n            return params.key;\\n        }\\n\\n        uint40 t = joinLeft(\\n            self,\\n            JoinParams({\\n                left: params.left,\\n                key: params.key,\\n                right: self.nodes[params.right].left,\\n                leftBlackHeight: params.leftBlackHeight,\\n                rightBlackHeight: params.rightBlackHeight -\\n                    (self.nodes[params.right].red ? 0 : 1),\\n                data: params.data\\n            }),\\n            aggregate\\n        );\\n        self.nodes[params.right].left = t;\\n        self.nodes[params.right].parent = EMPTY;\\n        if (t != EMPTY) {\\n            self.nodes[t].parent = params.right;\\n        }\\n        aggregate(params.right, params.data);\\n\\n        if (\\n            !self.nodes[params.right].red &&\\n            self.nodes[t].red &&\\n            self.nodes[self.nodes[t].left].red\\n        ) {\\n            self.nodes[self.nodes[t].left].red = false;\\n            rotateRight(self, params.right, aggregate, params.data);\\n            return t;\\n        }\\n        return params.right;\\n    }\\n\\n    // destructive func\\n    function join(\\n        Tree storage self,\\n        uint40 left,\\n        uint40 key,\\n        uint40 right,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint8 leftBlackHeight,\\n        uint8 rightBlackHeight,\\n        uint256 data\\n    ) private returns (uint40 t, uint8 tBlackHeight) {\\n        if (leftBlackHeight > rightBlackHeight) {\\n            (t, tBlackHeight) = joinRight(\\n                self,\\n                JoinParams({\\n                    left: left,\\n                    key: key,\\n                    right: right,\\n                    leftBlackHeight: leftBlackHeight,\\n                    rightBlackHeight: rightBlackHeight,\\n                    data: data\\n                }),\\n                aggregate\\n            );\\n            tBlackHeight = leftBlackHeight;\\n            if (self.nodes[t].red && self.nodes[self.nodes[t].right].red) {\\n                self.nodes[t].red = false;\\n                tBlackHeight += 1;\\n            }\\n        } else if (leftBlackHeight < rightBlackHeight) {\\n            t = joinLeft(\\n                self,\\n                JoinParams({\\n                    left: left,\\n                    key: key,\\n                    right: right,\\n                    leftBlackHeight: leftBlackHeight,\\n                    rightBlackHeight: rightBlackHeight,\\n                    data: data\\n                }),\\n                aggregate\\n            );\\n            tBlackHeight = rightBlackHeight;\\n            if (self.nodes[t].red && self.nodes[self.nodes[t].left].red) {\\n                self.nodes[t].red = false;\\n                tBlackHeight += 1;\\n            }\\n        } else {\\n            bool red = !self.nodes[left].red && !self.nodes[right].red;\\n            self.nodes[key].red = red;\\n            self.nodes[key].left = left;\\n            self.nodes[key].right = right;\\n            aggregate(key, data);\\n            (t, tBlackHeight) = (key, leftBlackHeight + (red ? 0 : 1));\\n        }\\n    }\\n\\n    struct SplitParams {\\n        uint40 t;\\n        uint40 key;\\n        uint8 blackHeight;\\n        uint256 data;\\n    }\\n\\n    // destructive func\\n    function splitRight(\\n        Tree storage self,\\n        SplitParams memory params,\\n        function(uint40, uint40, uint256) returns (bool) lessThan,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        function(uint40, uint256) subtreeRemoved\\n    ) private returns (uint40 resultKey, uint8 resultBlackHeight) {\\n        if (params.t == EMPTY) return (EMPTY, params.blackHeight);\\n        params.blackHeight -= (self.nodes[params.t].red ? 0 : 1);\\n        if (params.key == params.t) {\\n            subtreeRemoved(params.t, params.data);\\n            return (self.nodes[params.t].right, params.blackHeight);\\n        }\\n        if (lessThan(params.key, params.t, params.data)) {\\n            (uint40 r, uint8 rBlackHeight) = splitRight(\\n                self,\\n                SplitParams({\\n                    t: self.nodes[params.t].left,\\n                    key: params.key,\\n                    blackHeight: params.blackHeight,\\n                    data: params.data\\n                }),\\n                lessThan,\\n                aggregate,\\n                subtreeRemoved\\n            );\\n            return\\n                join(\\n                    self,\\n                    r,\\n                    params.t,\\n                    self.nodes[params.t].right,\\n                    aggregate,\\n                    rBlackHeight,\\n                    params.blackHeight,\\n                    params.data\\n                );\\n        } else {\\n            subtreeRemoved(params.t, params.data);\\n            return\\n                splitRight(\\n                    self,\\n                    SplitParams({\\n                        t: self.nodes[params.t].right,\\n                        key: params.key,\\n                        blackHeight: params.blackHeight,\\n                        data: params.data\\n                    }),\\n                    lessThan,\\n                    aggregate,\\n                    subtreeRemoved\\n                );\\n        }\\n    }\\n\\n    function removeLeft(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint40, uint256) returns (bool) lessThan,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        function(uint40, uint256) subtreeRemoved,\\n        uint256 data\\n    ) internal {\\n        require(key != EMPTY, \\\"RBTL_RL: key is empty\\\");\\n        require(exists(self, key), \\\"RBTL_RL: key not exist\\\");\\n        (self.root, ) = splitRight(\\n            self,\\n            SplitParams({t: self.root, key: key, blackHeight: 128, data: data}),\\n            lessThan,\\n            aggregate,\\n            subtreeRemoved\\n        );\\n        self.nodes[self.root].parent = EMPTY;\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function aggregateRecursively(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) internal {\\n        while (key != EMPTY) {\\n            if (aggregate(key, data)) return;\\n            key = self.nodes[key].parent;\\n        }\\n    }\\n\\n    function treeMinimum(Tree storage self, uint40 key)\\n        private\\n        view\\n        returns (uint40)\\n    {\\n        while (self.nodes[key].left != EMPTY) {\\n            key = self.nodes[key].left;\\n        }\\n        return key;\\n    }\\n\\n    function treeMaximum(Tree storage self, uint40 key)\\n        private\\n        view\\n        returns (uint40)\\n    {\\n        while (self.nodes[key].right != EMPTY) {\\n            key = self.nodes[key].right;\\n        }\\n        return key;\\n    }\\n\\n    function rotateLeft(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) private {\\n        uint40 cursor = self.nodes[key].right;\\n        uint40 keyParent = self.nodes[key].parent;\\n        uint40 cursorLeft = self.nodes[cursor].left;\\n        self.nodes[key].right = cursorLeft;\\n        if (cursorLeft != EMPTY) {\\n            self.nodes[cursorLeft].parent = key;\\n        }\\n        self.nodes[cursor].parent = keyParent;\\n        if (keyParent == EMPTY) {\\n            self.root = cursor;\\n        } else if (key == self.nodes[keyParent].left) {\\n            self.nodes[keyParent].left = cursor;\\n        } else {\\n            self.nodes[keyParent].right = cursor;\\n        }\\n        self.nodes[cursor].left = key;\\n        self.nodes[key].parent = cursor;\\n        aggregate(key, data);\\n        aggregate(cursor, data);\\n    }\\n\\n    function rotateRight(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) private {\\n        uint40 cursor = self.nodes[key].left;\\n        uint40 keyParent = self.nodes[key].parent;\\n        uint40 cursorRight = self.nodes[cursor].right;\\n        self.nodes[key].left = cursorRight;\\n        if (cursorRight != EMPTY) {\\n            self.nodes[cursorRight].parent = key;\\n        }\\n        self.nodes[cursor].parent = keyParent;\\n        if (keyParent == EMPTY) {\\n            self.root = cursor;\\n        } else if (key == self.nodes[keyParent].right) {\\n            self.nodes[keyParent].right = cursor;\\n        } else {\\n            self.nodes[keyParent].left = cursor;\\n        }\\n        self.nodes[cursor].right = key;\\n        self.nodes[key].parent = cursor;\\n        aggregate(key, data);\\n        aggregate(cursor, data);\\n    }\\n\\n    function insertFixup(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) private {\\n        uint40 cursor;\\n        while (key != self.root && self.nodes[self.nodes[key].parent].red) {\\n            uint40 keyParent = self.nodes[key].parent;\\n            if (keyParent == self.nodes[self.nodes[keyParent].parent].left) {\\n                cursor = self.nodes[self.nodes[keyParent].parent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    key = self.nodes[keyParent].parent;\\n                } else {\\n                    if (key == self.nodes[keyParent].right) {\\n                        key = keyParent;\\n                        rotateLeft(self, key, aggregate, data);\\n                    }\\n                    keyParent = self.nodes[key].parent;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    rotateRight(\\n                        self,\\n                        self.nodes[keyParent].parent,\\n                        aggregate,\\n                        data\\n                    );\\n                }\\n            } else {\\n                cursor = self.nodes[self.nodes[keyParent].parent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    key = self.nodes[keyParent].parent;\\n                } else {\\n                    if (key == self.nodes[keyParent].left) {\\n                        key = keyParent;\\n                        rotateRight(self, key, aggregate, data);\\n                    }\\n                    keyParent = self.nodes[key].parent;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    rotateLeft(\\n                        self,\\n                        self.nodes[keyParent].parent,\\n                        aggregate,\\n                        data\\n                    );\\n                }\\n            }\\n        }\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function replaceParent(\\n        Tree storage self,\\n        uint40 a,\\n        uint40 b\\n    ) private {\\n        uint40 bParent = self.nodes[b].parent;\\n        self.nodes[a].parent = bParent;\\n        if (bParent == EMPTY) {\\n            self.root = a;\\n        } else {\\n            if (b == self.nodes[bParent].left) {\\n                self.nodes[bParent].left = a;\\n            } else {\\n                self.nodes[bParent].right = a;\\n            }\\n        }\\n    }\\n\\n    function removeFixup(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) private {\\n        uint40 cursor;\\n        while (key != self.root && !self.nodes[key].red) {\\n            uint40 keyParent = self.nodes[key].parent;\\n            if (key == self.nodes[keyParent].left) {\\n                cursor = self.nodes[keyParent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[keyParent].red = true;\\n                    rotateLeft(self, keyParent, aggregate, data);\\n                    cursor = self.nodes[keyParent].right;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].left].red &&\\n                    !self.nodes[self.nodes[cursor].right].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    key = keyParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].right].red) {\\n                        self.nodes[self.nodes[cursor].left].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateRight(self, cursor, aggregate, data);\\n                        cursor = self.nodes[keyParent].right;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[keyParent].red;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[cursor].right].red = false;\\n                    rotateLeft(self, keyParent, aggregate, data);\\n                    key = self.root;\\n                }\\n            } else {\\n                cursor = self.nodes[keyParent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[keyParent].red = true;\\n                    rotateRight(self, keyParent, aggregate, data);\\n                    cursor = self.nodes[keyParent].left;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].right].red &&\\n                    !self.nodes[self.nodes[cursor].left].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    key = keyParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].left].red) {\\n                        self.nodes[self.nodes[cursor].right].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateLeft(self, cursor, aggregate, data);\\n                        cursor = self.nodes[keyParent].left;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[keyParent].red;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[cursor].left].red = false;\\n                    rotateRight(self, keyParent, aggregate, data);\\n                    key = self.root;\\n                }\\n            }\\n        }\\n        self.nodes[key].red = false;\\n    }\\n}\\n// ----------------------------------------------------------------------------\\n// End - BokkyPooBah's Red-Black Tree Library\\n// ----------------------------------------------------------------------------\\n\",\"keccak256\":\"0xcd1e5d70b48e4c611fd4b863d8413eb8000db92c875f0a2ccb60b7c374e03d7f\"}},\"version\":1}",
  "bytecode": "0x601d80546001600160581b031916690151800001518000271017905561c35060e052620186a06101005262030d40610120526203d0906101405261012c61016052601e80546001600160801b0319166d012c03d090030d400186a000c3501790556101e0604052600061018052623d09006101a05260106101c052601f80546001600160501b03191666103d0900000000179055348015620000a057600080fd5b506040516200646b3803806200646b833981016040819052620000c391620002e9565b6001600055620000d33362000236565b6001600160a01b038216158062000104575062000104826001600160a01b03166200028860201b62001b381760201c565b620001565760405162461bcd60e51b815260206004820152601d60248201527f504d5f433a2062617365207072696365206665656420696e76616c696400000060448201526064015b60405180910390fd5b6001600160a01b038116158062000187575062000187816001600160a01b03166200028860201b62001b381760201c565b620001d55760405162461bcd60e51b815260206004820152601e60248201527f504d5f433a2071756f7465207072696365206665656420696e76616c6964000060448201526064016200014d565b6002620001e3858262000485565b506001600160a01b0383811660805282811660a052811660c05262000215600962000297602090811b62001b4717901c565b6200022c6003620002a060201b62001b501760201c565b5050505062000551565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b03163b151590565b42600290910155565b6c01000000000000000000000000600590910155565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620002e457600080fd5b919050565b600080600080608085870312156200030057600080fd5b84516001600160401b03808211156200031857600080fd5b818701915087601f8301126200032d57600080fd5b815181811115620003425762000342620002b6565b604051601f8201601f19908116603f011681019083821181831017156200036d576200036d620002b6565b81604052828152602093508a848487010111156200038a57600080fd5b600091505b82821015620003ae57848201840151818301850152908301906200038f565b6000848483010152809850505050620003c9818801620002cc565b94505050620003db60408601620002cc565b9150620003eb60608601620002cc565b905092959194509250565b600181811c908216806200040b57607f821691505b6020821081036200042c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200048057600081815260208120601f850160051c810160208610156200045b5750805b601f850160051c820191505b818110156200047c5782815560010162000467565b5050505b505050565b81516001600160401b03811115620004a157620004a1620002b6565b620004b981620004b28454620003f6565b8462000432565b602080601f831160018114620004f15760008415620004d85750858301515b600019600386901b1c1916600185901b1785556200047c565b600085815260208120601f198616915b82811015620005225788860151825594840194600190910190840162000501565b5085821015620005415787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05160c051615ec7620005a4600039600081816102830152818161149401526128cc0152600081816105460152818161147301526128a701526000818161068501526122b70152615ec76000f3fe608060405234801561001057600080fd5b50600436106102535760003560e01c806380796d55116101465780639d67bf03116100c3578063dba4915311610087578063dba49153146106a7578063e7a49931146106b9578063e801c4d8146106cc578063e8fa204f146106d4578063f2289752146106e7578063f2fde38b146106f257600080fd5b80639d67bf0314610604578063a4edcfc114610617578063ac9650d81461064d578063c9ca629b1461066d578063d2f7265a1461068057600080fd5b8063933c79791161010a578063933c7979146105ae5780639482de1a146105c157806395d89b41146105c95780639c8f9f23146105de5780639cd441da146105f157600080fd5b806380796d55146104f4578063823f2b041461054157806385aaa397146105685780638da5cb5b146105955780638ee8fe5d146105a657600080fd5b806356f55170116101d45780637452fadd116101985780637452fadd1461049c57806374f25689146104a45780637640482f146104b75780637661ce13146104ca578063796c20b7146104e157600080fd5b806356f55170146103be5780635a2f3d09146103e75780636346f32e1461043257806366a61ffb14610481578063715018a61461049457600080fd5b8063220e89ce1161021b578063220e89ce1461035057806323c8346a146103585780632724ebb01461036b5780633aa3e6501461039357806341744dd4146103b657600080fd5b806306f429b8146102585780630e06e4d01461027e578063125b9d27146102bd578063186f181e146102d25780631b520a02146102fe575b600080fd5b61026b6102663660046154d4565b610705565b6040519081526020015b60405180910390f35b6102a57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610275565b6102d06102cb366004615521565b61084c565b005b601d546102e990600160381b900463ffffffff1681565b60405163ffffffff9091168152602001610275565b601f546103289062ffffff808216916301000000810490911690600160301b900463ffffffff1683565b6040805162ffffff948516815293909216602084015263ffffffff1690820152606001610275565b61026b6109d7565b6102d0610366366004615546565b610a88565b61037e610379366004615546565b610b7a565b60408051928352602083019190915201610275565b601d546103a29062ffffff1681565b60405162ffffff9091168152602001610275565b6103a2610c13565b6103d16103cc36600461557d565b610c89565b60405164ffffffffff9091168152602001610275565b60035460045460055460065460075460085461040595949392919086565b604080519687526020870195909552938501929092526060840152608083015260a082015260c001610275565b601e546104709062ffffff8082169163010000008104821691600160301b8204811691600160481b810490911690600160601b900463ffffffff1685565b6040516102759594939291906155b0565b61026b61048f3660046155e4565b610e4c565b6102d0610e64565b61026b610e78565b6102d06104b2366004615631565b610e9e565b61037e6104c536600461564e565b610f61565b601d546102e9906301000000900463ffffffff1681565b6102d06104ef366004615679565b610f78565b6105076105023660046154d4565b611096565b604051610275919081518152602080830151908201526040808301519082015260609182015164ffffffffff169181019190915260800190565b6102a57f000000000000000000000000000000000000000000000000000000000000000081565b600c54600d54600e5461057a92919083565b60408051938452602084019290925290820152606001610275565b6001546001600160a01b03166102a5565b61026b6112bb565b61037e6105bc366004615696565b6112dd565b60085461026b565b6105d1611303565b6040516102759190615712565b61037e6105ec36600461564e565b611391565b61057a6105ff366004615725565b61142f565b6102d0610612366004615679565b611531565b601954601a54601b54601c5461062d9392919084565b604080519485526020850193909352918301526060820152608001610275565b61066061065b366004615747565b611603565b60405161027591906157bc565b61057a61067b366004615546565b6116f9565b6102a57f000000000000000000000000000000000000000000000000000000000000000081565b600954600a54600b5461057a92919083565b6102d06106c736600461581e565b6117a1565b61026b611a03565b61026b6106e2366004615830565b611ab0565b60065460075461037e565b6102d0610700366004615873565b611abf565b6000806107158686856000611b5d565b509050808411156107675760405162461bcd60e51b8152602060048201526017602482015276141357d414ce881d1bdbc81b185c99d948185b5bdd5b9d604a1b60448201526064015b60405180910390fd5b60006107a88761077857600f61077b565b60135b604080516080810182528a1515815289151560208201529081018890526008546060820152611caf611cd6565b600354600454604080516080810182528b151581528a151560208201529394506107eb939081016107d7610c13565b62ffffff1681528551602090910152612171565b925086151586151514801590610820578160600151826020015161080f91906158b2565b61081990856158b2565b9350610841565b8160800151826040015161083491906158b2565b61083e90856158b2565b93505b505050949350505050565b610854612237565b6002600054036108765760405162461bcd60e51b815260040161075e906158c5565b600260005561c35061088b6020830183615631565b62ffffff1611156108de5760405162461bcd60e51b815260206004820152601c60248201527f504d5f535046433a2066697865642066656520746f6f206c6172676500000000604482015260640161075e565b6127106108f16060830160408401615679565b63ffffffff1611156109455760405162461bcd60e51b815260206004820152601f60248201527f504d5f535046433a2061747220656d6120626c6f636b7320746f6f2062696700604482015260640161075e565b80601f61095282826158fc565b507f269f7c0d124741a5574762c75c64c04ad89fa3e91ec86aa3be1b9b6d6d08668790506109836020830183615631565b6109936040840160208501615631565b6109a36060850160408601615679565b6040805162ffffff948516815293909216602084015263ffffffff16908201526060015b60405180910390a1506001600055565b60006109f16109e4610e78565b6109ec610c13565b612291565b604051632e45552560e21b8152600f600482015290915060009073C91bD33af94343d14e313602345d901819F3959d9063b915549490602401602060405180830381865af4158015610a47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6b9190615978565b90508015801590610a7b57508181105b15610a84578091505b5090565b610a906122b5565b600260005403610ab25760405162461bcd60e51b815260040161075e906158c5565b6002600055604051632ec0b78b60e11b8152600f6004820152821515602482015264ffffffffff8216604482015273C91bD33af94343d14e313602345d901819F3959d90635d816f169060640160006040518083038186803b158015610b1757600080fd5b505af4158015610b2b573d6000803e3d6000fd5b505060408051851515815264ffffffffff851660208201527ff61aa5333bf001aa89f4bfa6ccaf123eec86eada7fd1c6c366227102507f89cd935001905060405180910390a150506001600055565b6040516302ea3f0960e01b8152600f6004820152821515602482015264ffffffffff82166044820152600090819073C91bD33af94343d14e313602345d901819F3959d906302ea3f09906064016040805180830381865af4158015610be3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c079190615991565b915091505b9250929050565b601e54600090610c8490610c7f90610c329060029062ffffff166159cb565b60408051606081018252601f5462ffffff80821683526301000000820481166020840152600160301b90910463ffffffff1692820192909252911690610c7a9060199061232d565b61236b565b612381565b905090565b6000610c936122b5565b600260005403610cb55760405162461bcd60e51b815260040161075e906158c5565b60026000558315610d1457610cc86109d7565b821115610d0f5760405162461bcd60e51b8152602060048201526015602482015274141357d0d313ce881c1bdcdd081bdb9b1e48189a59605a1b604482015260640161075e565b610d63565b610d1c611a03565b821015610d635760405162461bcd60e51b8152602060048201526015602482015274504d5f434c4f3a20706f7374206f6e6c792061736b60581b604482015260640161075e565b6040516383818a6f60e01b8152600f60048201528415156024820152604481018490526064810183905273C91bD33af94343d14e313602345d901819F3959d906383818a6f90608401602060405180830381865af4158015610dc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ded91906159ed565b6040805186151581526020810186905290810184905264ffffffffff821660608201529091507f7f6ce27b6803b5b961a441dac0f55de214751acfb64178849efb01fdb71c620b9060800160405180910390a160016000559392505050565b6000610e5b8484600085611b5d565b50949350505050565b610e6c612237565b610e7660006123e5565b565b6003546000908103610e8a5750600090565b600354600454600854610c84929190612437565b610ea6612237565b600260005403610ec85760405162461bcd60e51b815260040161075e906158c5565b6002600055620186a062ffffff82161115610f1b5760405162461bcd60e51b8152602060048201526013602482015272504d5f53464d50523a20746f6f206c6172676560681b604482015260640161075e565b601d805462ffffff191662ffffff83169081179091556040519081527f55647f4dd43ac173f04e53a506df46454012316d82fb04a9c1dbd8e0f21f8f76906020016109c7565b600080610f6f600384612451565b91509150915091565b610f80612237565b600260005403610fa25760405162461bcd60e51b815260040161075e906158c5565b600260005562093a8063ffffffff82161115610ff55760405162461bcd60e51b8152602060048201526012602482015271504d5f534652533a20746f6f206c6172676560701b604482015260640161075e565b610e108163ffffffff1610156110425760405162461bcd60e51b8152602060048201526012602482015271141357d4d19494ce881d1bdbc81cdb585b1b60721b604482015260640161075e565b601d805463ffffffff60381b1916600160381b63ffffffff8416908102919091179091556040519081527fa703b265f29064a106acd6473c258e009bff9ac0bfd63b6f5ca4b712a25c8516906020016109c7565b6110c86040518060800160405280600081526020016000815260200160008152602001600064ffffffffff1681525090565b6110d06122b5565b6002600054036110f25760405162461bcd60e51b815260040161075e906158c5565b600260009081558061110687878684611b5d565b91509150818511156111535760405162461bcd60e51b8152602060048201526016602482015275141357d4ce881d1bdbc81b185c99d948185b5bdd5b9d60521b604482015260640161075e565b600061115d6112bb565b9050600061119b600f60405180608001604052808c151581526020018b151581526020018a8152602001600360050154815250611caf61247a6124b6565b90506040518060800160405280826000015181526020018260200151815260200182604001518152602001826060015164ffffffffff1681525094506112006019601f60000160069054906101000a900463ffffffff16846111fb6112bb565b6127ed565b61120b600c8461285f565b7f4af368bb319fb6132e4a959e88a5bd0ebed952b65925f8503bb497d99de64b20898989886000015185608001518a606001518b602001518c60400151604051611299989796959493929190971515885295151560208801526040870194909452606086019290925264ffffffffff90811660808601521660a084015260c083015260e08201526101000190565b60405180910390a16112a9612889565b50506001600055509095945050505050565b60035460009081036112cd5750600090565b600354600454610c8491906129c1565b6000806112f660038001546003600401548787876129d2565b915091505b935093915050565b6002805461131090615a0a565b80601f016020809104026020016040519081016040528092919081815260200182805461133c90615a0a565b80156113895780601f1061135e57610100808354040283529160200191611389565b820191906000526020600020905b81548152906001019060200180831161136c57829003601f168201915b505050505081565b60008061139c6122b5565b6002600054036113be5760405162461bcd60e51b815260040161075e906158c5565b600260005560408051602081019091528381526113dd90600390612a40565b604080518381526020810183905290810186905291935091507f0bb89aa54ed6940a7e7167bd262b2400d63945045ceff1a52a05f2601ed215f19060600160405180910390a160016000559092909150565b600080600061143c6122b5565b60026000540361145e5760405162461bcd60e51b815260040161075e906158c5565b6002600090815560055490036114ba576114ba7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008787612b57565b6114d96003604051806040016040528088815260200187815250612d6b565b604080518481526020810184905290810182905292955090935091507fd7f28048575eead8851d024ead087913957dfb4fd1a02b4d1573f5352a5a2be39060600160405180910390a160016000819055509250925092565b611539612237565b60026000540361155b5760405162461bcd60e51b815260040161075e906158c5565b600260005562093a8063ffffffff821611156115af5760405162461bcd60e51b8152602060048201526013602482015272504d5f53464d45533a20746f6f206c6172676560681b604482015260640161075e565b601d805466ffffffff0000001916630100000063ffffffff8416908102919091179091556040519081527f5b18da8898c1e492e6bc631eec59d143ebba7f31ca794b668f0bfa9b0d989293906020016109c7565b60608167ffffffffffffffff81111561161e5761161e615a3e565b60405190808252806020026020018201604052801561165157816020015b606081526020019060019003908161163c5790505b50905060005b828110156116f1576116c13085858481811061167557611675615a54565b90506020028101906116879190615a6a565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612f3592505050565b8282815181106116d3576116d3615a54565b602002602001018190525080806116e990615ab1565b915050611657565b505b92915050565b6040516399d5040960e01b8152600f6004820152821515602482015264ffffffffff821660448201526000908190819073C91bD33af94343d14e313602345d901819F3959d906399d5040990606401606060405180830381865af4158015611765573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117899190615aca565b65ffffffffffff9092169450925090505b9250925092565b6117a9612237565b6002600054036117cb5760405162461bcd60e51b815260040161075e906158c5565b60026000556207a1206117e46040830160208401615631565b62ffffff1611156118375760405162461bcd60e51b815260206004820152601e60248201527f50455f53504c433a20746f6f206c61726765206c69717569646174696f6e0000604482015260640161075e565b6118476040820160208301615631565b62ffffff166118596020830183615631565b62ffffff16111561189f5760405162461bcd60e51b815260206004820152601060248201526f141157d4d41310ce881a5b9d985b1a5960821b604482015260640161075e565b620f42406118b36080830160608401615631565b62ffffff16106119055760405162461bcd60e51b815260206004820152601a60248201527f50455f53504c433a20656d6120746f6f206c61726765206c6971000000000000604482015260640161075e565b6119156080820160608301615631565b62ffffff1661192a6060830160408401615631565b62ffffff1611156119745760405162461bcd60e51b8152602060048201526014602482015273141157d4d41310ce88195b58481a5b9d985b1a5960621b604482015260640161075e565b80601e6119818282615b0c565b507fbe7eee05a638b28e8473a6f87ae310d3123f8a2a7561ce96e140f76125f7461290506119b26020830183615631565b6119c26040840160208501615631565b6119d26060850160408601615631565b6119e26080860160608701615631565b6119f260a0870160808801615679565b6040516109c79594939291906155b0565b6000611a1d611a10610e78565b611a18610c13565b612f5a565b604051632e45552560e21b81526013600482015290915060009073C91bD33af94343d14e313602345d901819F3959d9063b915549490602401602060405180830381865af4158015611a73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a979190615978565b90508015801590610a7b575081811115610a8457919050565b6000610e5b8484846000611b5d565b611ac7612237565b6001600160a01b038116611b2c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161075e565b611b35816123e5565b50565b6001600160a01b03163b151590565b42600290910155565b600160601b600590910155565b6000611b8360405180606001604052806000815260200160008152602001600081525090565b600554600003611b965760009150611ca6565b82600003611bd4576000611ba86112bb565b9050611bb7600c601e83612f76565b9150611bd082600001518360400151601e888b15613042565b9350505b600354600454611bef91908888611be9610c13565b886130f0565b915073C91bD33af94343d14e313602345d901819F3959d63b2041ed987611c1757600f611c1a565b60135b60085460405160e084901b6001600160e01b031916815260048101929092528915156024830152881515604483015260648201879052608482015260a401602060405180830381865af4158015611c75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c999190615978565b611ca390836158b2565b91505b94509492505050565b600354600454600091611ccc918686611cc6610c13565b876130f0565b90505b9392505050565b611d246040518060e001604052806000815260200160008152602001600081526020016000815260200160008152602001600064ffffffffff168152602001600064ffffffffff1681525090565b602083015183518554911515901515149064ffffffffff166000805b64ffffffffff83161561212457611db360405180610120016040528060006001600160801b031681526020016000815260200160008152602001600064ffffffffff168152602001600064ffffffffff168152602001600081526020016000815260200160008152602001600081525090565b64ffffffffff8416600090815260018a016020526040902054600160801b90046001600160801b03168082526060890151611df39190600160601b61325f565b60208083018290528951908a0151611e0e9263ffffffff8b16565b60408083019190915264ffffffffff80861660008181526001808e01602081815286842054600160281b8104871660608a01908152958552918152600160501b909104851660808801529251909316815260028d01909152919091200154611e7690846158b2565b60a0820152606081015164ffffffffff1660009081526002808b0160205260409091200154611ea590836158b2565b60c0820152604081015160009086611ece57611ec98360c001518b6060015161330e565b611ed4565b8260a001515b611ede91906158b2565b905080896040015111611f2157816060015164ffffffffff16600003611f1557611f088a8661331f565b64ffffffffff1660a08801525b50606001519250611d40565b608082015164ffffffffff908116600090815260028c016020526040808220600190810154938916835291200154611f599190615bf1565b611f6390856158b2565b60e0830152608082015164ffffffffff90811660009081526002808d01602052604080832082015493891683529091200154611f9f9190615bf1565b611fa990846158b2565b610100830152604082015160009087611fd457611fcf8461010001518c6060015161330e565b611fda565b8360e001515b611fe491906158b2565b9050808a6040015110156120e7576040830151885260a0830151602089015260c083015160608b0151612017919061330e565b6040890152861561205757818a604001516120329190615bf1565b60608901819052602084015161204d9190600160601b61325f565b60808901526120ba565b818a604001516120679190615bf1565b6080890181905260208401516120839190600160601b9061325f565b6060890181905264ffffffffff8716600090815260028d0160205260409020546120b49190610c7a90600190615bf1565b60608901525b6120c48b8761331f565b64ffffffffff90811660a08a01529590951660c088015250611ccf945050505050565b8260e0015194508261010001519350826080015164ffffffffff166000036121175764ffffffffff861660a08901525b5050608001519250611d40565b60208501829052606087015161213b90829061330e565b60408601528361214f578460400151612155565b84602001515b87604001516121649190615bf1565b8552505050509392505050565b600080612185620f42408460400151613448565b90508260200151156121e05760608301516000906121a390836134ae565b8451909150156121c8576121c185826121bc89826134c3565b61325f565b92506121da565b6121d786826121bc88826134c3565b92505b5061222f565b82511561220a5760608301516122039086906121fc87826134cf565b60016134db565b9150612222565b606083015161221f9085906121fc88826134cf565b91505b61222c828261352c565b91505b509392505050565b6001546001600160a01b03163314610e765760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161075e565b6000806122a1620f424084613448565b90506122ad8482613543565b949350505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314610e765760405162461bcd60e51b815260206004820152601d60248201527f504d5f4f453a2063616c6c6572206973206e6f742065786368616e6765000000604482015260640161075e565b60008061233e848460400151613558565b90506122ad836000015162ffffff16612365856020015162ffffff1684600160601b61325f565b906134c3565b600081831061237a5781611ccf565b5090919050565b600062ffffff821115610a845760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203260448201526534206269747360d01b606482015260840161075e565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000611ccc61244685856129c1565b600160601b8461325f565b600080612467838560000154866002015461325f565b610c07848660010154876002015461325f565b6000611ccc60036040518060800160405280871515815260200186151581526020016124a4610c13565b62ffffff1681526020018590526135d5565b6124f66040518060a00160405280600081526020016000815260200160008152602001600064ffffffffff168152602001600064ffffffffff1681525090565b8351600090612505578561250a565b856004015b90506000612519828787611cd6565b80519091501561254e5785516020870151825161253b92919063ffffffff8816565b8351849061254a9083906158b2565b9052505b6020860151865115159015151460006125648990565b90508260a0015164ffffffffff16600014612662576008890180546001919060009061259990849065ffffffffffff16615c04565b82546101009290920a65ffffffffffff818102199093169183160217909155604080516020808201835260608d0151825260088e0154909316600090815260098e019093529120905190555087511561260b5760a08301516126069085906136166136296136398661364d565b612625565b60a083015161262590859061377261378161378e8661364d565b8161263457826020015161263a565b82604001515b855186906126499083906158b2565b90525060a083015164ffffffffff1660808601526126a6565b6020830151156126845760405162461bcd60e51b815260040161075e90615c23565b6040830151156126a65760405162461bcd60e51b815260040161075e90615c23565b60c083015164ffffffffff161561279d57606083015160c084015164ffffffffff166000908152600286016020526040812080549091906126e8908490615bf1565b909155505060c083015164ffffffffff1660009081526002850160205260409020546127265760405162461bcd60e51b815260040161075e90615c23565b61274c8360c00151896000015161273f57613781612743565b6136295b8691908461379a565b8161275b578260600151612761565b82608001515b855186906127709083906158b2565b90525060608084015160208701526080840151604087015260c084015164ffffffffff16908601526127e1565b6060830151156127bf5760405162461bcd60e51b815260040161075e90615c23565b6080830151156127e15760405162461bcd60e51b815260040161075e90615c23565b50505050949350505050565b600184015442908111612826576128088560020154836137e2565b6002860155600385015461281c908361236b565b6003860155612858565b600185018190556128378585613558565b855561284383836137e2565b6002860155612852838361236b565b60038601555b5050505050565b806020015160000361286f575050565b805182556020810151600183015560400151600290910155565b6000612893610e78565b6040805160c0810182526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f0000000000000000000000000000000000000000000000000000000000000000166020820152908101829052601d5462ffffff8116606083015263ffffffff6301000000820481166080840152600160381b9091041660a08201529091506000908190819061293c906009906137f2565b925092509250826000036129505750505050565b61295b60038461398e565b6006546007546040805186815263ffffffff8616602082015290810184905260608101879052608081019290925260a08201527f318daee0b48d1f6a0542d8cdd35e2593d88c4fb01708f4781609494206d070519060c00160405180910390a150505050565b6000611ccf82600160601b8561325f565b60008060006129f26129e386613a92565b6129ec8a613a92565b90613afc565b90506000612a026129e386613a92565b9050612a1d82600160601b612a168a613a92565b9190613b08565b612a2f82600160601b612a168b613a92565b9350935050505b9550959350505050565b81546001830154600284015483516000938493909290918490612a6490858461325f565b90506000612a778860000151858561325f565b9050600082118015612a895750600081115b612acd5760405162461bcd60e51b8152602060048201526015602482015274504c5f524c3a206f7574707574206973207a65726f60581b604482015260640161075e565b612ad785836134cf565b8955612ae384826134cf565b60018a01558751600090612af89085906134cf565b90506103e8811015612b435760405162461bcd60e51b8152602060048201526014602482015273504c5f524c3a206d696e206c697175696469747960601b604482015260640161075e565b60028a015590955093505050509250929050565b6000612b6285613bac565b90506000612b6f85613bac565b905060008211612bc15760405162461bcd60e51b815260206004820152601b60248201527f464c5f56494c503a20696e76616c696420626173652070726963650000000000604482015260640161075e565b60008111612c115760405162461bcd60e51b815260206004820152601c60248201527f464c5f56494c503a20696e76616c69642071756f746520707269636500000000604482015260640161075e565b6000612c1c87613c72565b90506000612c2987613c72565b9050604d60ff83161115612c7f5760405162461bcd60e51b815260206004820152601e60248201527f464c5f56494c503a20696e76616c6964206261736520646563696d616c730000604482015260640161075e565b604d60ff82161115612cd35760405162461bcd60e51b815260206004820152601f60248201527f464c5f56494c503a20696e76616c69642071756f746520646563696d616c7300604482015260640161075e565b6000612ce486600160601b8961325f565b90506000612cf58484888886613d38565b9050612d08600160601b620186a06134ae565b612d1182613db8565b1115612d5f5760405162461bcd60e51b815260206004820152601b60248201527f464c5f56494c503a20746f6f206661722066726f6d20696e6465780000000000604482015260640161075e565b50505050505050505050565b60008060008085600201549050600081600003612e415760208601518651600091612d9e91612d9991613ddc565b613de8565b9050612dac816103e86134cf565b875190925015801590612dc3575060008760200151115b8015612dcf5750600082115b612e1b5760405162461bcd60e51b815260206004820152601d60248201527f504c5f414c3a20696e697469616c206c6971756964697479207a65726f000000604482015260640161075e565b8651808955602088015160018a0181905560028a019290925595509350915061179a9050565b8654600188015487516020890151600091612e6191610c7a90868661325f565b90506000612e7c8a60200151610c7a8c60000151868861325f565b9050612e97612e8c83888761325f565b610c7a83898761325f565b9450600082118015612ea95750600081115b8015612eb55750600085115b612ef95760405162461bcd60e51b8152602060048201526015602482015274504c5f414c3a206c6971756964697479207a65726f60581b604482015260640161075e565b612f0384836134c3565b8b55612f0f83826134c3565b60018c0155612f1e86866134c3565b60028c015590975095509193505050509250925092565b6060611ccf8383604051806060016040528060278152602001615e6b60279139613f4e565b600080612f6a620f424084613448565b90506122ad848261401f565b612f9a60405180606001604052806000815260200160008152602001600081525090565b60018401544290808211612fbd5750508354815260028401546040820152611ccf565b6000612fc983836134cf565b8754909150600003612fe15760408401859052613031565b855463ffffffff600160601b90910481169060009061300490849084906134c316565b905061302961301488858461325f565b6123658b600201548563ffffffff168561325f565b604087015250505b505082825260208201529392505050565b60008061306f8461305957855462ffffff16613068565b85546301000000900462ffffff165b88906134ae565b905060006130a38561308e578654600160301b900462ffffff16613068565b86548890600160481b900462ffffff166134ae565b905083156130cb576130c26130b889846134c3565b610c7a89846134c3565b925050506130e7565b6130c26130d889846134cf565b6130e289846134cf565b6137e2565b95945050505050565b600080613100620f424085613448565b9050600061310e8989613ddc565b905086156131a25760006131318361312b84600160601b8961325f565b906134ae565b9050600061313f8b80613ddc565b9050808211613155576000945050505050613255565b600061316183836134cf565b905060006131796131728e886134ae565b8e906134c3565b90506131976131888288613543565b6131928489613543565b614036565b965050505050613215565b60006131b78361312b8488600160601b61325f565b905060006131c58a80613ddc565b90508082116131db576000945050505050613255565b60006131e783836134cf565b905060006131ff6131f88d886134ae565b8d906134c3565b905061320e6131888288613543565b9650505050505b856132525761324f898960405180608001604052808b151581526020016001151581526020018962ffffff16815260200187815250612171565b92505b50505b9695505050505050565b60008080600019858709858702925082811083820303915050806000036132995783828161328f5761328f6159b5565b0492505050611ccf565b8084116132a557600080fd5b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6000611ccf8383600160601b61325f565b600064ffffffffff821661336f5760405162461bcd60e51b81526020600482015260176024820152765242544c5f503a2074617267657420697320656d70747960481b604482015260640161075e565b64ffffffffff8281166000908152600185016020526040902054600160281b900416156133ca5764ffffffffff80831660009081526001850160205260409020546133c3918591600160281b900416614062565b90506116f3565b5064ffffffffff8082166000908152600184016020526040902054165b64ffffffffff811615801590613420575064ffffffffff8181166000908152600185016020526040902054600160281b90048116908316145b156116f35764ffffffffff8082166000908152600185016020526040902054919250166133e7565b60008262ffffff168262ffffff1611156134a45760405162461bcd60e51b815260206004820152601e60248201527f506572704d6174683a207375627472616374696f6e206f766572666c6f770000604482015260640161075e565b611ccf8284615c48565b6000611ccf838362ffffff16620f424061325f565b6000611ccf82846158b2565b6000611ccf8284615bf1565b6000806134e986868661325f565b905060018360028111156134ff576134ff615c64565b14801561351c575060008480613517576135176159b5565b868809115b156130e7576132556001826158b2565b6000611ccf83620f42408462ffffff1660016134db565b6000611ccf83620f42408462ffffff1661325f565b6000826003015460000361356e575060006116f3565b6000613595600160601b61358f8660020154600160601b886003015461325f565b906134cf565b905060006135a4846001615c7a565b63ffffffff1690506130e76135c282846140bc90919063ffffffff16565b86546123659063ffffffff88168561325f565b60006135ea8360000154846001015484612171565b8251602084015185546001870154606087015194955061360a94866140c8565b60018501559092555090565b60008161222c600482016001878761414a565b6000816122ad60048201856141df565b806136486004820182856142ee565b505050565b64ffffffffff85166136995760405162461bcd60e51b81526020600482015260156024820152745242544c5f524c3a206b657920697320656d70747960581b604482015260640161075e565b6136a3868661432f565b6136e85760405162461bcd60e51b81526020600482015260166024820152751490951317d4930e881ad95e481b9bdd08195e1a5cdd60521b604482015260640161075e565b6040805160808082018352885464ffffffffff908116835288166020830152918101919091526060810182905261372390879086868661437a565b50865464ffffffffff91821664ffffffffff19918216811789556000908152600189016020526040808220805490931690925597549091168752909520805460ff60781b191690555050505050565b60008161222c8183878761414a565b6000816122ad81856141df565b806136488180856142ee565b64ffffffffff8316156137dc576137b583828463ffffffff16565b6137dc5764ffffffffff92831660009081526001850160205260409020549092169161379a565b50505050565b60008183101561237a5781611ccf565b60008060008042905060006138148760020154836134cf90919063ffffffff16565b905080600003613830576000806000945094509450505061179a565b600061383f8760000151613bac565b905060006138508860200151613bac565b905060006138618960000151613c72565b905060006138728a60200151613c72565b8b54909150841480156138885750828b60010154145b80613891575083155b8061389a575082155b806138a85750604d60ff8316115b806138b65750604d60ff8216115b156138d157600080600098509850985050505050505061179a565b6138e5858b6080015163ffffffff1661236b565b94506138f0856145a8565b9750613903828286868e60400151613d38565b9650600061392a6139258c60600151600160601b6134ae90919063ffffffff16565b613a92565b9050613948613939828a61460d565b61394283615c97565b9061461c565b975061397161395687613a92565b8c60a0015163ffffffff168a613b089092919063ffffffff16565b948c55505050600189015560028801929092555092509250925092565b8060000361399a575050565b60006139a582613db8565b90506000821315613a0857600183015460006139c68284600160601b61325f565b90506139d282826134cf565b85600101819055506139fb6139f082600160601b886002015461325f565b6004870154906134c3565b600486015550613a5a9050565b82546000613a1f82846121bc600160601b826134c3565b9050613a2b82826134cf565b85556002850154613a5290613a47908390600160601b9061325f565b6003870154906134c3565b600386015550505b613a858360050154613a7b613a76856129ec600160601b613a92565b61462c565b600160601b61325f565b8360050181905550505050565b60006001600160ff1b03821115610a845760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b606482015260840161075e565b6000611ccf8284615cb3565b60008060008512613b195784613b22565b613b228561467e565b90506000808512613b335784613b3c565b613b3c8561467e565b905060008087128015613b4f5750600086135b80613b655750600087138015613b655750600086125b613b70576000613b73565b60015b90506000613b8284848861325f565b905081613b9757613b9281613a92565b613ba0565b613ba0816146dc565b98975050505050505050565b60006001600160a01b038216613bc457506001919050565b60408051600481526024810182526020810180516001600160e01b0316634c6afee560e11b179052905160009081906001600160a01b03861690613c09908590615cd3565b600060405180830381855afa9150503d8060008114613c44576040519150601f19603f3d011682016040523d82523d6000602084013e613c49565b606091505b509150915081613c5e57506000949350505050565b808060200190518101906130e79190615978565b60006001600160a01b038216613c8a57506000919050565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b179052905160009081906001600160a01b03861690613ccf908590615cd3565b600060405180830381855afa9150503d8060008114613d0a576040519150601f19603f3d011682016040523d82523d6000602084013e613d0f565b606091505b509150915081613d24575060ff949350505050565b808060200190518101906130e79190615cef565b60008160ff8716151580613d4d575084600114155b15613d6a57613d6781613d6189600a615df6565b8761325f565b90505b60ff8616151580613d7c575083600114155b15613d9457613d9181856121bc89600a615df6565b90505b613dad613da4600160601b613a92565b6129ec83613a92565b979650505050505050565b600080821215613dd357613dce613a768361467e565b6116f3565b6116f38261462c565b6000611ccf8284615e05565b600081600003613dfa57506000919050565b600182608081901c15613e125760409190911b9060801c5b604081901c15613e275760209190911b9060401c5b602081901c15613e3c5760109190911b9060201c5b601081901c15613e515760089190911b9060101c5b600881901c15613e665760049190911b9060081c5b600481901c15613e7b5760029190911b9060041c5b600281901c15613e8d57600182901b91505b6001828581613e9e57613e9e6159b5565b048301901c91506001828581613eb657613eb66159b5565b048301901c91506001828581613ece57613ece6159b5565b048301901c91506001828581613ee657613ee66159b5565b048301901c91506001828581613efe57613efe6159b5565b048301901c91506001828581613f1657613f166159b5565b048301901c91506001828581613f2e57613f2e6159b5565b048301901c91506122ad82838681613f4857613f486159b5565b0461236b565b6060613f5984611b38565b613fb45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161075e565b600080856001600160a01b031685604051613fcf9190615cd3565b600060405180830381855af49150503d806000811461400a576040519150601f19603f3d011682016040523d82523d6000602084013e61400f565b606091505b50915091506132558282866146f0565b6000611ccf838362ffffff16620f424060016134db565b6000611ccf600261405c8561358f612d99614052886004613ddc565b6123658a80613ddc565b906140bc565b60005b64ffffffffff8281166000908152600185016020526040902054600160501b900416156140b65764ffffffffff9182166000908152600184016020526040902054600160501b900490911690614065565b50919050565b6000611ccf8284615e24565b600080861561410a5787156140f4576140e186856134c3565b91506140ed85846134cf565b905061413f565b6140fe86846134cf565b91506140ed85856134c3565b87156141265761411a86846134c3565b91506140ed85856134cf565b61413086856134cf565b915061413c85846134c3565b90505b965096945050505050565b64ffffffffff828116600090815260018601602052604080822054928416825281205490916001600160801b03600160801b9182900481169291909104168082036141a9578364ffffffffff168564ffffffffff1610925050506122ad565b856141c857806001600160801b0316826001600160801b031610613dad565b6001600160801b0390811691161195945050505050565b64ffffffffff808216600090815260028085016020818152604080852060018082015495820154818b01855283882054959094529054600160501b85048816808852838820830154600160281b90960490981680885292872090910154959694959294919391928792614251916158b2565b61425b91906158b2565b905060006142698989614729565b64ffffffffff80851660009081526002808d0160205260408083208201549389168352909120015461429b91906158b2565b6142a591906158b2565b905085821480156142b557508481145b9650866142e25764ffffffffff881660009081526002808b01602052604090912060018101849055018190555b50505050505092915050565b60089091015464ffffffffff909116600090815260029092016020526040909120600301805465ffffffffffff191665ffffffffffff909216919091179055565b600064ffffffffff821615801590611ccf5750825464ffffffffff83811691161480611ccf57505064ffffffffff908116600090815260019290920160205260409091205416151590565b8351600090819064ffffffffff1661439b5750506040840151600090612a36565b855164ffffffffff166000908152600188016020526040902054600160781b900460ff166143ca5760016143cd565b60005b866040018181516143de9190615e38565b60ff169052508551602087015164ffffffffff91821691160361444657614411866000015187606001518563ffffffff16565b5050835164ffffffffff9081166000908152600187016020526040908190205490860151600160501b90910490911690612a36565b6144618660200151876000015188606001518863ffffffff16565b156145255760408051608081018252875164ffffffffff908116600090815260018b01602090815284822054600160281b900483168452808b0151909216918301919091528883015160ff16928201929092526060808901519082015281906144ce908a9089898961437a565b895164ffffffffff808216600090815260018e0160205260409081902054908d015160608e015195975093955061451a948e94889493600160501b909304909216918c91889190614770565b935093505050612a36565b61453b866000015187606001518563ffffffff16565b60408051608081018252875164ffffffffff908116600090815260018b0160209081529084902054600160501b900482168352808a0151909116908201528782015160ff16918101919091526060808801519082015261459f90889087878761437a565b91509150612a36565b600063ffffffff821115610a845760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b606482015260840161075e565b600081831261237a5781611ccf565b60008183121561237a5781611ccf565b600080821215610a845760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f736974697665604482015260640161075e565b6000600160ff1b82136146d35760405162461bcd60e51b815260206004820152601c60248201527f506572704d6174683a20696e76657273696f6e206f766572666c6f7700000000604482015260640161075e565b6116f382615c97565b60006146e782613a92565b6116f390615c97565b606083156146ff575081611ccf565b82511561470f5782518084602001fd5b8160405162461bcd60e51b815260040161075e9190615712565b64ffffffffff8116600090815260018301602090815260408083205460028601909252822054600160801b9091046001600160801b0316906122ad9082600160601b61325f565b6000808360ff168560ff161115614874576147d38a6040518060c001604052808c64ffffffffff1681526020018b64ffffffffff1681526020018a64ffffffffff1681526020018860ff1681526020018760ff1681526020018681525088614a64565b5064ffffffffff8116600090815260018c016020526040902054909250859150600160781b900460ff168015614838575064ffffffffff828116600090815260018c01602052604080822054600160501b900490921681522054600160781b900460ff165b1561486f5764ffffffffff821660009081526001808c016020526040909120805460ff60781b1916905561486c9082615e51565b90505b614a57565b8360ff168560ff16101561496b576148d48a6040518060c001604052808c64ffffffffff1681526020018b64ffffffffff1681526020018a64ffffffffff1681526020018860ff1681526020018760ff1681526020018681525088614d5a565b64ffffffffff8116600090815260018c016020526040902054909250849150600160781b900460ff168015614838575064ffffffffff828116600090815260018c01602052604080822054600160281b900490921681522054600160781b900460ff161561486f5764ffffffffff821660009081526001808c016020526040909120805460ff60781b1916905561486c9082615e51565b64ffffffffff8916600090815260018b016020526040812054600160781b900460ff161580156149bb575064ffffffffff8816600090815260018c016020526040902054600160781b900460ff16155b64ffffffffff8a8116600090815260018e016020526040902080546fff0000000000ffffffffff00000000001916600160781b8415150264ffffffffff60281b191617600160281b8e8416021764ffffffffff60501b1916600160501b928c16929092029190911790559050614a35898563ffffffff8a16565b508881614a43576001614a46565b60005b614a509088615e51565b9093509150505b9850989650505050505050565b815164ffffffffff1660009081526001840160205260408120548190600160781b900460ff16158015614aa45750836080015160ff16846060015160ff16145b15614b56576020808501805164ffffffffff9081166000908152600189019093526040808420805460ff60781b1916600160781b17905587518351831685528185208054918416600160281b0264ffffffffff60281b19909216919091179055808801518351831685529320805493909116600160501b0264ffffffffff60501b19909316929092179091555160a0850151614b44919063ffffffff8616565b505050602082015160608301516112fb565b6040805160c081018252855164ffffffffff908116600090815260018901602081815285832054600160501b900484168552808a0151841681860152898601518416858701528951909316825290915291822054614bff9188916060820190600160781b900460ff16614bca576001614bcd565b60005b8960600151614bdc9190615e38565b60ff168152602001886080015160ff1681526020018860a0015181525086614a64565b50855164ffffffffff9081166000908152600189016020526040808220805464ffffffffff60501b1916600160501b868616021790558851909216815220805464ffffffffff19169055855160a0870151919250614c609163ffffffff8716565b50845164ffffffffff166000908152600187016020526040902054600160781b900460ff16158015614cb1575064ffffffffff81166000908152600187016020526040902054600160781b900460ff165b8015614cec575064ffffffffff818116600090815260018801602052604080822054600160501b900490921681522054600160781b900460ff165b15614d475764ffffffffff808216600090815260018801602052604080822054600160501b9004909216815220805460ff60781b19169055845160a0860151614d389188918790615118565b606085015190925090506112fb565b5050825160609093015192949293505050565b60408281015164ffffffffff1660009081526001850160205290812054600160781b900460ff16158015614d9b5750826080015160ff16836060015160ff16145b15614ed0576020808401805164ffffffffff9081166000908152600188019093526040808420805460ff60781b1916600160781b17905586518351831685528185208054918416600160281b0264ffffffffff60281b19909216919091179055808701519251821684529092208054918316600160501b0264ffffffffff60501b1990921691909117905583511615614e6557602083810151845164ffffffffff9081166000908152600188019093526040909220805464ffffffffff1916929091169190911790555b604083015164ffffffffff1615614eae5760208381015160408086015164ffffffffff9081166000908152600189019094529220805464ffffffffff1916929091169190911790555b614ec483602001518460a001518463ffffffff16565b50506020820151611ccf565b6040805160c081018252845164ffffffffff908116825260208087015182168184015286840180518316600090815260018a0180845286822054600160281b90048516868801526060808b015160ff908116918801919091529251909416815292909152928120549092614f8292889290916080830191600160781b900416614f5a576001614f5d565b60005b8860800151614f6c9190615e38565b60ff1681526020018760a0015181525085614d5a565b6040858101805164ffffffffff908116600090815260018a01602052838120805464ffffffffff60281b1916600160281b878516908102919091179091559251909116815291909120805464ffffffffff19169055909150156150135760408481015164ffffffffff83811660009081526001890160205292909220805464ffffffffff1916929091169190911790555b61502984604001518560a001518563ffffffff16565b5060408481015164ffffffffff166000908152600187016020522054600160781b900460ff1615801561507b575064ffffffffff81166000908152600186016020526040902054600160781b900460ff165b80156150b6575064ffffffffff818116600090815260018701602052604080822054600160281b900490921681522054600160781b900460ff165b1561510c5764ffffffffff808216600090815260018701602052604080822054600160281b90049092168152819020805460ff60781b1916905584015160a085015161510591879186906152f8565b9050611ccf565b50505060400151919050565b64ffffffffff80841660008181526001870160205260408082208054600160501b80820487168086529385205495909452600160281b909404851692830264ffffffffff60501b198516179055929190911690801561519e5764ffffffffff81811660009081526001890160205260409020805464ffffffffff19169188169190911790555b64ffffffffff83811660009081526001890160205260409020805464ffffffffff191691841691821790556151e757865464ffffffffff191664ffffffffff8416178755615286565b64ffffffffff8083166000908152600189016020526040902054600160281b900481169087160361524e5764ffffffffff808316600090815260018901602052604090208054918516600160281b0264ffffffffff60281b19909216919091179055615286565b64ffffffffff808316600090815260018901602052604090208054918516600160501b0264ffffffffff60501b199092169190911790555b64ffffffffff838116600081815260018a016020526040808220805464ffffffffff60281b1916600160281b958c1695860217905592815291909120805464ffffffffff191690911790556152df868563ffffffff8816565b506152ee83858763ffffffff16565b5050505050505050565b64ffffffffff80841660008181526001870160205260408082208054600160281b80820487168086529385205495909452600160501b909404851692830264ffffffffff60281b198516179055929190911690801561537e5764ffffffffff81811660009081526001890160205260409020805464ffffffffff19169188169190911790555b64ffffffffff83811660009081526001890160205260409020805464ffffffffff191691841691821790556153c757865464ffffffffff191664ffffffffff8416178755615466565b64ffffffffff8083166000908152600189016020526040902054600160501b900481169087160361542e5764ffffffffff808316600090815260018901602052604090208054918516600160501b0264ffffffffff60501b19909216919091179055615466565b64ffffffffff808316600090815260018901602052604090208054918516600160281b0264ffffffffff60281b199092169190911790555b64ffffffffff838116600081815260018a016020526040808220805464ffffffffff60501b1916600160501b958c1695860217905592815291909120805464ffffffffff191690911790556152df868563ffffffff8816565b803580151581146154cf57600080fd5b919050565b600080600080608085870312156154ea57600080fd5b6154f3856154bf565b9350615501602086016154bf565b925060408501359150615516606086016154bf565b905092959194509250565b6000606082840312156140b657600080fd5b64ffffffffff81168114611b3557600080fd5b6000806040838503121561555957600080fd5b615562836154bf565b9150602083013561557281615533565b809150509250929050565b60008060006060848603121561559257600080fd5b61559b846154bf565b95602085013595506040909401359392505050565b62ffffff958616815293851660208501529184166040840152909216606082015263ffffffff909116608082015260a00190565b6000806000606084860312156155f957600080fd5b615602846154bf565b9250615610602085016154bf565b9150604084013590509250925092565b62ffffff81168114611b3557600080fd5b60006020828403121561564357600080fd5b8135611ccf81615620565b60006020828403121561566057600080fd5b5035919050565b63ffffffff81168114611b3557600080fd5b60006020828403121561568b57600080fd5b8135611ccf81615667565b6000806000606084860312156156ab57600080fd5b505081359360208301359350604090920135919050565b60005b838110156156dd5781810151838201526020016156c5565b50506000910152565b600081518084526156fe8160208601602086016156c2565b601f01601f19169290920160200192915050565b602081526000611ccf60208301846156e6565b6000806040838503121561573857600080fd5b50508035926020909101359150565b6000806020838503121561575a57600080fd5b823567ffffffffffffffff8082111561577257600080fd5b818501915085601f83011261578657600080fd5b81358181111561579557600080fd5b8660208260051b85010111156157aa57600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561581157603f198886030184526157ff8583516156e6565b945092850192908501906001016157e3565b5092979650505050505050565b600060a082840312156140b657600080fd5b60008060006060848603121561584557600080fd5b61584e846154bf565b925061585c602085016154bf565b915061586a604085016154bf565b90509250925092565b60006020828403121561588557600080fd5b81356001600160a01b0381168114611ccf57600080fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156116f3576116f361589c565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b813561590781615620565b815462ffffff191662ffffff821617825550602082013561592781615620565b815465ffffff0000001916601882901b65ffffff0000001617825550604082013561595181615667565b815469ffffffff000000000000191660309190911b69ffffffff0000000000001617905550565b60006020828403121561598a57600080fd5b5051919050565b600080604083850312156159a457600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601260045260246000fd5b600062ffffff808416806159e1576159e16159b5565b92169190910492915050565b6000602082840312156159ff57600080fd5b8151611ccf81615533565b600181811c90821680615a1e57607f821691505b6020821081036140b657634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112615a8157600080fd5b83018035915067ffffffffffffffff821115615a9c57600080fd5b602001915036819003821315610c0c57600080fd5b600060018201615ac357615ac361589c565b5060010190565b600080600060608486031215615adf57600080fd5b835165ffffffffffff81168114615af557600080fd5b602085015160409095015190969495509392505050565b8135615b1781615620565b815462ffffff191662ffffff8216178255506020820135615b3781615620565b815465ffffff0000001916601882901b65ffffff00000016178255506040820135615b6181615620565b815462ffffff60301b8260301b1691508162ffffff60301b1982161783556060840135615b8d81615620565b62ffffff60481b60489190911b166bffffffffffff0000000000001982168317811784556080850135615bbf81615667565b6fffffffffffffffffffff00000000000019929092169092179190911760609190911b63ffffffff60601b1617905550565b818103818111156116f3576116f361589c565b65ffffffffffff8181168382160190808211156116f1576116f161589c565b6020808252600b908201526a3732bb32b91037b1b1bab960a91b604082015260600190565b62ffffff8281168282160390808211156116f1576116f161589c565b634e487b7160e01b600052602160045260246000fd5b63ffffffff8181168382160190808211156116f1576116f161589c565b6000600160ff1b8201615cac57615cac61589c565b5060000390565b81810360008312801583831316838312821617156116f1576116f161589c565b60008251615ce58184602087016156c2565b9190910192915050565b600060208284031215615d0157600080fd5b815160ff81168114611ccf57600080fd5b600181815b80851115615d4d578160001904821115615d3357615d3361589c565b80851615615d4057918102915b93841c9390800290615d17565b509250929050565b600082615d64575060016116f3565b81615d71575060006116f3565b8160018114615d875760028114615d9157615dad565b60019150506116f3565b60ff841115615da257615da261589c565b50506001821b6116f3565b5060208310610133831016604e8410600b8410161715615dd0575081810a6116f3565b615dda8383615d12565b8060001904821115615dee57615dee61589c565b029392505050565b6000611ccf60ff841683615d55565b6000816000190483118215151615615e1f57615e1f61589c565b500290565b600082615e3357615e336159b5565b500490565b60ff82811682821603908111156116f3576116f361589c565b60ff81811683821601908111156116f3576116f361589c56fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122016b53443987350ff9d102e004dbd0424e00e4df8758302be74394b36f30ba96a64736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102535760003560e01c806380796d55116101465780639d67bf03116100c3578063dba4915311610087578063dba49153146106a7578063e7a49931146106b9578063e801c4d8146106cc578063e8fa204f146106d4578063f2289752146106e7578063f2fde38b146106f257600080fd5b80639d67bf0314610604578063a4edcfc114610617578063ac9650d81461064d578063c9ca629b1461066d578063d2f7265a1461068057600080fd5b8063933c79791161010a578063933c7979146105ae5780639482de1a146105c157806395d89b41146105c95780639c8f9f23146105de5780639cd441da146105f157600080fd5b806380796d55146104f4578063823f2b041461054157806385aaa397146105685780638da5cb5b146105955780638ee8fe5d146105a657600080fd5b806356f55170116101d45780637452fadd116101985780637452fadd1461049c57806374f25689146104a45780637640482f146104b75780637661ce13146104ca578063796c20b7146104e157600080fd5b806356f55170146103be5780635a2f3d09146103e75780636346f32e1461043257806366a61ffb14610481578063715018a61461049457600080fd5b8063220e89ce1161021b578063220e89ce1461035057806323c8346a146103585780632724ebb01461036b5780633aa3e6501461039357806341744dd4146103b657600080fd5b806306f429b8146102585780630e06e4d01461027e578063125b9d27146102bd578063186f181e146102d25780631b520a02146102fe575b600080fd5b61026b6102663660046154d4565b610705565b6040519081526020015b60405180910390f35b6102a57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610275565b6102d06102cb366004615521565b61084c565b005b601d546102e990600160381b900463ffffffff1681565b60405163ffffffff9091168152602001610275565b601f546103289062ffffff808216916301000000810490911690600160301b900463ffffffff1683565b6040805162ffffff948516815293909216602084015263ffffffff1690820152606001610275565b61026b6109d7565b6102d0610366366004615546565b610a88565b61037e610379366004615546565b610b7a565b60408051928352602083019190915201610275565b601d546103a29062ffffff1681565b60405162ffffff9091168152602001610275565b6103a2610c13565b6103d16103cc36600461557d565b610c89565b60405164ffffffffff9091168152602001610275565b60035460045460055460065460075460085461040595949392919086565b604080519687526020870195909552938501929092526060840152608083015260a082015260c001610275565b601e546104709062ffffff8082169163010000008104821691600160301b8204811691600160481b810490911690600160601b900463ffffffff1685565b6040516102759594939291906155b0565b61026b61048f3660046155e4565b610e4c565b6102d0610e64565b61026b610e78565b6102d06104b2366004615631565b610e9e565b61037e6104c536600461564e565b610f61565b601d546102e9906301000000900463ffffffff1681565b6102d06104ef366004615679565b610f78565b6105076105023660046154d4565b611096565b604051610275919081518152602080830151908201526040808301519082015260609182015164ffffffffff169181019190915260800190565b6102a57f000000000000000000000000000000000000000000000000000000000000000081565b600c54600d54600e5461057a92919083565b60408051938452602084019290925290820152606001610275565b6001546001600160a01b03166102a5565b61026b6112bb565b61037e6105bc366004615696565b6112dd565b60085461026b565b6105d1611303565b6040516102759190615712565b61037e6105ec36600461564e565b611391565b61057a6105ff366004615725565b61142f565b6102d0610612366004615679565b611531565b601954601a54601b54601c5461062d9392919084565b604080519485526020850193909352918301526060820152608001610275565b61066061065b366004615747565b611603565b60405161027591906157bc565b61057a61067b366004615546565b6116f9565b6102a57f000000000000000000000000000000000000000000000000000000000000000081565b600954600a54600b5461057a92919083565b6102d06106c736600461581e565b6117a1565b61026b611a03565b61026b6106e2366004615830565b611ab0565b60065460075461037e565b6102d0610700366004615873565b611abf565b6000806107158686856000611b5d565b509050808411156107675760405162461bcd60e51b8152602060048201526017602482015276141357d414ce881d1bdbc81b185c99d948185b5bdd5b9d604a1b60448201526064015b60405180910390fd5b60006107a88761077857600f61077b565b60135b604080516080810182528a1515815289151560208201529081018890526008546060820152611caf611cd6565b600354600454604080516080810182528b151581528a151560208201529394506107eb939081016107d7610c13565b62ffffff1681528551602090910152612171565b925086151586151514801590610820578160600151826020015161080f91906158b2565b61081990856158b2565b9350610841565b8160800151826040015161083491906158b2565b61083e90856158b2565b93505b505050949350505050565b610854612237565b6002600054036108765760405162461bcd60e51b815260040161075e906158c5565b600260005561c35061088b6020830183615631565b62ffffff1611156108de5760405162461bcd60e51b815260206004820152601c60248201527f504d5f535046433a2066697865642066656520746f6f206c6172676500000000604482015260640161075e565b6127106108f16060830160408401615679565b63ffffffff1611156109455760405162461bcd60e51b815260206004820152601f60248201527f504d5f535046433a2061747220656d6120626c6f636b7320746f6f2062696700604482015260640161075e565b80601f61095282826158fc565b507f269f7c0d124741a5574762c75c64c04ad89fa3e91ec86aa3be1b9b6d6d08668790506109836020830183615631565b6109936040840160208501615631565b6109a36060850160408601615679565b6040805162ffffff948516815293909216602084015263ffffffff16908201526060015b60405180910390a1506001600055565b60006109f16109e4610e78565b6109ec610c13565b612291565b604051632e45552560e21b8152600f600482015290915060009073__$52dce10bb0994e0b74d4a2856cc70476a1$__9063b915549490602401602060405180830381865af4158015610a47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6b9190615978565b90508015801590610a7b57508181105b15610a84578091505b5090565b610a906122b5565b600260005403610ab25760405162461bcd60e51b815260040161075e906158c5565b6002600055604051632ec0b78b60e11b8152600f6004820152821515602482015264ffffffffff8216604482015273__$52dce10bb0994e0b74d4a2856cc70476a1$__90635d816f169060640160006040518083038186803b158015610b1757600080fd5b505af4158015610b2b573d6000803e3d6000fd5b505060408051851515815264ffffffffff851660208201527ff61aa5333bf001aa89f4bfa6ccaf123eec86eada7fd1c6c366227102507f89cd935001905060405180910390a150506001600055565b6040516302ea3f0960e01b8152600f6004820152821515602482015264ffffffffff82166044820152600090819073__$52dce10bb0994e0b74d4a2856cc70476a1$__906302ea3f09906064016040805180830381865af4158015610be3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c079190615991565b915091505b9250929050565b601e54600090610c8490610c7f90610c329060029062ffffff166159cb565b60408051606081018252601f5462ffffff80821683526301000000820481166020840152600160301b90910463ffffffff1692820192909252911690610c7a9060199061232d565b61236b565b612381565b905090565b6000610c936122b5565b600260005403610cb55760405162461bcd60e51b815260040161075e906158c5565b60026000558315610d1457610cc86109d7565b821115610d0f5760405162461bcd60e51b8152602060048201526015602482015274141357d0d313ce881c1bdcdd081bdb9b1e48189a59605a1b604482015260640161075e565b610d63565b610d1c611a03565b821015610d635760405162461bcd60e51b8152602060048201526015602482015274504d5f434c4f3a20706f7374206f6e6c792061736b60581b604482015260640161075e565b6040516383818a6f60e01b8152600f60048201528415156024820152604481018490526064810183905273__$52dce10bb0994e0b74d4a2856cc70476a1$__906383818a6f90608401602060405180830381865af4158015610dc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ded91906159ed565b6040805186151581526020810186905290810184905264ffffffffff821660608201529091507f7f6ce27b6803b5b961a441dac0f55de214751acfb64178849efb01fdb71c620b9060800160405180910390a160016000559392505050565b6000610e5b8484600085611b5d565b50949350505050565b610e6c612237565b610e7660006123e5565b565b6003546000908103610e8a5750600090565b600354600454600854610c84929190612437565b610ea6612237565b600260005403610ec85760405162461bcd60e51b815260040161075e906158c5565b6002600055620186a062ffffff82161115610f1b5760405162461bcd60e51b8152602060048201526013602482015272504d5f53464d50523a20746f6f206c6172676560681b604482015260640161075e565b601d805462ffffff191662ffffff83169081179091556040519081527f55647f4dd43ac173f04e53a506df46454012316d82fb04a9c1dbd8e0f21f8f76906020016109c7565b600080610f6f600384612451565b91509150915091565b610f80612237565b600260005403610fa25760405162461bcd60e51b815260040161075e906158c5565b600260005562093a8063ffffffff82161115610ff55760405162461bcd60e51b8152602060048201526012602482015271504d5f534652533a20746f6f206c6172676560701b604482015260640161075e565b610e108163ffffffff1610156110425760405162461bcd60e51b8152602060048201526012602482015271141357d4d19494ce881d1bdbc81cdb585b1b60721b604482015260640161075e565b601d805463ffffffff60381b1916600160381b63ffffffff8416908102919091179091556040519081527fa703b265f29064a106acd6473c258e009bff9ac0bfd63b6f5ca4b712a25c8516906020016109c7565b6110c86040518060800160405280600081526020016000815260200160008152602001600064ffffffffff1681525090565b6110d06122b5565b6002600054036110f25760405162461bcd60e51b815260040161075e906158c5565b600260009081558061110687878684611b5d565b91509150818511156111535760405162461bcd60e51b8152602060048201526016602482015275141357d4ce881d1bdbc81b185c99d948185b5bdd5b9d60521b604482015260640161075e565b600061115d6112bb565b9050600061119b600f60405180608001604052808c151581526020018b151581526020018a8152602001600360050154815250611caf61247a6124b6565b90506040518060800160405280826000015181526020018260200151815260200182604001518152602001826060015164ffffffffff1681525094506112006019601f60000160069054906101000a900463ffffffff16846111fb6112bb565b6127ed565b61120b600c8461285f565b7f4af368bb319fb6132e4a959e88a5bd0ebed952b65925f8503bb497d99de64b20898989886000015185608001518a606001518b602001518c60400151604051611299989796959493929190971515885295151560208801526040870194909452606086019290925264ffffffffff90811660808601521660a084015260c083015260e08201526101000190565b60405180910390a16112a9612889565b50506001600055509095945050505050565b60035460009081036112cd5750600090565b600354600454610c8491906129c1565b6000806112f660038001546003600401548787876129d2565b915091505b935093915050565b6002805461131090615a0a565b80601f016020809104026020016040519081016040528092919081815260200182805461133c90615a0a565b80156113895780601f1061135e57610100808354040283529160200191611389565b820191906000526020600020905b81548152906001019060200180831161136c57829003601f168201915b505050505081565b60008061139c6122b5565b6002600054036113be5760405162461bcd60e51b815260040161075e906158c5565b600260005560408051602081019091528381526113dd90600390612a40565b604080518381526020810183905290810186905291935091507f0bb89aa54ed6940a7e7167bd262b2400d63945045ceff1a52a05f2601ed215f19060600160405180910390a160016000559092909150565b600080600061143c6122b5565b60026000540361145e5760405162461bcd60e51b815260040161075e906158c5565b6002600090815560055490036114ba576114ba7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008787612b57565b6114d96003604051806040016040528088815260200187815250612d6b565b604080518481526020810184905290810182905292955090935091507fd7f28048575eead8851d024ead087913957dfb4fd1a02b4d1573f5352a5a2be39060600160405180910390a160016000819055509250925092565b611539612237565b60026000540361155b5760405162461bcd60e51b815260040161075e906158c5565b600260005562093a8063ffffffff821611156115af5760405162461bcd60e51b8152602060048201526013602482015272504d5f53464d45533a20746f6f206c6172676560681b604482015260640161075e565b601d805466ffffffff0000001916630100000063ffffffff8416908102919091179091556040519081527f5b18da8898c1e492e6bc631eec59d143ebba7f31ca794b668f0bfa9b0d989293906020016109c7565b60608167ffffffffffffffff81111561161e5761161e615a3e565b60405190808252806020026020018201604052801561165157816020015b606081526020019060019003908161163c5790505b50905060005b828110156116f1576116c13085858481811061167557611675615a54565b90506020028101906116879190615a6a565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612f3592505050565b8282815181106116d3576116d3615a54565b602002602001018190525080806116e990615ab1565b915050611657565b505b92915050565b6040516399d5040960e01b8152600f6004820152821515602482015264ffffffffff821660448201526000908190819073__$52dce10bb0994e0b74d4a2856cc70476a1$__906399d5040990606401606060405180830381865af4158015611765573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117899190615aca565b65ffffffffffff9092169450925090505b9250925092565b6117a9612237565b6002600054036117cb5760405162461bcd60e51b815260040161075e906158c5565b60026000556207a1206117e46040830160208401615631565b62ffffff1611156118375760405162461bcd60e51b815260206004820152601e60248201527f50455f53504c433a20746f6f206c61726765206c69717569646174696f6e0000604482015260640161075e565b6118476040820160208301615631565b62ffffff166118596020830183615631565b62ffffff16111561189f5760405162461bcd60e51b815260206004820152601060248201526f141157d4d41310ce881a5b9d985b1a5960821b604482015260640161075e565b620f42406118b36080830160608401615631565b62ffffff16106119055760405162461bcd60e51b815260206004820152601a60248201527f50455f53504c433a20656d6120746f6f206c61726765206c6971000000000000604482015260640161075e565b6119156080820160608301615631565b62ffffff1661192a6060830160408401615631565b62ffffff1611156119745760405162461bcd60e51b8152602060048201526014602482015273141157d4d41310ce88195b58481a5b9d985b1a5960621b604482015260640161075e565b80601e6119818282615b0c565b507fbe7eee05a638b28e8473a6f87ae310d3123f8a2a7561ce96e140f76125f7461290506119b26020830183615631565b6119c26040840160208501615631565b6119d26060850160408601615631565b6119e26080860160608701615631565b6119f260a0870160808801615679565b6040516109c79594939291906155b0565b6000611a1d611a10610e78565b611a18610c13565b612f5a565b604051632e45552560e21b81526013600482015290915060009073__$52dce10bb0994e0b74d4a2856cc70476a1$__9063b915549490602401602060405180830381865af4158015611a73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a979190615978565b90508015801590610a7b575081811115610a8457919050565b6000610e5b8484846000611b5d565b611ac7612237565b6001600160a01b038116611b2c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161075e565b611b35816123e5565b50565b6001600160a01b03163b151590565b42600290910155565b600160601b600590910155565b6000611b8360405180606001604052806000815260200160008152602001600081525090565b600554600003611b965760009150611ca6565b82600003611bd4576000611ba86112bb565b9050611bb7600c601e83612f76565b9150611bd082600001518360400151601e888b15613042565b9350505b600354600454611bef91908888611be9610c13565b886130f0565b915073__$52dce10bb0994e0b74d4a2856cc70476a1$__63b2041ed987611c1757600f611c1a565b60135b60085460405160e084901b6001600160e01b031916815260048101929092528915156024830152881515604483015260648201879052608482015260a401602060405180830381865af4158015611c75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c999190615978565b611ca390836158b2565b91505b94509492505050565b600354600454600091611ccc918686611cc6610c13565b876130f0565b90505b9392505050565b611d246040518060e001604052806000815260200160008152602001600081526020016000815260200160008152602001600064ffffffffff168152602001600064ffffffffff1681525090565b602083015183518554911515901515149064ffffffffff166000805b64ffffffffff83161561212457611db360405180610120016040528060006001600160801b031681526020016000815260200160008152602001600064ffffffffff168152602001600064ffffffffff168152602001600081526020016000815260200160008152602001600081525090565b64ffffffffff8416600090815260018a016020526040902054600160801b90046001600160801b03168082526060890151611df39190600160601b61325f565b60208083018290528951908a0151611e0e9263ffffffff8b16565b60408083019190915264ffffffffff80861660008181526001808e01602081815286842054600160281b8104871660608a01908152958552918152600160501b909104851660808801529251909316815260028d01909152919091200154611e7690846158b2565b60a0820152606081015164ffffffffff1660009081526002808b0160205260409091200154611ea590836158b2565b60c0820152604081015160009086611ece57611ec98360c001518b6060015161330e565b611ed4565b8260a001515b611ede91906158b2565b905080896040015111611f2157816060015164ffffffffff16600003611f1557611f088a8661331f565b64ffffffffff1660a08801525b50606001519250611d40565b608082015164ffffffffff908116600090815260028c016020526040808220600190810154938916835291200154611f599190615bf1565b611f6390856158b2565b60e0830152608082015164ffffffffff90811660009081526002808d01602052604080832082015493891683529091200154611f9f9190615bf1565b611fa990846158b2565b610100830152604082015160009087611fd457611fcf8461010001518c6060015161330e565b611fda565b8360e001515b611fe491906158b2565b9050808a6040015110156120e7576040830151885260a0830151602089015260c083015160608b0151612017919061330e565b6040890152861561205757818a604001516120329190615bf1565b60608901819052602084015161204d9190600160601b61325f565b60808901526120ba565b818a604001516120679190615bf1565b6080890181905260208401516120839190600160601b9061325f565b6060890181905264ffffffffff8716600090815260028d0160205260409020546120b49190610c7a90600190615bf1565b60608901525b6120c48b8761331f565b64ffffffffff90811660a08a01529590951660c088015250611ccf945050505050565b8260e0015194508261010001519350826080015164ffffffffff166000036121175764ffffffffff861660a08901525b5050608001519250611d40565b60208501829052606087015161213b90829061330e565b60408601528361214f578460400151612155565b84602001515b87604001516121649190615bf1565b8552505050509392505050565b600080612185620f42408460400151613448565b90508260200151156121e05760608301516000906121a390836134ae565b8451909150156121c8576121c185826121bc89826134c3565b61325f565b92506121da565b6121d786826121bc88826134c3565b92505b5061222f565b82511561220a5760608301516122039086906121fc87826134cf565b60016134db565b9150612222565b606083015161221f9085906121fc88826134cf565b91505b61222c828261352c565b91505b509392505050565b6001546001600160a01b03163314610e765760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161075e565b6000806122a1620f424084613448565b90506122ad8482613543565b949350505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314610e765760405162461bcd60e51b815260206004820152601d60248201527f504d5f4f453a2063616c6c6572206973206e6f742065786368616e6765000000604482015260640161075e565b60008061233e848460400151613558565b90506122ad836000015162ffffff16612365856020015162ffffff1684600160601b61325f565b906134c3565b600081831061237a5781611ccf565b5090919050565b600062ffffff821115610a845760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203260448201526534206269747360d01b606482015260840161075e565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000611ccc61244685856129c1565b600160601b8461325f565b600080612467838560000154866002015461325f565b610c07848660010154876002015461325f565b6000611ccc60036040518060800160405280871515815260200186151581526020016124a4610c13565b62ffffff1681526020018590526135d5565b6124f66040518060a00160405280600081526020016000815260200160008152602001600064ffffffffff168152602001600064ffffffffff1681525090565b8351600090612505578561250a565b856004015b90506000612519828787611cd6565b80519091501561254e5785516020870151825161253b92919063ffffffff8816565b8351849061254a9083906158b2565b9052505b6020860151865115159015151460006125648990565b90508260a0015164ffffffffff16600014612662576008890180546001919060009061259990849065ffffffffffff16615c04565b82546101009290920a65ffffffffffff818102199093169183160217909155604080516020808201835260608d0151825260088e0154909316600090815260098e019093529120905190555087511561260b5760a08301516126069085906136166136296136398661364d565b612625565b60a083015161262590859061377261378161378e8661364d565b8161263457826020015161263a565b82604001515b855186906126499083906158b2565b90525060a083015164ffffffffff1660808601526126a6565b6020830151156126845760405162461bcd60e51b815260040161075e90615c23565b6040830151156126a65760405162461bcd60e51b815260040161075e90615c23565b60c083015164ffffffffff161561279d57606083015160c084015164ffffffffff166000908152600286016020526040812080549091906126e8908490615bf1565b909155505060c083015164ffffffffff1660009081526002850160205260409020546127265760405162461bcd60e51b815260040161075e90615c23565b61274c8360c00151896000015161273f57613781612743565b6136295b8691908461379a565b8161275b578260600151612761565b82608001515b855186906127709083906158b2565b90525060608084015160208701526080840151604087015260c084015164ffffffffff16908601526127e1565b6060830151156127bf5760405162461bcd60e51b815260040161075e90615c23565b6080830151156127e15760405162461bcd60e51b815260040161075e90615c23565b50505050949350505050565b600184015442908111612826576128088560020154836137e2565b6002860155600385015461281c908361236b565b6003860155612858565b600185018190556128378585613558565b855561284383836137e2565b6002860155612852838361236b565b60038601555b5050505050565b806020015160000361286f575050565b805182556020810151600183015560400151600290910155565b6000612893610e78565b6040805160c0810182526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f0000000000000000000000000000000000000000000000000000000000000000166020820152908101829052601d5462ffffff8116606083015263ffffffff6301000000820481166080840152600160381b9091041660a08201529091506000908190819061293c906009906137f2565b925092509250826000036129505750505050565b61295b60038461398e565b6006546007546040805186815263ffffffff8616602082015290810184905260608101879052608081019290925260a08201527f318daee0b48d1f6a0542d8cdd35e2593d88c4fb01708f4781609494206d070519060c00160405180910390a150505050565b6000611ccf82600160601b8561325f565b60008060006129f26129e386613a92565b6129ec8a613a92565b90613afc565b90506000612a026129e386613a92565b9050612a1d82600160601b612a168a613a92565b9190613b08565b612a2f82600160601b612a168b613a92565b9350935050505b9550959350505050565b81546001830154600284015483516000938493909290918490612a6490858461325f565b90506000612a778860000151858561325f565b9050600082118015612a895750600081115b612acd5760405162461bcd60e51b8152602060048201526015602482015274504c5f524c3a206f7574707574206973207a65726f60581b604482015260640161075e565b612ad785836134cf565b8955612ae384826134cf565b60018a01558751600090612af89085906134cf565b90506103e8811015612b435760405162461bcd60e51b8152602060048201526014602482015273504c5f524c3a206d696e206c697175696469747960601b604482015260640161075e565b60028a015590955093505050509250929050565b6000612b6285613bac565b90506000612b6f85613bac565b905060008211612bc15760405162461bcd60e51b815260206004820152601b60248201527f464c5f56494c503a20696e76616c696420626173652070726963650000000000604482015260640161075e565b60008111612c115760405162461bcd60e51b815260206004820152601c60248201527f464c5f56494c503a20696e76616c69642071756f746520707269636500000000604482015260640161075e565b6000612c1c87613c72565b90506000612c2987613c72565b9050604d60ff83161115612c7f5760405162461bcd60e51b815260206004820152601e60248201527f464c5f56494c503a20696e76616c6964206261736520646563696d616c730000604482015260640161075e565b604d60ff82161115612cd35760405162461bcd60e51b815260206004820152601f60248201527f464c5f56494c503a20696e76616c69642071756f746520646563696d616c7300604482015260640161075e565b6000612ce486600160601b8961325f565b90506000612cf58484888886613d38565b9050612d08600160601b620186a06134ae565b612d1182613db8565b1115612d5f5760405162461bcd60e51b815260206004820152601b60248201527f464c5f56494c503a20746f6f206661722066726f6d20696e6465780000000000604482015260640161075e565b50505050505050505050565b60008060008085600201549050600081600003612e415760208601518651600091612d9e91612d9991613ddc565b613de8565b9050612dac816103e86134cf565b875190925015801590612dc3575060008760200151115b8015612dcf5750600082115b612e1b5760405162461bcd60e51b815260206004820152601d60248201527f504c5f414c3a20696e697469616c206c6971756964697479207a65726f000000604482015260640161075e565b8651808955602088015160018a0181905560028a019290925595509350915061179a9050565b8654600188015487516020890151600091612e6191610c7a90868661325f565b90506000612e7c8a60200151610c7a8c60000151868861325f565b9050612e97612e8c83888761325f565b610c7a83898761325f565b9450600082118015612ea95750600081115b8015612eb55750600085115b612ef95760405162461bcd60e51b8152602060048201526015602482015274504c5f414c3a206c6971756964697479207a65726f60581b604482015260640161075e565b612f0384836134c3565b8b55612f0f83826134c3565b60018c0155612f1e86866134c3565b60028c015590975095509193505050509250925092565b6060611ccf8383604051806060016040528060278152602001615e6b60279139613f4e565b600080612f6a620f424084613448565b90506122ad848261401f565b612f9a60405180606001604052806000815260200160008152602001600081525090565b60018401544290808211612fbd5750508354815260028401546040820152611ccf565b6000612fc983836134cf565b8754909150600003612fe15760408401859052613031565b855463ffffffff600160601b90910481169060009061300490849084906134c316565b905061302961301488858461325f565b6123658b600201548563ffffffff168561325f565b604087015250505b505082825260208201529392505050565b60008061306f8461305957855462ffffff16613068565b85546301000000900462ffffff165b88906134ae565b905060006130a38561308e578654600160301b900462ffffff16613068565b86548890600160481b900462ffffff166134ae565b905083156130cb576130c26130b889846134c3565b610c7a89846134c3565b925050506130e7565b6130c26130d889846134cf565b6130e289846134cf565b6137e2565b95945050505050565b600080613100620f424085613448565b9050600061310e8989613ddc565b905086156131a25760006131318361312b84600160601b8961325f565b906134ae565b9050600061313f8b80613ddc565b9050808211613155576000945050505050613255565b600061316183836134cf565b905060006131796131728e886134ae565b8e906134c3565b90506131976131888288613543565b6131928489613543565b614036565b965050505050613215565b60006131b78361312b8488600160601b61325f565b905060006131c58a80613ddc565b90508082116131db576000945050505050613255565b60006131e783836134cf565b905060006131ff6131f88d886134ae565b8d906134c3565b905061320e6131888288613543565b9650505050505b856132525761324f898960405180608001604052808b151581526020016001151581526020018962ffffff16815260200187815250612171565b92505b50505b9695505050505050565b60008080600019858709858702925082811083820303915050806000036132995783828161328f5761328f6159b5565b0492505050611ccf565b8084116132a557600080fd5b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6000611ccf8383600160601b61325f565b600064ffffffffff821661336f5760405162461bcd60e51b81526020600482015260176024820152765242544c5f503a2074617267657420697320656d70747960481b604482015260640161075e565b64ffffffffff8281166000908152600185016020526040902054600160281b900416156133ca5764ffffffffff80831660009081526001850160205260409020546133c3918591600160281b900416614062565b90506116f3565b5064ffffffffff8082166000908152600184016020526040902054165b64ffffffffff811615801590613420575064ffffffffff8181166000908152600185016020526040902054600160281b90048116908316145b156116f35764ffffffffff8082166000908152600185016020526040902054919250166133e7565b60008262ffffff168262ffffff1611156134a45760405162461bcd60e51b815260206004820152601e60248201527f506572704d6174683a207375627472616374696f6e206f766572666c6f770000604482015260640161075e565b611ccf8284615c48565b6000611ccf838362ffffff16620f424061325f565b6000611ccf82846158b2565b6000611ccf8284615bf1565b6000806134e986868661325f565b905060018360028111156134ff576134ff615c64565b14801561351c575060008480613517576135176159b5565b868809115b156130e7576132556001826158b2565b6000611ccf83620f42408462ffffff1660016134db565b6000611ccf83620f42408462ffffff1661325f565b6000826003015460000361356e575060006116f3565b6000613595600160601b61358f8660020154600160601b886003015461325f565b906134cf565b905060006135a4846001615c7a565b63ffffffff1690506130e76135c282846140bc90919063ffffffff16565b86546123659063ffffffff88168561325f565b60006135ea8360000154846001015484612171565b8251602084015185546001870154606087015194955061360a94866140c8565b60018501559092555090565b60008161222c600482016001878761414a565b6000816122ad60048201856141df565b806136486004820182856142ee565b505050565b64ffffffffff85166136995760405162461bcd60e51b81526020600482015260156024820152745242544c5f524c3a206b657920697320656d70747960581b604482015260640161075e565b6136a3868661432f565b6136e85760405162461bcd60e51b81526020600482015260166024820152751490951317d4930e881ad95e481b9bdd08195e1a5cdd60521b604482015260640161075e565b6040805160808082018352885464ffffffffff908116835288166020830152918101919091526060810182905261372390879086868661437a565b50865464ffffffffff91821664ffffffffff19918216811789556000908152600189016020526040808220805490931690925597549091168752909520805460ff60781b191690555050505050565b60008161222c8183878761414a565b6000816122ad81856141df565b806136488180856142ee565b64ffffffffff8316156137dc576137b583828463ffffffff16565b6137dc5764ffffffffff92831660009081526001850160205260409020549092169161379a565b50505050565b60008183101561237a5781611ccf565b60008060008042905060006138148760020154836134cf90919063ffffffff16565b905080600003613830576000806000945094509450505061179a565b600061383f8760000151613bac565b905060006138508860200151613bac565b905060006138618960000151613c72565b905060006138728a60200151613c72565b8b54909150841480156138885750828b60010154145b80613891575083155b8061389a575082155b806138a85750604d60ff8316115b806138b65750604d60ff8216115b156138d157600080600098509850985050505050505061179a565b6138e5858b6080015163ffffffff1661236b565b94506138f0856145a8565b9750613903828286868e60400151613d38565b9650600061392a6139258c60600151600160601b6134ae90919063ffffffff16565b613a92565b9050613948613939828a61460d565b61394283615c97565b9061461c565b975061397161395687613a92565b8c60a0015163ffffffff168a613b089092919063ffffffff16565b948c55505050600189015560028801929092555092509250925092565b8060000361399a575050565b60006139a582613db8565b90506000821315613a0857600183015460006139c68284600160601b61325f565b90506139d282826134cf565b85600101819055506139fb6139f082600160601b886002015461325f565b6004870154906134c3565b600486015550613a5a9050565b82546000613a1f82846121bc600160601b826134c3565b9050613a2b82826134cf565b85556002850154613a5290613a47908390600160601b9061325f565b6003870154906134c3565b600386015550505b613a858360050154613a7b613a76856129ec600160601b613a92565b61462c565b600160601b61325f565b8360050181905550505050565b60006001600160ff1b03821115610a845760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b606482015260840161075e565b6000611ccf8284615cb3565b60008060008512613b195784613b22565b613b228561467e565b90506000808512613b335784613b3c565b613b3c8561467e565b905060008087128015613b4f5750600086135b80613b655750600087138015613b655750600086125b613b70576000613b73565b60015b90506000613b8284848861325f565b905081613b9757613b9281613a92565b613ba0565b613ba0816146dc565b98975050505050505050565b60006001600160a01b038216613bc457506001919050565b60408051600481526024810182526020810180516001600160e01b0316634c6afee560e11b179052905160009081906001600160a01b03861690613c09908590615cd3565b600060405180830381855afa9150503d8060008114613c44576040519150601f19603f3d011682016040523d82523d6000602084013e613c49565b606091505b509150915081613c5e57506000949350505050565b808060200190518101906130e79190615978565b60006001600160a01b038216613c8a57506000919050565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b179052905160009081906001600160a01b03861690613ccf908590615cd3565b600060405180830381855afa9150503d8060008114613d0a576040519150601f19603f3d011682016040523d82523d6000602084013e613d0f565b606091505b509150915081613d24575060ff949350505050565b808060200190518101906130e79190615cef565b60008160ff8716151580613d4d575084600114155b15613d6a57613d6781613d6189600a615df6565b8761325f565b90505b60ff8616151580613d7c575083600114155b15613d9457613d9181856121bc89600a615df6565b90505b613dad613da4600160601b613a92565b6129ec83613a92565b979650505050505050565b600080821215613dd357613dce613a768361467e565b6116f3565b6116f38261462c565b6000611ccf8284615e05565b600081600003613dfa57506000919050565b600182608081901c15613e125760409190911b9060801c5b604081901c15613e275760209190911b9060401c5b602081901c15613e3c5760109190911b9060201c5b601081901c15613e515760089190911b9060101c5b600881901c15613e665760049190911b9060081c5b600481901c15613e7b5760029190911b9060041c5b600281901c15613e8d57600182901b91505b6001828581613e9e57613e9e6159b5565b048301901c91506001828581613eb657613eb66159b5565b048301901c91506001828581613ece57613ece6159b5565b048301901c91506001828581613ee657613ee66159b5565b048301901c91506001828581613efe57613efe6159b5565b048301901c91506001828581613f1657613f166159b5565b048301901c91506001828581613f2e57613f2e6159b5565b048301901c91506122ad82838681613f4857613f486159b5565b0461236b565b6060613f5984611b38565b613fb45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161075e565b600080856001600160a01b031685604051613fcf9190615cd3565b600060405180830381855af49150503d806000811461400a576040519150601f19603f3d011682016040523d82523d6000602084013e61400f565b606091505b50915091506132558282866146f0565b6000611ccf838362ffffff16620f424060016134db565b6000611ccf600261405c8561358f612d99614052886004613ddc565b6123658a80613ddc565b906140bc565b60005b64ffffffffff8281166000908152600185016020526040902054600160501b900416156140b65764ffffffffff9182166000908152600184016020526040902054600160501b900490911690614065565b50919050565b6000611ccf8284615e24565b600080861561410a5787156140f4576140e186856134c3565b91506140ed85846134cf565b905061413f565b6140fe86846134cf565b91506140ed85856134c3565b87156141265761411a86846134c3565b91506140ed85856134cf565b61413086856134cf565b915061413c85846134c3565b90505b965096945050505050565b64ffffffffff828116600090815260018601602052604080822054928416825281205490916001600160801b03600160801b9182900481169291909104168082036141a9578364ffffffffff168564ffffffffff1610925050506122ad565b856141c857806001600160801b0316826001600160801b031610613dad565b6001600160801b0390811691161195945050505050565b64ffffffffff808216600090815260028085016020818152604080852060018082015495820154818b01855283882054959094529054600160501b85048816808852838820830154600160281b90960490981680885292872090910154959694959294919391928792614251916158b2565b61425b91906158b2565b905060006142698989614729565b64ffffffffff80851660009081526002808d0160205260408083208201549389168352909120015461429b91906158b2565b6142a591906158b2565b905085821480156142b557508481145b9650866142e25764ffffffffff881660009081526002808b01602052604090912060018101849055018190555b50505050505092915050565b60089091015464ffffffffff909116600090815260029092016020526040909120600301805465ffffffffffff191665ffffffffffff909216919091179055565b600064ffffffffff821615801590611ccf5750825464ffffffffff83811691161480611ccf57505064ffffffffff908116600090815260019290920160205260409091205416151590565b8351600090819064ffffffffff1661439b5750506040840151600090612a36565b855164ffffffffff166000908152600188016020526040902054600160781b900460ff166143ca5760016143cd565b60005b866040018181516143de9190615e38565b60ff169052508551602087015164ffffffffff91821691160361444657614411866000015187606001518563ffffffff16565b5050835164ffffffffff9081166000908152600187016020526040908190205490860151600160501b90910490911690612a36565b6144618660200151876000015188606001518863ffffffff16565b156145255760408051608081018252875164ffffffffff908116600090815260018b01602090815284822054600160281b900483168452808b0151909216918301919091528883015160ff16928201929092526060808901519082015281906144ce908a9089898961437a565b895164ffffffffff808216600090815260018e0160205260409081902054908d015160608e015195975093955061451a948e94889493600160501b909304909216918c91889190614770565b935093505050612a36565b61453b866000015187606001518563ffffffff16565b60408051608081018252875164ffffffffff908116600090815260018b0160209081529084902054600160501b900482168352808a0151909116908201528782015160ff16918101919091526060808801519082015261459f90889087878761437a565b91509150612a36565b600063ffffffff821115610a845760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b606482015260840161075e565b600081831261237a5781611ccf565b60008183121561237a5781611ccf565b600080821215610a845760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f736974697665604482015260640161075e565b6000600160ff1b82136146d35760405162461bcd60e51b815260206004820152601c60248201527f506572704d6174683a20696e76657273696f6e206f766572666c6f7700000000604482015260640161075e565b6116f382615c97565b60006146e782613a92565b6116f390615c97565b606083156146ff575081611ccf565b82511561470f5782518084602001fd5b8160405162461bcd60e51b815260040161075e9190615712565b64ffffffffff8116600090815260018301602090815260408083205460028601909252822054600160801b9091046001600160801b0316906122ad9082600160601b61325f565b6000808360ff168560ff161115614874576147d38a6040518060c001604052808c64ffffffffff1681526020018b64ffffffffff1681526020018a64ffffffffff1681526020018860ff1681526020018760ff1681526020018681525088614a64565b5064ffffffffff8116600090815260018c016020526040902054909250859150600160781b900460ff168015614838575064ffffffffff828116600090815260018c01602052604080822054600160501b900490921681522054600160781b900460ff165b1561486f5764ffffffffff821660009081526001808c016020526040909120805460ff60781b1916905561486c9082615e51565b90505b614a57565b8360ff168560ff16101561496b576148d48a6040518060c001604052808c64ffffffffff1681526020018b64ffffffffff1681526020018a64ffffffffff1681526020018860ff1681526020018760ff1681526020018681525088614d5a565b64ffffffffff8116600090815260018c016020526040902054909250849150600160781b900460ff168015614838575064ffffffffff828116600090815260018c01602052604080822054600160281b900490921681522054600160781b900460ff161561486f5764ffffffffff821660009081526001808c016020526040909120805460ff60781b1916905561486c9082615e51565b64ffffffffff8916600090815260018b016020526040812054600160781b900460ff161580156149bb575064ffffffffff8816600090815260018c016020526040902054600160781b900460ff16155b64ffffffffff8a8116600090815260018e016020526040902080546fff0000000000ffffffffff00000000001916600160781b8415150264ffffffffff60281b191617600160281b8e8416021764ffffffffff60501b1916600160501b928c16929092029190911790559050614a35898563ffffffff8a16565b508881614a43576001614a46565b60005b614a509088615e51565b9093509150505b9850989650505050505050565b815164ffffffffff1660009081526001840160205260408120548190600160781b900460ff16158015614aa45750836080015160ff16846060015160ff16145b15614b56576020808501805164ffffffffff9081166000908152600189019093526040808420805460ff60781b1916600160781b17905587518351831685528185208054918416600160281b0264ffffffffff60281b19909216919091179055808801518351831685529320805493909116600160501b0264ffffffffff60501b19909316929092179091555160a0850151614b44919063ffffffff8616565b505050602082015160608301516112fb565b6040805160c081018252855164ffffffffff908116600090815260018901602081815285832054600160501b900484168552808a0151841681860152898601518416858701528951909316825290915291822054614bff9188916060820190600160781b900460ff16614bca576001614bcd565b60005b8960600151614bdc9190615e38565b60ff168152602001886080015160ff1681526020018860a0015181525086614a64565b50855164ffffffffff9081166000908152600189016020526040808220805464ffffffffff60501b1916600160501b868616021790558851909216815220805464ffffffffff19169055855160a0870151919250614c609163ffffffff8716565b50845164ffffffffff166000908152600187016020526040902054600160781b900460ff16158015614cb1575064ffffffffff81166000908152600187016020526040902054600160781b900460ff165b8015614cec575064ffffffffff818116600090815260018801602052604080822054600160501b900490921681522054600160781b900460ff165b15614d475764ffffffffff808216600090815260018801602052604080822054600160501b9004909216815220805460ff60781b19169055845160a0860151614d389188918790615118565b606085015190925090506112fb565b5050825160609093015192949293505050565b60408281015164ffffffffff1660009081526001850160205290812054600160781b900460ff16158015614d9b5750826080015160ff16836060015160ff16145b15614ed0576020808401805164ffffffffff9081166000908152600188019093526040808420805460ff60781b1916600160781b17905586518351831685528185208054918416600160281b0264ffffffffff60281b19909216919091179055808701519251821684529092208054918316600160501b0264ffffffffff60501b1990921691909117905583511615614e6557602083810151845164ffffffffff9081166000908152600188019093526040909220805464ffffffffff1916929091169190911790555b604083015164ffffffffff1615614eae5760208381015160408086015164ffffffffff9081166000908152600189019094529220805464ffffffffff1916929091169190911790555b614ec483602001518460a001518463ffffffff16565b50506020820151611ccf565b6040805160c081018252845164ffffffffff908116825260208087015182168184015286840180518316600090815260018a0180845286822054600160281b90048516868801526060808b015160ff908116918801919091529251909416815292909152928120549092614f8292889290916080830191600160781b900416614f5a576001614f5d565b60005b8860800151614f6c9190615e38565b60ff1681526020018760a0015181525085614d5a565b6040858101805164ffffffffff908116600090815260018a01602052838120805464ffffffffff60281b1916600160281b878516908102919091179091559251909116815291909120805464ffffffffff19169055909150156150135760408481015164ffffffffff83811660009081526001890160205292909220805464ffffffffff1916929091169190911790555b61502984604001518560a001518563ffffffff16565b5060408481015164ffffffffff166000908152600187016020522054600160781b900460ff1615801561507b575064ffffffffff81166000908152600186016020526040902054600160781b900460ff165b80156150b6575064ffffffffff818116600090815260018701602052604080822054600160281b900490921681522054600160781b900460ff165b1561510c5764ffffffffff808216600090815260018701602052604080822054600160281b90049092168152819020805460ff60781b1916905584015160a085015161510591879186906152f8565b9050611ccf565b50505060400151919050565b64ffffffffff80841660008181526001870160205260408082208054600160501b80820487168086529385205495909452600160281b909404851692830264ffffffffff60501b198516179055929190911690801561519e5764ffffffffff81811660009081526001890160205260409020805464ffffffffff19169188169190911790555b64ffffffffff83811660009081526001890160205260409020805464ffffffffff191691841691821790556151e757865464ffffffffff191664ffffffffff8416178755615286565b64ffffffffff8083166000908152600189016020526040902054600160281b900481169087160361524e5764ffffffffff808316600090815260018901602052604090208054918516600160281b0264ffffffffff60281b19909216919091179055615286565b64ffffffffff808316600090815260018901602052604090208054918516600160501b0264ffffffffff60501b199092169190911790555b64ffffffffff838116600081815260018a016020526040808220805464ffffffffff60281b1916600160281b958c1695860217905592815291909120805464ffffffffff191690911790556152df868563ffffffff8816565b506152ee83858763ffffffff16565b5050505050505050565b64ffffffffff80841660008181526001870160205260408082208054600160281b80820487168086529385205495909452600160501b909404851692830264ffffffffff60281b198516179055929190911690801561537e5764ffffffffff81811660009081526001890160205260409020805464ffffffffff19169188169190911790555b64ffffffffff83811660009081526001890160205260409020805464ffffffffff191691841691821790556153c757865464ffffffffff191664ffffffffff8416178755615466565b64ffffffffff8083166000908152600189016020526040902054600160501b900481169087160361542e5764ffffffffff808316600090815260018901602052604090208054918516600160501b0264ffffffffff60501b19909216919091179055615466565b64ffffffffff808316600090815260018901602052604090208054918516600160281b0264ffffffffff60281b199092169190911790555b64ffffffffff838116600081815260018a016020526040808220805464ffffffffff60501b1916600160501b958c1695860217905592815291909120805464ffffffffff191690911790556152df868563ffffffff8816565b803580151581146154cf57600080fd5b919050565b600080600080608085870312156154ea57600080fd5b6154f3856154bf565b9350615501602086016154bf565b925060408501359150615516606086016154bf565b905092959194509250565b6000606082840312156140b657600080fd5b64ffffffffff81168114611b3557600080fd5b6000806040838503121561555957600080fd5b615562836154bf565b9150602083013561557281615533565b809150509250929050565b60008060006060848603121561559257600080fd5b61559b846154bf565b95602085013595506040909401359392505050565b62ffffff958616815293851660208501529184166040840152909216606082015263ffffffff909116608082015260a00190565b6000806000606084860312156155f957600080fd5b615602846154bf565b9250615610602085016154bf565b9150604084013590509250925092565b62ffffff81168114611b3557600080fd5b60006020828403121561564357600080fd5b8135611ccf81615620565b60006020828403121561566057600080fd5b5035919050565b63ffffffff81168114611b3557600080fd5b60006020828403121561568b57600080fd5b8135611ccf81615667565b6000806000606084860312156156ab57600080fd5b505081359360208301359350604090920135919050565b60005b838110156156dd5781810151838201526020016156c5565b50506000910152565b600081518084526156fe8160208601602086016156c2565b601f01601f19169290920160200192915050565b602081526000611ccf60208301846156e6565b6000806040838503121561573857600080fd5b50508035926020909101359150565b6000806020838503121561575a57600080fd5b823567ffffffffffffffff8082111561577257600080fd5b818501915085601f83011261578657600080fd5b81358181111561579557600080fd5b8660208260051b85010111156157aa57600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561581157603f198886030184526157ff8583516156e6565b945092850192908501906001016157e3565b5092979650505050505050565b600060a082840312156140b657600080fd5b60008060006060848603121561584557600080fd5b61584e846154bf565b925061585c602085016154bf565b915061586a604085016154bf565b90509250925092565b60006020828403121561588557600080fd5b81356001600160a01b0381168114611ccf57600080fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156116f3576116f361589c565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b813561590781615620565b815462ffffff191662ffffff821617825550602082013561592781615620565b815465ffffff0000001916601882901b65ffffff0000001617825550604082013561595181615667565b815469ffffffff000000000000191660309190911b69ffffffff0000000000001617905550565b60006020828403121561598a57600080fd5b5051919050565b600080604083850312156159a457600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601260045260246000fd5b600062ffffff808416806159e1576159e16159b5565b92169190910492915050565b6000602082840312156159ff57600080fd5b8151611ccf81615533565b600181811c90821680615a1e57607f821691505b6020821081036140b657634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112615a8157600080fd5b83018035915067ffffffffffffffff821115615a9c57600080fd5b602001915036819003821315610c0c57600080fd5b600060018201615ac357615ac361589c565b5060010190565b600080600060608486031215615adf57600080fd5b835165ffffffffffff81168114615af557600080fd5b602085015160409095015190969495509392505050565b8135615b1781615620565b815462ffffff191662ffffff8216178255506020820135615b3781615620565b815465ffffff0000001916601882901b65ffffff00000016178255506040820135615b6181615620565b815462ffffff60301b8260301b1691508162ffffff60301b1982161783556060840135615b8d81615620565b62ffffff60481b60489190911b166bffffffffffff0000000000001982168317811784556080850135615bbf81615667565b6fffffffffffffffffffff00000000000019929092169092179190911760609190911b63ffffffff60601b1617905550565b818103818111156116f3576116f361589c565b65ffffffffffff8181168382160190808211156116f1576116f161589c565b6020808252600b908201526a3732bb32b91037b1b1bab960a91b604082015260600190565b62ffffff8281168282160390808211156116f1576116f161589c565b634e487b7160e01b600052602160045260246000fd5b63ffffffff8181168382160190808211156116f1576116f161589c565b6000600160ff1b8201615cac57615cac61589c565b5060000390565b81810360008312801583831316838312821617156116f1576116f161589c565b60008251615ce58184602087016156c2565b9190910192915050565b600060208284031215615d0157600080fd5b815160ff81168114611ccf57600080fd5b600181815b80851115615d4d578160001904821115615d3357615d3361589c565b80851615615d4057918102915b93841c9390800290615d17565b509250929050565b600082615d64575060016116f3565b81615d71575060006116f3565b8160018114615d875760028114615d9157615dad565b60019150506116f3565b60ff841115615da257615da261589c565b50506001821b6116f3565b5060208310610133831016604e8410600b8410161715615dd0575081810a6116f3565b615dda8383615d12565b8060001904821115615dee57615dee61589c565b029392505050565b6000611ccf60ff841683615d55565b6000816000190483118215151615615e1f57615e1f61589c565b500290565b600082615e3357615e336159b5565b500490565b60ff82811682821603908111156116f3576116f361589c565b60ff81811683821601908111156116f3576116f361589c56fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122016b53443987350ff9d102e004dbd0424e00e4df8758302be74394b36f30ba96a64736f6c63430008100033",
  "libraries": {
    "OrderBookLibrary": "0xC91bD33af94343d14e313602345d901819F3959d"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "multicall(bytes[])": {
        "details": "Receives and executes a batch of function calls on this contract."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 925,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 550,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 7769,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 7778,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "poolInfo",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(PoolInfo)13212_storage"
      },
      {
        "astId": 7781,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "fundingInfo",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(FundingInfo)13199_storage"
      },
      {
        "astId": 7784,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "priceLimitInfo",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(PriceLimitInfo)13219_storage"
      },
      {
        "astId": 7787,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "_orderBookInfo",
        "offset": 0,
        "slot": "15",
        "type": "t_struct(OrderBookInfo)13267_storage"
      },
      {
        "astId": 7790,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "poolFeeInfo",
        "offset": 0,
        "slot": "25",
        "type": "t_struct(PoolFeeInfo)13276_storage"
      },
      {
        "astId": 7793,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "fundingMaxPremiumRatio",
        "offset": 0,
        "slot": "29",
        "type": "t_uint24"
      },
      {
        "astId": 7796,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "fundingMaxElapsedSec",
        "offset": 3,
        "slot": "29",
        "type": "t_uint32"
      },
      {
        "astId": 7799,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "fundingRolloverSec",
        "offset": 7,
        "slot": "29",
        "type": "t_uint32"
      },
      {
        "astId": 7810,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "priceLimitConfig",
        "offset": 0,
        "slot": "30",
        "type": "t_struct(PriceLimitConfig)13230_storage"
      },
      {
        "astId": 7819,
        "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
        "label": "poolFeeConfig",
        "offset": 0,
        "slot": "31",
        "type": "t_struct(PoolFeeConfig)13283_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint40,t_struct(Node)20677_storage)": {
        "encoding": "mapping",
        "key": "t_uint40",
        "label": "mapping(uint40 => struct BokkyPooBahsRedBlackTreeLibrary.Node)",
        "numberOfBytes": "32",
        "value": "t_struct(Node)20677_storage"
      },
      "t_mapping(t_uint40,t_struct(OrderInfo)13239_storage)": {
        "encoding": "mapping",
        "key": "t_uint40",
        "label": "mapping(uint40 => struct MarketStructs.OrderInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(OrderInfo)13239_storage"
      },
      "t_mapping(t_uint48,t_struct(ExecutionInfo)13253_storage)": {
        "encoding": "mapping",
        "key": "t_uint48",
        "label": "mapping(uint48 => struct MarketStructs.ExecutionInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(ExecutionInfo)13253_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ExecutionInfo)13253_storage": {
        "encoding": "inplace",
        "label": "struct MarketStructs.ExecutionInfo",
        "members": [
          {
            "astId": 13252,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "baseBalancePerShareX96",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(FundingInfo)13199_storage": {
        "encoding": "inplace",
        "label": "struct MarketStructs.FundingInfo",
        "members": [
          {
            "astId": 13194,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "prevIndexPriceBase",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13196,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "prevIndexPriceQuote",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13198,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "prevIndexPriceTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Node)20677_storage": {
        "encoding": "inplace",
        "label": "struct BokkyPooBahsRedBlackTreeLibrary.Node",
        "members": [
          {
            "astId": 20668,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "parent",
            "offset": 0,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 20670,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "left",
            "offset": 5,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 20672,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "right",
            "offset": 10,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 20674,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "red",
            "offset": 15,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 20676,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "userData",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(OrderBookInfo)13267_storage": {
        "encoding": "inplace",
        "label": "struct MarketStructs.OrderBookInfo",
        "members": [
          {
            "astId": 13256,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "ask",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(OrderBookSideInfo)13250_storage"
          },
          {
            "astId": 13259,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "bid",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(OrderBookSideInfo)13250_storage"
          },
          {
            "astId": 13261,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "seqExecutionId",
            "offset": 0,
            "slot": "8",
            "type": "t_uint48"
          },
          {
            "astId": 13266,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "executionInfos",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint48,t_struct(ExecutionInfo)13253_storage)"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(OrderBookSideInfo)13250_storage": {
        "encoding": "inplace",
        "label": "struct MarketStructs.OrderBookSideInfo",
        "members": [
          {
            "astId": 13242,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "tree",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Tree)20685_storage"
          },
          {
            "astId": 13247,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "orderInfos",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint40,t_struct(OrderInfo)13239_storage)"
          },
          {
            "astId": 13249,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "seqKey",
            "offset": 0,
            "slot": "3",
            "type": "t_uint40"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(OrderInfo)13239_storage": {
        "encoding": "inplace",
        "label": "struct MarketStructs.OrderInfo",
        "members": [
          {
            "astId": 13232,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "base",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13234,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "baseSum",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13236,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "quoteSum",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 13238,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "executionId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint48"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(PoolFeeConfig)13283_storage": {
        "encoding": "inplace",
        "label": "struct MarketStructs.PoolFeeConfig",
        "members": [
          {
            "astId": 13278,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "fixedFeeRatio",
            "offset": 0,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 13280,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "atrFeeRatio",
            "offset": 3,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 13282,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "atrEmaBlocks",
            "offset": 6,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PoolFeeInfo)13276_storage": {
        "encoding": "inplace",
        "label": "struct MarketStructs.PoolFeeInfo",
        "members": [
          {
            "astId": 13269,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "atrX96",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13271,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "referenceTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13273,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "currentHighX96",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 13275,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "currentLowX96",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(PoolInfo)13212_storage": {
        "encoding": "inplace",
        "label": "struct MarketStructs.PoolInfo",
        "members": [
          {
            "astId": 13201,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "base",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13203,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "quote",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13205,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "totalLiquidity",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 13207,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "cumBasePerLiquidityX96",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 13209,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "cumQuotePerLiquidityX96",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 13211,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "baseBalancePerShareX96",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(PriceLimitConfig)13230_storage": {
        "encoding": "inplace",
        "label": "struct MarketStructs.PriceLimitConfig",
        "members": [
          {
            "astId": 13221,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "normalOrderRatio",
            "offset": 0,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 13223,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "liquidationRatio",
            "offset": 3,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 13225,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "emaNormalOrderRatio",
            "offset": 6,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 13227,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "emaLiquidationRatio",
            "offset": 9,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 13229,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "emaSec",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PriceLimitInfo)13219_storage": {
        "encoding": "inplace",
        "label": "struct MarketStructs.PriceLimitInfo",
        "members": [
          {
            "astId": 13214,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "referencePrice",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13216,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "referenceTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13218,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "emaPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Tree)20685_storage": {
        "encoding": "inplace",
        "label": "struct BokkyPooBahsRedBlackTreeLibrary.Tree",
        "members": [
          {
            "astId": 20679,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "root",
            "offset": 0,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 20684,
            "contract": "contracts/PerpdexMarket.sol:PerpdexMarket",
            "label": "nodes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint40,t_struct(Node)20677_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      }
    }
  }
}