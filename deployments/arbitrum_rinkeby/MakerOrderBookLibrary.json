{
  "address": "0xfa559987167994706EeF52E959e7C2d5aB799114",
  "abi": [],
  "transactionHash": "0x7b1edd66cfa1fd822628c1d82adb103e2da9eeaa4531569a326dad7ba7e4b0a4",
  "receipt": {
    "to": null,
    "from": "0x4B78eCe4AA1be3495713199380635537C5fB2326",
    "contractAddress": "0xfa559987167994706EeF52E959e7C2d5aB799114",
    "transactionIndex": 1,
    "gasUsed": "3787577",
    "logsBloom": "0x
    "blockHash": "0x14845e839f8ca4fedb4797308c4f15144b748efb5ac80d8c02fe83c67661ee53",
    "transactionHash": "0x7b1edd66cfa1fd822628c1d82adb103e2da9eeaa4531569a326dad7ba7e4b0a4",
    "logs": [],
    "blockNumber": 14375236,
    "cumulativeGasUsed": "3787577",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "61b0f5571c4803a51ab476ac1676a8de",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/MakerOrderBookLibrary.sol\":\"MakerOrderBookLibrary\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \\u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248) {\\n        require(value >= type(int248).min && value <= type(int248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return int248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240) {\\n        require(value >= type(int240).min && value <= type(int240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return int240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232) {\\n        require(value >= type(int232).min && value <= type(int232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return int232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224) {\\n        require(value >= type(int224).min && value <= type(int224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return int224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216) {\\n        require(value >= type(int216).min && value <= type(int216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return int216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208) {\\n        require(value >= type(int208).min && value <= type(int208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return int208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200) {\\n        require(value >= type(int200).min && value <= type(int200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return int200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192) {\\n        require(value >= type(int192).min && value <= type(int192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return int192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184) {\\n        require(value >= type(int184).min && value <= type(int184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return int184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176) {\\n        require(value >= type(int176).min && value <= type(int176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return int176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168) {\\n        require(value >= type(int168).min && value <= type(int168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return int168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160) {\\n        require(value >= type(int160).min && value <= type(int160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return int160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152) {\\n        require(value >= type(int152).min && value <= type(int152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return int152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144) {\\n        require(value >= type(int144).min && value <= type(int144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return int144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136) {\\n        require(value >= type(int136).min && value <= type(int136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return int136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120) {\\n        require(value >= type(int120).min && value <= type(int120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return int120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112) {\\n        require(value >= type(int112).min && value <= type(int112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return int112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104) {\\n        require(value >= type(int104).min && value <= type(int104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return int104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96) {\\n        require(value >= type(int96).min && value <= type(int96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return int96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88) {\\n        require(value >= type(int88).min && value <= type(int88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return int88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80) {\\n        require(value >= type(int80).min && value <= type(int80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return int80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72) {\\n        require(value >= type(int72).min && value <= type(int72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return int72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56) {\\n        require(value >= type(int56).min && value <= type(int56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return int56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48) {\\n        require(value >= type(int48).min && value <= type(int48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return int48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40) {\\n        require(value >= type(int40).min && value <= type(int40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return int40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24) {\\n        require(value >= type(int24).min && value <= type(int24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return int24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x02686c31ccb9ee77a299fa5f47327af5271f251a707a0e24f321957166ff0434\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        return a + b;\\n    }\\n}\\n\",\"keccak256\":\"0x62f53f262fabbbc6d8ab49488d8fce36370351aff2b8d3898d499d68995a71c2\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IPerpdexMarketMinimum.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\ninterface IPerpdexMarketMinimum {\\n    struct SwapResponse {\\n        uint256 oppositeAmount;\\n        uint256 basePartial;\\n        uint256 quotePartial;\\n        uint40 partialOrderId;\\n    }\\n\\n    function swap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        bool isLiquidation\\n    ) external returns (SwapResponse memory response);\\n\\n    function addLiquidity(uint256 baseShare, uint256 quoteBalance)\\n        external\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function removeLiquidity(uint256 liquidity) external returns (uint256 baseShare, uint256 quoteBalance);\\n\\n    function createLimitOrder(\\n        bool isBid,\\n        uint256 baseShare,\\n        uint256 priceX96\\n    ) external returns (uint40 orderId);\\n\\n    function cancelLimitOrder(bool isBid, uint40 orderId) external;\\n\\n    // getters\\n\\n    function previewSwap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        bool isLiquidation\\n    ) external view returns (uint256);\\n\\n    function maxSwap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        bool isLiquidation\\n    ) external view returns (uint256 amount);\\n\\n    function exchange() external view returns (address);\\n\\n    function getShareMarkPriceX96() external view returns (uint256);\\n\\n    function getLiquidityValue(uint256 liquidity) external view returns (uint256 baseShare, uint256 quoteBalance);\\n\\n    function getLiquidityDeleveraged(\\n        uint256 liquidity,\\n        uint256 cumBasePerLiquidityX96,\\n        uint256 cumQuotePerLiquidityX96\\n    ) external view returns (int256, int256);\\n\\n    function getCumDeleveragedPerLiquidityX96() external view returns (uint256, uint256);\\n\\n    function baseBalancePerShareX96() external view returns (uint256);\\n\\n    function getLimitOrderInfo(bool isBid, uint40 orderId) external view returns (uint256 base, uint256 priceX96);\\n\\n    function getLimitOrderExecution(bool isBid, uint40 orderId)\\n        external\\n        view\\n        returns (\\n            uint256 executionId,\\n            uint256 executedBase,\\n            uint256 executedQuote\\n        );\\n}\\n\",\"keccak256\":\"0x17237b0bcb194a663d7e7e3a0d93d6a44877bcdb2cc93fbccc5955089df82b49\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/AccountLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\n\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { IPerpdexMarketMinimum } from \\\"../interfaces/IPerpdexMarketMinimum.sol\\\";\\nimport { PerpdexStructs } from \\\"./PerpdexStructs.sol\\\";\\nimport { AccountPreviewLibrary } from \\\"./AccountPreviewLibrary.sol\\\";\\n\\n// https://help.ftx.com/hc/en-us/articles/360024780511-Complete-Futures-Specs\\nlibrary AccountLibrary {\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    struct CalcMarketResponse {\\n        int256 baseShare;\\n        uint256 baseSharePool;\\n        uint256 baseShareAsk;\\n        uint256 baseShareBid;\\n        int256 quoteBalance;\\n        uint256 quoteBalancePool;\\n        int256 positionNotional;\\n        uint256 openPositionShare;\\n        uint256 openPositionNotional;\\n        int256 positionValue;\\n        int256 realizedPnl;\\n    }\\n\\n    struct CalcTotalResponse {\\n        int256 accountValue;\\n        int256 collateralBalance;\\n        uint256 totalPositionNotional;\\n        uint256 totalOpenPositionNotional;\\n        bool isLiquidationFree;\\n    }\\n\\n    function updateMarkets(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address market,\\n        uint8 maxMarketsPerAccount\\n    ) external {\\n        bool enabled =\\n            accountInfo.takerInfos[market].baseBalanceShare != 0 ||\\n                accountInfo.makerInfos[market].liquidity != 0 ||\\n                accountInfo.limitOrderInfos[market].ask.root != 0 ||\\n                accountInfo.limitOrderInfos[market].bid.root != 0;\\n        address[] storage markets = accountInfo.markets;\\n        uint256 length = markets.length;\\n\\n        for (uint256 i = 0; i < length; ++i) {\\n            if (markets[i] == market) {\\n                if (!enabled) {\\n                    markets[i] = markets[length - 1];\\n                    markets.pop();\\n                }\\n                return;\\n            }\\n        }\\n\\n        if (!enabled) return;\\n\\n        require(length + 1 <= maxMarketsPerAccount, \\\"AL_UP: too many markets\\\");\\n        markets.push(market);\\n    }\\n\\n    function getTakerInfo(PerpdexStructs.AccountInfo storage accountInfo, address market)\\n        external\\n        view\\n        returns (PerpdexStructs.TakerInfo memory takerInfo)\\n    {\\n        (AccountPreviewLibrary.Execution[] memory executions, , ) =\\n            AccountPreviewLibrary.getLimitOrderExecutions(accountInfo, market);\\n        (takerInfo, , , ) = AccountPreviewLibrary.previewSettleLimitOrders(accountInfo, market, executions);\\n    }\\n\\n    function getCollateralBalance(PerpdexStructs.AccountInfo storage accountInfo) external view returns (int256) {\\n        return _calcTotal(accountInfo).collateralBalance;\\n    }\\n\\n    function getTotalAccountValue(PerpdexStructs.AccountInfo storage accountInfo) external view returns (int256) {\\n        return _calcTotal(accountInfo).accountValue;\\n    }\\n\\n    function getPositionShare(PerpdexStructs.AccountInfo storage accountInfo, address market)\\n        external\\n        view\\n        returns (int256)\\n    {\\n        return _calcMarket(accountInfo, market).baseShare;\\n    }\\n\\n    function getPositionNotional(PerpdexStructs.AccountInfo storage accountInfo, address market)\\n        external\\n        view\\n        returns (int256)\\n    {\\n        return _calcMarket(accountInfo, market).positionNotional;\\n    }\\n\\n    function getTotalPositionNotional(PerpdexStructs.AccountInfo storage accountInfo) external view returns (uint256) {\\n        return _calcTotal(accountInfo).totalPositionNotional;\\n    }\\n\\n    function getOpenPositionShare(PerpdexStructs.AccountInfo storage accountInfo, address market)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _calcMarket(accountInfo, market).openPositionShare;\\n    }\\n\\n    function getOpenPositionNotional(PerpdexStructs.AccountInfo storage accountInfo, address market)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _calcMarket(accountInfo, market).openPositionNotional;\\n    }\\n\\n    function getTotalOpenPositionNotional(PerpdexStructs.AccountInfo storage accountInfo)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _calcTotal(accountInfo).totalOpenPositionNotional;\\n    }\\n\\n    function hasEnoughMaintenanceMargin(PerpdexStructs.AccountInfo storage accountInfo, uint24 mmRatio)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        CalcTotalResponse memory response = _calcTotal(accountInfo);\\n        return response.accountValue.mul(1e6) >= response.totalPositionNotional.mul(mmRatio).toInt256();\\n    }\\n\\n    // always true when hasEnoughMaintenanceMargin is true\\n    function hasEnoughInitialMargin(PerpdexStructs.AccountInfo storage accountInfo, uint24 imRatio)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        CalcTotalResponse memory response = _calcTotal(accountInfo);\\n        return\\n            response.accountValue.min(response.collateralBalance).mul(1e6) >=\\n            response.totalOpenPositionNotional.mul(imRatio).toInt256() ||\\n            response.isLiquidationFree;\\n    }\\n\\n    function isLiquidationFree(PerpdexStructs.AccountInfo storage accountInfo) external view returns (bool) {\\n        return _calcTotal(accountInfo).isLiquidationFree;\\n    }\\n\\n    function _calcMarket(PerpdexStructs.AccountInfo storage accountInfo, address market)\\n        private\\n        view\\n        returns (CalcMarketResponse memory response)\\n    {\\n        PerpdexStructs.MakerInfo storage makerInfo = accountInfo.makerInfos[market];\\n        PerpdexStructs.TakerInfo memory takerInfo;\\n        (AccountPreviewLibrary.Execution[] memory executions, , ) =\\n            AccountPreviewLibrary.getLimitOrderExecutions(accountInfo, market);\\n\\n        uint256 totalExecutedBaseAsk;\\n        uint256 totalExecutedBaseBid;\\n        (takerInfo, response.realizedPnl, totalExecutedBaseAsk, totalExecutedBaseBid) = AccountPreviewLibrary\\n            .previewSettleLimitOrders(accountInfo, market, executions);\\n\\n        response.baseShare = takerInfo.baseBalanceShare;\\n        response.quoteBalance = takerInfo.quoteBalance;\\n\\n        uint256 totalOrderBaseAsk;\\n        uint256 totalOrderBaseBid;\\n        if (makerInfo.liquidity != 0) {\\n            (uint256 poolBaseShare, uint256 poolQuoteBalance) =\\n                IPerpdexMarketMinimum(market).getLiquidityValue(makerInfo.liquidity);\\n            (int256 deleveragedBaseShare, int256 deleveragedQuoteBalance) =\\n                IPerpdexMarketMinimum(market).getLiquidityDeleveraged(\\n                    makerInfo.liquidity,\\n                    makerInfo.cumBaseSharePerLiquidityX96,\\n                    makerInfo.cumQuotePerLiquidityX96\\n                );\\n            response.baseSharePool = poolBaseShare;\\n            response.baseShare = response.baseShare.add(deleveragedBaseShare).add(response.baseSharePool.toInt256());\\n            response.quoteBalancePool = poolQuoteBalance;\\n            response.quoteBalance = response.quoteBalance.add(deleveragedQuoteBalance).add(\\n                response.quoteBalancePool.toInt256()\\n            );\\n            totalOrderBaseAsk = poolBaseShare;\\n            totalOrderBaseBid = poolBaseShare;\\n        }\\n\\n        PerpdexStructs.LimitOrderInfo storage limitOrderInfo = accountInfo.limitOrderInfos[market];\\n        response.baseShareAsk = limitOrderInfo.totalBaseAsk - totalExecutedBaseAsk;\\n        response.baseShareBid = limitOrderInfo.totalBaseBid - totalExecutedBaseBid;\\n        totalOrderBaseAsk += response.baseShareAsk;\\n        totalOrderBaseBid += response.baseShareBid;\\n        response.openPositionShare = Math.max(\\n            (response.baseShare - totalOrderBaseAsk.toInt256()).abs(),\\n            (response.baseShare + totalOrderBaseBid.toInt256()).abs()\\n        );\\n\\n        if (response.openPositionShare != 0) {\\n            uint256 sharePriceX96 = IPerpdexMarketMinimum(market).getShareMarkPriceX96();\\n            response.openPositionNotional = Math.mulDiv(response.openPositionShare, sharePriceX96, FixedPoint96.Q96);\\n\\n            if (response.baseShare != 0) {\\n                response.positionNotional = response.baseShare.mulDiv(sharePriceX96.toInt256(), FixedPoint96.Q96);\\n                response.positionValue = response.positionValue.add(response.positionNotional);\\n            }\\n        }\\n\\n        response.positionValue = response.positionValue.add(response.quoteBalance);\\n    }\\n\\n    function _calcTotal(PerpdexStructs.AccountInfo storage accountInfo)\\n        private\\n        view\\n        returns (CalcTotalResponse memory response)\\n    {\\n        response.collateralBalance = accountInfo.vaultInfo.collateralBalance;\\n        response.isLiquidationFree = true;\\n        int256 quoteBalanceWithoutPool;\\n\\n        address[] storage markets = accountInfo.markets;\\n        uint256 length = markets.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            address market = markets[i];\\n\\n            CalcMarketResponse memory marketResponse = _calcMarket(accountInfo, market);\\n\\n            response.accountValue = response.accountValue.add(marketResponse.positionValue);\\n            response.collateralBalance = response.collateralBalance.add(marketResponse.realizedPnl);\\n            response.totalPositionNotional = response.totalPositionNotional.add(marketResponse.positionNotional.abs());\\n            response.totalOpenPositionNotional = response.totalOpenPositionNotional.add(\\n                marketResponse.openPositionNotional\\n            );\\n\\n            response.isLiquidationFree =\\n                response.isLiquidationFree &&\\n                marketResponse.baseShare >= marketResponse.baseShareAsk.add(marketResponse.baseSharePool).toInt256() &&\\n                marketResponse.baseShareBid == 0;\\n            quoteBalanceWithoutPool = quoteBalanceWithoutPool.add(\\n                marketResponse.quoteBalance - marketResponse.quoteBalancePool.toInt256()\\n            );\\n        }\\n        response.accountValue = response.accountValue.add(response.collateralBalance);\\n        response.isLiquidationFree =\\n            response.isLiquidationFree &&\\n            quoteBalanceWithoutPool.add(response.collateralBalance) >= 0;\\n    }\\n}\\n\",\"keccak256\":\"0x95048bc6d608b170e66da55c0cae2bc88fc39ef0e98cd74ce66e3eb2f83564cf\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/AccountPreviewLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { IPerpdexMarketMinimum } from \\\"../interfaces/IPerpdexMarketMinimum.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { PerpdexStructs } from \\\"./PerpdexStructs.sol\\\";\\nimport {\\n    BokkyPooBahsRedBlackTreeLibrary as RBTreeLibrary\\n} from \\\"../../deps/BokkyPooBahsRedBlackTreeLibrary/contracts/BokkyPooBahsRedBlackTreeLibrary.sol\\\";\\n\\n// This is a technical library to avoid circular references between libraries\\nlibrary AccountPreviewLibrary {\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n    using RBTreeLibrary for RBTreeLibrary.Tree;\\n\\n    struct Execution {\\n        int256 executedBase;\\n        int256 executedQuote;\\n    }\\n\\n    function getLimitOrderExecutions(PerpdexStructs.AccountInfo storage accountInfo, address market)\\n        internal\\n        view\\n        returns (\\n            Execution[] memory executions,\\n            uint40 executedLastAskOrderId,\\n            uint40 executedLastBidOrderId\\n        )\\n    {\\n        PerpdexStructs.LimitOrderInfo storage limitOrderInfo = accountInfo.limitOrderInfos[market];\\n\\n        uint40 ask = limitOrderInfo.ask.first();\\n        uint40 bid = limitOrderInfo.bid.first();\\n        uint256 executionIdAsk;\\n        uint256 executedBaseAsk;\\n        uint256 executedQuoteAsk;\\n        uint256 executionIdBid;\\n        uint256 executedBaseBid;\\n        uint256 executedQuoteBid;\\n        if (ask != 0) {\\n            (executionIdAsk, executedBaseAsk, executedQuoteAsk) = IPerpdexMarketMinimum(market).getLimitOrderExecution(\\n                false,\\n                ask\\n            );\\n            if (executionIdAsk == 0) {\\n                ask = 0;\\n            }\\n        }\\n        if (bid != 0) {\\n            (executionIdBid, executedBaseBid, executedQuoteBid) = IPerpdexMarketMinimum(market).getLimitOrderExecution(\\n                true,\\n                bid\\n            );\\n            if (executionIdBid == 0) {\\n                bid = 0;\\n            }\\n        }\\n\\n        // Combine the ask and bid and process from the one with the smallest executionId.\\n        // Ask and bid are already sorted and can be processed like merge sort.\\n        Execution[256] memory executions2;\\n        uint256 executionCount;\\n        while (ask != 0 || bid != 0) {\\n            if (ask != 0 && (bid == 0 || executionIdAsk < executionIdBid)) {\\n                executions2[executionCount] = Execution({\\n                    executedBase: executedBaseAsk.neg256(),\\n                    executedQuote: executedQuoteAsk.toInt256()\\n                });\\n                ++executionCount;\\n\\n                uint40 nextAsk = limitOrderInfo.ask.next(ask);\\n                if (nextAsk != 0) {\\n                    (executionIdAsk, executedBaseAsk, executedQuoteAsk) = IPerpdexMarketMinimum(market)\\n                        .getLimitOrderExecution(false, nextAsk);\\n                }\\n                if (executionIdAsk == 0 || nextAsk == 0) {\\n                    executedLastAskOrderId = ask;\\n                    ask = 0;\\n                } else {\\n                    ask = nextAsk;\\n                }\\n            } else {\\n                executions2[executionCount] = Execution({\\n                    executedBase: executedBaseBid.toInt256(),\\n                    executedQuote: executedQuoteBid.neg256()\\n                });\\n                ++executionCount;\\n\\n                uint40 nextBid = limitOrderInfo.bid.next(bid);\\n                if (nextBid != 0) {\\n                    (executionIdBid, executedBaseBid, executedQuoteBid) = IPerpdexMarketMinimum(market)\\n                        .getLimitOrderExecution(true, nextBid);\\n                }\\n                if (executionIdBid == 0 || nextBid == 0) {\\n                    executedLastBidOrderId = bid;\\n                    bid = 0;\\n                } else {\\n                    bid = nextBid;\\n                }\\n            }\\n        }\\n\\n        executions = new Execution[](executionCount);\\n        for (uint256 i = 0; i < executionCount; i++) {\\n            executions[i] = executions2[i];\\n        }\\n    }\\n\\n    function previewSettleLimitOrders(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address market,\\n        Execution[] memory executions\\n    )\\n        internal\\n        view\\n        returns (\\n            PerpdexStructs.TakerInfo memory takerInfo,\\n            int256 realizedPnl,\\n            uint256 totalExecutedBaseAsk,\\n            uint256 totalExecutedBaseBid\\n        )\\n    {\\n        takerInfo = accountInfo.takerInfos[market];\\n\\n        uint256 length = executions.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            int256 realizedPnl2;\\n            (takerInfo, realizedPnl2) = previewAddToTakerBalance(\\n                takerInfo,\\n                executions[i].executedBase,\\n                executions[i].executedQuote,\\n                0\\n            );\\n            realizedPnl += realizedPnl2;\\n            if (executions[i].executedBase >= 0) {\\n                totalExecutedBaseBid += executions[i].executedBase.abs();\\n            } else {\\n                totalExecutedBaseAsk += executions[i].executedBase.abs();\\n            }\\n        }\\n    }\\n\\n    function previewAddToTakerBalance(\\n        PerpdexStructs.TakerInfo memory takerInfo,\\n        int256 baseShare,\\n        int256 quoteBalance,\\n        int256 quoteFee\\n    ) internal pure returns (PerpdexStructs.TakerInfo memory resultTakerInfo, int256 realizedPnl) {\\n        if (baseShare != 0 || quoteBalance != 0) {\\n            if (baseShare.sign() * quoteBalance.sign() != -1) {\\n                // ignore invalid input\\n                return (takerInfo, 0);\\n            }\\n            if (takerInfo.baseBalanceShare.sign() * baseShare.sign() == -1) {\\n                uint256 baseAbs = baseShare.abs();\\n                uint256 takerBaseAbs = takerInfo.baseBalanceShare.abs();\\n\\n                if (baseAbs <= takerBaseAbs) {\\n                    int256 reducedOpenNotional = takerInfo.quoteBalance.mulDiv(baseAbs.toInt256(), takerBaseAbs);\\n                    realizedPnl = quoteBalance.add(reducedOpenNotional);\\n                } else {\\n                    int256 closedPositionNotional = quoteBalance.mulDiv(takerBaseAbs.toInt256(), baseAbs);\\n                    realizedPnl = takerInfo.quoteBalance.add(closedPositionNotional);\\n                }\\n            }\\n        }\\n        realizedPnl = realizedPnl.add(quoteFee);\\n\\n        int256 newBaseBalanceShare = takerInfo.baseBalanceShare.add(baseShare);\\n        int256 newQuoteBalance = takerInfo.quoteBalance.add(quoteBalance).add(quoteFee).sub(realizedPnl);\\n        if (\\n            !((newBaseBalanceShare == 0 && newQuoteBalance == 0) ||\\n                newBaseBalanceShare.sign() * newQuoteBalance.sign() == -1)\\n        ) {\\n            // never occur. ignore\\n            return (takerInfo, 0);\\n        }\\n\\n        resultTakerInfo.baseBalanceShare = newBaseBalanceShare;\\n        resultTakerInfo.quoteBalance = newQuoteBalance;\\n    }\\n}\\n\",\"keccak256\":\"0x7e41927e84f7150f4e5f34cc8239aa6670ce514f6015664430f8e6f8c71bd6c7\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/MakerOrderBookLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { IPerpdexMarketMinimum } from \\\"../interfaces/IPerpdexMarketMinimum.sol\\\";\\nimport { PerpdexStructs } from \\\"./PerpdexStructs.sol\\\";\\nimport { AccountLibrary } from \\\"./AccountLibrary.sol\\\";\\nimport { AccountPreviewLibrary } from \\\"./AccountPreviewLibrary.sol\\\";\\nimport { TakerLibrary } from \\\"./TakerLibrary.sol\\\";\\nimport {\\n    BokkyPooBahsRedBlackTreeLibrary as RBTreeLibrary\\n} from \\\"../../deps/BokkyPooBahsRedBlackTreeLibrary/contracts/BokkyPooBahsRedBlackTreeLibrary.sol\\\";\\n\\nlibrary MakerOrderBookLibrary {\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n    using RBTreeLibrary for RBTreeLibrary.Tree;\\n\\n    struct CreateLimitOrderParams {\\n        address market;\\n        uint256 base;\\n        uint256 priceX96;\\n        bool isBid;\\n        uint24 imRatio;\\n        uint8 maxMarketsPerAccount;\\n        uint8 maxOrdersPerAccount;\\n    }\\n\\n    struct CancelLimitOrderParams {\\n        address market;\\n        uint40 orderId;\\n        bool isBid;\\n        uint24 mmRatio;\\n        bool isSelf;\\n        uint8 maxMarketsPerAccount;\\n    }\\n\\n    function createLimitOrder(PerpdexStructs.AccountInfo storage accountInfo, CreateLimitOrderParams memory params)\\n        public\\n        returns (uint40 orderId)\\n    {\\n        require(accountInfo.limitOrderCount < params.maxOrdersPerAccount, \\\"MOBL_CLO: max order count\\\");\\n        orderId = IPerpdexMarketMinimum(params.market).createLimitOrder(params.isBid, params.base, params.priceX96);\\n\\n        PerpdexStructs.LimitOrderInfo storage limitOrderInfo = accountInfo.limitOrderInfos[params.market];\\n        uint256 slot = _getSlot(limitOrderInfo);\\n        if (params.isBid) {\\n            limitOrderInfo.bid.insert(orderId, makeUserData(params.priceX96), _lessThanBid, _aggregate, slot);\\n            limitOrderInfo.totalBaseBid += params.base;\\n        } else {\\n            limitOrderInfo.ask.insert(orderId, makeUserData(params.priceX96), _lessThanAsk, _aggregate, slot);\\n            limitOrderInfo.totalBaseAsk += params.base;\\n        }\\n        accountInfo.limitOrderCount += 1;\\n\\n        AccountLibrary.updateMarkets(accountInfo, params.market, params.maxMarketsPerAccount);\\n\\n        require(AccountLibrary.hasEnoughInitialMargin(accountInfo, params.imRatio), \\\"MOBL_CLO: not enough im\\\");\\n    }\\n\\n    function cancelLimitOrder(PerpdexStructs.AccountInfo storage accountInfo, CancelLimitOrderParams memory params)\\n        public\\n        returns (bool isLiquidation)\\n    {\\n        isLiquidation = !AccountLibrary.hasEnoughMaintenanceMargin(accountInfo, params.mmRatio);\\n\\n        if (!params.isSelf) {\\n            require(isLiquidation, \\\"MOBL_CLO: enough mm\\\");\\n        }\\n\\n        (uint256 base, ) = IPerpdexMarketMinimum(params.market).getLimitOrderInfo(params.isBid, params.orderId);\\n        IPerpdexMarketMinimum(params.market).cancelLimitOrder(params.isBid, params.orderId);\\n\\n        PerpdexStructs.LimitOrderInfo storage limitOrderInfo = accountInfo.limitOrderInfos[params.market];\\n        if (params.isBid) {\\n            limitOrderInfo.totalBaseBid -= base;\\n            limitOrderInfo.bid.remove(params.orderId, _aggregate, 0);\\n        } else {\\n            limitOrderInfo.totalBaseAsk -= base;\\n            limitOrderInfo.ask.remove(params.orderId, _aggregate, 0);\\n        }\\n        accountInfo.limitOrderCount -= 1;\\n\\n        AccountLibrary.updateMarkets(accountInfo, params.market, params.maxMarketsPerAccount);\\n    }\\n\\n    function makeUserData(uint256 priceX96) internal pure returns (uint128) {\\n        return priceX96.toUint128();\\n    }\\n\\n    function userDataToPriceX96(uint128 userData) internal pure returns (uint128) {\\n        return userData;\\n    }\\n\\n    function _lessThan(\\n        RBTreeLibrary.Tree storage tree,\\n        bool isBid,\\n        uint40 key0,\\n        uint40 key1\\n    ) private view returns (bool) {\\n        uint128 price0 = userDataToPriceX96(tree.nodes[key0].userData);\\n        uint128 price1 = userDataToPriceX96(tree.nodes[key1].userData);\\n        if (price0 == price1) {\\n            return key0 < key1; // time priority\\n        }\\n        // price priority\\n        return isBid ? price0 > price1 : price0 < price1;\\n    }\\n\\n    function _lessThanAsk(\\n        uint40 key0,\\n        uint40 key1,\\n        uint256 slot\\n    ) private view returns (bool) {\\n        PerpdexStructs.LimitOrderInfo storage info = _getLimitOrderInfoFromSlot(slot);\\n        return _lessThan(info.ask, false, key0, key1);\\n    }\\n\\n    function _lessThanBid(\\n        uint40 key0,\\n        uint40 key1,\\n        uint256 slot\\n    ) private view returns (bool) {\\n        PerpdexStructs.LimitOrderInfo storage info = _getLimitOrderInfoFromSlot(slot);\\n        return _lessThan(info.bid, true, key0, key1);\\n    }\\n\\n    function _aggregate(uint40, uint256) private pure returns (bool) {\\n        return true;\\n    }\\n\\n    function _subtreeRemoved(uint40, uint256) private pure {}\\n\\n    function settleLimitOrdersAll(PerpdexStructs.AccountInfo storage accountInfo, uint8 maxMarketsPerAccount) public {\\n        address[] storage markets = accountInfo.markets;\\n        uint256 i = markets.length;\\n        while (i > 0) {\\n            --i;\\n            _settleLimitOrders(accountInfo, markets[i], maxMarketsPerAccount);\\n        }\\n    }\\n\\n    function _settleLimitOrders(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address market,\\n        uint8 maxMarketsPerAccount\\n    ) private {\\n        PerpdexStructs.LimitOrderInfo storage limitOrderInfo = accountInfo.limitOrderInfos[market];\\n        (\\n            AccountPreviewLibrary.Execution[] memory executions,\\n            uint40 executedLastAskOrderId,\\n            uint40 executedLastBidOrderId\\n        ) = AccountPreviewLibrary.getLimitOrderExecutions(accountInfo, market);\\n        uint256 executionLength = executions.length;\\n        if (executionLength == 0) return;\\n\\n        {\\n            uint256 slot = _getSlot(limitOrderInfo);\\n            if (executedLastAskOrderId != 0) {\\n                limitOrderInfo.ask.removeLeft(executedLastAskOrderId, _lessThanAsk, _aggregate, _subtreeRemoved, slot);\\n            }\\n            if (executedLastBidOrderId != 0) {\\n                limitOrderInfo.bid.removeLeft(executedLastBidOrderId, _lessThanBid, _aggregate, _subtreeRemoved, slot);\\n            }\\n        }\\n\\n        int256 realizedPnl;\\n        uint256 totalExecutedBaseAsk;\\n        uint256 totalExecutedBaseBid;\\n        (\\n            accountInfo.takerInfos[market],\\n            realizedPnl,\\n            totalExecutedBaseAsk,\\n            totalExecutedBaseBid\\n        ) = AccountPreviewLibrary.previewSettleLimitOrders(accountInfo, market, executions);\\n\\n        limitOrderInfo.totalBaseAsk -= totalExecutedBaseAsk;\\n        limitOrderInfo.totalBaseBid -= totalExecutedBaseBid;\\n        accountInfo.limitOrderCount -= executionLength.toUint8();\\n        accountInfo.vaultInfo.collateralBalance = accountInfo.vaultInfo.collateralBalance.add(realizedPnl);\\n        AccountLibrary.updateMarkets(accountInfo, market, maxMarketsPerAccount);\\n    }\\n\\n    function processPartialExecution(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address market,\\n        bool isBaseToQuote,\\n        uint8 maxMarketsPerAccount,\\n        IPerpdexMarketMinimum.SwapResponse memory rawResponse\\n    ) external returns (int256 realizedPnl) {\\n        _settleLimitOrders(accountInfo, market, maxMarketsPerAccount);\\n        PerpdexStructs.LimitOrderInfo storage limitOrderInfo = accountInfo.limitOrderInfos[market];\\n        if (isBaseToQuote) {\\n            limitOrderInfo.totalBaseBid -= rawResponse.basePartial;\\n        } else {\\n            limitOrderInfo.totalBaseAsk -= rawResponse.basePartial;\\n        }\\n        realizedPnl = TakerLibrary.addToTakerBalance(\\n            accountInfo,\\n            market,\\n            isBaseToQuote ? rawResponse.basePartial.toInt256() : rawResponse.basePartial.neg256(),\\n            isBaseToQuote ? rawResponse.quotePartial.neg256() : rawResponse.quotePartial.toInt256(),\\n            0,\\n            maxMarketsPerAccount\\n        );\\n    }\\n\\n    function getLimitOrderIds(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address market,\\n        bool isBid\\n    ) external view returns (uint40[] memory result) {\\n        PerpdexStructs.LimitOrderInfo storage limitOrderInfo = accountInfo.limitOrderInfos[market];\\n        RBTreeLibrary.Tree storage tree = isBid ? limitOrderInfo.bid : limitOrderInfo.ask;\\n        uint40[256] memory orderIds;\\n        uint256 orderCount;\\n        uint40 key = tree.first();\\n        while (key != 0) {\\n            orderIds[orderCount] = key;\\n            ++orderCount;\\n            key = tree.next(key);\\n        }\\n        result = new uint40[](orderCount);\\n        for (uint256 i = 0; i < orderCount; ++i) {\\n            result[i] = orderIds[i];\\n        }\\n    }\\n\\n    function _getSlot(PerpdexStructs.LimitOrderInfo storage d) private pure returns (uint256 slot) {\\n        assembly {\\n            slot := d.slot\\n        }\\n    }\\n\\n    function _getLimitOrderInfoFromSlot(uint256 slot) private pure returns (PerpdexStructs.LimitOrderInfo storage d) {\\n        assembly {\\n            d.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7f840466b5dfaf6559ead070420d681aef9eb0e348dd3bbfa0efc190ac0deb34\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PerpMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\n\\nlibrary PerpMath {\\n    using SafeCast for int256;\\n    using SignedSafeMath for int256;\\n    using SafeMath for uint256;\\n\\n    function formatSqrtPriceX96ToPriceX96(uint160 sqrtPriceX96) internal pure returns (uint256) {\\n        return Math.mulDiv(sqrtPriceX96, sqrtPriceX96, FixedPoint96.Q96);\\n    }\\n\\n    function formatX10_18ToX96(uint256 valueX10_18) internal pure returns (uint256) {\\n        return Math.mulDiv(valueX10_18, FixedPoint96.Q96, 1 ether);\\n    }\\n\\n    function formatX96ToX10_18(uint256 valueX96) internal pure returns (uint256) {\\n        return Math.mulDiv(valueX96, 1 ether, FixedPoint96.Q96);\\n    }\\n\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function abs(int256 value) internal pure returns (uint256) {\\n        return value >= 0 ? value.toUint256() : neg256(value).toUint256();\\n    }\\n\\n    function neg256(int256 a) internal pure returns (int256) {\\n        require(a > -2**255, \\\"PerpMath: inversion overflow\\\");\\n        return -a;\\n    }\\n\\n    function neg256(uint256 a) internal pure returns (int256) {\\n        return -SafeCast.toInt256(a);\\n    }\\n\\n    function divBy10_18(int256 value) internal pure returns (int256) {\\n        // no overflow here\\n        return value / (1 ether);\\n    }\\n\\n    function divBy10_18(uint256 value) internal pure returns (uint256) {\\n        // no overflow here\\n        return value / (1 ether);\\n    }\\n\\n    function subRatio(uint24 a, uint24 b) internal pure returns (uint24) {\\n        require(b <= a, \\\"PerpMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    function mulRatio(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return Math.mulDiv(value, ratio, 1e6);\\n    }\\n\\n    function mulRatioRoundingUp(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return Math.mulDiv(value, ratio, 1e6, Math.Rounding.Up);\\n    }\\n\\n    function divRatio(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return Math.mulDiv(value, 1e6, ratio);\\n    }\\n\\n    function divRatioRoundingUp(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return Math.mulDiv(value, 1e6, ratio, Math.Rounding.Up);\\n    }\\n\\n    /// @param denominator cannot be 0 and is checked in Math.mulDiv()\\n    function mulDiv(\\n        int256 a,\\n        int256 b,\\n        uint256 denominator\\n    ) internal pure returns (int256 result) {\\n        uint256 unsignedA = a < 0 ? uint256(neg256(a)) : uint256(a);\\n        uint256 unsignedB = b < 0 ? uint256(neg256(b)) : uint256(b);\\n        bool negative = ((a < 0 && b > 0) || (a > 0 && b < 0)) ? true : false;\\n\\n        uint256 unsignedResult = Math.mulDiv(unsignedA, unsignedB, denominator);\\n\\n        result = negative ? neg256(unsignedResult) : SafeCast.toInt256(unsignedResult);\\n\\n        return result;\\n    }\\n\\n    function sign(int256 value) internal pure returns (int256) {\\n        return value > 0 ? int256(1) : (value < 0 ? int256(-1) : int256(0));\\n    }\\n}\\n\",\"keccak256\":\"0x8fb9c73930e8037da0e08fd3e3972821749739bd5ffe8fd1980dd84c3d40043e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PerpdexStructs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\n\\nimport {\\n    BokkyPooBahsRedBlackTreeLibrary as RBTreeLibrary\\n} from \\\"../../deps/BokkyPooBahsRedBlackTreeLibrary/contracts/BokkyPooBahsRedBlackTreeLibrary.sol\\\";\\n\\nlibrary PerpdexStructs {\\n    struct TakerInfo {\\n        int256 baseBalanceShare;\\n        int256 quoteBalance;\\n    }\\n\\n    struct MakerInfo {\\n        uint256 liquidity;\\n        uint256 cumBaseSharePerLiquidityX96;\\n        uint256 cumQuotePerLiquidityX96;\\n    }\\n\\n    struct LimitOrderInfo {\\n        RBTreeLibrary.Tree ask;\\n        RBTreeLibrary.Tree bid;\\n        uint256 totalBaseAsk;\\n        uint256 totalBaseBid;\\n    }\\n\\n    struct VaultInfo {\\n        int256 collateralBalance;\\n    }\\n\\n    struct AccountInfo {\\n        // market\\n        mapping(address => TakerInfo) takerInfos;\\n        // market\\n        mapping(address => MakerInfo) makerInfos;\\n        // market\\n        mapping(address => LimitOrderInfo) limitOrderInfos;\\n        VaultInfo vaultInfo;\\n        address[] markets;\\n        uint8 limitOrderCount;\\n    }\\n\\n    struct InsuranceFundInfo {\\n        uint256 balance; // for easy calculation\\n        uint256 liquidationRewardBalance;\\n    }\\n\\n    struct ProtocolInfo {\\n        uint256 protocolFee;\\n    }\\n\\n    struct LiquidationRewardConfig {\\n        uint24 rewardRatio;\\n        uint16 smoothEmaTime;\\n    }\\n}\\n\",\"keccak256\":\"0xef7851776e2f2a338a2b5872b51d05b3f6803a786a0b620e62e91ead4ec6ac03\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/TakerLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { IPerpdexMarketMinimum } from \\\"../interfaces/IPerpdexMarketMinimum.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { PerpdexStructs } from \\\"./PerpdexStructs.sol\\\";\\nimport { AccountLibrary } from \\\"./AccountLibrary.sol\\\";\\nimport { AccountPreviewLibrary } from \\\"./AccountPreviewLibrary.sol\\\";\\n\\nlibrary TakerLibrary {\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    struct TradeParams {\\n        address market;\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n        uint256 amount;\\n        uint256 oppositeAmountBound;\\n        uint24 mmRatio;\\n        uint24 imRatio;\\n        uint8 maxMarketsPerAccount;\\n        uint24 protocolFeeRatio;\\n        bool isSelf;\\n        PerpdexStructs.LiquidationRewardConfig liquidationRewardConfig;\\n    }\\n\\n    struct PreviewTradeParams {\\n        address market;\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n        uint256 amount;\\n        uint256 oppositeAmountBound;\\n        uint24 mmRatio;\\n        uint24 protocolFeeRatio;\\n        bool isSelf;\\n    }\\n\\n    struct TradeResponse {\\n        int256 base;\\n        int256 quote;\\n        int256 realizedPnl;\\n        uint256 protocolFee;\\n        uint256 liquidationPenalty;\\n        uint256 liquidationReward;\\n        uint256 insuranceFundReward;\\n        bool isLiquidation;\\n        IPerpdexMarketMinimum.SwapResponse rawResponse;\\n    }\\n\\n    // to avoid stack too deep\\n    struct DoSwapParams {\\n        address market;\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n        uint256 amount;\\n        uint256 oppositeAmountBound;\\n        uint8 maxMarketsPerAccount;\\n        uint24 protocolFeeRatio;\\n        bool isLiquidation;\\n    }\\n\\n    function trade(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        PerpdexStructs.VaultInfo storage liquidatorVaultInfo,\\n        PerpdexStructs.InsuranceFundInfo storage insuranceFundInfo,\\n        PerpdexStructs.ProtocolInfo storage protocolInfo,\\n        TradeParams memory params\\n    ) internal returns (TradeResponse memory response) {\\n        response.isLiquidation = _validateTrade(accountInfo, params.market, params.isSelf, params.mmRatio, false);\\n\\n        int256 takerBaseBefore = accountInfo.takerInfos[params.market].baseBalanceShare;\\n\\n        (response.base, response.quote, response.realizedPnl, response.protocolFee, response.rawResponse) = _doSwap(\\n            accountInfo,\\n            protocolInfo,\\n            DoSwapParams({\\n                market: params.market,\\n                isBaseToQuote: params.isBaseToQuote,\\n                isExactInput: params.isExactInput,\\n                amount: params.amount,\\n                oppositeAmountBound: params.oppositeAmountBound,\\n                maxMarketsPerAccount: params.maxMarketsPerAccount,\\n                protocolFeeRatio: params.protocolFeeRatio,\\n                isLiquidation: response.isLiquidation\\n            })\\n        );\\n\\n        bool isOpen = (takerBaseBefore.add(response.base)).sign() * response.base.sign() > 0;\\n\\n        if (response.isLiquidation) {\\n            require(!isOpen, \\\"TL_OP: no open when liquidation\\\");\\n\\n            (\\n                response.liquidationPenalty,\\n                response.liquidationReward,\\n                response.insuranceFundReward\\n            ) = processLiquidationReward(\\n                accountInfo.vaultInfo,\\n                liquidatorVaultInfo,\\n                insuranceFundInfo,\\n                params.mmRatio,\\n                params.liquidationRewardConfig,\\n                response.quote.abs()\\n            );\\n        }\\n\\n        if (isOpen) {\\n            require(AccountLibrary.hasEnoughInitialMargin(accountInfo, params.imRatio), \\\"TL_OP: not enough im\\\");\\n        }\\n    }\\n\\n    function addToTakerBalance(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address market,\\n        int256 baseShare,\\n        int256 quoteBalance,\\n        int256 quoteFee,\\n        uint8 maxMarketsPerAccount\\n    ) internal returns (int256 realizedPnl) {\\n        (accountInfo.takerInfos[market], realizedPnl) = AccountPreviewLibrary.previewAddToTakerBalance(\\n            accountInfo.takerInfos[market],\\n            baseShare,\\n            quoteBalance,\\n            quoteFee\\n        );\\n\\n        accountInfo.vaultInfo.collateralBalance = accountInfo.vaultInfo.collateralBalance.add(realizedPnl);\\n\\n        AccountLibrary.updateMarkets(accountInfo, market, maxMarketsPerAccount);\\n    }\\n\\n    // Even if trade reverts, it may not revert.\\n    // Attempting to match reverts makes the implementation too complicated\\n    // ignored checks when liquidation:\\n    // - initial margin\\n    // - close only\\n    // - maker and limit order existence\\n    function previewTrade(PerpdexStructs.AccountInfo storage accountInfo, PreviewTradeParams memory params)\\n        internal\\n        view\\n        returns (uint256 oppositeAmount)\\n    {\\n        bool isLiquidation = _validateTrade(accountInfo, params.market, params.isSelf, params.mmRatio, true);\\n\\n        oppositeAmount;\\n        if (params.protocolFeeRatio == 0) {\\n            oppositeAmount = IPerpdexMarketMinimum(params.market).previewSwap(\\n                params.isBaseToQuote,\\n                params.isExactInput,\\n                params.amount,\\n                isLiquidation\\n            );\\n        } else {\\n            (oppositeAmount, ) = previewSwapWithProtocolFee(\\n                params.market,\\n                params.isBaseToQuote,\\n                params.isExactInput,\\n                params.amount,\\n                params.protocolFeeRatio,\\n                isLiquidation\\n            );\\n        }\\n        validateSlippage(params.isExactInput, oppositeAmount, params.oppositeAmountBound);\\n    }\\n\\n    // ignored checks when liquidation:\\n    // - initial margin\\n    // - close only\\n    // - maker and limit order existence\\n    function maxTrade(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address market,\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint24 mmRatio,\\n        uint24 protocolFeeRatio,\\n        bool isSelf\\n    ) internal view returns (uint256 amount) {\\n        bool isLiquidation = !AccountLibrary.hasEnoughMaintenanceMargin(accountInfo, mmRatio);\\n\\n        if (!isSelf && !isLiquidation) {\\n            return 0;\\n        }\\n\\n        if (protocolFeeRatio == 0) {\\n            amount = IPerpdexMarketMinimum(market).maxSwap(isBaseToQuote, isExactInput, isLiquidation);\\n        } else {\\n            amount = maxSwapWithProtocolFee(market, isBaseToQuote, isExactInput, protocolFeeRatio, isLiquidation);\\n        }\\n    }\\n\\n    function _doSwap(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        PerpdexStructs.ProtocolInfo storage protocolInfo,\\n        DoSwapParams memory params\\n    )\\n        private\\n        returns (\\n            int256 base,\\n            int256 quote,\\n            int256 realizedPnl,\\n            uint256 protocolFee,\\n            IPerpdexMarketMinimum.SwapResponse memory rawResponse\\n        )\\n    {\\n        uint256 oppositeAmount;\\n\\n        if (params.protocolFeeRatio > 0) {\\n            (oppositeAmount, protocolFee, rawResponse) = swapWithProtocolFee(\\n                protocolInfo,\\n                params.market,\\n                params.isBaseToQuote,\\n                params.isExactInput,\\n                params.amount,\\n                params.protocolFeeRatio,\\n                params.isLiquidation\\n            );\\n        } else {\\n            rawResponse = IPerpdexMarketMinimum(params.market).swap(\\n                params.isBaseToQuote,\\n                params.isExactInput,\\n                params.amount,\\n                params.isLiquidation\\n            );\\n            oppositeAmount = rawResponse.oppositeAmount;\\n        }\\n        validateSlippage(params.isExactInput, oppositeAmount, params.oppositeAmountBound);\\n\\n        (base, quote) = swapResponseToBaseQuote(\\n            params.isBaseToQuote,\\n            params.isExactInput,\\n            params.amount,\\n            oppositeAmount\\n        );\\n        realizedPnl = addToTakerBalance(accountInfo, params.market, base, quote, 0, params.maxMarketsPerAccount);\\n    }\\n\\n    function swapWithProtocolFee(\\n        PerpdexStructs.ProtocolInfo storage protocolInfo,\\n        address market,\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        uint24 protocolFeeRatio,\\n        bool isLiquidation\\n    )\\n        internal\\n        returns (\\n            uint256 oppositeAmount,\\n            uint256 protocolFee,\\n            IPerpdexMarketMinimum.SwapResponse memory rawResponse\\n        )\\n    {\\n        if (isExactInput) {\\n            if (isBaseToQuote) {\\n                rawResponse = IPerpdexMarketMinimum(market).swap(isBaseToQuote, isExactInput, amount, isLiquidation);\\n                oppositeAmount = rawResponse.oppositeAmount;\\n                protocolFee = oppositeAmount.mulRatio(protocolFeeRatio);\\n                oppositeAmount = oppositeAmount.sub(protocolFee);\\n            } else {\\n                protocolFee = amount.mulRatio(protocolFeeRatio);\\n                rawResponse = IPerpdexMarketMinimum(market).swap(\\n                    isBaseToQuote,\\n                    isExactInput,\\n                    amount.sub(protocolFee),\\n                    isLiquidation\\n                );\\n                oppositeAmount = rawResponse.oppositeAmount;\\n            }\\n        } else {\\n            if (isBaseToQuote) {\\n                protocolFee = amount.divRatio(PerpMath.subRatio(1e6, protocolFeeRatio)).sub(amount);\\n                rawResponse = IPerpdexMarketMinimum(market).swap(\\n                    isBaseToQuote,\\n                    isExactInput,\\n                    amount.add(protocolFee),\\n                    isLiquidation\\n                );\\n                oppositeAmount = rawResponse.oppositeAmount;\\n            } else {\\n                rawResponse = IPerpdexMarketMinimum(market).swap(isBaseToQuote, isExactInput, amount, isLiquidation);\\n                uint256 oppositeAmountWithoutFee = rawResponse.oppositeAmount;\\n                oppositeAmount = oppositeAmountWithoutFee.divRatio(PerpMath.subRatio(1e6, protocolFeeRatio));\\n                protocolFee = oppositeAmount.sub(oppositeAmountWithoutFee);\\n            }\\n        }\\n\\n        protocolInfo.protocolFee = protocolInfo.protocolFee.add(protocolFee);\\n    }\\n\\n    function processLiquidationReward(\\n        PerpdexStructs.VaultInfo storage vaultInfo,\\n        PerpdexStructs.VaultInfo storage liquidatorVaultInfo,\\n        PerpdexStructs.InsuranceFundInfo storage insuranceFundInfo,\\n        uint24 mmRatio,\\n        PerpdexStructs.LiquidationRewardConfig memory liquidationRewardConfig,\\n        uint256 exchangedQuote\\n    )\\n        internal\\n        returns (\\n            uint256 penalty,\\n            uint256 liquidationReward,\\n            uint256 insuranceFundReward\\n        )\\n    {\\n        penalty = exchangedQuote.mulRatio(mmRatio);\\n        liquidationReward = penalty.mulRatio(liquidationRewardConfig.rewardRatio);\\n        insuranceFundReward = penalty.sub(liquidationReward);\\n\\n        (insuranceFundInfo.liquidationRewardBalance, liquidationReward) = _smoothLiquidationReward(\\n            insuranceFundInfo.liquidationRewardBalance,\\n            liquidationReward,\\n            liquidationRewardConfig.smoothEmaTime\\n        );\\n\\n        vaultInfo.collateralBalance = vaultInfo.collateralBalance.sub(penalty.toInt256());\\n        liquidatorVaultInfo.collateralBalance = liquidatorVaultInfo.collateralBalance.add(liquidationReward.toInt256());\\n        insuranceFundInfo.balance = insuranceFundInfo.balance.add(insuranceFundReward);\\n    }\\n\\n    function _smoothLiquidationReward(\\n        uint256 rewardBalance,\\n        uint256 reward,\\n        uint24 emaTime\\n    ) private pure returns (uint256 outputRewardBalance, uint256 outputReward) {\\n        rewardBalance = rewardBalance.add(reward);\\n        outputReward = rewardBalance.div(emaTime);\\n        outputRewardBalance = rewardBalance.sub(outputReward);\\n    }\\n\\n    function previewSwapWithProtocolFee(\\n        address market,\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        uint24 protocolFeeRatio,\\n        bool isLiquidation\\n    ) internal view returns (uint256 oppositeAmount, uint256 protocolFee) {\\n        if (isExactInput) {\\n            if (isBaseToQuote) {\\n                oppositeAmount = IPerpdexMarketMinimum(market).previewSwap(\\n                    isBaseToQuote,\\n                    isExactInput,\\n                    amount,\\n                    isLiquidation\\n                );\\n                protocolFee = oppositeAmount.mulRatio(protocolFeeRatio);\\n                oppositeAmount = oppositeAmount.sub(protocolFee);\\n            } else {\\n                protocolFee = amount.mulRatio(protocolFeeRatio);\\n                oppositeAmount = IPerpdexMarketMinimum(market).previewSwap(\\n                    isBaseToQuote,\\n                    isExactInput,\\n                    amount.sub(protocolFee),\\n                    isLiquidation\\n                );\\n            }\\n        } else {\\n            if (isBaseToQuote) {\\n                protocolFee = amount.divRatio(PerpMath.subRatio(1e6, protocolFeeRatio)).sub(amount);\\n                oppositeAmount = IPerpdexMarketMinimum(market).previewSwap(\\n                    isBaseToQuote,\\n                    isExactInput,\\n                    amount.add(protocolFee),\\n                    isLiquidation\\n                );\\n            } else {\\n                uint256 oppositeAmountWithoutFee =\\n                    IPerpdexMarketMinimum(market).previewSwap(isBaseToQuote, isExactInput, amount, isLiquidation);\\n                oppositeAmount = oppositeAmountWithoutFee.divRatio(PerpMath.subRatio(1e6, protocolFeeRatio));\\n                protocolFee = oppositeAmount.sub(oppositeAmountWithoutFee);\\n            }\\n        }\\n    }\\n\\n    function maxSwapWithProtocolFee(\\n        address market,\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint24 protocolFeeRatio,\\n        bool isLiquidation\\n    ) internal view returns (uint256 amount) {\\n        amount = IPerpdexMarketMinimum(market).maxSwap(isBaseToQuote, isExactInput, isLiquidation);\\n\\n        if (isExactInput) {\\n            if (isBaseToQuote) {} else {\\n                amount = amount.divRatio(PerpMath.subRatio(1e6, protocolFeeRatio));\\n            }\\n        } else {\\n            if (isBaseToQuote) {\\n                amount = amount.mulRatio(PerpMath.subRatio(1e6, protocolFeeRatio));\\n            } else {}\\n        }\\n    }\\n\\n    function validateSlippage(\\n        bool isExactInput,\\n        uint256 oppositeAmount,\\n        uint256 oppositeAmountBound\\n    ) internal pure {\\n        if (isExactInput) {\\n            require(oppositeAmount >= oppositeAmountBound, \\\"TL_VS: too small opposite amount\\\");\\n        } else {\\n            require(oppositeAmount <= oppositeAmountBound, \\\"TL_VS: too large opposite amount\\\");\\n        }\\n    }\\n\\n    function swapResponseToBaseQuote(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        uint256 oppositeAmount\\n    ) internal pure returns (int256, int256) {\\n        if (isExactInput) {\\n            if (isBaseToQuote) {\\n                return (amount.neg256(), oppositeAmount.toInt256());\\n            } else {\\n                return (oppositeAmount.toInt256(), amount.neg256());\\n            }\\n        } else {\\n            if (isBaseToQuote) {\\n                return (oppositeAmount.neg256(), amount.toInt256());\\n            } else {\\n                return (amount.toInt256(), oppositeAmount.neg256());\\n            }\\n        }\\n    }\\n\\n    function _validateTrade(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address market,\\n        bool isSelf,\\n        uint24 mmRatio,\\n        bool ignoreMakerOrderBookExistence\\n    ) private view returns (bool isLiquidation) {\\n        isLiquidation = !AccountLibrary.hasEnoughMaintenanceMargin(accountInfo, mmRatio);\\n\\n        if (!isSelf) {\\n            require(isLiquidation, \\\"TL_VT: enough mm\\\");\\n        }\\n\\n        if (!ignoreMakerOrderBookExistence && isLiquidation) {\\n            require(accountInfo.makerInfos[market].liquidity == 0, \\\"TL_VT: no maker when liquidation\\\");\\n            require(accountInfo.limitOrderInfos[market].ask.root == 0, \\\"TL_VT: no ask when liquidation\\\");\\n            require(accountInfo.limitOrderInfos[market].bid.root == 0, \\\"TL_VT: no bid when liquidation\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc8c0502041c9f99374af9bde569f8d888446d27aa4c473da84c752d55ce98c15\",\"license\":\"GPL-3.0-or-later\"},\"deps/BokkyPooBahsRedBlackTreeLibrary/contracts/BokkyPooBahsRedBlackTreeLibrary.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's Red-Black Tree Library v1.0-pre-release-a\\n//\\n// A Solidity Red-Black Tree binary search library to store and access a sorted\\n// list of unsigned integer data. The Red-Black algorithm rebalances the binary\\n// search tree, resulting in O(log n) insert, remove and search time (and ~gas)\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsRedBlackTreeLibrary\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2020. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary BokkyPooBahsRedBlackTreeLibrary {\\n    struct Node {\\n        uint40 parent;\\n        uint40 left;\\n        uint40 right;\\n        bool red;\\n        uint128 userData; // use freely. this is for gas efficiency\\n    }\\n\\n    struct Tree {\\n        uint40 root;\\n        mapping(uint40 => Node) nodes;\\n    }\\n\\n    uint40 private constant EMPTY = 0;\\n\\n    function first(Tree storage self) internal view returns (uint40 _key) {\\n        _key = self.root;\\n        if (_key != EMPTY) {\\n            _key = treeMinimum(self, self.root);\\n        }\\n    }\\n\\n    function last(Tree storage self) internal view returns (uint40 _key) {\\n        _key = self.root;\\n        if (_key != EMPTY) {\\n            _key = treeMaximum(self, self.root);\\n        }\\n    }\\n\\n    function next(Tree storage self, uint40 target)\\n        internal\\n        view\\n        returns (uint40 cursor)\\n    {\\n        require(target != EMPTY, \\\"RBTL_N: target is empty\\\");\\n        if (self.nodes[target].right != EMPTY) {\\n            cursor = treeMinimum(self, self.nodes[target].right);\\n        } else {\\n            cursor = self.nodes[target].parent;\\n            while (cursor != EMPTY && target == self.nodes[cursor].right) {\\n                target = cursor;\\n                cursor = self.nodes[cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function prev(Tree storage self, uint40 target)\\n        internal\\n        view\\n        returns (uint40 cursor)\\n    {\\n        require(target != EMPTY, \\\"RBTL_P: target is empty\\\");\\n        if (self.nodes[target].left != EMPTY) {\\n            cursor = treeMaximum(self, self.nodes[target].left);\\n        } else {\\n            cursor = self.nodes[target].parent;\\n            while (cursor != EMPTY && target == self.nodes[cursor].left) {\\n                target = cursor;\\n                cursor = self.nodes[cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function exists(Tree storage self, uint40 key)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return\\n            (key != EMPTY) &&\\n            ((key == self.root) || (self.nodes[key].parent != EMPTY));\\n    }\\n\\n    function isEmpty(uint40 key) internal pure returns (bool) {\\n        return key == EMPTY;\\n    }\\n\\n    function getEmpty() internal pure returns (uint256) {\\n        return EMPTY;\\n    }\\n\\n    function getNode(Tree storage self, uint40 key)\\n        internal\\n        view\\n        returns (\\n            uint40 _returnKey,\\n            uint40 _parent,\\n            uint40 _left,\\n            uint40 _right,\\n            bool _red\\n        )\\n    {\\n        require(exists(self, key), \\\"RBTL_GN: key not exist\\\");\\n        return (\\n            key,\\n            self.nodes[key].parent,\\n            self.nodes[key].left,\\n            self.nodes[key].right,\\n            self.nodes[key].red\\n        );\\n    }\\n\\n    function insert(\\n        Tree storage self,\\n        uint40 key,\\n        uint128 userData,\\n        function(uint40, uint40, uint256) view returns (bool) lessThan,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) internal {\\n        require(key != EMPTY, \\\"RBTL_I: key is empty\\\");\\n        require(!exists(self, key), \\\"RBTL_I: key already exists\\\");\\n        uint40 cursor = EMPTY;\\n        uint40 probe = self.root;\\n        self.nodes[key] = Node({\\n            parent: EMPTY,\\n            left: EMPTY,\\n            right: EMPTY,\\n            red: true,\\n            userData: userData\\n        });\\n        while (probe != EMPTY) {\\n            cursor = probe;\\n            if (lessThan(key, probe, data)) {\\n                probe = self.nodes[probe].left;\\n            } else {\\n                probe = self.nodes[probe].right;\\n            }\\n        }\\n        self.nodes[key].parent = cursor;\\n        if (cursor == EMPTY) {\\n            self.root = key;\\n        } else if (lessThan(key, cursor, data)) {\\n            self.nodes[cursor].left = key;\\n        } else {\\n            self.nodes[cursor].right = key;\\n        }\\n        aggregateRecursively(self, key, aggregate, data);\\n        insertFixup(self, key, aggregate, data);\\n    }\\n\\n    function remove(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) internal {\\n        require(key != EMPTY, \\\"RBTL_R: key is empty\\\");\\n        require(exists(self, key), \\\"RBTL_R: key not exist\\\");\\n        uint40 probe;\\n        uint40 cursor;\\n        if (self.nodes[key].left == EMPTY || self.nodes[key].right == EMPTY) {\\n            cursor = key;\\n        } else {\\n            cursor = self.nodes[key].right;\\n            while (self.nodes[cursor].left != EMPTY) {\\n                cursor = self.nodes[cursor].left;\\n            }\\n        }\\n        if (self.nodes[cursor].left != EMPTY) {\\n            probe = self.nodes[cursor].left;\\n        } else {\\n            probe = self.nodes[cursor].right;\\n        }\\n        uint40 yParent = self.nodes[cursor].parent;\\n        self.nodes[probe].parent = yParent;\\n        if (yParent != EMPTY) {\\n            if (cursor == self.nodes[yParent].left) {\\n                self.nodes[yParent].left = probe;\\n            } else {\\n                self.nodes[yParent].right = probe;\\n            }\\n        } else {\\n            self.root = probe;\\n        }\\n        bool doFixup = !self.nodes[cursor].red;\\n        if (cursor != key) {\\n            replaceParent(self, cursor, key);\\n            self.nodes[cursor].left = self.nodes[key].left;\\n            self.nodes[self.nodes[cursor].left].parent = cursor;\\n            self.nodes[cursor].right = self.nodes[key].right;\\n            self.nodes[self.nodes[cursor].right].parent = cursor;\\n            self.nodes[cursor].red = self.nodes[key].red;\\n            (cursor, key) = (key, cursor);\\n            aggregateRecursively(self, key, aggregate, data);\\n        }\\n        if (doFixup) {\\n            removeFixup(self, probe, aggregate, data);\\n        }\\n        aggregateRecursively(self, yParent, aggregate, data);\\n\\n        // Fixed a bug that caused the parent of empty nodes to be non-zero.\\n        // TODO: Fix it the right way.\\n        if (probe == EMPTY) {\\n            self.nodes[probe].parent = EMPTY;\\n        }\\n    }\\n\\n    // https://arxiv.org/pdf/1602.02120.pdf\\n    // changes from original\\n    // - handle empty\\n    // - handle parent\\n    // - change root to black\\n\\n    // to avoid stack too deep\\n    struct JoinParams {\\n        uint40 left;\\n        uint40 key;\\n        uint40 right;\\n        uint8 leftBlackHeight;\\n        uint8 rightBlackHeight;\\n        uint256 data;\\n    }\\n\\n    // destructive func\\n    function joinRight(\\n        Tree storage self,\\n        JoinParams memory params,\\n        function(uint40, uint256) returns (bool) aggregate\\n    ) private returns (uint40, uint8) {\\n        if (\\n            !self.nodes[params.left].red &&\\n            params.leftBlackHeight == params.rightBlackHeight\\n        ) {\\n            self.nodes[params.key].red = true;\\n            self.nodes[params.key].left = params.left;\\n            self.nodes[params.key].right = params.right;\\n            aggregate(params.key, params.data);\\n            return (params.key, params.leftBlackHeight);\\n        }\\n\\n        (uint40 t, ) = joinRight(\\n            self,\\n            JoinParams({\\n                left: self.nodes[params.left].right,\\n                key: params.key,\\n                right: params.right,\\n                leftBlackHeight: params.leftBlackHeight -\\n                    (self.nodes[params.left].red ? 0 : 1),\\n                rightBlackHeight: params.rightBlackHeight,\\n                data: params.data\\n            }),\\n            aggregate\\n        );\\n        self.nodes[params.left].right = t;\\n        self.nodes[params.left].parent = EMPTY;\\n        aggregate(params.left, params.data);\\n\\n        if (\\n            !self.nodes[params.left].red &&\\n            self.nodes[t].red &&\\n            self.nodes[self.nodes[t].right].red\\n        ) {\\n            self.nodes[self.nodes[t].right].red = false;\\n            rotateLeft(self, params.left, aggregate, params.data);\\n            return (t, params.leftBlackHeight);\\n            //            return (self.nodes[params.left].parent, tBlackHeight + 1); // TODO: replace with t\\n        }\\n        return (params.left, params.leftBlackHeight);\\n        //        return (params.left, tBlackHeight + (self.nodes[params.left].red ? 0 : 1));\\n    }\\n\\n    // destructive func\\n    function joinLeft(\\n        Tree storage self,\\n        JoinParams memory params,\\n        function(uint40, uint256) returns (bool) aggregate\\n    ) internal returns (uint40 resultKey) {\\n        if (\\n            !self.nodes[params.right].red &&\\n            params.leftBlackHeight == params.rightBlackHeight\\n        ) {\\n            self.nodes[params.key].red = true;\\n            self.nodes[params.key].left = params.left;\\n            self.nodes[params.key].right = params.right;\\n            if (params.left != EMPTY) {\\n                self.nodes[params.left].parent = params.key;\\n            }\\n            if (params.right != EMPTY) {\\n                self.nodes[params.right].parent = params.key;\\n            }\\n            aggregate(params.key, params.data);\\n            return params.key;\\n        }\\n\\n        uint40 t = joinLeft(\\n            self,\\n            JoinParams({\\n                left: params.left,\\n                key: params.key,\\n                right: self.nodes[params.right].left,\\n                leftBlackHeight: params.leftBlackHeight,\\n                rightBlackHeight: params.rightBlackHeight -\\n                    (self.nodes[params.right].red ? 0 : 1),\\n                data: params.data\\n            }),\\n            aggregate\\n        );\\n        self.nodes[params.right].left = t;\\n        self.nodes[params.right].parent = EMPTY;\\n        if (t != EMPTY) {\\n            self.nodes[t].parent = params.right;\\n        }\\n        aggregate(params.right, params.data);\\n\\n        if (\\n            !self.nodes[params.right].red &&\\n            self.nodes[t].red &&\\n            self.nodes[self.nodes[t].left].red\\n        ) {\\n            self.nodes[self.nodes[t].left].red = false;\\n            rotateRight(self, params.right, aggregate, params.data);\\n            return t;\\n        }\\n        return params.right;\\n    }\\n\\n    // destructive func\\n    function join(\\n        Tree storage self,\\n        uint40 left,\\n        uint40 key,\\n        uint40 right,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint8 leftBlackHeight,\\n        uint8 rightBlackHeight,\\n        uint256 data\\n    ) private returns (uint40 t, uint8 tBlackHeight) {\\n        if (leftBlackHeight > rightBlackHeight) {\\n            (t, tBlackHeight) = joinRight(\\n                self,\\n                JoinParams({\\n                    left: left,\\n                    key: key,\\n                    right: right,\\n                    leftBlackHeight: leftBlackHeight,\\n                    rightBlackHeight: rightBlackHeight,\\n                    data: data\\n                }),\\n                aggregate\\n            );\\n            tBlackHeight = leftBlackHeight;\\n            if (self.nodes[t].red && self.nodes[self.nodes[t].right].red) {\\n                self.nodes[t].red = false;\\n                tBlackHeight += 1;\\n            }\\n        } else if (leftBlackHeight < rightBlackHeight) {\\n            t = joinLeft(\\n                self,\\n                JoinParams({\\n                    left: left,\\n                    key: key,\\n                    right: right,\\n                    leftBlackHeight: leftBlackHeight,\\n                    rightBlackHeight: rightBlackHeight,\\n                    data: data\\n                }),\\n                aggregate\\n            );\\n            tBlackHeight = rightBlackHeight;\\n            if (self.nodes[t].red && self.nodes[self.nodes[t].left].red) {\\n                self.nodes[t].red = false;\\n                tBlackHeight += 1;\\n            }\\n        } else {\\n            bool red = !self.nodes[left].red && !self.nodes[right].red;\\n            self.nodes[key].red = red;\\n            self.nodes[key].left = left;\\n            self.nodes[key].right = right;\\n            aggregate(key, data);\\n            (t, tBlackHeight) = (key, leftBlackHeight + (red ? 0 : 1));\\n        }\\n    }\\n\\n    struct SplitParams {\\n        uint40 t;\\n        uint40 key;\\n        uint8 blackHeight;\\n        uint256 data;\\n    }\\n\\n    // destructive func\\n    function splitRight(\\n        Tree storage self,\\n        SplitParams memory params,\\n        function(uint40, uint40, uint256) returns (bool) lessThan,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        function(uint40, uint256) subtreeRemoved\\n    ) private returns (uint40 resultKey, uint8 resultBlackHeight) {\\n        if (params.t == EMPTY) return (EMPTY, params.blackHeight);\\n        params.blackHeight -= (self.nodes[params.t].red ? 0 : 1);\\n        if (params.key == params.t) {\\n            subtreeRemoved(params.t, params.data);\\n            return (self.nodes[params.t].right, params.blackHeight);\\n        }\\n        if (lessThan(params.key, params.t, params.data)) {\\n            (uint40 r, uint8 rBlackHeight) = splitRight(\\n                self,\\n                SplitParams({\\n                    t: self.nodes[params.t].left,\\n                    key: params.key,\\n                    blackHeight: params.blackHeight,\\n                    data: params.data\\n                }),\\n                lessThan,\\n                aggregate,\\n                subtreeRemoved\\n            );\\n            return\\n                join(\\n                    self,\\n                    r,\\n                    params.t,\\n                    self.nodes[params.t].right,\\n                    aggregate,\\n                    rBlackHeight,\\n                    params.blackHeight,\\n                    params.data\\n                );\\n        } else {\\n            subtreeRemoved(params.t, params.data);\\n            return\\n                splitRight(\\n                    self,\\n                    SplitParams({\\n                        t: self.nodes[params.t].right,\\n                        key: params.key,\\n                        blackHeight: params.blackHeight,\\n                        data: params.data\\n                    }),\\n                    lessThan,\\n                    aggregate,\\n                    subtreeRemoved\\n                );\\n        }\\n    }\\n\\n    function removeLeft(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint40, uint256) returns (bool) lessThan,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        function(uint40, uint256) subtreeRemoved,\\n        uint256 data\\n    ) internal {\\n        require(key != EMPTY, \\\"RBTL_RL: key is empty\\\");\\n        require(exists(self, key), \\\"RBTL_RL: key not exist\\\");\\n        (self.root, ) = splitRight(\\n            self,\\n            SplitParams({t: self.root, key: key, blackHeight: 128, data: data}),\\n            lessThan,\\n            aggregate,\\n            subtreeRemoved\\n        );\\n        self.nodes[self.root].parent = EMPTY;\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function aggregateRecursively(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) internal {\\n        while (key != EMPTY) {\\n            if (aggregate(key, data)) return;\\n            key = self.nodes[key].parent;\\n        }\\n    }\\n\\n    function treeMinimum(Tree storage self, uint40 key)\\n        private\\n        view\\n        returns (uint40)\\n    {\\n        while (self.nodes[key].left != EMPTY) {\\n            key = self.nodes[key].left;\\n        }\\n        return key;\\n    }\\n\\n    function treeMaximum(Tree storage self, uint40 key)\\n        private\\n        view\\n        returns (uint40)\\n    {\\n        while (self.nodes[key].right != EMPTY) {\\n            key = self.nodes[key].right;\\n        }\\n        return key;\\n    }\\n\\n    function rotateLeft(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) private {\\n        uint40 cursor = self.nodes[key].right;\\n        uint40 keyParent = self.nodes[key].parent;\\n        uint40 cursorLeft = self.nodes[cursor].left;\\n        self.nodes[key].right = cursorLeft;\\n        if (cursorLeft != EMPTY) {\\n            self.nodes[cursorLeft].parent = key;\\n        }\\n        self.nodes[cursor].parent = keyParent;\\n        if (keyParent == EMPTY) {\\n            self.root = cursor;\\n        } else if (key == self.nodes[keyParent].left) {\\n            self.nodes[keyParent].left = cursor;\\n        } else {\\n            self.nodes[keyParent].right = cursor;\\n        }\\n        self.nodes[cursor].left = key;\\n        self.nodes[key].parent = cursor;\\n        aggregate(key, data);\\n        aggregate(cursor, data);\\n    }\\n\\n    function rotateRight(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) private {\\n        uint40 cursor = self.nodes[key].left;\\n        uint40 keyParent = self.nodes[key].parent;\\n        uint40 cursorRight = self.nodes[cursor].right;\\n        self.nodes[key].left = cursorRight;\\n        if (cursorRight != EMPTY) {\\n            self.nodes[cursorRight].parent = key;\\n        }\\n        self.nodes[cursor].parent = keyParent;\\n        if (keyParent == EMPTY) {\\n            self.root = cursor;\\n        } else if (key == self.nodes[keyParent].right) {\\n            self.nodes[keyParent].right = cursor;\\n        } else {\\n            self.nodes[keyParent].left = cursor;\\n        }\\n        self.nodes[cursor].right = key;\\n        self.nodes[key].parent = cursor;\\n        aggregate(key, data);\\n        aggregate(cursor, data);\\n    }\\n\\n    function insertFixup(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) private {\\n        uint40 cursor;\\n        while (key != self.root && self.nodes[self.nodes[key].parent].red) {\\n            uint40 keyParent = self.nodes[key].parent;\\n            if (keyParent == self.nodes[self.nodes[keyParent].parent].left) {\\n                cursor = self.nodes[self.nodes[keyParent].parent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    key = self.nodes[keyParent].parent;\\n                } else {\\n                    if (key == self.nodes[keyParent].right) {\\n                        key = keyParent;\\n                        rotateLeft(self, key, aggregate, data);\\n                    }\\n                    keyParent = self.nodes[key].parent;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    rotateRight(\\n                        self,\\n                        self.nodes[keyParent].parent,\\n                        aggregate,\\n                        data\\n                    );\\n                }\\n            } else {\\n                cursor = self.nodes[self.nodes[keyParent].parent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    key = self.nodes[keyParent].parent;\\n                } else {\\n                    if (key == self.nodes[keyParent].left) {\\n                        key = keyParent;\\n                        rotateRight(self, key, aggregate, data);\\n                    }\\n                    keyParent = self.nodes[key].parent;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    rotateLeft(\\n                        self,\\n                        self.nodes[keyParent].parent,\\n                        aggregate,\\n                        data\\n                    );\\n                }\\n            }\\n        }\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function replaceParent(\\n        Tree storage self,\\n        uint40 a,\\n        uint40 b\\n    ) private {\\n        uint40 bParent = self.nodes[b].parent;\\n        self.nodes[a].parent = bParent;\\n        if (bParent == EMPTY) {\\n            self.root = a;\\n        } else {\\n            if (b == self.nodes[bParent].left) {\\n                self.nodes[bParent].left = a;\\n            } else {\\n                self.nodes[bParent].right = a;\\n            }\\n        }\\n    }\\n\\n    function removeFixup(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) private {\\n        uint40 cursor;\\n        while (key != self.root && !self.nodes[key].red) {\\n            uint40 keyParent = self.nodes[key].parent;\\n            if (key == self.nodes[keyParent].left) {\\n                cursor = self.nodes[keyParent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[keyParent].red = true;\\n                    rotateLeft(self, keyParent, aggregate, data);\\n                    cursor = self.nodes[keyParent].right;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].left].red &&\\n                    !self.nodes[self.nodes[cursor].right].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    key = keyParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].right].red) {\\n                        self.nodes[self.nodes[cursor].left].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateRight(self, cursor, aggregate, data);\\n                        cursor = self.nodes[keyParent].right;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[keyParent].red;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[cursor].right].red = false;\\n                    rotateLeft(self, keyParent, aggregate, data);\\n                    key = self.root;\\n                }\\n            } else {\\n                cursor = self.nodes[keyParent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[keyParent].red = true;\\n                    rotateRight(self, keyParent, aggregate, data);\\n                    cursor = self.nodes[keyParent].left;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].right].red &&\\n                    !self.nodes[self.nodes[cursor].left].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    key = keyParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].left].red) {\\n                        self.nodes[self.nodes[cursor].right].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateLeft(self, cursor, aggregate, data);\\n                        cursor = self.nodes[keyParent].left;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[keyParent].red;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[cursor].left].red = false;\\n                    rotateRight(self, keyParent, aggregate, data);\\n                    key = self.root;\\n                }\\n            }\\n        }\\n        self.nodes[key].red = false;\\n    }\\n}\\n// ----------------------------------------------------------------------------\\n// End - BokkyPooBah's Red-Black Tree Library\\n// ----------------------------------------------------------------------------\\n\",\"keccak256\":\"0xcd1e5d70b48e4c611fd4b863d8413eb8000db92c875f0a2ccb60b7c374e03d7f\"}},\"version\":1}",
  "bytecode": "0x61438c61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100615760003560e01c80635a9813c6146100665780635c02a9e9146100995780637ae9aeb2146100bb578063d34e48d4146100eb578063e664855e14610121575b600080fd5b81801561007257600080fd5b50610086610081366004613e0f565b610141565b6040519081526020015b60405180910390f35b8180156100a557600080fd5b506100b96100b4366004613ede565b61020f565b005b8180156100c757600080fd5b506100db6100d6366004613f1d565b610263565b6040519015158152602001610090565b8180156100f757600080fd5b5061010b610106366004613fc4565b610577565b60405164ffffffffff9091168152602001610090565b61013461012f36600461406b565b610887565b60405161009091906140ab565b600061014e8686856109c8565b6001600160a01b038516600090815260028701602052604090208415610191578260200151816005016000828254610186919061410c565b909155506101af9050565b82602001518160040160008282546101a9919061410c565b90915550505b6102048787876101cb576101c68660200151610bb8565b6101d8565b6101d88660200151610bd2565b886101ef576101ea8760400151610bd2565b6101fc565b6101fc8760400151610bb8565b600089610c40565b979650505050505050565b6004820180545b801561025d576102258161411f565b90506102588483838154811061023d5761023d614136565b6000918252602090912001546001600160a01b0316856109c8565b610216565b50505050565b6060810151604051633c7e525f60e01b81526004810184905262ffffff909116602482015260009073fd5CD7D2c8277B855c87D05aCC3343DFFA9CDE1f90633c7e525f90604401602060405180830381865af41580156102c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102eb919061414c565b159050816080015161033f578061033f5760405162461bcd60e51b81526020600482015260136024820152724d4f424c5f434c4f3a20656e6f756768206d6d60681b60448201526064015b60405180910390fd5b8151604080840151602085015191516302724ebb60e41b8152901515600482015264ffffffffff90911660248201526000916001600160a01b031690632724ebb0906044016040805180830381865afa1580156103a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c49190614169565b508351604080860151602087015191516311e41a3560e11b8152901515600482015264ffffffffff90911660248201529192506001600160a01b0316906323c8346a90604401600060405180830381600087803b15801561042457600080fd5b505af1158015610438573d6000803e3d6000fd5b505084516001600160a01b03166000908152600287016020526040908190209086015190925015905061049b5781816005016000828254610479919061410c565b90915550506020840151610496906002830190610d316000610d39565b6104c9565b818160040160008282546104af919061410c565b909155505060208401516104c9908290610d316000610d39565b600585018054600191906000906104e490849060ff1661418d565b92506101000a81548160ff021916908360ff16021790555073fd5CD7D2c8277B855c87D05aCC3343DFFA9CDE1f63724055e78686600001518760a001516040518463ffffffff1660e01b815260040161053f939291906141a6565b60006040518083038186803b15801561055757600080fd5b505af415801561056b573d6000803e3d6000fd5b50505050505092915050565b60c0810151600583015460009160ff9081169116106105d45760405162461bcd60e51b81526020600482015260196024820152781353d09317d0d313ce881b585e081bdc99195c8818dbdd5b9d603a1b6044820152606401610336565b815160608301516020840151604080860151905163056f551760e41b81529215156004840152602483019190915260448201526001600160a01b03909116906356f55170906064016020604051808303816000875af115801561063b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065f91906141c8565b82516001600160a01b0316600090815260028501602052604081209192508190508360600151156106d0576106ad8361069b866040015161115d565b600285019190611168610d3186611186565b83602001518260050160008282546106c591906141e5565b9091555061070e9050565b6106f0836106e1866040015161115d565b8491906114d8610d3186611186565b836020015182600401600082825461070891906141e5565b90915550505b6005850180546001919060009061072990849060ff166141f8565b92506101000a81548160ff021916908360ff16021790555073fd5CD7D2c8277B855c87D05aCC3343DFFA9CDE1f63724055e78686600001518760a001516040518463ffffffff1660e01b8152600401610784939291906141a6565b60006040518083038186803b15801561079c57600080fd5b505af41580156107b0573d6000803e3d6000fd5b505050506080840151604051634d3a1f3d60e11b81526004810187905262ffffff909116602482015273fd5CD7D2c8277B855c87D05aCC3343DFFA9CDE1f90639a743e7a90604401602060405180830381865af4158015610815573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610839919061414c565b61087f5760405162461bcd60e51b81526020600482015260176024820152764d4f424c5f434c4f3a206e6f7420656e6f75676820696d60481b6044820152606401610336565b505092915050565b6001600160a01b03821660009081526002840160205260408120606091836108af57816108b4565b816002015b90506108be613cea565b6000806108ca846114e7565b90505b64ffffffffff81161561091b5780838361010081106108ee576108ee614136565b64ffffffffff909216602092909202015261090882614211565b9150610914848261150f565b90506108cd565b8167ffffffffffffffff81111561093457610934613d7e565b60405190808252806020026020018201604052801561095d578160200160208202803683370190505b50955060005b828110156109bb578381610100811061097e5761097e614136565b602002015187828151811061099557610995614136565b64ffffffffff909216602092830291909101909101526109b481614211565b9050610963565b5050505050509392505050565b6001600160a01b038216600090815260028401602052604081209080806109ef8787611638565b92509250925060008351905080600003610a0d575050505050505050565b8464ffffffffff841615610a2f57610a2f86856114d8610d31611af686611afa565b64ffffffffff831615610a5357610a536002870184611168610d31611af686611afa565b506000806000610a648b8b89611c1f565b8e60000160008f6001600160a01b03166001600160a01b03168152602001908152602001600020600082965083975084985085919050600082015181600001556020820151816001015550505050505081886004016000828254610ac8919061410c565b9250508190555080886005016000828254610ae3919061410c565b90915550610af2905084611d62565b60058c018054600090610b0990849060ff1661418d565b92506101000a81548160ff021916908360ff160217905550610b3b838c60030160000154611dc390919063ffffffff16565b60038c015560405163724055e760e01b815273fd5CD7D2c8277B855c87D05aCC3343DFFA9CDE1f9063724055e790610b7b908e908e908e906004016141a6565b60006040518083038186803b158015610b9357600080fd5b505af4158015610ba7573d6000803e3d6000fd5b505050505050505050505050505050565b6000610bc382610bd2565b610bcc9061422a565b92915050565b60006001600160ff1b03821115610c3c5760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b6064820152608401610336565b5090565b6001600160a01b0385166000908152602087815260408083208151808301909252805482526001015491810191909152610c7c90868686611dcf565b6001600160a01b038816600090815260208a81526040909120835181559201516001909201919091556003880154909150610cb79082611dc3565b600388015560405163724055e760e01b815273fd5CD7D2c8277B855c87D05aCC3343DFFA9CDE1f9063724055e790610cf7908a908a9087906004016141a6565b60006040518083038186803b158015610d0f57600080fd5b505af4158015610d23573d6000803e3d6000fd5b505050509695505050505050565b600192915050565b64ffffffffff8316610d845760405162461bcd60e51b81526020600482015260146024820152735242544c5f523a206b657920697320656d70747960601b6044820152606401610336565b610d8e8484611f6f565b610dd25760405162461bcd60e51b81526020600482015260156024820152741490951317d48e881ad95e481b9bdd08195e1a5cdd605a1b6044820152606401610336565b64ffffffffff838116600090815260018601602052604081205490918291600160281b9004161580610e23575064ffffffffff8581166000908152600188016020526040902054600160501b900416155b15610e2f575083610ea1565b5064ffffffffff8085166000908152600187016020526040902054600160501b9004165b64ffffffffff8181166000908152600188016020526040902054600160281b90041615610ea15764ffffffffff9081166000908152600187016020526040902054600160281b900416610e53565b64ffffffffff8181166000908152600188016020526040902054600160281b90041615610ef15764ffffffffff8082166000908152600188016020526040902054600160281b9004169150610f16565b64ffffffffff8082166000908152600188016020526040902054600160501b90041691505b64ffffffffff80821660009081526001880160205260408082205485841683529120805464ffffffffff1916919092169081179091558015610ff55764ffffffffff8082166000908152600189016020526040902054600160281b9004811690831603610fb95764ffffffffff808216600090815260018901602052604090208054918516600160281b0264ffffffffff60281b1990921691909117905561100b565b64ffffffffff808216600090815260018901602052604090208054918516600160501b0264ffffffffff60501b1990921691909117905561100b565b865464ffffffffff191664ffffffffff84161787555b64ffffffffff828116600081815260018a016020526040902054600160781b900460ff16159188161461110457611043888489611fba565b64ffffffffff878116600090815260018a0160205260408082208054878516808552838520805464ffffffffff60281b1916600160281b9384900488168402178082559290920486168552838520805464ffffffffff1990811683179091558354835464ffffffffff60501b1916600160501b91829004891682021780855504909616855292842080549095168317909455549152815460ff60781b1916600160781b9182900460ff161515909102179055919591611104888888886120b3565b801561111657611116888588886120f5565b611122888388886120b3565b64ffffffffff84166111535764ffffffffff841660009081526001890160205260409020805464ffffffffff191690555b5050505050505050565b6000610bcc8261268e565b60008161117b60028201600187876126f7565b9150505b9392505050565b64ffffffffff85166111d15760405162461bcd60e51b81526020600482015260146024820152735242544c5f493a206b657920697320656d70747960601b6044820152606401610336565b6111db8686611f6f565b156112285760405162461bcd60e51b815260206004820152601a60248201527f5242544c5f493a206b657920616c7265616479206578697374730000000000006044820152606401610336565b6000808760000160009054906101000a900464ffffffffff1690506040518060a00160405280600064ffffffffff168152602001600064ffffffffff168152602001600064ffffffffff168152602001600115158152602001876001600160801b03168152508860010160008964ffffffffff1664ffffffffff16815260200190815260200160002060008201518160000160006101000a81548164ffffffffff021916908364ffffffffff16021790555060208201518160000160056101000a81548164ffffffffff021916908364ffffffffff160217905550604082015181600001600a6101000a81548164ffffffffff021916908364ffffffffff160217905550606082015181600001600f6101000a81548160ff02191690831515021790555060808201518160000160106101000a8154816001600160801b0302191690836001600160801b031602179055509050505b64ffffffffff8116156113ef5780915061139c8782858863ffffffff16565b156113c85764ffffffffff9081166000908152600189016020526040902054600160281b90041661137d565b64ffffffffff9081166000908152600189016020526040902054600160501b90041661137d565b64ffffffffff878116600090815260018a0160205260409020805464ffffffffff1916918416918217905561143857875464ffffffffff191664ffffffffff88161788556114c0565b6114478783858863ffffffff16565b156114885764ffffffffff808316600090815260018a01602052604090208054918916600160281b0264ffffffffff60281b199092169190911790556114c0565b64ffffffffff808316600090815260018a01602052604090208054918916600160501b0264ffffffffff60501b199092169190911790555b6114cc888886866120b3565b61115388888686612798565b60008161117b818387876126f7565b805464ffffffffff16801561150a578154610bcc90839064ffffffffff16612abd565b919050565b600064ffffffffff821661155f5760405162461bcd60e51b81526020600482015260176024820152765242544c5f4e3a2074617267657420697320656d70747960481b6044820152606401610336565b64ffffffffff8281166000908152600185016020526040902054600160501b900416156115ba5764ffffffffff80831660009081526001850160205260409020546115b3918591600160501b900416612abd565b9050610bcc565b5064ffffffffff8082166000908152600184016020526040902054165b64ffffffffff811615801590611610575064ffffffffff8181166000908152600185016020526040902054600160501b90048116908316145b15610bcc5764ffffffffff8082166000908152600185016020526040902054919250166115d7565b6001600160a01b0381166000908152600283016020526040812060609190819081611662826114e7565b90506000611672836002016114e7565b90506000808080808064ffffffffff8816156117135760405163c9ca629b60e01b81526000600482015264ffffffffff891660248201526001600160a01b038e169063c9ca629b90604401606060405180830381865afa1580156116da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116fe9190614246565b91975095509350600086900361171357600097505b64ffffffffff8716156117ab5760405163c9ca629b60e01b81526001600482015264ffffffffff881660248201526001600160a01b038e169063c9ca629b90604401606060405180830381865afa158015611772573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117969190614246565b9194509250905060008390036117ab57600096505b6117b3613d0a565b60005b64ffffffffff8a161515806117d1575064ffffffffff891615155b15611a2f5764ffffffffff8a16158015906117fa575064ffffffffff891615806117fa57508488105b1561191757604051806040016040528061181389610bb8565b815260200161182188610bd2565b90528282610100811061183657611836614136565b602002015261184481614211565b905060006118528c8c61150f565b905064ffffffffff8116156118eb578f6001600160a01b031663c9ca629b6000836040518363ffffffff1660e01b81526004016118a2929190911515825264ffffffffff16602082015260400190565b606060405180830381865afa1580156118bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e39190614246565b919a50985096505b8815806118fd575064ffffffffff8116155b1561190d57999c50600099611911565b809a505b506117b6565b604051806040016040528061192b86610bd2565b815260200161193985610bb8565b90528282610100811061194e5761194e614136565b602002015261195c81614211565b9050600061196d60028d018b61150f565b905064ffffffffff811615611a06578f6001600160a01b031663c9ca629b6001836040518363ffffffff1660e01b81526004016119bd929190911515825264ffffffffff16602082015260400190565b606060405180830381865afa1580156119da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119fe9190614246565b919750955093505b851580611a18575064ffffffffff8116155b15611a2857989b50600098611911565b98506117b6565b8067ffffffffffffffff811115611a4857611a48613d7e565b604051908082528060200260200182016040528015611a8d57816020015b6040805180820190915260008082526020820152815260200190600190039081611a665790505b509d5060005b81811015611ae35782816101008110611aae57611aae614136565b60200201518f8281518110611ac557611ac5614136565b60200260200101819052508080611adb90614211565b915050611a93565b5050505050505050505050509250925092565b5050565b64ffffffffff8516611b465760405162461bcd60e51b81526020600482015260156024820152745242544c5f524c3a206b657920697320656d70747960581b6044820152606401610336565b611b508686611f6f565b611b955760405162461bcd60e51b81526020600482015260166024820152751490951317d4930e881ad95e481b9bdd08195e1a5cdd60521b6044820152606401610336565b6040805160808082018352885464ffffffffff9081168352881660208301529181019190915260608101829052611bd0908790868686612b17565b50865464ffffffffff91821664ffffffffff19918216811789556000908152600189016020526040808220805490931690925597549091168752909520805460ff60781b191690555050505050565b604080518082018252600080825260209182018190526001600160a01b03851681528582528281208351808501909452805484526001015491830191909152825181908190815b81811015611d57576000611cb787898481518110611c8657611c86614136565b6020026020010151600001518a8581518110611ca457611ca4614136565b6020026020010151602001516000611dcf565b9097509050611cc68187614274565b95506000888381518110611cdc57611cdc614136565b60200260200101516000015112611d2457611d13888381518110611d0257611d02614136565b602002602001015160000151612d4b565b611d1d90856141e5565b9350611d46565b611d39888381518110611d0257611d02614136565b611d4390866141e5565b94505b50611d5081614211565b9050611c66565b505093509350935093565b600060ff821115610c3c5760405162461bcd60e51b815260206004820152602560248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2038604482015264206269747360d81b6064820152608401610336565b600061117f8284614274565b6040805180820190915260008082526020820152600084151580611df257508315155b15611ecb57611e0084612d74565b611e0986612d74565b611e139190614294565b60001914611e2657508490506000611f66565b611e2f85612d74565b8651611e3a90612d74565b611e449190614294565b19611ecb576000611e5486612d4b565b90506000611e658860000151612d4b565b9050808211611e9c576000611e88611e7c84610bd2565b60208b01519084612d94565b9050611e948782611dc3565b935050611ec8565b6000611eb2611eaa83610bd2565b889085612d94565b60208a0151909150611ec49082611dc3565b9350505b50505b611ed58184611dc3565b8651909150600090611ee79087611dc3565b90506000611f1683611f1087611f0a8a8d60200151611dc390919063ffffffff16565b90611dc3565b90612e38565b905081158015611f24575080155b80611f4b5750611f3381612d74565b611f3c83612d74565b611f469190614294565b600019145b611f5d57876000935093505050611f66565b90835260208301525b94509492505050565b600064ffffffffff82161580159061117f5750825464ffffffffff8381169116148061117f57505064ffffffffff908116600090815260019290920160205260409091205416151590565b64ffffffffff80821660009081526001850160205260408082205485841683529120805464ffffffffff1916919092169081179091558061200f57835464ffffffffff191664ffffffffff841617845561025d565b64ffffffffff8082166000908152600186016020526040902054600160281b90048116908316036120765764ffffffffff808216600090815260018601602052604090208054918516600160281b0264ffffffffff60281b1990921691909117905561025d565b64ffffffffff808216600090815260018601602052604090208054918516600160501b0264ffffffffff60501b1990921691909117905550505050565b64ffffffffff83161561025d576120ce83828463ffffffff16565b61025d5764ffffffffff9283166000908152600185016020526040902054909216916120b3565b60005b845464ffffffffff858116911614801590612133575064ffffffffff84166000908152600186016020526040902054600160781b900460ff16155b156126665764ffffffffff80851660008181526001880160205260408082205484168083529120549092600160281b9091041690036123e85764ffffffffff818116600090815260018801602052604080822054600160501b900490921680825291902054909250600160781b900460ff16156122175764ffffffffff8083166000908152600188016020526040808220805460ff60781b19908116909155928416825290208054909116600160781b1790556121f286828686612e44565b64ffffffffff8082166000908152600188016020526040902054600160501b90041691505b64ffffffffff828116600090815260018801602052604080822054600160281b900490921681522054600160781b900460ff16158015612287575064ffffffffff828116600090815260018801602052604080822054600160501b900490921681522054600160781b900460ff16155b156122bd5764ffffffffff821660009081526001870160205260409020805460ff60781b1916600160781b179055935083612660565b64ffffffffff828116600090815260018801602052604080822054600160501b900490921681522054600160781b900460ff1661236b5764ffffffffff80831660008181526001890160205260408082208054600160281b900490941682528120805460ff60781b19908116909155919052815416600160781b1790556123468683868661301a565b64ffffffffff8082166000908152600188016020526040902054600160501b90041691505b64ffffffffff808216600090815260018801602052604080822080548685168452828420805460ff600160781b9384900416151590920260ff60781b19928316178155825482169092559054600160501b900490931682529020805490911690556123d886828686612e44565b855464ffffffffff169450612660565b64ffffffffff818116600090815260018801602052604080822054600160281b900490921680825291902054909250600160781b900460ff16156124935764ffffffffff8083166000908152600188016020526040808220805460ff60781b19908116909155928416825290208054909116600160781b17905561246e8682868661301a565b64ffffffffff8082166000908152600188016020526040902054600160281b90041691505b64ffffffffff828116600090815260018801602052604080822054600160501b900490921681522054600160781b900460ff16158015612503575064ffffffffff828116600090815260018801602052604080822054600160281b900490921681522054600160781b900460ff16155b156125395764ffffffffff821660009081526001870160205260409020805460ff60781b1916600160781b179055935083612660565b64ffffffffff828116600090815260018801602052604080822054600160281b900490921681522054600160781b900460ff166125e75764ffffffffff80831660008181526001890160205260408082208054600160501b900490941682528120805460ff60781b19908116909155919052815416600160781b1790556125c286838686612e44565b64ffffffffff8082166000908152600188016020526040902054600160281b90041691505b64ffffffffff808216600090815260018801602052604080822080548685168452828420805460ff600160781b9384900416151590920260ff60781b19928316178155825482169092559054600160281b900490931682529020805490911690556126548682868661301a565b855464ffffffffff1694505b506120f8565b50505064ffffffffff166000908152600190910160205260409020805460ff60781b19169055565b60006001600160801b03821115610c3c5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b6064820152608401610336565b64ffffffffff828116600090815260018601602052604080822054928416825281205490916001600160801b03600160801b918290048116929190910416808203612756578364ffffffffff168564ffffffffff161092505050612790565b8561277557806001600160801b0316826001600160801b03161061278b565b806001600160801b0316826001600160801b0316115b925050505b949350505050565b60005b845464ffffffffff8581169116148015906127de575064ffffffffff84811660009081526001870160205260408082205490921681522054600160781b900460ff165b15612a925764ffffffffff808516600090815260018701602052604080822054831680835281832054841683529120549091600160281b9091041681036129585764ffffffffff8181166000908152600188016020526040808220548316825280822054600160501b900490921680825291902054909250600160781b900460ff16156128bd5764ffffffffff8082166000818152600189016020526040808220805460ff60781b19908116825587861684528284208054821690558154861684529183208054909216600160781b1790915591905254169450612a8c565b64ffffffffff8082166000908152600188016020526040902054600160501b90048116908616036128f7578094506128f786868686612e44565b5064ffffffffff8085166000908152600187016020526040808220548316808352818320805460ff60781b19808216835590861685529284208054909316600160781b179092559182905254909161295391889116868661301a565b612a8c565b64ffffffffff8181166000908152600188016020526040808220548316825280822054600160281b900490921680825291902054909250600160781b900460ff16156129f65764ffffffffff8082166000818152600189016020526040808220805460ff60781b19908116825587861684528284208054821690558154861684529183208054909216600160781b1790915591905254169450612a8c565b64ffffffffff8082166000908152600188016020526040902054600160281b9004811690861603612a3057809450612a308686868661301a565b5064ffffffffff8085166000908152600187016020526040808220548316808352818320805460ff60781b19808216835590861685529284208054909316600160781b1790925591829052549091612a8c918891168686612e44565b5061279b565b5050825464ffffffffff1660009081526001909301602052505060409020805460ff60781b19169055565b60005b64ffffffffff8281166000908152600185016020526040902054600160281b90041615612b115764ffffffffff9182166000908152600184016020526040902054600160281b900490911690612ac0565b50919050565b8351600090819064ffffffffff16612b385750506040840151600090612d41565b855164ffffffffff166000908152600188016020526040902054600160781b900460ff16612b67576001612b6a565b60005b86604001818151612b7b919061418d565b60ff169052508551602087015164ffffffffff918216911603612be357612bae866000015187606001518563ffffffff16565b5050835164ffffffffff9081166000908152600187016020526040908190205490860151600160501b90910490911690612d41565b612bfe8660200151876000015188606001518863ffffffff16565b15612cc25760408051608081018252875164ffffffffff908116600090815260018b01602090815284822054600160281b900483168452808b0151909216918301919091528883015160ff1692820192909252606080890151908201528190612c6b908a90898989612b17565b895164ffffffffff808216600090815260018e0160205260409081902054908d015160608e0151959750939550612cb7948e94889493600160501b909304909216918c918891906131e1565b935093505050612d41565b612cd8866000015187606001518563ffffffff16565b60408051608081018252875164ffffffffff908116600090815260018b0160209081529084902054600160501b900482168352808a0151909116908201528782015160ff169181019190915260608088015190820152612d3c908890878787612b17565b915091505b9550959350505050565b600080821215612d6b57612d66612d61836134d5565b613533565b610bcc565b610bcc82613533565b6000808213610d315760008212612d8c576000610bcc565b600019610bcc565b60008060008512612da55784612dae565b612dae856134d5565b90506000808512612dbf5784612dc8565b612dc8856134d5565b905060008087128015612ddb5750600086135b80612df15750600087138015612df15750600086125b612dfc576000612dff565b60015b90506000612e0e848488613585565b905081612e2357612e1e81610bd2565b612e2c565b612e2c81610bb8565b98975050505050505050565b600061117f8284614319565b64ffffffffff80841660008181526001870160205260408082208054600160501b80820487168086529385205495909452600160281b909404851692830264ffffffffff60501b1985161790559291909116908015612eca5764ffffffffff81811660009081526001890160205260409020805464ffffffffff19169188169190911790555b64ffffffffff83811660009081526001890160205260409020805464ffffffffff19169184169182179055612f1357865464ffffffffff191664ffffffffff8416178755612fb2565b64ffffffffff8083166000908152600189016020526040902054600160281b9004811690871603612f7a5764ffffffffff808316600090815260018901602052604090208054918516600160281b0264ffffffffff60281b19909216919091179055612fb2565b64ffffffffff808316600090815260018901602052604090208054918516600160501b0264ffffffffff60501b199092169190911790555b64ffffffffff838116600081815260018a016020526040808220805464ffffffffff60281b1916600160281b958c1695860217905592815291909120805464ffffffffff1916909117905561300b868563ffffffff8816565b5061115383858763ffffffff16565b64ffffffffff80841660008181526001870160205260408082208054600160281b80820487168086529385205495909452600160501b909404851692830264ffffffffff60281b19851617905592919091169080156130a05764ffffffffff81811660009081526001890160205260409020805464ffffffffff19169188169190911790555b64ffffffffff83811660009081526001890160205260409020805464ffffffffff191691841691821790556130e957865464ffffffffff191664ffffffffff8416178755613188565b64ffffffffff8083166000908152600189016020526040902054600160501b90048116908716036131505764ffffffffff808316600090815260018901602052604090208054918516600160501b0264ffffffffff60501b19909216919091179055613188565b64ffffffffff808316600090815260018901602052604090208054918516600160281b0264ffffffffff60281b199092169190911790555b64ffffffffff838116600081815260018a016020526040808220805464ffffffffff60501b1916600160501b958c1695860217905592815291909120805464ffffffffff1916909117905561300b868563ffffffff8816565b6000808360ff168560ff1611156132e5576132448a6040518060c001604052808c64ffffffffff1681526020018b64ffffffffff1681526020018a64ffffffffff1681526020018860ff1681526020018760ff1681526020018681525088613634565b5064ffffffffff8116600090815260018c016020526040902054909250859150600160781b900460ff1680156132a9575064ffffffffff828116600090815260018c01602052604080822054600160501b900490921681522054600160781b900460ff165b156132e05764ffffffffff821660009081526001808c016020526040909120805460ff60781b191690556132dd90826141f8565b90505b6134c8565b8360ff168560ff1610156133dc576133458a6040518060c001604052808c64ffffffffff1681526020018b64ffffffffff1681526020018a64ffffffffff1681526020018860ff1681526020018760ff168152602001868152508861392c565b64ffffffffff8116600090815260018c016020526040902054909250849150600160781b900460ff1680156132a9575064ffffffffff828116600090815260018c01602052604080822054600160281b900490921681522054600160781b900460ff16156132e05764ffffffffff821660009081526001808c016020526040909120805460ff60781b191690556132dd90826141f8565b64ffffffffff8916600090815260018b016020526040812054600160781b900460ff1615801561342c575064ffffffffff8816600090815260018c016020526040902054600160781b900460ff16155b64ffffffffff8a8116600090815260018e016020526040902080546fff0000000000ffffffffff00000000001916600160781b8415150264ffffffffff60281b191617600160281b8e8416021764ffffffffff60501b1916600160501b928c169290920291909117905590506134a6898563ffffffff8a16565b5088816134b45760016134b7565b60005b6134c190886141f8565b9093509150505b9850989650505050505050565b6000600160ff1b821361352a5760405162461bcd60e51b815260206004820152601c60248201527f506572704d6174683a20696e76657273696f6e206f766572666c6f77000000006044820152606401610336565b610bcc8261422a565b600080821215610c3c5760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f7369746976656044820152606401610336565b60008080600019858709858702925082811083820303915050806000036135bf578382816135b5576135b5614340565b049250505061117f565b8084116135cb57600080fd5b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b815164ffffffffff1660009081526001840160205260408120548190600160781b900460ff161580156136745750836080015160ff16846060015160ff16145b15613726576020808501805164ffffffffff9081166000908152600189019093526040808420805460ff60781b1916600160781b17905587518351831685528185208054918416600160281b0264ffffffffff60281b19909216919091179055808801518351831685529320805493909116600160501b0264ffffffffff60501b19909316929092179091555160a0850151613714919063ffffffff8616565b50505060208201516060830151613924565b6040805160c081018252855164ffffffffff908116600090815260018901602081815285832054600160501b900484168552808a01518416818601528986015184168587015289519093168252909152918220546137cf9188916060820190600160781b900460ff1661379a57600161379d565b60005b89606001516137ac919061418d565b60ff168152602001886080015160ff1681526020018860a0015181525086613634565b50855164ffffffffff9081166000908152600189016020526040808220805464ffffffffff60501b1916600160501b868616021790558851909216815220805464ffffffffff19169055855160a08701519192506138309163ffffffff8716565b50845164ffffffffff166000908152600187016020526040902054600160781b900460ff16158015613881575064ffffffffff81166000908152600187016020526040902054600160781b900460ff165b80156138bc575064ffffffffff818116600090815260018801602052604080822054600160501b900490921681522054600160781b900460ff165b156139175764ffffffffff808216600090815260018801602052604080822054600160501b9004909216815220805460ff60781b19169055845160a08601516139089188918790612e44565b60608501519092509050613924565b5050825160608401519091505b935093915050565b60408281015164ffffffffff1660009081526001850160205290812054600160781b900460ff1615801561396d5750826080015160ff16836060015160ff16145b15613aa2576020808401805164ffffffffff9081166000908152600188019093526040808420805460ff60781b1916600160781b17905586518351831685528185208054918416600160281b0264ffffffffff60281b19909216919091179055808701519251821684529092208054918316600160501b0264ffffffffff60501b1990921691909117905583511615613a3757602083810151845164ffffffffff9081166000908152600188019093526040909220805464ffffffffff1916929091169190911790555b604083015164ffffffffff1615613a805760208381015160408086015164ffffffffff9081166000908152600189019094529220805464ffffffffff1916929091169190911790555b613a9683602001518460a001518463ffffffff16565b5050602082015161117f565b6040805160c081018252845164ffffffffff908116825260208087015182168184015286840180518316600090815260018a0180845286822054600160281b90048516868801526060808b015160ff908116918801919091529251909416815292909152928120549092613b5492889290916080830191600160781b900416613b2c576001613b2f565b60005b8860800151613b3e919061418d565b60ff1681526020018760a001518152508561392c565b6040858101805164ffffffffff908116600090815260018a01602052838120805464ffffffffff60281b1916600160281b878516908102919091179091559251909116815291909120805464ffffffffff1916905590915015613be55760408481015164ffffffffff83811660009081526001890160205292909220805464ffffffffff1916929091169190911790555b613bfb84604001518560a001518563ffffffff16565b5060408481015164ffffffffff166000908152600187016020522054600160781b900460ff16158015613c4d575064ffffffffff81166000908152600186016020526040902054600160781b900460ff165b8015613c88575064ffffffffff818116600090815260018701602052604080822054600160281b900490921681522054600160781b900460ff165b15613cde5764ffffffffff808216600090815260018701602052604080822054600160281b90049092168152819020805460ff60781b1916905584015160a0850151613cd7918791869061301a565b905061117f565b50505060400151919050565b604051806120000160405280610100906020820280368337509192915050565b604051806120000160405280610100905b6040805180820190915260008082526020820152815260200190600190039081613d1b5790505090565b80356001600160a01b038116811461150a57600080fd5b8015158114613d6a57600080fd5b50565b803560ff8116811461150a57600080fd5b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff81118282101715613dc557634e487b7160e01b600052604160045260246000fd5b60405290565b60405160e0810167ffffffffffffffff81118282101715613dc557634e487b7160e01b600052604160045260246000fd5b64ffffffffff81168114613d6a57600080fd5b6000806000806000858703610100811215613e2957600080fd5b86359550613e3960208801613d45565b94506040870135613e4981613d5c565b9350613e5760608801613d6d565b92506080607f1982011215613e6b57600080fd5b506040516080810181811067ffffffffffffffff82111715613e9d57634e487b7160e01b600052604160045260246000fd5b80604052506080870135815260a0870135602082015260c0870135604082015260e0870135613ecb81613dfc565b6060820152949793965091945092919050565b60008060408385031215613ef157600080fd5b82359150613f0160208401613d6d565b90509250929050565b803562ffffff8116811461150a57600080fd5b60008082840360e0811215613f3157600080fd5b8335925060c0601f1982011215613f4757600080fd5b50613f50613d94565b613f5c60208501613d45565b81526040840135613f6c81613dfc565b60208201526060840135613f7f81613d5c565b6040820152613f9060808501613f0a565b606082015260a0840135613fa381613d5c565b6080820152613fb460c08501613d6d565b60a0820152809150509250929050565b600080828403610100811215613fd957600080fd5b8335925060e0601f1982011215613fef57600080fd5b50613ff8613dcb565b61400460208501613d45565b81526040840135602082015260608401356040820152608084013561402881613d5c565b606082015261403960a08501613f0a565b608082015261404a60c08501613d6d565b60a082015261405b60e08501613d6d565b60c0820152809150509250929050565b60008060006060848603121561408057600080fd5b8335925061409060208501613d45565b915060408401356140a081613d5c565b809150509250925092565b6020808252825182820181905260009190848201906040850190845b818110156140ea57835164ffffffffff16835292840192918401916001016140c7565b50909695505050505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610bcc57610bcc6140f6565b60008161412e5761412e6140f6565b506000190190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561415e57600080fd5b815161117f81613d5c565b6000806040838503121561417c57600080fd5b505080516020909101519092909150565b60ff8281168282160390811115610bcc57610bcc6140f6565b9283526001600160a01b0391909116602083015260ff16604082015260600190565b6000602082840312156141da57600080fd5b815161117f81613dfc565b80820180821115610bcc57610bcc6140f6565b60ff8181168382160190811115610bcc57610bcc6140f6565b600060018201614223576142236140f6565b5060010190565b6000600160ff1b820161423f5761423f6140f6565b5060000390565b60008060006060848603121561425b57600080fd5b8351925060208401519150604084015190509250925092565b808201828112600083128015821682158216171561087f5761087f6140f6565b60006001600160ff1b03818413828413808216868404861116156142ba576142ba6140f6565b600160ff1b60008712828116878305891216156142d9576142d96140f6565b600087129250878205871284841616156142f5576142f56140f6565b8785058712818416161561430b5761430b6140f6565b505050929093029392505050565b8181036000831280158383131683831282161715614339576143396140f6565b5092915050565b634e487b7160e01b600052601260045260246000fdfea26469706673582212202e3bd1cda9ba91d682c61f1bd6e5b8d058fc1fc4318be186c24617d1d5f83f4a64736f6c63430008100033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100615760003560e01c80635a9813c6146100665780635c02a9e9146100995780637ae9aeb2146100bb578063d34e48d4146100eb578063e664855e14610121575b600080fd5b81801561007257600080fd5b50610086610081366004613e0f565b610141565b6040519081526020015b60405180910390f35b8180156100a557600080fd5b506100b96100b4366004613ede565b61020f565b005b8180156100c757600080fd5b506100db6100d6366004613f1d565b610263565b6040519015158152602001610090565b8180156100f757600080fd5b5061010b610106366004613fc4565b610577565b60405164ffffffffff9091168152602001610090565b61013461012f36600461406b565b610887565b60405161009091906140ab565b600061014e8686856109c8565b6001600160a01b038516600090815260028701602052604090208415610191578260200151816005016000828254610186919061410c565b909155506101af9050565b82602001518160040160008282546101a9919061410c565b90915550505b6102048787876101cb576101c68660200151610bb8565b6101d8565b6101d88660200151610bd2565b886101ef576101ea8760400151610bd2565b6101fc565b6101fc8760400151610bb8565b600089610c40565b979650505050505050565b6004820180545b801561025d576102258161411f565b90506102588483838154811061023d5761023d614136565b6000918252602090912001546001600160a01b0316856109c8565b610216565b50505050565b6060810151604051633c7e525f60e01b81526004810184905262ffffff909116602482015260009073__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__90633c7e525f90604401602060405180830381865af41580156102c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102eb919061414c565b159050816080015161033f578061033f5760405162461bcd60e51b81526020600482015260136024820152724d4f424c5f434c4f3a20656e6f756768206d6d60681b60448201526064015b60405180910390fd5b8151604080840151602085015191516302724ebb60e41b8152901515600482015264ffffffffff90911660248201526000916001600160a01b031690632724ebb0906044016040805180830381865afa1580156103a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c49190614169565b508351604080860151602087015191516311e41a3560e11b8152901515600482015264ffffffffff90911660248201529192506001600160a01b0316906323c8346a90604401600060405180830381600087803b15801561042457600080fd5b505af1158015610438573d6000803e3d6000fd5b505084516001600160a01b03166000908152600287016020526040908190209086015190925015905061049b5781816005016000828254610479919061410c565b90915550506020840151610496906002830190610d316000610d39565b6104c9565b818160040160008282546104af919061410c565b909155505060208401516104c9908290610d316000610d39565b600585018054600191906000906104e490849060ff1661418d565b92506101000a81548160ff021916908360ff16021790555073__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__63724055e78686600001518760a001516040518463ffffffff1660e01b815260040161053f939291906141a6565b60006040518083038186803b15801561055757600080fd5b505af415801561056b573d6000803e3d6000fd5b50505050505092915050565b60c0810151600583015460009160ff9081169116106105d45760405162461bcd60e51b81526020600482015260196024820152781353d09317d0d313ce881b585e081bdc99195c8818dbdd5b9d603a1b6044820152606401610336565b815160608301516020840151604080860151905163056f551760e41b81529215156004840152602483019190915260448201526001600160a01b03909116906356f55170906064016020604051808303816000875af115801561063b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065f91906141c8565b82516001600160a01b0316600090815260028501602052604081209192508190508360600151156106d0576106ad8361069b866040015161115d565b600285019190611168610d3186611186565b83602001518260050160008282546106c591906141e5565b9091555061070e9050565b6106f0836106e1866040015161115d565b8491906114d8610d3186611186565b836020015182600401600082825461070891906141e5565b90915550505b6005850180546001919060009061072990849060ff166141f8565b92506101000a81548160ff021916908360ff16021790555073__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__63724055e78686600001518760a001516040518463ffffffff1660e01b8152600401610784939291906141a6565b60006040518083038186803b15801561079c57600080fd5b505af41580156107b0573d6000803e3d6000fd5b505050506080840151604051634d3a1f3d60e11b81526004810187905262ffffff909116602482015273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__90639a743e7a90604401602060405180830381865af4158015610815573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610839919061414c565b61087f5760405162461bcd60e51b81526020600482015260176024820152764d4f424c5f434c4f3a206e6f7420656e6f75676820696d60481b6044820152606401610336565b505092915050565b6001600160a01b03821660009081526002840160205260408120606091836108af57816108b4565b816002015b90506108be613cea565b6000806108ca846114e7565b90505b64ffffffffff81161561091b5780838361010081106108ee576108ee614136565b64ffffffffff909216602092909202015261090882614211565b9150610914848261150f565b90506108cd565b8167ffffffffffffffff81111561093457610934613d7e565b60405190808252806020026020018201604052801561095d578160200160208202803683370190505b50955060005b828110156109bb578381610100811061097e5761097e614136565b602002015187828151811061099557610995614136565b64ffffffffff909216602092830291909101909101526109b481614211565b9050610963565b5050505050509392505050565b6001600160a01b038216600090815260028401602052604081209080806109ef8787611638565b92509250925060008351905080600003610a0d575050505050505050565b8464ffffffffff841615610a2f57610a2f86856114d8610d31611af686611afa565b64ffffffffff831615610a5357610a536002870184611168610d31611af686611afa565b506000806000610a648b8b89611c1f565b8e60000160008f6001600160a01b03166001600160a01b03168152602001908152602001600020600082965083975084985085919050600082015181600001556020820151816001015550505050505081886004016000828254610ac8919061410c565b9250508190555080886005016000828254610ae3919061410c565b90915550610af2905084611d62565b60058c018054600090610b0990849060ff1661418d565b92506101000a81548160ff021916908360ff160217905550610b3b838c60030160000154611dc390919063ffffffff16565b60038c015560405163724055e760e01b815273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__9063724055e790610b7b908e908e908e906004016141a6565b60006040518083038186803b158015610b9357600080fd5b505af4158015610ba7573d6000803e3d6000fd5b505050505050505050505050505050565b6000610bc382610bd2565b610bcc9061422a565b92915050565b60006001600160ff1b03821115610c3c5760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b6064820152608401610336565b5090565b6001600160a01b0385166000908152602087815260408083208151808301909252805482526001015491810191909152610c7c90868686611dcf565b6001600160a01b038816600090815260208a81526040909120835181559201516001909201919091556003880154909150610cb79082611dc3565b600388015560405163724055e760e01b815273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__9063724055e790610cf7908a908a9087906004016141a6565b60006040518083038186803b158015610d0f57600080fd5b505af4158015610d23573d6000803e3d6000fd5b505050509695505050505050565b600192915050565b64ffffffffff8316610d845760405162461bcd60e51b81526020600482015260146024820152735242544c5f523a206b657920697320656d70747960601b6044820152606401610336565b610d8e8484611f6f565b610dd25760405162461bcd60e51b81526020600482015260156024820152741490951317d48e881ad95e481b9bdd08195e1a5cdd605a1b6044820152606401610336565b64ffffffffff838116600090815260018601602052604081205490918291600160281b9004161580610e23575064ffffffffff8581166000908152600188016020526040902054600160501b900416155b15610e2f575083610ea1565b5064ffffffffff8085166000908152600187016020526040902054600160501b9004165b64ffffffffff8181166000908152600188016020526040902054600160281b90041615610ea15764ffffffffff9081166000908152600187016020526040902054600160281b900416610e53565b64ffffffffff8181166000908152600188016020526040902054600160281b90041615610ef15764ffffffffff8082166000908152600188016020526040902054600160281b9004169150610f16565b64ffffffffff8082166000908152600188016020526040902054600160501b90041691505b64ffffffffff80821660009081526001880160205260408082205485841683529120805464ffffffffff1916919092169081179091558015610ff55764ffffffffff8082166000908152600189016020526040902054600160281b9004811690831603610fb95764ffffffffff808216600090815260018901602052604090208054918516600160281b0264ffffffffff60281b1990921691909117905561100b565b64ffffffffff808216600090815260018901602052604090208054918516600160501b0264ffffffffff60501b1990921691909117905561100b565b865464ffffffffff191664ffffffffff84161787555b64ffffffffff828116600081815260018a016020526040902054600160781b900460ff16159188161461110457611043888489611fba565b64ffffffffff878116600090815260018a0160205260408082208054878516808552838520805464ffffffffff60281b1916600160281b9384900488168402178082559290920486168552838520805464ffffffffff1990811683179091558354835464ffffffffff60501b1916600160501b91829004891682021780855504909616855292842080549095168317909455549152815460ff60781b1916600160781b9182900460ff161515909102179055919591611104888888886120b3565b801561111657611116888588886120f5565b611122888388886120b3565b64ffffffffff84166111535764ffffffffff841660009081526001890160205260409020805464ffffffffff191690555b5050505050505050565b6000610bcc8261268e565b60008161117b60028201600187876126f7565b9150505b9392505050565b64ffffffffff85166111d15760405162461bcd60e51b81526020600482015260146024820152735242544c5f493a206b657920697320656d70747960601b6044820152606401610336565b6111db8686611f6f565b156112285760405162461bcd60e51b815260206004820152601a60248201527f5242544c5f493a206b657920616c7265616479206578697374730000000000006044820152606401610336565b6000808760000160009054906101000a900464ffffffffff1690506040518060a00160405280600064ffffffffff168152602001600064ffffffffff168152602001600064ffffffffff168152602001600115158152602001876001600160801b03168152508860010160008964ffffffffff1664ffffffffff16815260200190815260200160002060008201518160000160006101000a81548164ffffffffff021916908364ffffffffff16021790555060208201518160000160056101000a81548164ffffffffff021916908364ffffffffff160217905550604082015181600001600a6101000a81548164ffffffffff021916908364ffffffffff160217905550606082015181600001600f6101000a81548160ff02191690831515021790555060808201518160000160106101000a8154816001600160801b0302191690836001600160801b031602179055509050505b64ffffffffff8116156113ef5780915061139c8782858863ffffffff16565b156113c85764ffffffffff9081166000908152600189016020526040902054600160281b90041661137d565b64ffffffffff9081166000908152600189016020526040902054600160501b90041661137d565b64ffffffffff878116600090815260018a0160205260409020805464ffffffffff1916918416918217905561143857875464ffffffffff191664ffffffffff88161788556114c0565b6114478783858863ffffffff16565b156114885764ffffffffff808316600090815260018a01602052604090208054918916600160281b0264ffffffffff60281b199092169190911790556114c0565b64ffffffffff808316600090815260018a01602052604090208054918916600160501b0264ffffffffff60501b199092169190911790555b6114cc888886866120b3565b61115388888686612798565b60008161117b818387876126f7565b805464ffffffffff16801561150a578154610bcc90839064ffffffffff16612abd565b919050565b600064ffffffffff821661155f5760405162461bcd60e51b81526020600482015260176024820152765242544c5f4e3a2074617267657420697320656d70747960481b6044820152606401610336565b64ffffffffff8281166000908152600185016020526040902054600160501b900416156115ba5764ffffffffff80831660009081526001850160205260409020546115b3918591600160501b900416612abd565b9050610bcc565b5064ffffffffff8082166000908152600184016020526040902054165b64ffffffffff811615801590611610575064ffffffffff8181166000908152600185016020526040902054600160501b90048116908316145b15610bcc5764ffffffffff8082166000908152600185016020526040902054919250166115d7565b6001600160a01b0381166000908152600283016020526040812060609190819081611662826114e7565b90506000611672836002016114e7565b90506000808080808064ffffffffff8816156117135760405163c9ca629b60e01b81526000600482015264ffffffffff891660248201526001600160a01b038e169063c9ca629b90604401606060405180830381865afa1580156116da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116fe9190614246565b91975095509350600086900361171357600097505b64ffffffffff8716156117ab5760405163c9ca629b60e01b81526001600482015264ffffffffff881660248201526001600160a01b038e169063c9ca629b90604401606060405180830381865afa158015611772573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117969190614246565b9194509250905060008390036117ab57600096505b6117b3613d0a565b60005b64ffffffffff8a161515806117d1575064ffffffffff891615155b15611a2f5764ffffffffff8a16158015906117fa575064ffffffffff891615806117fa57508488105b1561191757604051806040016040528061181389610bb8565b815260200161182188610bd2565b90528282610100811061183657611836614136565b602002015261184481614211565b905060006118528c8c61150f565b905064ffffffffff8116156118eb578f6001600160a01b031663c9ca629b6000836040518363ffffffff1660e01b81526004016118a2929190911515825264ffffffffff16602082015260400190565b606060405180830381865afa1580156118bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e39190614246565b919a50985096505b8815806118fd575064ffffffffff8116155b1561190d57999c50600099611911565b809a505b506117b6565b604051806040016040528061192b86610bd2565b815260200161193985610bb8565b90528282610100811061194e5761194e614136565b602002015261195c81614211565b9050600061196d60028d018b61150f565b905064ffffffffff811615611a06578f6001600160a01b031663c9ca629b6001836040518363ffffffff1660e01b81526004016119bd929190911515825264ffffffffff16602082015260400190565b606060405180830381865afa1580156119da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119fe9190614246565b919750955093505b851580611a18575064ffffffffff8116155b15611a2857989b50600098611911565b98506117b6565b8067ffffffffffffffff811115611a4857611a48613d7e565b604051908082528060200260200182016040528015611a8d57816020015b6040805180820190915260008082526020820152815260200190600190039081611a665790505b509d5060005b81811015611ae35782816101008110611aae57611aae614136565b60200201518f8281518110611ac557611ac5614136565b60200260200101819052508080611adb90614211565b915050611a93565b5050505050505050505050509250925092565b5050565b64ffffffffff8516611b465760405162461bcd60e51b81526020600482015260156024820152745242544c5f524c3a206b657920697320656d70747960581b6044820152606401610336565b611b508686611f6f565b611b955760405162461bcd60e51b81526020600482015260166024820152751490951317d4930e881ad95e481b9bdd08195e1a5cdd60521b6044820152606401610336565b6040805160808082018352885464ffffffffff9081168352881660208301529181019190915260608101829052611bd0908790868686612b17565b50865464ffffffffff91821664ffffffffff19918216811789556000908152600189016020526040808220805490931690925597549091168752909520805460ff60781b191690555050505050565b604080518082018252600080825260209182018190526001600160a01b03851681528582528281208351808501909452805484526001015491830191909152825181908190815b81811015611d57576000611cb787898481518110611c8657611c86614136565b6020026020010151600001518a8581518110611ca457611ca4614136565b6020026020010151602001516000611dcf565b9097509050611cc68187614274565b95506000888381518110611cdc57611cdc614136565b60200260200101516000015112611d2457611d13888381518110611d0257611d02614136565b602002602001015160000151612d4b565b611d1d90856141e5565b9350611d46565b611d39888381518110611d0257611d02614136565b611d4390866141e5565b94505b50611d5081614211565b9050611c66565b505093509350935093565b600060ff821115610c3c5760405162461bcd60e51b815260206004820152602560248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2038604482015264206269747360d81b6064820152608401610336565b600061117f8284614274565b6040805180820190915260008082526020820152600084151580611df257508315155b15611ecb57611e0084612d74565b611e0986612d74565b611e139190614294565b60001914611e2657508490506000611f66565b611e2f85612d74565b8651611e3a90612d74565b611e449190614294565b19611ecb576000611e5486612d4b565b90506000611e658860000151612d4b565b9050808211611e9c576000611e88611e7c84610bd2565b60208b01519084612d94565b9050611e948782611dc3565b935050611ec8565b6000611eb2611eaa83610bd2565b889085612d94565b60208a0151909150611ec49082611dc3565b9350505b50505b611ed58184611dc3565b8651909150600090611ee79087611dc3565b90506000611f1683611f1087611f0a8a8d60200151611dc390919063ffffffff16565b90611dc3565b90612e38565b905081158015611f24575080155b80611f4b5750611f3381612d74565b611f3c83612d74565b611f469190614294565b600019145b611f5d57876000935093505050611f66565b90835260208301525b94509492505050565b600064ffffffffff82161580159061117f5750825464ffffffffff8381169116148061117f57505064ffffffffff908116600090815260019290920160205260409091205416151590565b64ffffffffff80821660009081526001850160205260408082205485841683529120805464ffffffffff1916919092169081179091558061200f57835464ffffffffff191664ffffffffff841617845561025d565b64ffffffffff8082166000908152600186016020526040902054600160281b90048116908316036120765764ffffffffff808216600090815260018601602052604090208054918516600160281b0264ffffffffff60281b1990921691909117905561025d565b64ffffffffff808216600090815260018601602052604090208054918516600160501b0264ffffffffff60501b1990921691909117905550505050565b64ffffffffff83161561025d576120ce83828463ffffffff16565b61025d5764ffffffffff9283166000908152600185016020526040902054909216916120b3565b60005b845464ffffffffff858116911614801590612133575064ffffffffff84166000908152600186016020526040902054600160781b900460ff16155b156126665764ffffffffff80851660008181526001880160205260408082205484168083529120549092600160281b9091041690036123e85764ffffffffff818116600090815260018801602052604080822054600160501b900490921680825291902054909250600160781b900460ff16156122175764ffffffffff8083166000908152600188016020526040808220805460ff60781b19908116909155928416825290208054909116600160781b1790556121f286828686612e44565b64ffffffffff8082166000908152600188016020526040902054600160501b90041691505b64ffffffffff828116600090815260018801602052604080822054600160281b900490921681522054600160781b900460ff16158015612287575064ffffffffff828116600090815260018801602052604080822054600160501b900490921681522054600160781b900460ff16155b156122bd5764ffffffffff821660009081526001870160205260409020805460ff60781b1916600160781b179055935083612660565b64ffffffffff828116600090815260018801602052604080822054600160501b900490921681522054600160781b900460ff1661236b5764ffffffffff80831660008181526001890160205260408082208054600160281b900490941682528120805460ff60781b19908116909155919052815416600160781b1790556123468683868661301a565b64ffffffffff8082166000908152600188016020526040902054600160501b90041691505b64ffffffffff808216600090815260018801602052604080822080548685168452828420805460ff600160781b9384900416151590920260ff60781b19928316178155825482169092559054600160501b900490931682529020805490911690556123d886828686612e44565b855464ffffffffff169450612660565b64ffffffffff818116600090815260018801602052604080822054600160281b900490921680825291902054909250600160781b900460ff16156124935764ffffffffff8083166000908152600188016020526040808220805460ff60781b19908116909155928416825290208054909116600160781b17905561246e8682868661301a565b64ffffffffff8082166000908152600188016020526040902054600160281b90041691505b64ffffffffff828116600090815260018801602052604080822054600160501b900490921681522054600160781b900460ff16158015612503575064ffffffffff828116600090815260018801602052604080822054600160281b900490921681522054600160781b900460ff16155b156125395764ffffffffff821660009081526001870160205260409020805460ff60781b1916600160781b179055935083612660565b64ffffffffff828116600090815260018801602052604080822054600160281b900490921681522054600160781b900460ff166125e75764ffffffffff80831660008181526001890160205260408082208054600160501b900490941682528120805460ff60781b19908116909155919052815416600160781b1790556125c286838686612e44565b64ffffffffff8082166000908152600188016020526040902054600160281b90041691505b64ffffffffff808216600090815260018801602052604080822080548685168452828420805460ff600160781b9384900416151590920260ff60781b19928316178155825482169092559054600160281b900490931682529020805490911690556126548682868661301a565b855464ffffffffff1694505b506120f8565b50505064ffffffffff166000908152600190910160205260409020805460ff60781b19169055565b60006001600160801b03821115610c3c5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b6064820152608401610336565b64ffffffffff828116600090815260018601602052604080822054928416825281205490916001600160801b03600160801b918290048116929190910416808203612756578364ffffffffff168564ffffffffff161092505050612790565b8561277557806001600160801b0316826001600160801b03161061278b565b806001600160801b0316826001600160801b0316115b925050505b949350505050565b60005b845464ffffffffff8581169116148015906127de575064ffffffffff84811660009081526001870160205260408082205490921681522054600160781b900460ff165b15612a925764ffffffffff808516600090815260018701602052604080822054831680835281832054841683529120549091600160281b9091041681036129585764ffffffffff8181166000908152600188016020526040808220548316825280822054600160501b900490921680825291902054909250600160781b900460ff16156128bd5764ffffffffff8082166000818152600189016020526040808220805460ff60781b19908116825587861684528284208054821690558154861684529183208054909216600160781b1790915591905254169450612a8c565b64ffffffffff8082166000908152600188016020526040902054600160501b90048116908616036128f7578094506128f786868686612e44565b5064ffffffffff8085166000908152600187016020526040808220548316808352818320805460ff60781b19808216835590861685529284208054909316600160781b179092559182905254909161295391889116868661301a565b612a8c565b64ffffffffff8181166000908152600188016020526040808220548316825280822054600160281b900490921680825291902054909250600160781b900460ff16156129f65764ffffffffff8082166000818152600189016020526040808220805460ff60781b19908116825587861684528284208054821690558154861684529183208054909216600160781b1790915591905254169450612a8c565b64ffffffffff8082166000908152600188016020526040902054600160281b9004811690861603612a3057809450612a308686868661301a565b5064ffffffffff8085166000908152600187016020526040808220548316808352818320805460ff60781b19808216835590861685529284208054909316600160781b1790925591829052549091612a8c918891168686612e44565b5061279b565b5050825464ffffffffff1660009081526001909301602052505060409020805460ff60781b19169055565b60005b64ffffffffff8281166000908152600185016020526040902054600160281b90041615612b115764ffffffffff9182166000908152600184016020526040902054600160281b900490911690612ac0565b50919050565b8351600090819064ffffffffff16612b385750506040840151600090612d41565b855164ffffffffff166000908152600188016020526040902054600160781b900460ff16612b67576001612b6a565b60005b86604001818151612b7b919061418d565b60ff169052508551602087015164ffffffffff918216911603612be357612bae866000015187606001518563ffffffff16565b5050835164ffffffffff9081166000908152600187016020526040908190205490860151600160501b90910490911690612d41565b612bfe8660200151876000015188606001518863ffffffff16565b15612cc25760408051608081018252875164ffffffffff908116600090815260018b01602090815284822054600160281b900483168452808b0151909216918301919091528883015160ff1692820192909252606080890151908201528190612c6b908a90898989612b17565b895164ffffffffff808216600090815260018e0160205260409081902054908d015160608e0151959750939550612cb7948e94889493600160501b909304909216918c918891906131e1565b935093505050612d41565b612cd8866000015187606001518563ffffffff16565b60408051608081018252875164ffffffffff908116600090815260018b0160209081529084902054600160501b900482168352808a0151909116908201528782015160ff169181019190915260608088015190820152612d3c908890878787612b17565b915091505b9550959350505050565b600080821215612d6b57612d66612d61836134d5565b613533565b610bcc565b610bcc82613533565b6000808213610d315760008212612d8c576000610bcc565b600019610bcc565b60008060008512612da55784612dae565b612dae856134d5565b90506000808512612dbf5784612dc8565b612dc8856134d5565b905060008087128015612ddb5750600086135b80612df15750600087138015612df15750600086125b612dfc576000612dff565b60015b90506000612e0e848488613585565b905081612e2357612e1e81610bd2565b612e2c565b612e2c81610bb8565b98975050505050505050565b600061117f8284614319565b64ffffffffff80841660008181526001870160205260408082208054600160501b80820487168086529385205495909452600160281b909404851692830264ffffffffff60501b1985161790559291909116908015612eca5764ffffffffff81811660009081526001890160205260409020805464ffffffffff19169188169190911790555b64ffffffffff83811660009081526001890160205260409020805464ffffffffff19169184169182179055612f1357865464ffffffffff191664ffffffffff8416178755612fb2565b64ffffffffff8083166000908152600189016020526040902054600160281b9004811690871603612f7a5764ffffffffff808316600090815260018901602052604090208054918516600160281b0264ffffffffff60281b19909216919091179055612fb2565b64ffffffffff808316600090815260018901602052604090208054918516600160501b0264ffffffffff60501b199092169190911790555b64ffffffffff838116600081815260018a016020526040808220805464ffffffffff60281b1916600160281b958c1695860217905592815291909120805464ffffffffff1916909117905561300b868563ffffffff8816565b5061115383858763ffffffff16565b64ffffffffff80841660008181526001870160205260408082208054600160281b80820487168086529385205495909452600160501b909404851692830264ffffffffff60281b19851617905592919091169080156130a05764ffffffffff81811660009081526001890160205260409020805464ffffffffff19169188169190911790555b64ffffffffff83811660009081526001890160205260409020805464ffffffffff191691841691821790556130e957865464ffffffffff191664ffffffffff8416178755613188565b64ffffffffff8083166000908152600189016020526040902054600160501b90048116908716036131505764ffffffffff808316600090815260018901602052604090208054918516600160501b0264ffffffffff60501b19909216919091179055613188565b64ffffffffff808316600090815260018901602052604090208054918516600160281b0264ffffffffff60281b199092169190911790555b64ffffffffff838116600081815260018a016020526040808220805464ffffffffff60501b1916600160501b958c1695860217905592815291909120805464ffffffffff1916909117905561300b868563ffffffff8816565b6000808360ff168560ff1611156132e5576132448a6040518060c001604052808c64ffffffffff1681526020018b64ffffffffff1681526020018a64ffffffffff1681526020018860ff1681526020018760ff1681526020018681525088613634565b5064ffffffffff8116600090815260018c016020526040902054909250859150600160781b900460ff1680156132a9575064ffffffffff828116600090815260018c01602052604080822054600160501b900490921681522054600160781b900460ff165b156132e05764ffffffffff821660009081526001808c016020526040909120805460ff60781b191690556132dd90826141f8565b90505b6134c8565b8360ff168560ff1610156133dc576133458a6040518060c001604052808c64ffffffffff1681526020018b64ffffffffff1681526020018a64ffffffffff1681526020018860ff1681526020018760ff168152602001868152508861392c565b64ffffffffff8116600090815260018c016020526040902054909250849150600160781b900460ff1680156132a9575064ffffffffff828116600090815260018c01602052604080822054600160281b900490921681522054600160781b900460ff16156132e05764ffffffffff821660009081526001808c016020526040909120805460ff60781b191690556132dd90826141f8565b64ffffffffff8916600090815260018b016020526040812054600160781b900460ff1615801561342c575064ffffffffff8816600090815260018c016020526040902054600160781b900460ff16155b64ffffffffff8a8116600090815260018e016020526040902080546fff0000000000ffffffffff00000000001916600160781b8415150264ffffffffff60281b191617600160281b8e8416021764ffffffffff60501b1916600160501b928c169290920291909117905590506134a6898563ffffffff8a16565b5088816134b45760016134b7565b60005b6134c190886141f8565b9093509150505b9850989650505050505050565b6000600160ff1b821361352a5760405162461bcd60e51b815260206004820152601c60248201527f506572704d6174683a20696e76657273696f6e206f766572666c6f77000000006044820152606401610336565b610bcc8261422a565b600080821215610c3c5760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f7369746976656044820152606401610336565b60008080600019858709858702925082811083820303915050806000036135bf578382816135b5576135b5614340565b049250505061117f565b8084116135cb57600080fd5b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b815164ffffffffff1660009081526001840160205260408120548190600160781b900460ff161580156136745750836080015160ff16846060015160ff16145b15613726576020808501805164ffffffffff9081166000908152600189019093526040808420805460ff60781b1916600160781b17905587518351831685528185208054918416600160281b0264ffffffffff60281b19909216919091179055808801518351831685529320805493909116600160501b0264ffffffffff60501b19909316929092179091555160a0850151613714919063ffffffff8616565b50505060208201516060830151613924565b6040805160c081018252855164ffffffffff908116600090815260018901602081815285832054600160501b900484168552808a01518416818601528986015184168587015289519093168252909152918220546137cf9188916060820190600160781b900460ff1661379a57600161379d565b60005b89606001516137ac919061418d565b60ff168152602001886080015160ff1681526020018860a0015181525086613634565b50855164ffffffffff9081166000908152600189016020526040808220805464ffffffffff60501b1916600160501b868616021790558851909216815220805464ffffffffff19169055855160a08701519192506138309163ffffffff8716565b50845164ffffffffff166000908152600187016020526040902054600160781b900460ff16158015613881575064ffffffffff81166000908152600187016020526040902054600160781b900460ff165b80156138bc575064ffffffffff818116600090815260018801602052604080822054600160501b900490921681522054600160781b900460ff165b156139175764ffffffffff808216600090815260018801602052604080822054600160501b9004909216815220805460ff60781b19169055845160a08601516139089188918790612e44565b60608501519092509050613924565b5050825160608401519091505b935093915050565b60408281015164ffffffffff1660009081526001850160205290812054600160781b900460ff1615801561396d5750826080015160ff16836060015160ff16145b15613aa2576020808401805164ffffffffff9081166000908152600188019093526040808420805460ff60781b1916600160781b17905586518351831685528185208054918416600160281b0264ffffffffff60281b19909216919091179055808701519251821684529092208054918316600160501b0264ffffffffff60501b1990921691909117905583511615613a3757602083810151845164ffffffffff9081166000908152600188019093526040909220805464ffffffffff1916929091169190911790555b604083015164ffffffffff1615613a805760208381015160408086015164ffffffffff9081166000908152600189019094529220805464ffffffffff1916929091169190911790555b613a9683602001518460a001518463ffffffff16565b5050602082015161117f565b6040805160c081018252845164ffffffffff908116825260208087015182168184015286840180518316600090815260018a0180845286822054600160281b90048516868801526060808b015160ff908116918801919091529251909416815292909152928120549092613b5492889290916080830191600160781b900416613b2c576001613b2f565b60005b8860800151613b3e919061418d565b60ff1681526020018760a001518152508561392c565b6040858101805164ffffffffff908116600090815260018a01602052838120805464ffffffffff60281b1916600160281b878516908102919091179091559251909116815291909120805464ffffffffff1916905590915015613be55760408481015164ffffffffff83811660009081526001890160205292909220805464ffffffffff1916929091169190911790555b613bfb84604001518560a001518563ffffffff16565b5060408481015164ffffffffff166000908152600187016020522054600160781b900460ff16158015613c4d575064ffffffffff81166000908152600186016020526040902054600160781b900460ff165b8015613c88575064ffffffffff818116600090815260018701602052604080822054600160281b900490921681522054600160781b900460ff165b15613cde5764ffffffffff808216600090815260018701602052604080822054600160281b90049092168152819020805460ff60781b1916905584015160a0850151613cd7918791869061301a565b905061117f565b50505060400151919050565b604051806120000160405280610100906020820280368337509192915050565b604051806120000160405280610100905b6040805180820190915260008082526020820152815260200190600190039081613d1b5790505090565b80356001600160a01b038116811461150a57600080fd5b8015158114613d6a57600080fd5b50565b803560ff8116811461150a57600080fd5b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff81118282101715613dc557634e487b7160e01b600052604160045260246000fd5b60405290565b60405160e0810167ffffffffffffffff81118282101715613dc557634e487b7160e01b600052604160045260246000fd5b64ffffffffff81168114613d6a57600080fd5b6000806000806000858703610100811215613e2957600080fd5b86359550613e3960208801613d45565b94506040870135613e4981613d5c565b9350613e5760608801613d6d565b92506080607f1982011215613e6b57600080fd5b506040516080810181811067ffffffffffffffff82111715613e9d57634e487b7160e01b600052604160045260246000fd5b80604052506080870135815260a0870135602082015260c0870135604082015260e0870135613ecb81613dfc565b6060820152949793965091945092919050565b60008060408385031215613ef157600080fd5b82359150613f0160208401613d6d565b90509250929050565b803562ffffff8116811461150a57600080fd5b60008082840360e0811215613f3157600080fd5b8335925060c0601f1982011215613f4757600080fd5b50613f50613d94565b613f5c60208501613d45565b81526040840135613f6c81613dfc565b60208201526060840135613f7f81613d5c565b6040820152613f9060808501613f0a565b606082015260a0840135613fa381613d5c565b6080820152613fb460c08501613d6d565b60a0820152809150509250929050565b600080828403610100811215613fd957600080fd5b8335925060e0601f1982011215613fef57600080fd5b50613ff8613dcb565b61400460208501613d45565b81526040840135602082015260608401356040820152608084013561402881613d5c565b606082015261403960a08501613f0a565b608082015261404a60c08501613d6d565b60a082015261405b60e08501613d6d565b60c0820152809150509250929050565b60008060006060848603121561408057600080fd5b8335925061409060208501613d45565b915060408401356140a081613d5c565b809150509250925092565b6020808252825182820181905260009190848201906040850190845b818110156140ea57835164ffffffffff16835292840192918401916001016140c7565b50909695505050505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610bcc57610bcc6140f6565b60008161412e5761412e6140f6565b506000190190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561415e57600080fd5b815161117f81613d5c565b6000806040838503121561417c57600080fd5b505080516020909101519092909150565b60ff8281168282160390811115610bcc57610bcc6140f6565b9283526001600160a01b0391909116602083015260ff16604082015260600190565b6000602082840312156141da57600080fd5b815161117f81613dfc565b80820180821115610bcc57610bcc6140f6565b60ff8181168382160190811115610bcc57610bcc6140f6565b600060018201614223576142236140f6565b5060010190565b6000600160ff1b820161423f5761423f6140f6565b5060000390565b60008060006060848603121561425b57600080fd5b8351925060208401519150604084015190509250925092565b808201828112600083128015821682158216171561087f5761087f6140f6565b60006001600160ff1b03818413828413808216868404861116156142ba576142ba6140f6565b600160ff1b60008712828116878305891216156142d9576142d96140f6565b600087129250878205871284841616156142f5576142f56140f6565b8785058712818416161561430b5761430b6140f6565b505050929093029392505050565b8181036000831280158383131683831282161715614339576143396140f6565b5092915050565b634e487b7160e01b600052601260045260246000fdfea26469706673582212202e3bd1cda9ba91d682c61f1bd6e5b8d058fc1fc4318be186c24617d1d5f83f4a64736f6c63430008100033",
  "libraries": {
    "AccountLibrary": "0xfd5CD7D2c8277B855c87D05aCC3343DFFA9CDE1f"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}