{
  "address": "0xe48e86e785d5bA8E4FA5e0c0810a6f892D3d4EA9",
  "abi": [],
  "transactionHash": "0x1b4b6fe2ca817577bc3fa19883e963a2c6ac187324df5ad4c9bc862506245688",
  "receipt": {
    "to": null,
    "from": "0x4B78eCe4AA1be3495713199380635537C5fB2326",
    "contractAddress": "0xe48e86e785d5bA8E4FA5e0c0810a6f892D3d4EA9",
    "transactionIndex": 1,
    "gasUsed": "1719790",
    "logsBloom": "0x
    "blockHash": "0x6eb2d26c2b181d94b4ef1ab15f55cfd745ab44fd5ac70952979bb4caef3fd698",
    "transactionHash": "0x1b4b6fe2ca817577bc3fa19883e963a2c6ac187324df5ad4c9bc862506245688",
    "logs": [],
    "blockNumber": 14721392,
    "cumulativeGasUsed": "1719790",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "419562b4c163dca05159f3108d01f8ad",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/AccountLibrary.sol\":\"AccountLibrary\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \\u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248) {\\n        require(value >= type(int248).min && value <= type(int248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return int248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240) {\\n        require(value >= type(int240).min && value <= type(int240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return int240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232) {\\n        require(value >= type(int232).min && value <= type(int232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return int232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224) {\\n        require(value >= type(int224).min && value <= type(int224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return int224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216) {\\n        require(value >= type(int216).min && value <= type(int216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return int216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208) {\\n        require(value >= type(int208).min && value <= type(int208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return int208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200) {\\n        require(value >= type(int200).min && value <= type(int200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return int200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192) {\\n        require(value >= type(int192).min && value <= type(int192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return int192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184) {\\n        require(value >= type(int184).min && value <= type(int184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return int184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176) {\\n        require(value >= type(int176).min && value <= type(int176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return int176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168) {\\n        require(value >= type(int168).min && value <= type(int168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return int168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160) {\\n        require(value >= type(int160).min && value <= type(int160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return int160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152) {\\n        require(value >= type(int152).min && value <= type(int152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return int152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144) {\\n        require(value >= type(int144).min && value <= type(int144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return int144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136) {\\n        require(value >= type(int136).min && value <= type(int136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return int136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120) {\\n        require(value >= type(int120).min && value <= type(int120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return int120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112) {\\n        require(value >= type(int112).min && value <= type(int112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return int112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104) {\\n        require(value >= type(int104).min && value <= type(int104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return int104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96) {\\n        require(value >= type(int96).min && value <= type(int96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return int96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88) {\\n        require(value >= type(int88).min && value <= type(int88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return int88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80) {\\n        require(value >= type(int80).min && value <= type(int80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return int80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72) {\\n        require(value >= type(int72).min && value <= type(int72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return int72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56) {\\n        require(value >= type(int56).min && value <= type(int56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return int56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48) {\\n        require(value >= type(int48).min && value <= type(int48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return int48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40) {\\n        require(value >= type(int40).min && value <= type(int40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return int40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24) {\\n        require(value >= type(int24).min && value <= type(int24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return int24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x02686c31ccb9ee77a299fa5f47327af5271f251a707a0e24f321957166ff0434\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        return a + b;\\n    }\\n}\\n\",\"keccak256\":\"0x62f53f262fabbbc6d8ab49488d8fce36370351aff2b8d3898d499d68995a71c2\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IPerpdexMarketMinimum.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\ninterface IPerpdexMarketMinimum {\\n    struct SwapResponse {\\n        uint256 oppositeAmount;\\n        uint256 basePartial;\\n        uint256 quotePartial;\\n        uint40 partialOrderId;\\n    }\\n\\n    function swap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        bool isLiquidation\\n    ) external returns (SwapResponse memory response);\\n\\n    function addLiquidity(uint256 baseShare, uint256 quoteBalance)\\n        external\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function removeLiquidity(uint256 liquidity) external returns (uint256 baseShare, uint256 quoteBalance);\\n\\n    function createLimitOrder(\\n        bool isBid,\\n        uint256 baseShare,\\n        uint256 priceX96,\\n        bool ignorePostOnlyCheck\\n    ) external returns (uint40 orderId);\\n\\n    function cancelLimitOrder(bool isBid, uint40 orderId) external;\\n\\n    // getters\\n\\n    function previewSwap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        bool isLiquidation\\n    ) external view returns (uint256);\\n\\n    function maxSwap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        bool isLiquidation\\n    ) external view returns (uint256 amount);\\n\\n    function maxSwapByPrice(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 priceX96\\n    ) external view returns (uint256 amount);\\n\\n    function exchange() external view returns (address);\\n\\n    function getShareMarkPriceX96() external view returns (uint256);\\n\\n    function getLiquidityValue(uint256 liquidity) external view returns (uint256 baseShare, uint256 quoteBalance);\\n\\n    function getLiquidityDeleveraged(\\n        uint256 liquidity,\\n        uint256 cumBasePerLiquidityX96,\\n        uint256 cumQuotePerLiquidityX96\\n    ) external view returns (int256, int256);\\n\\n    function getCumDeleveragedPerLiquidityX96() external view returns (uint256, uint256);\\n\\n    function baseBalancePerShareX96() external view returns (uint256);\\n\\n    function getLimitOrderInfo(bool isBid, uint40 orderId) external view returns (uint256 base, uint256 priceX96);\\n\\n    function getLimitOrderExecution(bool isBid, uint40 orderId)\\n        external\\n        view\\n        returns (\\n            uint48 executionId,\\n            uint256 executedBase,\\n            uint256 executedQuote\\n        );\\n}\\n\",\"keccak256\":\"0x19a14a525eb7c493cd35d59a2f951af7a86a8a336116af1159cfefdf6e7884a8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/AccountLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\n\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { IPerpdexMarketMinimum } from \\\"../interfaces/IPerpdexMarketMinimum.sol\\\";\\nimport { PerpdexStructs } from \\\"./PerpdexStructs.sol\\\";\\nimport { AccountPreviewLibrary } from \\\"./AccountPreviewLibrary.sol\\\";\\n\\n// https://help.ftx.com/hc/en-us/articles/360024780511-Complete-Futures-Specs\\nlibrary AccountLibrary {\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    struct CalcMarketResponse {\\n        int256 baseShare;\\n        uint256 baseSharePool;\\n        uint256 baseShareAsk;\\n        uint256 baseShareBid;\\n        int256 quoteBalance;\\n        uint256 quoteBalancePool;\\n        int256 positionNotional;\\n        uint256 openPositionShare;\\n        uint256 openPositionNotional;\\n        int256 positionValue;\\n        int256 realizedPnl;\\n    }\\n\\n    struct CalcTotalResponse {\\n        int256 accountValue;\\n        int256 collateralBalance;\\n        uint256 totalPositionNotional;\\n        uint256 totalOpenPositionNotional;\\n        bool isLiquidationFree;\\n    }\\n\\n    function addToTakerBalance(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address market,\\n        int256 baseShare,\\n        int256 quoteBalance,\\n        int256 quoteFee,\\n        uint8 maxMarketsPerAccount\\n    ) external returns (int256 realizedPnl) {\\n        (accountInfo.takerInfos[market], realizedPnl) = AccountPreviewLibrary.previewAddToTakerBalance(\\n            accountInfo.takerInfos[market],\\n            baseShare,\\n            quoteBalance,\\n            quoteFee\\n        );\\n        accountInfo.vaultInfo.collateralBalance += realizedPnl;\\n        updateMarkets(accountInfo, market, maxMarketsPerAccount);\\n    }\\n\\n    function updateMarkets(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address market,\\n        uint8 maxMarketsPerAccount\\n    ) public {\\n        bool enabled =\\n            accountInfo.takerInfos[market].baseBalanceShare != 0 ||\\n                accountInfo.makerInfos[market].liquidity != 0 ||\\n                accountInfo.limitOrderInfos[market].ask.root != 0 ||\\n                accountInfo.limitOrderInfos[market].bid.root != 0;\\n\\n        _setMarketEnabled(accountInfo, market, maxMarketsPerAccount, enabled);\\n    }\\n\\n    function closeMarket(PerpdexStructs.AccountInfo storage accountInfo, address market) external {\\n        require(_marketExists(accountInfo, market), \\\"AL_CM: market not exist\\\");\\n        CalcMarketResponse memory response = _calcMarket(accountInfo, market);\\n        accountInfo.vaultInfo.collateralBalance += response.positionValue + response.realizedPnl;\\n        _setMarketEnabled(accountInfo, market, 0, false);\\n    }\\n\\n    function getTakerInfo(PerpdexStructs.AccountInfo storage accountInfo, address market)\\n        external\\n        view\\n        returns (PerpdexStructs.TakerInfo memory takerInfo)\\n    {\\n        (AccountPreviewLibrary.Execution[] memory executions, , ) =\\n            AccountPreviewLibrary.getLimitOrderExecutions(accountInfo, market);\\n        (takerInfo, , , ) = AccountPreviewLibrary.previewSettleLimitOrders(accountInfo, market, executions);\\n    }\\n\\n    function getCollateralBalance(PerpdexStructs.AccountInfo storage accountInfo) external view returns (int256) {\\n        return _calcTotal(accountInfo).collateralBalance;\\n    }\\n\\n    function getTotalAccountValue(PerpdexStructs.AccountInfo storage accountInfo) external view returns (int256) {\\n        return _calcTotal(accountInfo).accountValue;\\n    }\\n\\n    function getPositionShare(PerpdexStructs.AccountInfo storage accountInfo, address market)\\n        external\\n        view\\n        returns (int256)\\n    {\\n        return _calcMarket(accountInfo, market).baseShare;\\n    }\\n\\n    function getPositionNotional(PerpdexStructs.AccountInfo storage accountInfo, address market)\\n        external\\n        view\\n        returns (int256)\\n    {\\n        return _calcMarket(accountInfo, market).positionNotional;\\n    }\\n\\n    function getTotalPositionNotional(PerpdexStructs.AccountInfo storage accountInfo) external view returns (uint256) {\\n        return _calcTotal(accountInfo).totalPositionNotional;\\n    }\\n\\n    function getOpenPositionShare(PerpdexStructs.AccountInfo storage accountInfo, address market)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _calcMarket(accountInfo, market).openPositionShare;\\n    }\\n\\n    function getOpenPositionNotional(PerpdexStructs.AccountInfo storage accountInfo, address market)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _calcMarket(accountInfo, market).openPositionNotional;\\n    }\\n\\n    function getTotalOpenPositionNotional(PerpdexStructs.AccountInfo storage accountInfo)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _calcTotal(accountInfo).totalOpenPositionNotional;\\n    }\\n\\n    function hasEnoughMaintenanceMargin(PerpdexStructs.AccountInfo storage accountInfo, uint24 mmRatio)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        CalcTotalResponse memory response = _calcTotal(accountInfo);\\n        return response.accountValue.mul(1e6) >= response.totalPositionNotional.mul(mmRatio).toInt256();\\n    }\\n\\n    // always true when hasEnoughMaintenanceMargin is true\\n    function hasEnoughInitialMargin(PerpdexStructs.AccountInfo storage accountInfo, uint24 imRatio)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        CalcTotalResponse memory response = _calcTotal(accountInfo);\\n        return\\n            response.accountValue.min(response.collateralBalance).mul(1e6) >=\\n            response.totalOpenPositionNotional.mul(imRatio).toInt256() ||\\n            response.isLiquidationFree;\\n    }\\n\\n    function isLiquidationFree(PerpdexStructs.AccountInfo storage accountInfo) external view returns (bool) {\\n        return _calcTotal(accountInfo).isLiquidationFree;\\n    }\\n\\n    function _setMarketEnabled(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address market,\\n        uint8 maxMarketsPerAccount,\\n        bool enabled\\n    ) private {\\n        address[] storage markets = accountInfo.markets;\\n        uint256 length = markets.length;\\n\\n        for (uint256 i = 0; i < length; ++i) {\\n            if (markets[i] == market) {\\n                if (!enabled) {\\n                    markets[i] = markets[length - 1];\\n                    markets.pop();\\n                }\\n                return;\\n            }\\n        }\\n\\n        if (!enabled) return;\\n\\n        require(length + 1 <= maxMarketsPerAccount, \\\"AL_UP: too many markets\\\");\\n        markets.push(market);\\n    }\\n\\n    function _calcMarket(PerpdexStructs.AccountInfo storage accountInfo, address market)\\n        private\\n        view\\n        returns (CalcMarketResponse memory response)\\n    {\\n        PerpdexStructs.MakerInfo storage makerInfo = accountInfo.makerInfos[market];\\n        PerpdexStructs.TakerInfo memory takerInfo;\\n        (AccountPreviewLibrary.Execution[] memory executions, , ) =\\n            AccountPreviewLibrary.getLimitOrderExecutions(accountInfo, market);\\n\\n        uint256 totalExecutedBaseAsk;\\n        uint256 totalExecutedBaseBid;\\n        (takerInfo, response.realizedPnl, totalExecutedBaseAsk, totalExecutedBaseBid) = AccountPreviewLibrary\\n            .previewSettleLimitOrders(accountInfo, market, executions);\\n\\n        response.baseShare = takerInfo.baseBalanceShare;\\n        response.quoteBalance = takerInfo.quoteBalance;\\n\\n        uint256 totalOrderBaseAsk;\\n        uint256 totalOrderBaseBid;\\n        if (makerInfo.liquidity != 0) {\\n            (uint256 poolBaseShare, uint256 poolQuoteBalance) =\\n                IPerpdexMarketMinimum(market).getLiquidityValue(makerInfo.liquidity);\\n            (int256 deleveragedBaseShare, int256 deleveragedQuoteBalance) =\\n                IPerpdexMarketMinimum(market).getLiquidityDeleveraged(\\n                    makerInfo.liquidity,\\n                    makerInfo.cumBaseSharePerLiquidityX96,\\n                    makerInfo.cumQuotePerLiquidityX96\\n                );\\n            response.baseSharePool = poolBaseShare;\\n            response.baseShare = response.baseShare.add(deleveragedBaseShare).add(response.baseSharePool.toInt256());\\n            response.quoteBalancePool = poolQuoteBalance;\\n            response.quoteBalance = response.quoteBalance.add(deleveragedQuoteBalance).add(\\n                response.quoteBalancePool.toInt256()\\n            );\\n            totalOrderBaseAsk = poolBaseShare;\\n            totalOrderBaseBid = poolBaseShare;\\n        }\\n\\n        PerpdexStructs.LimitOrderInfo storage limitOrderInfo = accountInfo.limitOrderInfos[market];\\n        response.baseShareAsk = limitOrderInfo.totalBaseAsk - totalExecutedBaseAsk;\\n        response.baseShareBid = limitOrderInfo.totalBaseBid - totalExecutedBaseBid;\\n        totalOrderBaseAsk += response.baseShareAsk;\\n        totalOrderBaseBid += response.baseShareBid;\\n        response.openPositionShare = Math.max(\\n            (response.baseShare - totalOrderBaseAsk.toInt256()).abs(),\\n            (response.baseShare + totalOrderBaseBid.toInt256()).abs()\\n        );\\n\\n        if (response.openPositionShare != 0) {\\n            uint256 sharePriceX96 = IPerpdexMarketMinimum(market).getShareMarkPriceX96();\\n            response.openPositionNotional = Math.mulDiv(response.openPositionShare, sharePriceX96, FixedPoint96.Q96);\\n\\n            if (response.baseShare != 0) {\\n                response.positionNotional = response.baseShare.mulDiv(sharePriceX96.toInt256(), FixedPoint96.Q96);\\n                response.positionValue = response.positionValue.add(response.positionNotional);\\n            }\\n        }\\n\\n        response.positionValue = response.positionValue.add(response.quoteBalance);\\n    }\\n\\n    function _calcTotal(PerpdexStructs.AccountInfo storage accountInfo)\\n        private\\n        view\\n        returns (CalcTotalResponse memory response)\\n    {\\n        response.collateralBalance = accountInfo.vaultInfo.collateralBalance;\\n        response.isLiquidationFree = true;\\n        int256 quoteBalanceWithoutPool;\\n\\n        address[] storage markets = accountInfo.markets;\\n        uint256 length = markets.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            address market = markets[i];\\n\\n            CalcMarketResponse memory marketResponse = _calcMarket(accountInfo, market);\\n\\n            response.accountValue = response.accountValue.add(marketResponse.positionValue);\\n            response.collateralBalance = response.collateralBalance.add(marketResponse.realizedPnl);\\n            response.totalPositionNotional = response.totalPositionNotional.add(marketResponse.positionNotional.abs());\\n            response.totalOpenPositionNotional = response.totalOpenPositionNotional.add(\\n                marketResponse.openPositionNotional\\n            );\\n\\n            response.isLiquidationFree =\\n                response.isLiquidationFree &&\\n                marketResponse.baseShare >= marketResponse.baseShareAsk.add(marketResponse.baseSharePool).toInt256() &&\\n                marketResponse.baseShareBid == 0;\\n            quoteBalanceWithoutPool = quoteBalanceWithoutPool.add(\\n                marketResponse.quoteBalance - marketResponse.quoteBalancePool.toInt256()\\n            );\\n        }\\n        response.accountValue += response.collateralBalance;\\n        response.isLiquidationFree =\\n            response.isLiquidationFree &&\\n            quoteBalanceWithoutPool + response.collateralBalance >= 0;\\n    }\\n\\n    function _marketExists(PerpdexStructs.AccountInfo storage accountInfo, address market) private view returns (bool) {\\n        address[] storage markets = accountInfo.markets;\\n        uint256 length = markets.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            if (markets[i] == market) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x65aa9dece7a1b052d96d174cf258e8c7148a301bb319072a71081366c264cab8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/AccountPreviewLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { IPerpdexMarketMinimum } from \\\"../interfaces/IPerpdexMarketMinimum.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { PerpdexStructs } from \\\"./PerpdexStructs.sol\\\";\\nimport {\\n    BokkyPooBahsRedBlackTreeLibrary as RBTreeLibrary\\n} from \\\"../../deps/BokkyPooBahsRedBlackTreeLibrary/contracts/BokkyPooBahsRedBlackTreeLibrary.sol\\\";\\n\\n// This is a technical library to avoid circular references between libraries\\nlibrary AccountPreviewLibrary {\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n    using RBTreeLibrary for RBTreeLibrary.Tree;\\n\\n    struct Execution {\\n        int256 executedBase;\\n        int256 executedQuote;\\n    }\\n\\n    function getLimitOrderExecutions(PerpdexStructs.AccountInfo storage accountInfo, address market)\\n        internal\\n        view\\n        returns (\\n            Execution[] memory executions,\\n            uint40 executedLastAskOrderId,\\n            uint40 executedLastBidOrderId\\n        )\\n    {\\n        PerpdexStructs.LimitOrderInfo storage limitOrderInfo = accountInfo.limitOrderInfos[market];\\n\\n        uint40 ask = limitOrderInfo.ask.first();\\n        uint40 bid = limitOrderInfo.bid.first();\\n        uint256 executionIdAsk;\\n        uint256 executedBaseAsk;\\n        uint256 executedQuoteAsk;\\n        uint256 executionIdBid;\\n        uint256 executedBaseBid;\\n        uint256 executedQuoteBid;\\n        if (ask != 0) {\\n            (executionIdAsk, executedBaseAsk, executedQuoteAsk) = IPerpdexMarketMinimum(market).getLimitOrderExecution(\\n                false,\\n                ask\\n            );\\n            if (executionIdAsk == 0) {\\n                ask = 0;\\n            }\\n        }\\n        if (bid != 0) {\\n            (executionIdBid, executedBaseBid, executedQuoteBid) = IPerpdexMarketMinimum(market).getLimitOrderExecution(\\n                true,\\n                bid\\n            );\\n            if (executionIdBid == 0) {\\n                bid = 0;\\n            }\\n        }\\n\\n        // Combine the ask and bid and process from the one with the smallest executionId.\\n        // Ask and bid are already sorted and can be processed like merge sort.\\n        Execution[256] memory executions2;\\n        uint256 executionCount;\\n        while (ask != 0 || bid != 0) {\\n            if (ask != 0 && (bid == 0 || executionIdAsk < executionIdBid)) {\\n                executions2[executionCount] = Execution({\\n                    executedBase: executedBaseAsk.neg256(),\\n                    executedQuote: executedQuoteAsk.toInt256()\\n                });\\n                ++executionCount;\\n\\n                uint40 nextAsk = limitOrderInfo.ask.next(ask);\\n                if (nextAsk != 0) {\\n                    (executionIdAsk, executedBaseAsk, executedQuoteAsk) = IPerpdexMarketMinimum(market)\\n                        .getLimitOrderExecution(false, nextAsk);\\n                }\\n                if (executionIdAsk == 0 || nextAsk == 0) {\\n                    executedLastAskOrderId = ask;\\n                    ask = 0;\\n                } else {\\n                    ask = nextAsk;\\n                }\\n            } else {\\n                executions2[executionCount] = Execution({\\n                    executedBase: executedBaseBid.toInt256(),\\n                    executedQuote: executedQuoteBid.neg256()\\n                });\\n                ++executionCount;\\n\\n                uint40 nextBid = limitOrderInfo.bid.next(bid);\\n                if (nextBid != 0) {\\n                    (executionIdBid, executedBaseBid, executedQuoteBid) = IPerpdexMarketMinimum(market)\\n                        .getLimitOrderExecution(true, nextBid);\\n                }\\n                if (executionIdBid == 0 || nextBid == 0) {\\n                    executedLastBidOrderId = bid;\\n                    bid = 0;\\n                } else {\\n                    bid = nextBid;\\n                }\\n            }\\n        }\\n\\n        executions = new Execution[](executionCount);\\n        for (uint256 i = 0; i < executionCount; i++) {\\n            executions[i] = executions2[i];\\n        }\\n    }\\n\\n    function previewSettleLimitOrders(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address market,\\n        Execution[] memory executions\\n    )\\n        internal\\n        view\\n        returns (\\n            PerpdexStructs.TakerInfo memory takerInfo,\\n            int256 realizedPnl,\\n            uint256 totalExecutedBaseAsk,\\n            uint256 totalExecutedBaseBid\\n        )\\n    {\\n        takerInfo = accountInfo.takerInfos[market];\\n\\n        uint256 length = executions.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            int256 realizedPnl2;\\n            (takerInfo, realizedPnl2) = previewAddToTakerBalance(\\n                takerInfo,\\n                executions[i].executedBase,\\n                executions[i].executedQuote,\\n                0\\n            );\\n            realizedPnl += realizedPnl2;\\n            if (executions[i].executedBase >= 0) {\\n                totalExecutedBaseBid += executions[i].executedBase.abs();\\n            } else {\\n                totalExecutedBaseAsk += executions[i].executedBase.abs();\\n            }\\n        }\\n    }\\n\\n    function previewAddToTakerBalance(\\n        PerpdexStructs.TakerInfo memory takerInfo,\\n        int256 baseShare,\\n        int256 quoteBalance,\\n        int256 quoteFee\\n    ) internal pure returns (PerpdexStructs.TakerInfo memory resultTakerInfo, int256 realizedPnl) {\\n        if (baseShare != 0 || quoteBalance != 0) {\\n            if (baseShare.sign() * quoteBalance.sign() != -1) {\\n                // ignore invalid input\\n                return (takerInfo, 0);\\n            }\\n            if (takerInfo.baseBalanceShare.sign() * baseShare.sign() == -1) {\\n                uint256 baseAbs = baseShare.abs();\\n                uint256 takerBaseAbs = takerInfo.baseBalanceShare.abs();\\n\\n                if (baseAbs <= takerBaseAbs) {\\n                    int256 reducedOpenNotional = takerInfo.quoteBalance.mulDiv(baseAbs.toInt256(), takerBaseAbs);\\n                    realizedPnl = quoteBalance.add(reducedOpenNotional);\\n                } else {\\n                    int256 closedPositionNotional = quoteBalance.mulDiv(takerBaseAbs.toInt256(), baseAbs);\\n                    realizedPnl = takerInfo.quoteBalance.add(closedPositionNotional);\\n                }\\n            }\\n        }\\n        realizedPnl = realizedPnl.add(quoteFee);\\n\\n        int256 newBaseBalanceShare = takerInfo.baseBalanceShare.add(baseShare);\\n        int256 newQuoteBalance = takerInfo.quoteBalance.add(quoteBalance).add(quoteFee).sub(realizedPnl);\\n        if (\\n            !((newBaseBalanceShare == 0 && newQuoteBalance == 0) ||\\n                newBaseBalanceShare.sign() * newQuoteBalance.sign() == -1)\\n        ) {\\n            // never occur. ignore\\n            return (takerInfo, 0);\\n        }\\n\\n        resultTakerInfo.baseBalanceShare = newBaseBalanceShare;\\n        resultTakerInfo.quoteBalance = newQuoteBalance;\\n    }\\n}\\n\",\"keccak256\":\"0x7e41927e84f7150f4e5f34cc8239aa6670ce514f6015664430f8e6f8c71bd6c7\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PerpMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\n\\nlibrary PerpMath {\\n    using SafeCast for int256;\\n    using SignedSafeMath for int256;\\n    using SafeMath for uint256;\\n\\n    function formatSqrtPriceX96ToPriceX96(uint160 sqrtPriceX96) internal pure returns (uint256) {\\n        return Math.mulDiv(sqrtPriceX96, sqrtPriceX96, FixedPoint96.Q96);\\n    }\\n\\n    function formatX10_18ToX96(uint256 valueX10_18) internal pure returns (uint256) {\\n        return Math.mulDiv(valueX10_18, FixedPoint96.Q96, 1 ether);\\n    }\\n\\n    function formatX96ToX10_18(uint256 valueX96) internal pure returns (uint256) {\\n        return Math.mulDiv(valueX96, 1 ether, FixedPoint96.Q96);\\n    }\\n\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function abs(int256 value) internal pure returns (uint256) {\\n        return value >= 0 ? value.toUint256() : neg256(value).toUint256();\\n    }\\n\\n    function neg256(int256 a) internal pure returns (int256) {\\n        require(a > -2**255, \\\"PerpMath: inversion overflow\\\");\\n        return -a;\\n    }\\n\\n    function neg256(uint256 a) internal pure returns (int256) {\\n        return -SafeCast.toInt256(a);\\n    }\\n\\n    function divBy10_18(int256 value) internal pure returns (int256) {\\n        // no overflow here\\n        return value / (1 ether);\\n    }\\n\\n    function divBy10_18(uint256 value) internal pure returns (uint256) {\\n        // no overflow here\\n        return value / (1 ether);\\n    }\\n\\n    function subRatio(uint24 a, uint24 b) internal pure returns (uint24) {\\n        require(b <= a, \\\"PerpMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    function mulRatio(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return Math.mulDiv(value, ratio, 1e6);\\n    }\\n\\n    function mulRatioRoundingUp(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return Math.mulDiv(value, ratio, 1e6, Math.Rounding.Up);\\n    }\\n\\n    function divRatio(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return Math.mulDiv(value, 1e6, ratio);\\n    }\\n\\n    function divRatioRoundingUp(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return Math.mulDiv(value, 1e6, ratio, Math.Rounding.Up);\\n    }\\n\\n    /// @param denominator cannot be 0 and is checked in Math.mulDiv()\\n    function mulDiv(\\n        int256 a,\\n        int256 b,\\n        uint256 denominator\\n    ) internal pure returns (int256 result) {\\n        uint256 unsignedA = a < 0 ? uint256(neg256(a)) : uint256(a);\\n        uint256 unsignedB = b < 0 ? uint256(neg256(b)) : uint256(b);\\n        bool negative = ((a < 0 && b > 0) || (a > 0 && b < 0)) ? true : false;\\n\\n        uint256 unsignedResult = Math.mulDiv(unsignedA, unsignedB, denominator);\\n\\n        result = negative ? neg256(unsignedResult) : SafeCast.toInt256(unsignedResult);\\n\\n        return result;\\n    }\\n\\n    function sign(int256 value) internal pure returns (int256) {\\n        return value > 0 ? int256(1) : (value < 0 ? int256(-1) : int256(0));\\n    }\\n}\\n\",\"keccak256\":\"0x8fb9c73930e8037da0e08fd3e3972821749739bd5ffe8fd1980dd84c3d40043e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PerpdexStructs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\n\\nimport {\\n    BokkyPooBahsRedBlackTreeLibrary as RBTreeLibrary\\n} from \\\"../../deps/BokkyPooBahsRedBlackTreeLibrary/contracts/BokkyPooBahsRedBlackTreeLibrary.sol\\\";\\n\\nlibrary PerpdexStructs {\\n    enum LimitOrderType { Normal, PostOnly, Ioc }\\n    enum MarketStatus { NotAllowed, Open, Closed }\\n\\n    struct TakerInfo {\\n        int256 baseBalanceShare;\\n        int256 quoteBalance;\\n    }\\n\\n    struct MakerInfo {\\n        uint256 liquidity;\\n        uint256 cumBaseSharePerLiquidityX96;\\n        uint256 cumQuotePerLiquidityX96;\\n    }\\n\\n    struct LimitOrderInfo {\\n        RBTreeLibrary.Tree ask;\\n        RBTreeLibrary.Tree bid;\\n        uint256 totalBaseAsk;\\n        uint256 totalBaseBid;\\n    }\\n\\n    struct VaultInfo {\\n        int256 collateralBalance;\\n    }\\n\\n    struct AccountInfo {\\n        // market\\n        mapping(address => TakerInfo) takerInfos;\\n        // market\\n        mapping(address => MakerInfo) makerInfos;\\n        // market\\n        mapping(address => LimitOrderInfo) limitOrderInfos;\\n        VaultInfo vaultInfo;\\n        address[] markets;\\n        uint8 limitOrderCount;\\n    }\\n\\n    struct InsuranceFundInfo {\\n        uint256 balance; // for easy calculation\\n        uint256 liquidationRewardBalance;\\n    }\\n\\n    struct ProtocolInfo {\\n        uint256 protocolFee;\\n    }\\n\\n    struct LiquidationRewardConfig {\\n        uint24 rewardRatio;\\n        uint16 smoothEmaTime;\\n    }\\n\\n    struct LimitOrderSummary {\\n        uint40 orderId;\\n        uint256 base;\\n        uint256 priceX96;\\n    }\\n}\\n\",\"keccak256\":\"0xa364101dce6ddc02cb47a7f9bb510d4448d47e7bf52770a17a3f970bac3ba6e6\",\"license\":\"GPL-3.0-or-later\"},\"deps/BokkyPooBahsRedBlackTreeLibrary/contracts/BokkyPooBahsRedBlackTreeLibrary.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's Red-Black Tree Library v1.0-pre-release-a\\n//\\n// A Solidity Red-Black Tree binary search library to store and access a sorted\\n// list of unsigned integer data. The Red-Black algorithm rebalances the binary\\n// search tree, resulting in O(log n) insert, remove and search time (and ~gas)\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsRedBlackTreeLibrary\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2020. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary BokkyPooBahsRedBlackTreeLibrary {\\n    struct Node {\\n        uint40 parent;\\n        uint40 left;\\n        uint40 right;\\n        bool red;\\n        uint128 userData; // use freely. this is for gas efficiency\\n    }\\n\\n    struct Tree {\\n        uint40 root;\\n        mapping(uint40 => Node) nodes;\\n    }\\n\\n    uint40 private constant EMPTY = 0;\\n\\n    function first(Tree storage self) internal view returns (uint40 _key) {\\n        _key = self.root;\\n        if (_key != EMPTY) {\\n            _key = treeMinimum(self, self.root);\\n        }\\n    }\\n\\n    function last(Tree storage self) internal view returns (uint40 _key) {\\n        _key = self.root;\\n        if (_key != EMPTY) {\\n            _key = treeMaximum(self, self.root);\\n        }\\n    }\\n\\n    function next(Tree storage self, uint40 target)\\n        internal\\n        view\\n        returns (uint40 cursor)\\n    {\\n        require(target != EMPTY, \\\"RBTL_N: target is empty\\\");\\n        if (self.nodes[target].right != EMPTY) {\\n            cursor = treeMinimum(self, self.nodes[target].right);\\n        } else {\\n            cursor = self.nodes[target].parent;\\n            while (cursor != EMPTY && target == self.nodes[cursor].right) {\\n                target = cursor;\\n                cursor = self.nodes[cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function prev(Tree storage self, uint40 target)\\n        internal\\n        view\\n        returns (uint40 cursor)\\n    {\\n        require(target != EMPTY, \\\"RBTL_P: target is empty\\\");\\n        if (self.nodes[target].left != EMPTY) {\\n            cursor = treeMaximum(self, self.nodes[target].left);\\n        } else {\\n            cursor = self.nodes[target].parent;\\n            while (cursor != EMPTY && target == self.nodes[cursor].left) {\\n                target = cursor;\\n                cursor = self.nodes[cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function exists(Tree storage self, uint40 key)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return\\n            (key != EMPTY) &&\\n            ((key == self.root) || (self.nodes[key].parent != EMPTY));\\n    }\\n\\n    function isEmpty(uint40 key) internal pure returns (bool) {\\n        return key == EMPTY;\\n    }\\n\\n    function getEmpty() internal pure returns (uint256) {\\n        return EMPTY;\\n    }\\n\\n    function getNode(Tree storage self, uint40 key)\\n        internal\\n        view\\n        returns (\\n            uint40 _returnKey,\\n            uint40 _parent,\\n            uint40 _left,\\n            uint40 _right,\\n            bool _red\\n        )\\n    {\\n        require(exists(self, key), \\\"RBTL_GN: key not exist\\\");\\n        return (\\n            key,\\n            self.nodes[key].parent,\\n            self.nodes[key].left,\\n            self.nodes[key].right,\\n            self.nodes[key].red\\n        );\\n    }\\n\\n    function insert(\\n        Tree storage self,\\n        uint40 key,\\n        uint128 userData,\\n        function(uint40, uint40, uint256) view returns (bool) lessThan,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) internal {\\n        require(key != EMPTY, \\\"RBTL_I: key is empty\\\");\\n        require(!exists(self, key), \\\"RBTL_I: key already exists\\\");\\n        uint40 cursor = EMPTY;\\n        uint40 probe = self.root;\\n        self.nodes[key] = Node({\\n            parent: EMPTY,\\n            left: EMPTY,\\n            right: EMPTY,\\n            red: true,\\n            userData: userData\\n        });\\n        while (probe != EMPTY) {\\n            cursor = probe;\\n            if (lessThan(key, probe, data)) {\\n                probe = self.nodes[probe].left;\\n            } else {\\n                probe = self.nodes[probe].right;\\n            }\\n        }\\n        self.nodes[key].parent = cursor;\\n        if (cursor == EMPTY) {\\n            self.root = key;\\n        } else if (lessThan(key, cursor, data)) {\\n            self.nodes[cursor].left = key;\\n        } else {\\n            self.nodes[cursor].right = key;\\n        }\\n        aggregateRecursively(self, key, aggregate, data);\\n        insertFixup(self, key, aggregate, data);\\n    }\\n\\n    function remove(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) internal {\\n        require(key != EMPTY, \\\"RBTL_R: key is empty\\\");\\n        require(exists(self, key), \\\"RBTL_R: key not exist\\\");\\n        uint40 probe;\\n        uint40 cursor;\\n        if (self.nodes[key].left == EMPTY || self.nodes[key].right == EMPTY) {\\n            cursor = key;\\n        } else {\\n            cursor = self.nodes[key].right;\\n            while (self.nodes[cursor].left != EMPTY) {\\n                cursor = self.nodes[cursor].left;\\n            }\\n        }\\n        if (self.nodes[cursor].left != EMPTY) {\\n            probe = self.nodes[cursor].left;\\n        } else {\\n            probe = self.nodes[cursor].right;\\n        }\\n        uint40 yParent = self.nodes[cursor].parent;\\n        self.nodes[probe].parent = yParent;\\n        if (yParent != EMPTY) {\\n            if (cursor == self.nodes[yParent].left) {\\n                self.nodes[yParent].left = probe;\\n            } else {\\n                self.nodes[yParent].right = probe;\\n            }\\n        } else {\\n            self.root = probe;\\n        }\\n        bool doFixup = !self.nodes[cursor].red;\\n        if (cursor != key) {\\n            replaceParent(self, cursor, key);\\n            self.nodes[cursor].left = self.nodes[key].left;\\n            self.nodes[self.nodes[cursor].left].parent = cursor;\\n            self.nodes[cursor].right = self.nodes[key].right;\\n            self.nodes[self.nodes[cursor].right].parent = cursor;\\n            self.nodes[cursor].red = self.nodes[key].red;\\n            (cursor, key) = (key, cursor);\\n            aggregateRecursively(self, key, aggregate, data);\\n        }\\n        if (doFixup) {\\n            removeFixup(self, probe, aggregate, data);\\n        }\\n        aggregateRecursively(self, yParent, aggregate, data);\\n\\n        // Fixed a bug that caused the parent of empty nodes to be non-zero.\\n        // TODO: Fix it the right way.\\n        if (probe == EMPTY) {\\n            self.nodes[probe].parent = EMPTY;\\n        }\\n    }\\n\\n    // https://arxiv.org/pdf/1602.02120.pdf\\n    // changes from original\\n    // - handle empty\\n    // - handle parent\\n    // - change root to black\\n\\n    // to avoid stack too deep\\n    struct JoinParams {\\n        uint40 left;\\n        uint40 key;\\n        uint40 right;\\n        uint8 leftBlackHeight;\\n        uint8 rightBlackHeight;\\n        uint256 data;\\n    }\\n\\n    // destructive func\\n    function joinRight(\\n        Tree storage self,\\n        JoinParams memory params,\\n        function(uint40, uint256) returns (bool) aggregate\\n    ) private returns (uint40, uint8) {\\n        if (\\n            !self.nodes[params.left].red &&\\n            params.leftBlackHeight == params.rightBlackHeight\\n        ) {\\n            self.nodes[params.key].red = true;\\n            self.nodes[params.key].left = params.left;\\n            self.nodes[params.key].right = params.right;\\n            aggregate(params.key, params.data);\\n            return (params.key, params.leftBlackHeight);\\n        }\\n\\n        (uint40 t, ) = joinRight(\\n            self,\\n            JoinParams({\\n                left: self.nodes[params.left].right,\\n                key: params.key,\\n                right: params.right,\\n                leftBlackHeight: params.leftBlackHeight -\\n                    (self.nodes[params.left].red ? 0 : 1),\\n                rightBlackHeight: params.rightBlackHeight,\\n                data: params.data\\n            }),\\n            aggregate\\n        );\\n        self.nodes[params.left].right = t;\\n        self.nodes[params.left].parent = EMPTY;\\n        aggregate(params.left, params.data);\\n\\n        if (\\n            !self.nodes[params.left].red &&\\n            self.nodes[t].red &&\\n            self.nodes[self.nodes[t].right].red\\n        ) {\\n            self.nodes[self.nodes[t].right].red = false;\\n            rotateLeft(self, params.left, aggregate, params.data);\\n            return (t, params.leftBlackHeight);\\n            //            return (self.nodes[params.left].parent, tBlackHeight + 1); // TODO: replace with t\\n        }\\n        return (params.left, params.leftBlackHeight);\\n        //        return (params.left, tBlackHeight + (self.nodes[params.left].red ? 0 : 1));\\n    }\\n\\n    // destructive func\\n    function joinLeft(\\n        Tree storage self,\\n        JoinParams memory params,\\n        function(uint40, uint256) returns (bool) aggregate\\n    ) internal returns (uint40 resultKey) {\\n        if (\\n            !self.nodes[params.right].red &&\\n            params.leftBlackHeight == params.rightBlackHeight\\n        ) {\\n            self.nodes[params.key].red = true;\\n            self.nodes[params.key].left = params.left;\\n            self.nodes[params.key].right = params.right;\\n            if (params.left != EMPTY) {\\n                self.nodes[params.left].parent = params.key;\\n            }\\n            if (params.right != EMPTY) {\\n                self.nodes[params.right].parent = params.key;\\n            }\\n            aggregate(params.key, params.data);\\n            return params.key;\\n        }\\n\\n        uint40 t = joinLeft(\\n            self,\\n            JoinParams({\\n                left: params.left,\\n                key: params.key,\\n                right: self.nodes[params.right].left,\\n                leftBlackHeight: params.leftBlackHeight,\\n                rightBlackHeight: params.rightBlackHeight -\\n                    (self.nodes[params.right].red ? 0 : 1),\\n                data: params.data\\n            }),\\n            aggregate\\n        );\\n        self.nodes[params.right].left = t;\\n        self.nodes[params.right].parent = EMPTY;\\n        if (t != EMPTY) {\\n            self.nodes[t].parent = params.right;\\n        }\\n        aggregate(params.right, params.data);\\n\\n        if (\\n            !self.nodes[params.right].red &&\\n            self.nodes[t].red &&\\n            self.nodes[self.nodes[t].left].red\\n        ) {\\n            self.nodes[self.nodes[t].left].red = false;\\n            rotateRight(self, params.right, aggregate, params.data);\\n            return t;\\n        }\\n        return params.right;\\n    }\\n\\n    // destructive func\\n    function join(\\n        Tree storage self,\\n        uint40 left,\\n        uint40 key,\\n        uint40 right,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint8 leftBlackHeight,\\n        uint8 rightBlackHeight,\\n        uint256 data\\n    ) private returns (uint40 t, uint8 tBlackHeight) {\\n        if (leftBlackHeight > rightBlackHeight) {\\n            (t, tBlackHeight) = joinRight(\\n                self,\\n                JoinParams({\\n                    left: left,\\n                    key: key,\\n                    right: right,\\n                    leftBlackHeight: leftBlackHeight,\\n                    rightBlackHeight: rightBlackHeight,\\n                    data: data\\n                }),\\n                aggregate\\n            );\\n            tBlackHeight = leftBlackHeight;\\n            if (self.nodes[t].red && self.nodes[self.nodes[t].right].red) {\\n                self.nodes[t].red = false;\\n                tBlackHeight += 1;\\n            }\\n        } else if (leftBlackHeight < rightBlackHeight) {\\n            t = joinLeft(\\n                self,\\n                JoinParams({\\n                    left: left,\\n                    key: key,\\n                    right: right,\\n                    leftBlackHeight: leftBlackHeight,\\n                    rightBlackHeight: rightBlackHeight,\\n                    data: data\\n                }),\\n                aggregate\\n            );\\n            tBlackHeight = rightBlackHeight;\\n            if (self.nodes[t].red && self.nodes[self.nodes[t].left].red) {\\n                self.nodes[t].red = false;\\n                tBlackHeight += 1;\\n            }\\n        } else {\\n            bool red = !self.nodes[left].red && !self.nodes[right].red;\\n            self.nodes[key].red = red;\\n            self.nodes[key].left = left;\\n            self.nodes[key].right = right;\\n            aggregate(key, data);\\n            (t, tBlackHeight) = (key, leftBlackHeight + (red ? 0 : 1));\\n        }\\n    }\\n\\n    struct SplitParams {\\n        uint40 t;\\n        uint40 key;\\n        uint8 blackHeight;\\n        uint256 data;\\n    }\\n\\n    // destructive func\\n    function splitRight(\\n        Tree storage self,\\n        SplitParams memory params,\\n        function(uint40, uint40, uint256) returns (bool) lessThan,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        function(uint40, uint256) subtreeRemoved\\n    ) private returns (uint40 resultKey, uint8 resultBlackHeight) {\\n        if (params.t == EMPTY) return (EMPTY, params.blackHeight);\\n        params.blackHeight -= (self.nodes[params.t].red ? 0 : 1);\\n        if (params.key == params.t) {\\n            subtreeRemoved(params.t, params.data);\\n            return (self.nodes[params.t].right, params.blackHeight);\\n        }\\n        if (lessThan(params.key, params.t, params.data)) {\\n            (uint40 r, uint8 rBlackHeight) = splitRight(\\n                self,\\n                SplitParams({\\n                    t: self.nodes[params.t].left,\\n                    key: params.key,\\n                    blackHeight: params.blackHeight,\\n                    data: params.data\\n                }),\\n                lessThan,\\n                aggregate,\\n                subtreeRemoved\\n            );\\n            return\\n                join(\\n                    self,\\n                    r,\\n                    params.t,\\n                    self.nodes[params.t].right,\\n                    aggregate,\\n                    rBlackHeight,\\n                    params.blackHeight,\\n                    params.data\\n                );\\n        } else {\\n            subtreeRemoved(params.t, params.data);\\n            return\\n                splitRight(\\n                    self,\\n                    SplitParams({\\n                        t: self.nodes[params.t].right,\\n                        key: params.key,\\n                        blackHeight: params.blackHeight,\\n                        data: params.data\\n                    }),\\n                    lessThan,\\n                    aggregate,\\n                    subtreeRemoved\\n                );\\n        }\\n    }\\n\\n    function removeLeft(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint40, uint256) returns (bool) lessThan,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        function(uint40, uint256) subtreeRemoved,\\n        uint256 data\\n    ) internal {\\n        require(key != EMPTY, \\\"RBTL_RL: key is empty\\\");\\n        require(exists(self, key), \\\"RBTL_RL: key not exist\\\");\\n        (self.root, ) = splitRight(\\n            self,\\n            SplitParams({t: self.root, key: key, blackHeight: 128, data: data}),\\n            lessThan,\\n            aggregate,\\n            subtreeRemoved\\n        );\\n        self.nodes[self.root].parent = EMPTY;\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function aggregateRecursively(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) internal {\\n        while (key != EMPTY) {\\n            if (aggregate(key, data)) return;\\n            key = self.nodes[key].parent;\\n        }\\n    }\\n\\n    function treeMinimum(Tree storage self, uint40 key)\\n        private\\n        view\\n        returns (uint40)\\n    {\\n        while (self.nodes[key].left != EMPTY) {\\n            key = self.nodes[key].left;\\n        }\\n        return key;\\n    }\\n\\n    function treeMaximum(Tree storage self, uint40 key)\\n        private\\n        view\\n        returns (uint40)\\n    {\\n        while (self.nodes[key].right != EMPTY) {\\n            key = self.nodes[key].right;\\n        }\\n        return key;\\n    }\\n\\n    function rotateLeft(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) private {\\n        uint40 cursor = self.nodes[key].right;\\n        uint40 keyParent = self.nodes[key].parent;\\n        uint40 cursorLeft = self.nodes[cursor].left;\\n        self.nodes[key].right = cursorLeft;\\n        if (cursorLeft != EMPTY) {\\n            self.nodes[cursorLeft].parent = key;\\n        }\\n        self.nodes[cursor].parent = keyParent;\\n        if (keyParent == EMPTY) {\\n            self.root = cursor;\\n        } else if (key == self.nodes[keyParent].left) {\\n            self.nodes[keyParent].left = cursor;\\n        } else {\\n            self.nodes[keyParent].right = cursor;\\n        }\\n        self.nodes[cursor].left = key;\\n        self.nodes[key].parent = cursor;\\n        aggregate(key, data);\\n        aggregate(cursor, data);\\n    }\\n\\n    function rotateRight(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) private {\\n        uint40 cursor = self.nodes[key].left;\\n        uint40 keyParent = self.nodes[key].parent;\\n        uint40 cursorRight = self.nodes[cursor].right;\\n        self.nodes[key].left = cursorRight;\\n        if (cursorRight != EMPTY) {\\n            self.nodes[cursorRight].parent = key;\\n        }\\n        self.nodes[cursor].parent = keyParent;\\n        if (keyParent == EMPTY) {\\n            self.root = cursor;\\n        } else if (key == self.nodes[keyParent].right) {\\n            self.nodes[keyParent].right = cursor;\\n        } else {\\n            self.nodes[keyParent].left = cursor;\\n        }\\n        self.nodes[cursor].right = key;\\n        self.nodes[key].parent = cursor;\\n        aggregate(key, data);\\n        aggregate(cursor, data);\\n    }\\n\\n    function insertFixup(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) private {\\n        uint40 cursor;\\n        while (key != self.root && self.nodes[self.nodes[key].parent].red) {\\n            uint40 keyParent = self.nodes[key].parent;\\n            if (keyParent == self.nodes[self.nodes[keyParent].parent].left) {\\n                cursor = self.nodes[self.nodes[keyParent].parent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    key = self.nodes[keyParent].parent;\\n                } else {\\n                    if (key == self.nodes[keyParent].right) {\\n                        key = keyParent;\\n                        rotateLeft(self, key, aggregate, data);\\n                    }\\n                    keyParent = self.nodes[key].parent;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    rotateRight(\\n                        self,\\n                        self.nodes[keyParent].parent,\\n                        aggregate,\\n                        data\\n                    );\\n                }\\n            } else {\\n                cursor = self.nodes[self.nodes[keyParent].parent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    key = self.nodes[keyParent].parent;\\n                } else {\\n                    if (key == self.nodes[keyParent].left) {\\n                        key = keyParent;\\n                        rotateRight(self, key, aggregate, data);\\n                    }\\n                    keyParent = self.nodes[key].parent;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    rotateLeft(\\n                        self,\\n                        self.nodes[keyParent].parent,\\n                        aggregate,\\n                        data\\n                    );\\n                }\\n            }\\n        }\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function replaceParent(\\n        Tree storage self,\\n        uint40 a,\\n        uint40 b\\n    ) private {\\n        uint40 bParent = self.nodes[b].parent;\\n        self.nodes[a].parent = bParent;\\n        if (bParent == EMPTY) {\\n            self.root = a;\\n        } else {\\n            if (b == self.nodes[bParent].left) {\\n                self.nodes[bParent].left = a;\\n            } else {\\n                self.nodes[bParent].right = a;\\n            }\\n        }\\n    }\\n\\n    function removeFixup(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) private {\\n        uint40 cursor;\\n        while (key != self.root && !self.nodes[key].red) {\\n            uint40 keyParent = self.nodes[key].parent;\\n            if (key == self.nodes[keyParent].left) {\\n                cursor = self.nodes[keyParent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[keyParent].red = true;\\n                    rotateLeft(self, keyParent, aggregate, data);\\n                    cursor = self.nodes[keyParent].right;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].left].red &&\\n                    !self.nodes[self.nodes[cursor].right].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    key = keyParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].right].red) {\\n                        self.nodes[self.nodes[cursor].left].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateRight(self, cursor, aggregate, data);\\n                        cursor = self.nodes[keyParent].right;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[keyParent].red;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[cursor].right].red = false;\\n                    rotateLeft(self, keyParent, aggregate, data);\\n                    key = self.root;\\n                }\\n            } else {\\n                cursor = self.nodes[keyParent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[keyParent].red = true;\\n                    rotateRight(self, keyParent, aggregate, data);\\n                    cursor = self.nodes[keyParent].left;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].right].red &&\\n                    !self.nodes[self.nodes[cursor].left].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    key = keyParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].left].red) {\\n                        self.nodes[self.nodes[cursor].right].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateLeft(self, cursor, aggregate, data);\\n                        cursor = self.nodes[keyParent].left;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[keyParent].red;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[cursor].left].red = false;\\n                    rotateRight(self, keyParent, aggregate, data);\\n                    key = self.root;\\n                }\\n            }\\n        }\\n        self.nodes[key].red = false;\\n    }\\n}\\n// ----------------------------------------------------------------------------\\n// End - BokkyPooBah's Red-Black Tree Library\\n// ----------------------------------------------------------------------------\\n\",\"keccak256\":\"0xcd1e5d70b48e4c611fd4b863d8413eb8000db92c875f0a2ccb60b7c374e03d7f\"}},\"version\":1}",
  "bytecode": "0x611e2761003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100de5760003560e01c8063724055e711610091578063724055e71461019a578063895d2afe146101ba57806397ec6101146101cd5780639a743e7a146101ed578063af77d70714610200578063cadeb03814610213578063d73fd34114610241578063e57822b81461025457600080fd5b8062202c86146100e3578063269140911461010b5780633c7e525f1461012c578063530e4fd01461013f5780635bd320d61461016157806367dd27b1146101745780636c19710814610187575b600080fd5b6100f66100f1366004611a7d565b610267565b60405190151581526020015b60405180910390f35b61011e610119366004611aad565b61027c565b604051908152602001610102565b6100f661013a366004611ad9565b610295565b81801561014b57600080fd5b5061015f61015a366004611aad565b6102e0565b005b61011e61016f366004611aad565b610385565b61011e610182366004611a7d565b610399565b61011e610195366004611aad565b6103ae565b8180156101a657600080fd5b5061015f6101b5366004611b22565b6103c6565b61011e6101c8366004611a7d565b610472565b8180156101d957600080fd5b5061011e6101e8366004611b5e565b610487565b6100f66101fb366004611ad9565b61051e565b61011e61020e366004611aad565b610580565b610226610221366004611aad565b610597565b60408051825181526020928301519281019290925201610102565b61011e61024f366004611a7d565b6105d2565b61011e610262366004611a7d565b6105e4565b6000610272826105f9565b6080015192915050565b600061028883836107bb565b60e0015190505b92915050565b6000806102a1846105f9565b90506102c76102c28462ffffff168360400151610b7e90919063ffffffff16565b610b91565b81516102d690620f4240610bff565b1215949350505050565b6102ea8282610c0b565b6103355760405162461bcd60e51b8152602060048201526017602482015276105317d0d34e881b585c9ad95d081b9bdd08195e1a5cdd604a1b60448201526064015b60405180910390fd5b600061034183836107bb565b90508061014001518161012001516103599190611bcc565b60038401805460009061036d908490611bcc565b9091555061038090508383600080610c7d565b505050565b600061039183836107bb565b519392505050565b60006103a4826105f9565b6060015192915050565b60006103ba83836107bb565b61010001519392505050565b6001600160a01b03821660009081526020849052604081205415158061040557506001600160a01b038316600090815260018501602052604090205415155b8061043057506001600160a01b038316600090815260028501602052604090205464ffffffffff1615155b8061045e57506001600160a01b038316600090815260028086016020526040909120015464ffffffffff1615155b905061046c84848484610c7d565b50505050565b600061047d826105f9565b6020015192915050565b6001600160a01b03851660009081526020878152604080832081518083019092528054825260010154918101919091526104c390868686610e27565b6001600160a01b038816600090815260208a8152604082208451815593015160019093019290925560038901805491935083929091610503908490611bcc565b9091555061051490508787846103c6565b9695505050505050565b60008061052a846105f9565b905061054b6102c28462ffffff168360600151610b7e90919063ffffffff16565b6020820151825161056a91620f42409161056491610fc1565b90610bff565b121580610578575080608001515b949350505050565b600061058c83836107bb565b60c001519392505050565b604080518082019091526000808252602082015260006105b78484610fd7565b505090506105c68484836114b9565b50919695505050505050565b60006105dd826105f9565b5192915050565b60006105ef826105f9565b6040015192915050565b61062d6040518060a00160405280600081526020016000815260200160008152602001600081526020016000151581525090565b600382015460208201526001608082015260048201805460009190825b8181101561077257600083828154811061066657610666611bf4565b60009182526020822001546001600160a01b0316915061068688836107bb565b610120810151885191925061069b91906115fc565b875261014081015160208801516106b1916115fc565b602088015260c08101516106d3906106c890611608565b604089015190611631565b604088015261010081015160608801516106ec91611631565b606088015260808701518015610720575061071b6102c28260200151836040015161163190919063ffffffff16565b815112155b801561072e57506060810151155b1515608088015260a081015161075d9061074790610b91565b82608001516107569190611c0a565b87906115fc565b955050508061076b90611c31565b905061064a565b50602084015184518590610787908390611bcc565b905250608084015180156107ab575060008460200151846107a89190611bcc565b12155b1515608085015250919392505050565b61081860405180610160016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b03821660009081526001840160209081526040808320815180830190925283825291810183905290916108528686610fd7565b505090506000806108648888856114b9565b6101408a019290925282518952602083015160808a01528754929650935091506000908190156109e7578654604051637640482f60e01b8152600481019190915260009081906001600160a01b038c1690637640482f906024016040805180830381865afa1580156108da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fe9190611c4a565b8a5460018c015460028d015460405163933c797960e01b8152600481019390935260248301919091526044820152919350915060009081906001600160a01b038e169063933c7979906064016040805180830381865afa158015610966573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098a9190611c4a565b60208e0186905290925090506109b46109a285610b91565b8d516109ae90856115fc565b906115fc565b8c5260a08c018390526109d86109c984610b91565b60808e01516109ae90846115fc565b60808d01525091935083925050505b6001600160a01b038916600090815260028b01602052604090206004810154610a11908690611c6e565b60408a01526005810154610a26908590611c6e565b60608a01526040890151610a3a9084611c81565b9250886060015182610a4c9190611c81565b9150610a8b610a6e610a5d85610b91565b8b51610a699190611c0a565b611608565b610a86610a7a85610b91565b8c51610a699190611bcc565b61163d565b60e08a0181905215610b555760008a6001600160a01b0316638ee8fe5d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ad7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afb9190611c94565b9050610b108a60e0015182600160601b61164d565b6101008b0152895115610b5357610b36610b2982610b91565b8b5190600160601b6116fb565b60c08b018190526101208b0151610b4c916115fc565b6101208b01525b505b60808901516101208a0151610b69916115fc565b6101208a015250969998505050505050505050565b6000610b8a8284611cad565b9392505050565b60006001600160ff1b03821115610bfb5760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b606482015260840161032c565b5090565b6000610b8a8284611ccc565b60048201805460009190825b81811015610c7157846001600160a01b0316838281548110610c3b57610c3b611bf4565b6000918252602090912001546001600160a01b031603610c61576001935050505061028f565b610c6a81611c31565b9050610c17565b50600095945050505050565b60048401805460005b81811015610d8e57856001600160a01b0316838281548110610caa57610caa611bf4565b6000918252602090912001546001600160a01b031603610d7e5783610d765782610cd5600184611c6e565b81548110610ce557610ce5611bf4565b9060005260206000200160009054906101000a90046001600160a01b0316838281548110610d1557610d15611bf4565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555082805480610d5357610d53611d51565b600082815260209020810160001990810180546001600160a01b03191690550190555b50505061046c565b610d8781611c31565b9050610c86565b5082610d9b57505061046c565b60ff8416610daa826001611c81565b1115610df25760405162461bcd60e51b8152602060048201526017602482015276414c5f55503a20746f6f206d616e79206d61726b65747360481b604482015260640161032c565b508054600181018255600091825260209091200180546001600160a01b0385166001600160a01b031990911617905550505050565b6040805180820190915260008082526020820152600084151580610e4a57508315155b15610f2357610e588461179f565b610e618661179f565b610e6b9190611ccc565b60001914610e7e57508490506000610fb8565b610e878561179f565b8651610e929061179f565b610e9c9190611ccc565b19610f23576000610eac86611608565b90506000610ebd8860000151611608565b9050808211610ef4576000610ee0610ed484610b91565b60208b015190846116fb565b9050610eec87826115fc565b935050610f20565b6000610f0a610f0283610b91565b8890856116fb565b60208a0151909150610f1c90826115fc565b9350505b50505b610f2d81846115fc565b8651909150600090610f3f90876115fc565b90506000610f6883610f62876109ae8a8d602001516115fc90919063ffffffff16565b906117c7565b905081158015610f76575080155b80610f9d5750610f858161179f565b610f8e8361179f565b610f989190611ccc565b600019145b610faf57876000935093505050610fb8565b90835260208301525b94509492505050565b6000818312610fd05781610b8a565b5090919050565b6001600160a01b0381166000908152600283016020526040812060609190819081611001826117d3565b90506000611011836002016117d3565b90506000808080808064ffffffffff8816156110bb5760405163c9ca629b60e01b81526000600482015264ffffffffff891660248201526001600160a01b038e169063c9ca629b90604401606060405180830381865afa158015611079573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109d9190611d67565b65ffffffffffff90921697509550935060008690036110bb57600097505b64ffffffffff87161561115c5760405163c9ca629b60e01b81526001600482015264ffffffffff881660248201526001600160a01b038e169063c9ca629b90604401606060405180830381865afa15801561111a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113e9190611d67565b65ffffffffffff909216945092509050600083900361115c57600096505b611164611a42565b60005b64ffffffffff8a16151580611182575064ffffffffff891615155b156113f25764ffffffffff8a16158015906111ab575064ffffffffff891615806111ab57508488105b156112d15760405180604001604052806111c4896117fb565b81526020016111d288610b91565b9052828261010081106111e7576111e7611bf4565b60200201526111f581611c31565b905060006112038c8c61180f565b905064ffffffffff8116156112a5578f6001600160a01b031663c9ca629b6000836040518363ffffffff1660e01b8152600401611253929190911515825264ffffffffff16602082015260400190565b606060405180830381865afa158015611270573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112949190611d67565b65ffffffffffff9092169a50985096505b8815806112b7575064ffffffffff8116155b156112c757999c506000996112cb565b809a505b50611167565b60405180604001604052806112e586610b91565b81526020016112f3856117fb565b90528282610100811061130857611308611bf4565b602002015261131681611c31565b9050600061132760028d018b61180f565b905064ffffffffff8116156113c9578f6001600160a01b031663c9ca629b6001836040518363ffffffff1660e01b8152600401611377929190911515825264ffffffffff16602082015260400190565b606060405180830381865afa158015611394573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b89190611d67565b65ffffffffffff9092169750955093505b8515806113db575064ffffffffff8116155b156113eb57989b506000986112cb565b9850611167565b8067ffffffffffffffff81111561140b5761140b611da9565b60405190808252806020026020018201604052801561145057816020015b60408051808201909152600080825260208201528152602001906001900390816114295790505b509d5060005b818110156114a6578281610100811061147157611471611bf4565b60200201518f828151811061148857611488611bf4565b6020026020010181905250808061149e90611c31565b915050611456565b5050505050505050505050509250925092565b604080518082018252600080825260209182018190526001600160a01b03851681528582528281208351808501909452805484526001015491830191909152825181908190815b818110156115f15760006115518789848151811061152057611520611bf4565b6020026020010151600001518a858151811061153e5761153e611bf4565b6020026020010151602001516000610e27565b90975090506115608187611bcc565b9550600088838151811061157657611576611bf4565b602002602001015160000151126115be576115ad88838151811061159c5761159c611bf4565b602002602001015160000151611608565b6115b79085611c81565b93506115e0565b6115d388838151811061159c5761159c611bf4565b6115dd9086611c81565b94505b506115ea81611c31565b9050611500565b505093509350935093565b6000610b8a8284611bcc565b6000808212156116285761162361161e83611938565b611996565b61028f565b61028f82611996565b6000610b8a8284611c81565b600081831015610fd05781610b8a565b60008080600019858709858702925082811083820303915050806000036116875783828161167d5761167d611dbf565b0492505050610b8a565b80841161169357600080fd5b600084868809600260036001881981018916988990049182028318808302840302808302840302808302840302808302840302808302840302918202909203026000889003889004909101858311909403939093029303949094049190911702949350505050565b6000806000851261170c5784611715565b61171585611938565b90506000808512611726578461172f565b61172f85611938565b9050600080871280156117425750600086135b8061175857506000871380156117585750600086125b611763576000611766565b60015b9050600061177584848861164d565b90508161178a5761178581610b91565b611793565b611793816117fb565b98975050505050505050565b60008082136117bf57600082126117b757600061028f565b60001961028f565b600192915050565b6000610b8a8284611c0a565b805464ffffffffff1680156117f657815461028f90839064ffffffffff166119e8565b919050565b600061180682610b91565b61028f90611dd5565b600064ffffffffff821661185f5760405162461bcd60e51b81526020600482015260176024820152765242544c5f4e3a2074617267657420697320656d70747960481b604482015260640161032c565b64ffffffffff8281166000908152600185016020526040902054600160501b900416156118ba5764ffffffffff80831660009081526001850160205260409020546118b3918591600160501b9004166119e8565b905061028f565b5064ffffffffff8082166000908152600184016020526040902054165b64ffffffffff811615801590611910575064ffffffffff8181166000908152600185016020526040902054600160501b90048116908316145b1561028f5764ffffffffff8082166000908152600185016020526040902054919250166118d7565b6000600160ff1b821361198d5760405162461bcd60e51b815260206004820152601c60248201527f506572704d6174683a20696e76657273696f6e206f766572666c6f7700000000604482015260640161032c565b61028f82611dd5565b600080821215610bfb5760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f736974697665604482015260640161032c565b60005b64ffffffffff8281166000908152600185016020526040902054600160281b90041615611a3c5764ffffffffff9182166000908152600184016020526040902054600160281b9004909116906119eb565b50919050565b604051806120000160405280610100905b6040805180820190915260008082526020820152815260200190600190039081611a535790505090565b600060208284031215611a8f57600080fd5b5035919050565b80356001600160a01b03811681146117f657600080fd5b60008060408385031215611ac057600080fd5b82359150611ad060208401611a96565b90509250929050565b60008060408385031215611aec57600080fd5b82359150602083013562ffffff81168114611b0657600080fd5b809150509250929050565b803560ff811681146117f657600080fd5b600080600060608486031215611b3757600080fd5b83359250611b4760208501611a96565b9150611b5560408501611b11565b90509250925092565b60008060008060008060c08789031215611b7757600080fd5b86359550611b8760208801611a96565b9450604087013593506060870135925060808701359150611baa60a08801611b11565b90509295509295509295565b634e487b7160e01b600052601160045260246000fd5b8082018281126000831280158216821582161715611bec57611bec611bb6565b505092915050565b634e487b7160e01b600052603260045260246000fd5b8181036000831280158383131683831282161715611c2a57611c2a611bb6565b5092915050565b600060018201611c4357611c43611bb6565b5060010190565b60008060408385031215611c5d57600080fd5b505080516020909101519092909150565b8181038181111561028f5761028f611bb6565b8082018082111561028f5761028f611bb6565b600060208284031215611ca657600080fd5b5051919050565b6000816000190483118215151615611cc757611cc7611bb6565b500290565b60006001600160ff1b0381841382841380821686840486111615611cf257611cf2611bb6565b600160ff1b6000871282811687830589121615611d1157611d11611bb6565b60008712925087820587128484161615611d2d57611d2d611bb6565b87850587128184161615611d4357611d43611bb6565b505050929093029392505050565b634e487b7160e01b600052603160045260246000fd5b600080600060608486031215611d7c57600080fd5b835165ffffffffffff81168114611d9257600080fd5b602085015160409095015190969495509392505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6000600160ff1b8201611dea57611dea611bb6565b506000039056fea2646970667358221220947da6010d3beb49eb07d09532878a5dd864f06050b11c11afeb55b657c3479464736f6c63430008100033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100de5760003560e01c8063724055e711610091578063724055e71461019a578063895d2afe146101ba57806397ec6101146101cd5780639a743e7a146101ed578063af77d70714610200578063cadeb03814610213578063d73fd34114610241578063e57822b81461025457600080fd5b8062202c86146100e3578063269140911461010b5780633c7e525f1461012c578063530e4fd01461013f5780635bd320d61461016157806367dd27b1146101745780636c19710814610187575b600080fd5b6100f66100f1366004611a7d565b610267565b60405190151581526020015b60405180910390f35b61011e610119366004611aad565b61027c565b604051908152602001610102565b6100f661013a366004611ad9565b610295565b81801561014b57600080fd5b5061015f61015a366004611aad565b6102e0565b005b61011e61016f366004611aad565b610385565b61011e610182366004611a7d565b610399565b61011e610195366004611aad565b6103ae565b8180156101a657600080fd5b5061015f6101b5366004611b22565b6103c6565b61011e6101c8366004611a7d565b610472565b8180156101d957600080fd5b5061011e6101e8366004611b5e565b610487565b6100f66101fb366004611ad9565b61051e565b61011e61020e366004611aad565b610580565b610226610221366004611aad565b610597565b60408051825181526020928301519281019290925201610102565b61011e61024f366004611a7d565b6105d2565b61011e610262366004611a7d565b6105e4565b6000610272826105f9565b6080015192915050565b600061028883836107bb565b60e0015190505b92915050565b6000806102a1846105f9565b90506102c76102c28462ffffff168360400151610b7e90919063ffffffff16565b610b91565b81516102d690620f4240610bff565b1215949350505050565b6102ea8282610c0b565b6103355760405162461bcd60e51b8152602060048201526017602482015276105317d0d34e881b585c9ad95d081b9bdd08195e1a5cdd604a1b60448201526064015b60405180910390fd5b600061034183836107bb565b90508061014001518161012001516103599190611bcc565b60038401805460009061036d908490611bcc565b9091555061038090508383600080610c7d565b505050565b600061039183836107bb565b519392505050565b60006103a4826105f9565b6060015192915050565b60006103ba83836107bb565b61010001519392505050565b6001600160a01b03821660009081526020849052604081205415158061040557506001600160a01b038316600090815260018501602052604090205415155b8061043057506001600160a01b038316600090815260028501602052604090205464ffffffffff1615155b8061045e57506001600160a01b038316600090815260028086016020526040909120015464ffffffffff1615155b905061046c84848484610c7d565b50505050565b600061047d826105f9565b6020015192915050565b6001600160a01b03851660009081526020878152604080832081518083019092528054825260010154918101919091526104c390868686610e27565b6001600160a01b038816600090815260208a8152604082208451815593015160019093019290925560038901805491935083929091610503908490611bcc565b9091555061051490508787846103c6565b9695505050505050565b60008061052a846105f9565b905061054b6102c28462ffffff168360600151610b7e90919063ffffffff16565b6020820151825161056a91620f42409161056491610fc1565b90610bff565b121580610578575080608001515b949350505050565b600061058c83836107bb565b60c001519392505050565b604080518082019091526000808252602082015260006105b78484610fd7565b505090506105c68484836114b9565b50919695505050505050565b60006105dd826105f9565b5192915050565b60006105ef826105f9565b6040015192915050565b61062d6040518060a00160405280600081526020016000815260200160008152602001600081526020016000151581525090565b600382015460208201526001608082015260048201805460009190825b8181101561077257600083828154811061066657610666611bf4565b60009182526020822001546001600160a01b0316915061068688836107bb565b610120810151885191925061069b91906115fc565b875261014081015160208801516106b1916115fc565b602088015260c08101516106d3906106c890611608565b604089015190611631565b604088015261010081015160608801516106ec91611631565b606088015260808701518015610720575061071b6102c28260200151836040015161163190919063ffffffff16565b815112155b801561072e57506060810151155b1515608088015260a081015161075d9061074790610b91565b82608001516107569190611c0a565b87906115fc565b955050508061076b90611c31565b905061064a565b50602084015184518590610787908390611bcc565b905250608084015180156107ab575060008460200151846107a89190611bcc565b12155b1515608085015250919392505050565b61081860405180610160016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b03821660009081526001840160209081526040808320815180830190925283825291810183905290916108528686610fd7565b505090506000806108648888856114b9565b6101408a019290925282518952602083015160808a01528754929650935091506000908190156109e7578654604051637640482f60e01b8152600481019190915260009081906001600160a01b038c1690637640482f906024016040805180830381865afa1580156108da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fe9190611c4a565b8a5460018c015460028d015460405163933c797960e01b8152600481019390935260248301919091526044820152919350915060009081906001600160a01b038e169063933c7979906064016040805180830381865afa158015610966573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098a9190611c4a565b60208e0186905290925090506109b46109a285610b91565b8d516109ae90856115fc565b906115fc565b8c5260a08c018390526109d86109c984610b91565b60808e01516109ae90846115fc565b60808d01525091935083925050505b6001600160a01b038916600090815260028b01602052604090206004810154610a11908690611c6e565b60408a01526005810154610a26908590611c6e565b60608a01526040890151610a3a9084611c81565b9250886060015182610a4c9190611c81565b9150610a8b610a6e610a5d85610b91565b8b51610a699190611c0a565b611608565b610a86610a7a85610b91565b8c51610a699190611bcc565b61163d565b60e08a0181905215610b555760008a6001600160a01b0316638ee8fe5d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ad7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afb9190611c94565b9050610b108a60e0015182600160601b61164d565b6101008b0152895115610b5357610b36610b2982610b91565b8b5190600160601b6116fb565b60c08b018190526101208b0151610b4c916115fc565b6101208b01525b505b60808901516101208a0151610b69916115fc565b6101208a015250969998505050505050505050565b6000610b8a8284611cad565b9392505050565b60006001600160ff1b03821115610bfb5760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b606482015260840161032c565b5090565b6000610b8a8284611ccc565b60048201805460009190825b81811015610c7157846001600160a01b0316838281548110610c3b57610c3b611bf4565b6000918252602090912001546001600160a01b031603610c61576001935050505061028f565b610c6a81611c31565b9050610c17565b50600095945050505050565b60048401805460005b81811015610d8e57856001600160a01b0316838281548110610caa57610caa611bf4565b6000918252602090912001546001600160a01b031603610d7e5783610d765782610cd5600184611c6e565b81548110610ce557610ce5611bf4565b9060005260206000200160009054906101000a90046001600160a01b0316838281548110610d1557610d15611bf4565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555082805480610d5357610d53611d51565b600082815260209020810160001990810180546001600160a01b03191690550190555b50505061046c565b610d8781611c31565b9050610c86565b5082610d9b57505061046c565b60ff8416610daa826001611c81565b1115610df25760405162461bcd60e51b8152602060048201526017602482015276414c5f55503a20746f6f206d616e79206d61726b65747360481b604482015260640161032c565b508054600181018255600091825260209091200180546001600160a01b0385166001600160a01b031990911617905550505050565b6040805180820190915260008082526020820152600084151580610e4a57508315155b15610f2357610e588461179f565b610e618661179f565b610e6b9190611ccc565b60001914610e7e57508490506000610fb8565b610e878561179f565b8651610e929061179f565b610e9c9190611ccc565b19610f23576000610eac86611608565b90506000610ebd8860000151611608565b9050808211610ef4576000610ee0610ed484610b91565b60208b015190846116fb565b9050610eec87826115fc565b935050610f20565b6000610f0a610f0283610b91565b8890856116fb565b60208a0151909150610f1c90826115fc565b9350505b50505b610f2d81846115fc565b8651909150600090610f3f90876115fc565b90506000610f6883610f62876109ae8a8d602001516115fc90919063ffffffff16565b906117c7565b905081158015610f76575080155b80610f9d5750610f858161179f565b610f8e8361179f565b610f989190611ccc565b600019145b610faf57876000935093505050610fb8565b90835260208301525b94509492505050565b6000818312610fd05781610b8a565b5090919050565b6001600160a01b0381166000908152600283016020526040812060609190819081611001826117d3565b90506000611011836002016117d3565b90506000808080808064ffffffffff8816156110bb5760405163c9ca629b60e01b81526000600482015264ffffffffff891660248201526001600160a01b038e169063c9ca629b90604401606060405180830381865afa158015611079573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109d9190611d67565b65ffffffffffff90921697509550935060008690036110bb57600097505b64ffffffffff87161561115c5760405163c9ca629b60e01b81526001600482015264ffffffffff881660248201526001600160a01b038e169063c9ca629b90604401606060405180830381865afa15801561111a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113e9190611d67565b65ffffffffffff909216945092509050600083900361115c57600096505b611164611a42565b60005b64ffffffffff8a16151580611182575064ffffffffff891615155b156113f25764ffffffffff8a16158015906111ab575064ffffffffff891615806111ab57508488105b156112d15760405180604001604052806111c4896117fb565b81526020016111d288610b91565b9052828261010081106111e7576111e7611bf4565b60200201526111f581611c31565b905060006112038c8c61180f565b905064ffffffffff8116156112a5578f6001600160a01b031663c9ca629b6000836040518363ffffffff1660e01b8152600401611253929190911515825264ffffffffff16602082015260400190565b606060405180830381865afa158015611270573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112949190611d67565b65ffffffffffff9092169a50985096505b8815806112b7575064ffffffffff8116155b156112c757999c506000996112cb565b809a505b50611167565b60405180604001604052806112e586610b91565b81526020016112f3856117fb565b90528282610100811061130857611308611bf4565b602002015261131681611c31565b9050600061132760028d018b61180f565b905064ffffffffff8116156113c9578f6001600160a01b031663c9ca629b6001836040518363ffffffff1660e01b8152600401611377929190911515825264ffffffffff16602082015260400190565b606060405180830381865afa158015611394573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b89190611d67565b65ffffffffffff9092169750955093505b8515806113db575064ffffffffff8116155b156113eb57989b506000986112cb565b9850611167565b8067ffffffffffffffff81111561140b5761140b611da9565b60405190808252806020026020018201604052801561145057816020015b60408051808201909152600080825260208201528152602001906001900390816114295790505b509d5060005b818110156114a6578281610100811061147157611471611bf4565b60200201518f828151811061148857611488611bf4565b6020026020010181905250808061149e90611c31565b915050611456565b5050505050505050505050509250925092565b604080518082018252600080825260209182018190526001600160a01b03851681528582528281208351808501909452805484526001015491830191909152825181908190815b818110156115f15760006115518789848151811061152057611520611bf4565b6020026020010151600001518a858151811061153e5761153e611bf4565b6020026020010151602001516000610e27565b90975090506115608187611bcc565b9550600088838151811061157657611576611bf4565b602002602001015160000151126115be576115ad88838151811061159c5761159c611bf4565b602002602001015160000151611608565b6115b79085611c81565b93506115e0565b6115d388838151811061159c5761159c611bf4565b6115dd9086611c81565b94505b506115ea81611c31565b9050611500565b505093509350935093565b6000610b8a8284611bcc565b6000808212156116285761162361161e83611938565b611996565b61028f565b61028f82611996565b6000610b8a8284611c81565b600081831015610fd05781610b8a565b60008080600019858709858702925082811083820303915050806000036116875783828161167d5761167d611dbf565b0492505050610b8a565b80841161169357600080fd5b600084868809600260036001881981018916988990049182028318808302840302808302840302808302840302808302840302808302840302918202909203026000889003889004909101858311909403939093029303949094049190911702949350505050565b6000806000851261170c5784611715565b61171585611938565b90506000808512611726578461172f565b61172f85611938565b9050600080871280156117425750600086135b8061175857506000871380156117585750600086125b611763576000611766565b60015b9050600061177584848861164d565b90508161178a5761178581610b91565b611793565b611793816117fb565b98975050505050505050565b60008082136117bf57600082126117b757600061028f565b60001961028f565b600192915050565b6000610b8a8284611c0a565b805464ffffffffff1680156117f657815461028f90839064ffffffffff166119e8565b919050565b600061180682610b91565b61028f90611dd5565b600064ffffffffff821661185f5760405162461bcd60e51b81526020600482015260176024820152765242544c5f4e3a2074617267657420697320656d70747960481b604482015260640161032c565b64ffffffffff8281166000908152600185016020526040902054600160501b900416156118ba5764ffffffffff80831660009081526001850160205260409020546118b3918591600160501b9004166119e8565b905061028f565b5064ffffffffff8082166000908152600184016020526040902054165b64ffffffffff811615801590611910575064ffffffffff8181166000908152600185016020526040902054600160501b90048116908316145b1561028f5764ffffffffff8082166000908152600185016020526040902054919250166118d7565b6000600160ff1b821361198d5760405162461bcd60e51b815260206004820152601c60248201527f506572704d6174683a20696e76657273696f6e206f766572666c6f7700000000604482015260640161032c565b61028f82611dd5565b600080821215610bfb5760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f736974697665604482015260640161032c565b60005b64ffffffffff8281166000908152600185016020526040902054600160281b90041615611a3c5764ffffffffff9182166000908152600184016020526040902054600160281b9004909116906119eb565b50919050565b604051806120000160405280610100905b6040805180820190915260008082526020820152815260200190600190039081611a535790505090565b600060208284031215611a8f57600080fd5b5035919050565b80356001600160a01b03811681146117f657600080fd5b60008060408385031215611ac057600080fd5b82359150611ad060208401611a96565b90509250929050565b60008060408385031215611aec57600080fd5b82359150602083013562ffffff81168114611b0657600080fd5b809150509250929050565b803560ff811681146117f657600080fd5b600080600060608486031215611b3757600080fd5b83359250611b4760208501611a96565b9150611b5560408501611b11565b90509250925092565b60008060008060008060c08789031215611b7757600080fd5b86359550611b8760208801611a96565b9450604087013593506060870135925060808701359150611baa60a08801611b11565b90509295509295509295565b634e487b7160e01b600052601160045260246000fd5b8082018281126000831280158216821582161715611bec57611bec611bb6565b505092915050565b634e487b7160e01b600052603260045260246000fd5b8181036000831280158383131683831282161715611c2a57611c2a611bb6565b5092915050565b600060018201611c4357611c43611bb6565b5060010190565b60008060408385031215611c5d57600080fd5b505080516020909101519092909150565b8181038181111561028f5761028f611bb6565b8082018082111561028f5761028f611bb6565b600060208284031215611ca657600080fd5b5051919050565b6000816000190483118215151615611cc757611cc7611bb6565b500290565b60006001600160ff1b0381841382841380821686840486111615611cf257611cf2611bb6565b600160ff1b6000871282811687830589121615611d1157611d11611bb6565b60008712925087820587128484161615611d2d57611d2d611bb6565b87850587128184161615611d4357611d43611bb6565b505050929093029392505050565b634e487b7160e01b600052603160045260246000fd5b600080600060608486031215611d7c57600080fd5b835165ffffffffffff81168114611d9257600080fd5b602085015160409095015190969495509392505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6000600160ff1b8201611dea57611dea611bb6565b506000039056fea2646970667358221220947da6010d3beb49eb07d09532878a5dd864f06050b11c11afeb55b657c3479464736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}