{
  "address": "0x2a421AbB158121F8e04EA0Ca3B083adB28Cda14A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "settlementTokenArg",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CollateralCompensated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "ImRatioChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isBid",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "LimitOrderCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isBid",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceX96",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum PerpdexStructs.LimitOrderType",
          "name": "limitOrderType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseTaker",
          "type": "uint256"
        }
      ],
      "name": "LimitOrderCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "base",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "quote",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "realizedPnl",
          "type": "int256"
        }
      ],
      "name": "LimitOrderSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "rewardRatio",
          "type": "uint24"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "smoothEmaTime",
          "type": "uint16"
        }
      ],
      "name": "LiquidationRewardConfigChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cumBasePerLiquidityX96",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cumQuotePerLiquidityX96",
          "type": "uint256"
        }
      ],
      "name": "LiquidityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "takerBase",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "takerQuote",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "realizedPnl",
          "type": "int256"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum PerpdexStructs.MarketStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "MarketStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "value",
          "type": "uint8"
        }
      ],
      "name": "MaxMarketsPerAccountChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "value",
          "type": "uint8"
        }
      ],
      "name": "MaxOrdersPerAccountChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "MmRatioChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isBid",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "basePartial",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quotePartial",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "partialRealizedPnl",
          "type": "int256"
        }
      ],
      "name": "PartiallyExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "base",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "quote",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "realizedPnl",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseBalancePerShareX96",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharePriceAfterX96",
          "type": "uint256"
        }
      ],
      "name": "PositionChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "base",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "quote",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "realizedPnl",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseBalancePerShareX96",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharePriceAfterX96",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidationPenalty",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidationReward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "insuranceFundReward",
          "type": "uint256"
        }
      ],
      "name": "PositionLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "ProtocolFeeRatioChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ProtocolFeeTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accountInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "collateralBalance",
              "type": "int256"
            }
          ],
          "internalType": "struct PerpdexStructs.VaultInfo",
          "name": "vaultInfo",
          "type": "tuple"
        },
        {
          "internalType": "uint8",
          "name": "limitOrderCount",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "market",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "base",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quote",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minQuote",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPerpdexExchange.AddLiquidityParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "market",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isBid",
              "type": "bool"
            },
            {
              "internalType": "uint40",
              "name": "orderId",
              "type": "uint40"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPerpdexExchange.CancelLimitOrderParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "cancelLimitOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "closeMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "market",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isBid",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "base",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "priceX96",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "enum PerpdexStructs.LimitOrderType",
              "name": "limitOrderType",
              "type": "uint8"
            }
          ],
          "internalType": "struct IPerpdexExchange.CreateLimitOrderParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createLimitOrder",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "orderId",
          "type": "uint40"
        },
        {
          "internalType": "uint256",
          "name": "baseTaker",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteTaker",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getAccountMarkets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getCollateralBalance",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isBid",
          "type": "bool"
        }
      ],
      "name": "getLimitOrderIds",
      "outputs": [
        {
          "internalType": "uint40[]",
          "name": "",
          "type": "uint40[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "getLimitOrderInfo",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "askRoot",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "bidRoot",
          "type": "uint40"
        },
        {
          "internalType": "uint256",
          "name": "totalBaseAsk",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalBaseBid",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isBid",
          "type": "bool"
        }
      ],
      "name": "getLimitOrderSummaries",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint40",
              "name": "orderId",
              "type": "uint40"
            },
            {
              "internalType": "uint256",
              "name": "base",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "priceX96",
              "type": "uint256"
            }
          ],
          "internalType": "struct PerpdexStructs.LimitOrderSummary[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "getMakerInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cumBaseSharePerLiquidityX96",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cumQuotePerLiquidityX96",
              "type": "uint256"
            }
          ],
          "internalType": "struct PerpdexStructs.MakerInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "getOpenPositionNotional",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "getOpenPositionShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "getPositionNotional",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "getPositionShare",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "getTakerInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "baseBalanceShare",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "quoteBalance",
              "type": "int256"
            }
          ],
          "internalType": "struct PerpdexStructs.TakerInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "getTakerInfoLazy",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "baseBalanceShare",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "quoteBalance",
              "type": "int256"
            }
          ],
          "internalType": "struct PerpdexStructs.TakerInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getTotalAccountValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getTotalOpenPositionNotional",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getTotalPositionNotional",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "hasEnoughInitialMargin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "hasEnoughMaintenanceMargin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "imRatio",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "insuranceFundInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationRewardBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "isLiquidationFree",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationRewardConfig",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "rewardRatio",
          "type": "uint24"
        },
        {
          "internalType": "uint16",
          "name": "smoothEmaTime",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "marketStatuses",
      "outputs": [
        {
          "internalType": "enum PerpdexStructs.MarketStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMarketsPerAccount",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxOrdersPerAccount",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "market",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "caller",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isBaseToQuote",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isExactInput",
              "type": "bool"
            }
          ],
          "internalType": "struct IPerpdexExchange.MaxTradeParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "maxTrade",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mmRatio",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint40",
          "name": "",
          "type": "uint40"
        }
      ],
      "name": "orderIdToTrader",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "market",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "caller",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isBaseToQuote",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isExactInput",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "oppositeAmountBound",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPerpdexExchange.PreviewTradeParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "previewTrade",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "oppositeAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeRatio",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quoteDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "market",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minQuote",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPerpdexExchange.RemoveLiquidityParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "balance",
          "type": "int256"
        }
      ],
      "name": "setCollateralBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "setImRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint24",
              "name": "rewardRatio",
              "type": "uint24"
            },
            {
              "internalType": "uint16",
              "name": "smoothEmaTime",
              "type": "uint16"
            }
          ],
          "internalType": "struct PerpdexStructs.LiquidationRewardConfig",
          "name": "value",
          "type": "tuple"
        }
      ],
      "name": "setLiquidationRewardConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "enum PerpdexStructs.MarketStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "setMarketStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "value",
          "type": "uint8"
        }
      ],
      "name": "setMaxMarketsPerAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "value",
          "type": "uint8"
        }
      ],
      "name": "setMaxOrdersPerAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "setMmRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "value",
          "type": "uint24"
        }
      ],
      "name": "setProtocolFeeRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settlementToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "market",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isBaseToQuote",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isExactInput",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "oppositeAmountBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPerpdexExchange.TradeParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "trade",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "oppositeAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6d33a3cfc32ffffc5fceb4a6c9705c49fb048531598c402eaae44d905d6957f0",
  "receipt": {
    "to": null,
    "from": "0x4B78eCe4AA1be3495713199380635537C5fB2326",
    "contractAddress": "0x2a421AbB158121F8e04EA0Ca3B083adB28Cda14A",
    "transactionIndex": 1,
    "gasUsed": "5473792",
    "logsBloom": "0x
    "blockHash": "0x6efc75a16a501c8ed9cc00eac3a0dfd187c40d0294dcbb2293d0c988b1a79261",
    "transactionHash": "0x6d33a3cfc32ffffc5fceb4a6c9705c49fb048531598c402eaae44d905d6957f0",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 14719403,
        "transactionHash": "0x6d33a3cfc32ffffc5fceb4a6c9705c49fb048531598c402eaae44d905d6957f0",
        "address": "0x2a421AbB158121F8e04EA0Ca3B083adB28Cda14A",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004b78ece4aa1be3495713199380635537c5fb2326"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x6efc75a16a501c8ed9cc00eac3a0dfd187c40d0294dcbb2293d0c988b1a79261"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 14719403,
        "transactionHash": "0x6d33a3cfc32ffffc5fceb4a6c9705c49fb048531598c402eaae44d905d6957f0",
        "address": "0x2a421AbB158121F8e04EA0Ca3B083adB28Cda14A",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000004b78ece4aa1be3495713199380635537c5fb2326",
          "0x0000000000000000000000004b78ece4aa1be3495713199380635537c5fb2326"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x6efc75a16a501c8ed9cc00eac3a0dfd187c40d0294dcbb2293d0c988b1a79261"
      }
    ],
    "blockNumber": 14719403,
    "cumulativeGasUsed": "5473792",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000000"
  ],
  "numDeployments": 5,
  "solcInputHash": "ede8775c668a867b5b3500032ff6d979",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"settlementTokenArg\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CollateralCompensated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"ImRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"LimitOrderCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceX96\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum PerpdexStructs.LimitOrderType\",\"name\":\"limitOrderType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseTaker\",\"type\":\"uint256\"}],\"name\":\"LimitOrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"base\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"quote\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"realizedPnl\",\"type\":\"int256\"}],\"name\":\"LimitOrderSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"rewardRatio\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"smoothEmaTime\",\"type\":\"uint16\"}],\"name\":\"LiquidationRewardConfigChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cumBasePerLiquidityX96\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cumQuotePerLiquidityX96\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"takerBase\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"takerQuote\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"realizedPnl\",\"type\":\"int256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum PerpdexStructs.MarketStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"MarketStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"value\",\"type\":\"uint8\"}],\"name\":\"MaxMarketsPerAccountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"value\",\"type\":\"uint8\"}],\"name\":\"MaxOrdersPerAccountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"MmRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"basePartial\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quotePartial\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"partialRealizedPnl\",\"type\":\"int256\"}],\"name\":\"PartiallyExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"base\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"quote\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"realizedPnl\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseBalancePerShareX96\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharePriceAfterX96\",\"type\":\"uint256\"}],\"name\":\"PositionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"base\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"quote\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"realizedPnl\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseBalancePerShareX96\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharePriceAfterX96\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationPenalty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"insuranceFundReward\",\"type\":\"uint256\"}],\"name\":\"PositionLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"ProtocolFeeRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeeTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"collateralBalance\",\"type\":\"int256\"}],\"internalType\":\"struct PerpdexStructs.VaultInfo\",\"name\":\"vaultInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"limitOrderCount\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IPerpdexExchange.AddLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"internalType\":\"uint40\",\"name\":\"orderId\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IPerpdexExchange.CancelLimitOrderParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"cancelLimitOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"closeMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceX96\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"enum PerpdexStructs.LimitOrderType\",\"name\":\"limitOrderType\",\"type\":\"uint8\"}],\"internalType\":\"struct IPerpdexExchange.CreateLimitOrderParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createLimitOrder\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"orderId\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"baseTaker\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteTaker\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getAccountMarkets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getCollateralBalance\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"}],\"name\":\"getLimitOrderIds\",\"outputs\":[{\"internalType\":\"uint40[]\",\"name\":\"\",\"type\":\"uint40[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getLimitOrderInfo\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"askRoot\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"bidRoot\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"totalBaseAsk\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBaseBid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"}],\"name\":\"getLimitOrderSummaries\",\"outputs\":[{\"components\":[{\"internalType\":\"uint40\",\"name\":\"orderId\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceX96\",\"type\":\"uint256\"}],\"internalType\":\"struct PerpdexStructs.LimitOrderSummary[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getMakerInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumBaseSharePerLiquidityX96\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumQuotePerLiquidityX96\",\"type\":\"uint256\"}],\"internalType\":\"struct PerpdexStructs.MakerInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getOpenPositionNotional\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getOpenPositionShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getPositionNotional\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getPositionShare\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getTakerInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"baseBalanceShare\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quoteBalance\",\"type\":\"int256\"}],\"internalType\":\"struct PerpdexStructs.TakerInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getTakerInfoLazy\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"baseBalanceShare\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quoteBalance\",\"type\":\"int256\"}],\"internalType\":\"struct PerpdexStructs.TakerInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getTotalAccountValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getTotalOpenPositionNotional\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getTotalPositionNotional\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"hasEnoughInitialMargin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"hasEnoughMaintenanceMargin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"imRatio\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insuranceFundInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRewardBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"isLiquidationFree\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationRewardConfig\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"rewardRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"smoothEmaTime\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketStatuses\",\"outputs\":[{\"internalType\":\"enum PerpdexStructs.MarketStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMarketsPerAccount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxOrdersPerAccount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBaseToQuote\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isExactInput\",\"type\":\"bool\"}],\"internalType\":\"struct IPerpdexExchange.MaxTradeParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"maxTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mmRatio\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"name\":\"orderIdToTrader\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBaseToQuote\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isExactInput\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oppositeAmountBound\",\"type\":\"uint256\"}],\"internalType\":\"struct IPerpdexExchange.PreviewTradeParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"previewTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"oppositeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeRatio\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IPerpdexExchange.RemoveLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"balance\",\"type\":\"int256\"}],\"name\":\"setCollateralBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"setImRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint24\",\"name\":\"rewardRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"smoothEmaTime\",\"type\":\"uint16\"}],\"internalType\":\"struct PerpdexStructs.LiquidationRewardConfig\",\"name\":\"value\",\"type\":\"tuple\"}],\"name\":\"setLiquidationRewardConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"enum PerpdexStructs.MarketStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"setMarketStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"value\",\"type\":\"uint8\"}],\"name\":\"setMaxMarketsPerAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"value\",\"type\":\"uint8\"}],\"name\":\"setMaxOrdersPerAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"setMmRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"setProtocolFeeRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settlementToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBaseToQuote\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isExactInput\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oppositeAmountBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IPerpdexExchange.TradeParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"trade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"oppositeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/DebugPerpdexExchange.sol\":\"DebugPerpdexExchange\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":170},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract Multicall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0x35e30a35e23f856cbcee3558b7efdd83f6017a8f1b419710645143d98e892463\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \\u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248) {\\n        require(value >= type(int248).min && value <= type(int248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return int248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240) {\\n        require(value >= type(int240).min && value <= type(int240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return int240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232) {\\n        require(value >= type(int232).min && value <= type(int232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return int232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224) {\\n        require(value >= type(int224).min && value <= type(int224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return int224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216) {\\n        require(value >= type(int216).min && value <= type(int216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return int216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208) {\\n        require(value >= type(int208).min && value <= type(int208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return int208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200) {\\n        require(value >= type(int200).min && value <= type(int200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return int200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192) {\\n        require(value >= type(int192).min && value <= type(int192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return int192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184) {\\n        require(value >= type(int184).min && value <= type(int184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return int184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176) {\\n        require(value >= type(int176).min && value <= type(int176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return int176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168) {\\n        require(value >= type(int168).min && value <= type(int168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return int168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160) {\\n        require(value >= type(int160).min && value <= type(int160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return int160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152) {\\n        require(value >= type(int152).min && value <= type(int152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return int152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144) {\\n        require(value >= type(int144).min && value <= type(int144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return int144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136) {\\n        require(value >= type(int136).min && value <= type(int136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return int136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120) {\\n        require(value >= type(int120).min && value <= type(int120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return int120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112) {\\n        require(value >= type(int112).min && value <= type(int112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return int112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104) {\\n        require(value >= type(int104).min && value <= type(int104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return int104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96) {\\n        require(value >= type(int96).min && value <= type(int96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return int96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88) {\\n        require(value >= type(int88).min && value <= type(int88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return int88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80) {\\n        require(value >= type(int80).min && value <= type(int80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return int80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72) {\\n        require(value >= type(int72).min && value <= type(int72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return int72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56) {\\n        require(value >= type(int56).min && value <= type(int56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return int56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48) {\\n        require(value >= type(int48).min && value <= type(int48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return int48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40) {\\n        require(value >= type(int40).min && value <= type(int40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return int40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24) {\\n        require(value >= type(int24).min && value <= type(int24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return int24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x02686c31ccb9ee77a299fa5f47327af5271f251a707a0e24f321957166ff0434\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        return a + b;\\n    }\\n}\\n\",\"keccak256\":\"0x62f53f262fabbbc6d8ab49488d8fce36370351aff2b8d3898d499d68995a71c2\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"contracts/PerpdexExchange.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { Multicall } from \\\"@openzeppelin/contracts/utils/Multicall.sol\\\";\\nimport { IPerpdexExchange } from \\\"./interfaces/IPerpdexExchange.sol\\\";\\nimport { IPerpdexMarketMinimum } from \\\"./interfaces/IPerpdexMarketMinimum.sol\\\";\\nimport { PerpdexStructs } from \\\"./lib/PerpdexStructs.sol\\\";\\nimport { AccountLibrary } from \\\"./lib/AccountLibrary.sol\\\";\\nimport { MakerLibrary } from \\\"./lib/MakerLibrary.sol\\\";\\nimport { MakerOrderBookLibrary } from \\\"./lib/MakerOrderBookLibrary.sol\\\";\\nimport { TakerLibrary } from \\\"./lib/TakerLibrary.sol\\\";\\nimport { VaultLibrary } from \\\"./lib/VaultLibrary.sol\\\";\\nimport { PerpMath } from \\\"./lib/PerpMath.sol\\\";\\n\\ncontract PerpdexExchange is IPerpdexExchange, ReentrancyGuard, Ownable, Multicall {\\n    using Address for address;\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using SafeCast for uint256;\\n\\n    // states\\n    // trader\\n    mapping(address => PerpdexStructs.AccountInfo) public accountInfos;\\n    PerpdexStructs.InsuranceFundInfo public insuranceFundInfo;\\n    PerpdexStructs.ProtocolInfo public protocolInfo;\\n    // market, isBid, orderId, trader\\n    mapping(address => mapping(bool => mapping(uint40 => address))) public orderIdToTrader;\\n\\n    // config\\n    address public immutable settlementToken;\\n    uint8 public constant quoteDecimals = 18;\\n    uint8 public maxMarketsPerAccount = 16;\\n    uint8 public maxOrdersPerAccount = 40;\\n    uint24 public imRatio = 10e4;\\n    uint24 public mmRatio = 5e4;\\n    uint24 public protocolFeeRatio = 0;\\n    PerpdexStructs.LiquidationRewardConfig public liquidationRewardConfig =\\n        PerpdexStructs.LiquidationRewardConfig({ rewardRatio: 20e4, smoothEmaTime: 100 });\\n    mapping(address => PerpdexStructs.MarketStatus) public marketStatuses;\\n\\n    modifier checkDeadline(uint256 deadline) {\\n        _checkDeadline(deadline);\\n        _;\\n    }\\n\\n    modifier checkMarketOpen(address market) {\\n        _checkMarketOpen(market);\\n        _;\\n    }\\n\\n    modifier checkMarketClosed(address market) {\\n        _checkMarketClosed(market);\\n        _;\\n    }\\n\\n    constructor(\\n        address ownerArg,\\n        address settlementTokenArg,\\n        address[] memory initialMarkets\\n    ) {\\n        _transferOwnership(ownerArg);\\n        require(settlementTokenArg == address(0) || settlementTokenArg.isContract(), \\\"PE_C: token address invalid\\\");\\n\\n        settlementToken = settlementTokenArg;\\n\\n        for (uint256 i = 0; i < initialMarkets.length; ++i) {\\n            _setMarketStatus(initialMarkets[i], PerpdexStructs.MarketStatus.Open);\\n        }\\n    }\\n\\n    function deposit(uint256 amount) external payable nonReentrant {\\n        address trader = _msgSender();\\n        _settleLimitOrders(trader);\\n\\n        uint256 compensation = VaultLibrary.compensate(accountInfos[trader], insuranceFundInfo);\\n        if (compensation != 0) {\\n            emit CollateralCompensated(trader, compensation);\\n        }\\n\\n        if (settlementToken == address(0)) {\\n            require(amount == 0, \\\"PE_D: amount not zero\\\");\\n            VaultLibrary.depositEth(accountInfos[trader], msg.value);\\n            emit Deposited(trader, msg.value);\\n        } else {\\n            require(msg.value == 0, \\\"PE_D: msg.value not zero\\\");\\n            VaultLibrary.deposit(\\n                accountInfos[trader],\\n                VaultLibrary.DepositParams({ settlementToken: settlementToken, amount: amount, from: trader })\\n            );\\n            emit Deposited(trader, amount);\\n        }\\n    }\\n\\n    function withdraw(uint256 amount) external nonReentrant {\\n        address payable trader = payable(_msgSender());\\n        _settleLimitOrders(trader);\\n\\n        VaultLibrary.withdraw(\\n            accountInfos[trader],\\n            VaultLibrary.WithdrawParams({\\n                settlementToken: settlementToken,\\n                amount: amount,\\n                to: trader,\\n                imRatio: imRatio\\n            })\\n        );\\n        emit Withdrawn(trader, amount);\\n    }\\n\\n    function transferProtocolFee(uint256 amount) external onlyOwner nonReentrant {\\n        address trader = _msgSender();\\n        _settleLimitOrders(trader);\\n        VaultLibrary.transferProtocolFee(accountInfos[trader], protocolInfo, amount);\\n        emit ProtocolFeeTransferred(trader, amount);\\n    }\\n\\n    function trade(TradeParams calldata params)\\n        external\\n        nonReentrant\\n        checkDeadline(params.deadline)\\n        checkMarketOpen(params.market)\\n        returns (uint256 oppositeAmount)\\n    {\\n        return _trade(params);\\n    }\\n\\n    function addLiquidity(AddLiquidityParams calldata params)\\n        external\\n        nonReentrant\\n        checkDeadline(params.deadline)\\n        checkMarketOpen(params.market)\\n        returns (\\n            uint256 base,\\n            uint256 quote,\\n            uint256 liquidity\\n        )\\n    {\\n        address trader = _msgSender();\\n        _settleLimitOrders(trader);\\n\\n        MakerLibrary.AddLiquidityResponse memory response =\\n            MakerLibrary.addLiquidity(\\n                accountInfos[trader],\\n                MakerLibrary.AddLiquidityParams({\\n                    market: params.market,\\n                    base: params.base,\\n                    quote: params.quote,\\n                    minBase: params.minBase,\\n                    minQuote: params.minQuote,\\n                    imRatio: imRatio,\\n                    maxMarketsPerAccount: maxMarketsPerAccount\\n                })\\n            );\\n\\n        PerpdexStructs.MakerInfo storage makerInfo = accountInfos[trader].makerInfos[params.market];\\n        emit LiquidityAdded(\\n            trader,\\n            params.market,\\n            response.base,\\n            response.quote,\\n            response.liquidity,\\n            makerInfo.cumBaseSharePerLiquidityX96,\\n            makerInfo.cumQuotePerLiquidityX96\\n        );\\n\\n        return (response.base, response.quote, response.liquidity);\\n    }\\n\\n    function removeLiquidity(RemoveLiquidityParams calldata params)\\n        external\\n        nonReentrant\\n        checkDeadline(params.deadline)\\n        checkMarketOpen(params.market)\\n        returns (uint256 base, uint256 quote)\\n    {\\n        _settleLimitOrders(params.trader);\\n\\n        MakerLibrary.RemoveLiquidityResponse memory response =\\n            MakerLibrary.removeLiquidity(\\n                accountInfos[params.trader],\\n                MakerLibrary.RemoveLiquidityParams({\\n                    market: params.market,\\n                    liquidity: params.liquidity,\\n                    minBase: params.minBase,\\n                    minQuote: params.minQuote,\\n                    isSelf: params.trader == _msgSender(),\\n                    mmRatio: mmRatio,\\n                    maxMarketsPerAccount: maxMarketsPerAccount\\n                })\\n            );\\n\\n        emit LiquidityRemoved(\\n            params.trader,\\n            params.market,\\n            response.isLiquidation ? _msgSender() : address(0),\\n            response.base,\\n            response.quote,\\n            params.liquidity,\\n            response.takerBase,\\n            response.takerQuote,\\n            response.realizedPnl\\n        );\\n\\n        return (response.base, response.quote);\\n    }\\n\\n    function createLimitOrder(CreateLimitOrderParams calldata params)\\n        external\\n        nonReentrant\\n        checkDeadline(params.deadline)\\n        checkMarketOpen(params.market)\\n        returns (\\n            uint40 orderId,\\n            uint256 baseTaker,\\n            uint256 quoteTaker\\n        )\\n    {\\n        address trader = _msgSender();\\n\\n        if (params.limitOrderType != PerpdexStructs.LimitOrderType.PostOnly) {\\n            bool isBaseToQuote = !params.isBid;\\n            uint256 maxAmount =\\n                IPerpdexMarketMinimum(params.market).maxSwapByPrice(isBaseToQuote, isBaseToQuote, params.priceX96);\\n            baseTaker = Math.min(maxAmount, params.base);\\n\\n            if (baseTaker != 0) {\\n                quoteTaker = _trade(\\n                    TradeParams({\\n                        trader: trader,\\n                        market: params.market,\\n                        isBaseToQuote: isBaseToQuote,\\n                        isExactInput: isBaseToQuote,\\n                        amount: baseTaker,\\n                        oppositeAmountBound: isBaseToQuote ? 0 : type(uint256).max,\\n                        deadline: 0 // ignored\\n                    })\\n                );\\n            }\\n        }\\n\\n        if (params.base == baseTaker || params.limitOrderType == PerpdexStructs.LimitOrderType.Ioc)\\n            return (0, baseTaker, quoteTaker);\\n\\n        _settleLimitOrders(trader);\\n\\n        orderId = MakerOrderBookLibrary.createLimitOrder(\\n            accountInfos[trader],\\n            MakerOrderBookLibrary.CreateLimitOrderParams({\\n                market: params.market,\\n                isBid: params.isBid,\\n                base: params.base - baseTaker,\\n                priceX96: params.priceX96,\\n                imRatio: imRatio,\\n                maxMarketsPerAccount: maxMarketsPerAccount,\\n                maxOrdersPerAccount: maxOrdersPerAccount,\\n                ignorePostOnlyCheck: params.limitOrderType == PerpdexStructs.LimitOrderType.Normal\\n            })\\n        );\\n\\n        orderIdToTrader[params.market][params.isBid][orderId] = trader;\\n        emit LimitOrderCreated(\\n            trader,\\n            params.market,\\n            params.isBid,\\n            params.base,\\n            params.priceX96,\\n            params.limitOrderType,\\n            orderId,\\n            baseTaker\\n        );\\n    }\\n\\n    function cancelLimitOrder(CancelLimitOrderParams calldata params)\\n        external\\n        nonReentrant\\n        checkDeadline(params.deadline)\\n        checkMarketOpen(params.market)\\n    {\\n        address trader = orderIdToTrader[params.market][params.isBid][params.orderId];\\n        require(trader != address(0), \\\"PE_CLO: order not exist\\\");\\n        _settleLimitOrders(trader);\\n\\n        bool isLiquidation =\\n            MakerOrderBookLibrary.cancelLimitOrder(\\n                accountInfos[trader],\\n                MakerOrderBookLibrary.CancelLimitOrderParams({\\n                    market: params.market,\\n                    isBid: params.isBid,\\n                    orderId: params.orderId,\\n                    isSelf: trader == _msgSender(),\\n                    mmRatio: mmRatio,\\n                    maxMarketsPerAccount: maxMarketsPerAccount\\n                })\\n            );\\n\\n        emit LimitOrderCanceled(\\n            trader,\\n            params.market,\\n            isLiquidation ? _msgSender() : address(0),\\n            params.isBid,\\n            params.orderId\\n        );\\n    }\\n\\n    function closeMarket(address market) external nonReentrant checkMarketClosed(market) {\\n        address trader = _msgSender();\\n        _settleLimitOrders(trader);\\n        AccountLibrary.closeMarket(accountInfos[trader], market);\\n    }\\n\\n    function _settleLimitOrders(address trader) internal {\\n        address[] storage markets = accountInfos[trader].markets;\\n        uint256 i = markets.length;\\n        while (i > 0) {\\n            --i;\\n            _settleLimitOrders(trader, markets[i]);\\n        }\\n    }\\n\\n    function _settleLimitOrders(address trader, address market) internal {\\n        MakerOrderBookLibrary.SettleLimitOrdersResponse memory response =\\n            MakerOrderBookLibrary.settleLimitOrders(accountInfos[trader], market, maxMarketsPerAccount);\\n        if (response.base != 0 || response.quote != 0 || response.realizedPnl != 0) {\\n            emit LimitOrderSettled(trader, market, response.base, response.quote, response.realizedPnl);\\n        }\\n    }\\n\\n    function setMaxMarketsPerAccount(uint8 value) external onlyOwner nonReentrant {\\n        maxMarketsPerAccount = value;\\n        emit MaxMarketsPerAccountChanged(value);\\n    }\\n\\n    function setMaxOrdersPerAccount(uint8 value) external onlyOwner nonReentrant {\\n        maxOrdersPerAccount = value;\\n        emit MaxOrdersPerAccountChanged(value);\\n    }\\n\\n    function setImRatio(uint24 value) external onlyOwner nonReentrant {\\n        require(value < 1e6, \\\"PE_SIR: too large\\\");\\n        require(value >= mmRatio, \\\"PE_SIR: smaller than mmRatio\\\");\\n        imRatio = value;\\n        emit ImRatioChanged(value);\\n    }\\n\\n    function setMmRatio(uint24 value) external onlyOwner nonReentrant {\\n        require(value <= imRatio, \\\"PE_SMR: bigger than imRatio\\\");\\n        require(value > 0, \\\"PE_SMR: zero\\\");\\n        mmRatio = value;\\n        emit MmRatioChanged(value);\\n    }\\n\\n    function setLiquidationRewardConfig(PerpdexStructs.LiquidationRewardConfig calldata value)\\n        external\\n        onlyOwner\\n        nonReentrant\\n    {\\n        require(value.rewardRatio < 1e6, \\\"PE_SLRC: too large reward ratio\\\");\\n        require(value.smoothEmaTime > 0, \\\"PE_SLRC: ema time is zero\\\");\\n        liquidationRewardConfig = value;\\n        emit LiquidationRewardConfigChanged(value.rewardRatio, value.smoothEmaTime);\\n    }\\n\\n    function setProtocolFeeRatio(uint24 value) external onlyOwner nonReentrant {\\n        require(value <= 1e4, \\\"PE_SPFR: too large\\\");\\n        protocolFeeRatio = value;\\n        emit ProtocolFeeRatioChanged(value);\\n    }\\n\\n    function setMarketStatus(address market, PerpdexStructs.MarketStatus status) external onlyOwner nonReentrant {\\n        _setMarketStatus(market, status);\\n    }\\n\\n    // all raw information can be retrieved through getters (including default getters)\\n\\n    function getTakerInfo(address trader, address market) external view returns (PerpdexStructs.TakerInfo memory) {\\n        return accountInfos[trader].takerInfos[market];\\n    }\\n\\n    function getMakerInfo(address trader, address market) external view returns (PerpdexStructs.MakerInfo memory) {\\n        return accountInfos[trader].makerInfos[market];\\n    }\\n\\n    function getAccountMarkets(address trader) external view returns (address[] memory) {\\n        return accountInfos[trader].markets;\\n    }\\n\\n    function getLimitOrderInfo(address trader, address market)\\n        external\\n        view\\n        returns (\\n            uint40 askRoot,\\n            uint40 bidRoot,\\n            uint256 totalBaseAsk,\\n            uint256 totalBaseBid\\n        )\\n    {\\n        PerpdexStructs.LimitOrderInfo storage info = accountInfos[trader].limitOrderInfos[market];\\n        return (info.ask.root, info.bid.root, info.totalBaseAsk, info.totalBaseBid);\\n    }\\n\\n    function getLimitOrderIds(\\n        address trader,\\n        address market,\\n        bool isBid\\n    ) external view returns (uint40[] memory) {\\n        return MakerOrderBookLibrary.getLimitOrderIds(accountInfos[trader], market, isBid);\\n    }\\n\\n    // dry run\\n\\n    function previewTrade(PreviewTradeParams calldata params)\\n        external\\n        view\\n        checkMarketOpen(params.market)\\n        returns (uint256 oppositeAmount)\\n    {\\n        address trader = params.trader;\\n        address caller = params.caller;\\n\\n        return\\n            TakerLibrary.previewTrade(\\n                accountInfos[trader],\\n                TakerLibrary.PreviewTradeParams({\\n                    market: params.market,\\n                    isBaseToQuote: params.isBaseToQuote,\\n                    isExactInput: params.isExactInput,\\n                    amount: params.amount,\\n                    oppositeAmountBound: params.oppositeAmountBound,\\n                    mmRatio: mmRatio,\\n                    protocolFeeRatio: protocolFeeRatio,\\n                    isSelf: trader == caller\\n                })\\n            );\\n    }\\n\\n    function maxTrade(MaxTradeParams memory params) external view returns (uint256 amount) {\\n        if (marketStatuses[params.market] != PerpdexStructs.MarketStatus.Open) return 0;\\n\\n        address trader = params.trader;\\n        address caller = params.caller;\\n\\n        return\\n            TakerLibrary.maxTrade({\\n                accountInfo: accountInfos[trader],\\n                market: params.market,\\n                isBaseToQuote: params.isBaseToQuote,\\n                isExactInput: params.isExactInput,\\n                mmRatio: mmRatio,\\n                protocolFeeRatio: protocolFeeRatio,\\n                isSelf: trader == caller\\n            });\\n    }\\n\\n    // convenient getters\\n\\n    function getTakerInfoLazy(address trader, address market) external view returns (PerpdexStructs.TakerInfo memory) {\\n        return AccountLibrary.getTakerInfo(accountInfos[trader], market);\\n    }\\n\\n    function getCollateralBalance(address trader) external view returns (int256) {\\n        return AccountLibrary.getCollateralBalance(accountInfos[trader]);\\n    }\\n\\n    function getTotalAccountValue(address trader) external view returns (int256) {\\n        return AccountLibrary.getTotalAccountValue(accountInfos[trader]);\\n    }\\n\\n    function getPositionShare(address trader, address market) external view returns (int256) {\\n        return AccountLibrary.getPositionShare(accountInfos[trader], market);\\n    }\\n\\n    function getPositionNotional(address trader, address market) external view returns (int256) {\\n        return AccountLibrary.getPositionNotional(accountInfos[trader], market);\\n    }\\n\\n    function getTotalPositionNotional(address trader) external view returns (uint256) {\\n        return AccountLibrary.getTotalPositionNotional(accountInfos[trader]);\\n    }\\n\\n    function getOpenPositionShare(address trader, address market) external view returns (uint256) {\\n        return AccountLibrary.getOpenPositionShare(accountInfos[trader], market);\\n    }\\n\\n    function getOpenPositionNotional(address trader, address market) external view returns (uint256) {\\n        return AccountLibrary.getOpenPositionNotional(accountInfos[trader], market);\\n    }\\n\\n    function getTotalOpenPositionNotional(address trader) external view returns (uint256) {\\n        return AccountLibrary.getTotalOpenPositionNotional(accountInfos[trader]);\\n    }\\n\\n    function hasEnoughMaintenanceMargin(address trader) external view returns (bool) {\\n        return AccountLibrary.hasEnoughMaintenanceMargin(accountInfos[trader], mmRatio);\\n    }\\n\\n    function hasEnoughInitialMargin(address trader) external view returns (bool) {\\n        return AccountLibrary.hasEnoughInitialMargin(accountInfos[trader], imRatio);\\n    }\\n\\n    function isLiquidationFree(address trader) external view returns (bool) {\\n        return AccountLibrary.isLiquidationFree(accountInfos[trader]);\\n    }\\n\\n    function getLimitOrderSummaries(\\n        address trader,\\n        address market,\\n        bool isBid\\n    ) external view returns (PerpdexStructs.LimitOrderSummary[] memory) {\\n        return MakerOrderBookLibrary.getLimitOrderSummaries(accountInfos[trader], market, isBid);\\n    }\\n\\n    // for avoiding stack too deep error\\n    function _trade(TradeParams memory params) private returns (uint256 oppositeAmount) {\\n        _settleLimitOrders(params.trader);\\n        TakerLibrary.TradeResponse memory response = _doTrade(params);\\n\\n        if (response.rawResponse.partialOrderId != 0) {\\n            address partialTrader =\\n                orderIdToTrader[params.market][params.isBaseToQuote][response.rawResponse.partialOrderId];\\n            _settleLimitOrders(partialTrader, params.market);\\n            int256 partialRealizedPnl =\\n                MakerOrderBookLibrary.processPartialExecution(\\n                    accountInfos[partialTrader],\\n                    params.market,\\n                    params.isBaseToQuote,\\n                    maxMarketsPerAccount,\\n                    response.rawResponse\\n                );\\n\\n            emit PartiallyExecuted(\\n                partialTrader,\\n                params.market,\\n                params.isBaseToQuote,\\n                response.rawResponse.basePartial,\\n                response.rawResponse.quotePartial,\\n                partialRealizedPnl\\n            );\\n        }\\n\\n        uint256 baseBalancePerShareX96 = IPerpdexMarketMinimum(params.market).baseBalancePerShareX96();\\n        uint256 shareMarkPriceAfterX96 = IPerpdexMarketMinimum(params.market).getShareMarkPriceX96();\\n\\n        if (response.isLiquidation) {\\n            emit PositionLiquidated(\\n                params.trader,\\n                params.market,\\n                _msgSender(),\\n                response.base,\\n                response.quote,\\n                response.realizedPnl,\\n                response.protocolFee,\\n                baseBalancePerShareX96,\\n                shareMarkPriceAfterX96,\\n                response.liquidationPenalty,\\n                response.liquidationReward,\\n                response.insuranceFundReward\\n            );\\n        } else {\\n            emit PositionChanged(\\n                params.trader,\\n                params.market,\\n                response.base,\\n                response.quote,\\n                response.realizedPnl,\\n                response.protocolFee,\\n                baseBalancePerShareX96,\\n                shareMarkPriceAfterX96\\n            );\\n        }\\n\\n        oppositeAmount = params.isExactInput == params.isBaseToQuote ? response.quote.abs() : response.base.abs();\\n    }\\n\\n    function _doTrade(TradeParams memory params) private returns (TakerLibrary.TradeResponse memory) {\\n        return\\n            TakerLibrary.trade(\\n                accountInfos[params.trader],\\n                accountInfos[_msgSender()].vaultInfo,\\n                insuranceFundInfo,\\n                protocolInfo,\\n                TakerLibrary.TradeParams({\\n                    market: params.market,\\n                    isBaseToQuote: params.isBaseToQuote,\\n                    isExactInput: params.isExactInput,\\n                    amount: params.amount,\\n                    oppositeAmountBound: params.oppositeAmountBound,\\n                    mmRatio: mmRatio,\\n                    imRatio: imRatio,\\n                    maxMarketsPerAccount: maxMarketsPerAccount,\\n                    protocolFeeRatio: protocolFeeRatio,\\n                    liquidationRewardConfig: liquidationRewardConfig,\\n                    isSelf: params.trader == _msgSender()\\n                })\\n            );\\n    }\\n\\n    function _setMarketStatus(address market, PerpdexStructs.MarketStatus status) private {\\n        if (marketStatuses[market] == status) return;\\n\\n        if (status == PerpdexStructs.MarketStatus.Open) {\\n            require(market.isContract(), \\\"PE_SIMA: market address invalid\\\");\\n            require(IPerpdexMarketMinimum(market).exchange() == address(this), \\\"PE_SIMA: different exchange\\\");\\n            require(marketStatuses[market] == PerpdexStructs.MarketStatus.NotAllowed, \\\"PE_SIMA: market closed\\\");\\n        } else if (status == PerpdexStructs.MarketStatus.Closed) {\\n            _checkMarketOpen(market);\\n        } else {\\n            require(false, \\\"PE_SIMA: invalid status\\\");\\n        }\\n\\n        marketStatuses[market] = status;\\n        emit MarketStatusChanged(market, status);\\n    }\\n\\n    // to reduce contract size\\n    function _checkDeadline(uint256 deadline) private view {\\n        require(block.timestamp <= deadline, \\\"PE_CD: too late\\\");\\n    }\\n\\n    // to reduce contract size\\n    function _checkMarketOpen(address market) private view {\\n        require(marketStatuses[market] == PerpdexStructs.MarketStatus.Open, \\\"PE_CMO: market not open\\\");\\n    }\\n\\n    // to reduce contract size\\n    function _checkMarketClosed(address market) private view {\\n        require(marketStatuses[market] == PerpdexStructs.MarketStatus.Closed, \\\"PE_CMC: market not closed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x385021d6917de670b7005a4c563b3b1d1aa79e1bca130eb70cbf0e773c2fdc9c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.7.6;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x0ded61799fbba3a2364d09ceee767ec9f1df2b474afa560ff032f34916aee6cb\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IPerpdexExchange.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { PerpdexStructs } from \\\"../lib/PerpdexStructs.sol\\\";\\n\\ninterface IPerpdexExchange {\\n    struct AddLiquidityParams {\\n        address market;\\n        uint256 base;\\n        uint256 quote;\\n        uint256 minBase;\\n        uint256 minQuote;\\n        uint256 deadline;\\n    }\\n\\n    struct RemoveLiquidityParams {\\n        address trader;\\n        address market;\\n        uint256 liquidity;\\n        uint256 minBase;\\n        uint256 minQuote;\\n        uint256 deadline;\\n    }\\n\\n    struct TradeParams {\\n        address trader;\\n        address market;\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n        uint256 amount;\\n        uint256 oppositeAmountBound;\\n        uint256 deadline;\\n    }\\n\\n    struct PreviewTradeParams {\\n        address trader;\\n        address market;\\n        address caller;\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n        uint256 amount;\\n        uint256 oppositeAmountBound;\\n    }\\n\\n    struct MaxTradeParams {\\n        address trader;\\n        address market;\\n        address caller;\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n    }\\n\\n    struct CreateLimitOrderParams {\\n        address market;\\n        bool isBid;\\n        uint256 base;\\n        uint256 priceX96;\\n        uint256 deadline;\\n        PerpdexStructs.LimitOrderType limitOrderType;\\n    }\\n\\n    struct CancelLimitOrderParams {\\n        address market;\\n        bool isBid;\\n        uint40 orderId;\\n        uint256 deadline;\\n    }\\n\\n    event CollateralCompensated(address indexed trader, uint256 amount);\\n    event Deposited(address indexed trader, uint256 amount);\\n    event Withdrawn(address indexed trader, uint256 amount);\\n    event ProtocolFeeTransferred(address indexed trader, uint256 amount);\\n\\n    event LiquidityAdded(\\n        address indexed trader,\\n        address indexed market,\\n        uint256 base,\\n        uint256 quote,\\n        uint256 liquidity,\\n        uint256 cumBasePerLiquidityX96,\\n        uint256 cumQuotePerLiquidityX96\\n    );\\n\\n    event LiquidityRemoved(\\n        address indexed trader,\\n        address indexed market,\\n        address liquidator,\\n        uint256 base,\\n        uint256 quote,\\n        uint256 liquidity,\\n        int256 takerBase,\\n        int256 takerQuote,\\n        int256 realizedPnl\\n    );\\n\\n    event PositionLiquidated(\\n        address indexed trader,\\n        address indexed market,\\n        address indexed liquidator,\\n        int256 base,\\n        int256 quote,\\n        int256 realizedPnl,\\n        uint256 protocolFee,\\n        uint256 baseBalancePerShareX96,\\n        uint256 sharePriceAfterX96,\\n        uint256 liquidationPenalty,\\n        uint256 liquidationReward,\\n        uint256 insuranceFundReward\\n    );\\n\\n    event PositionChanged(\\n        address indexed trader,\\n        address indexed market,\\n        int256 base,\\n        int256 quote,\\n        int256 realizedPnl,\\n        uint256 protocolFee,\\n        uint256 baseBalancePerShareX96,\\n        uint256 sharePriceAfterX96\\n    );\\n\\n    event LimitOrderCreated(\\n        address indexed trader,\\n        address indexed market,\\n        bool isBid,\\n        uint256 base,\\n        uint256 priceX96,\\n        PerpdexStructs.LimitOrderType limitOrderType,\\n        uint256 orderId,\\n        uint256 baseTaker\\n    );\\n\\n    event LimitOrderCanceled(\\n        address indexed trader,\\n        address indexed market,\\n        address indexed liquidator,\\n        bool isBid,\\n        uint256 orderId\\n    );\\n\\n    event PartiallyExecuted(\\n        address indexed maker,\\n        address indexed market,\\n        bool isBid,\\n        uint256 basePartial,\\n        uint256 quotePartial,\\n        int256 partialRealizedPnl\\n    );\\n\\n    event LimitOrderSettled(\\n        address indexed trader,\\n        address indexed market,\\n        int256 base,\\n        int256 quote,\\n        int256 realizedPnl\\n    );\\n\\n    event MaxMarketsPerAccountChanged(uint8 value);\\n    event MaxOrdersPerAccountChanged(uint8 value);\\n    event ImRatioChanged(uint24 value);\\n    event MmRatioChanged(uint24 value);\\n    event LiquidationRewardConfigChanged(uint24 rewardRatio, uint16 smoothEmaTime);\\n    event ProtocolFeeRatioChanged(uint24 value);\\n    event MarketStatusChanged(address indexed market, PerpdexStructs.MarketStatus status);\\n\\n    function deposit(uint256 amount) external payable;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function transferProtocolFee(uint256 amount) external;\\n\\n    function addLiquidity(AddLiquidityParams calldata params)\\n        external\\n        returns (\\n            uint256 base,\\n            uint256 quote,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(RemoveLiquidityParams calldata params) external returns (uint256 base, uint256 quote);\\n\\n    function createLimitOrder(CreateLimitOrderParams calldata params)\\n        external\\n        returns (\\n            uint40 orderId,\\n            uint256 baseTaker,\\n            uint256 quoteTaker\\n        );\\n\\n    function cancelLimitOrder(CancelLimitOrderParams calldata params) external;\\n\\n    function trade(TradeParams calldata params) external returns (uint256 oppositeAmount);\\n\\n    // setters\\n\\n    function setMaxMarketsPerAccount(uint8 value) external;\\n\\n    function setImRatio(uint24 value) external;\\n\\n    function setMmRatio(uint24 value) external;\\n\\n    function setLiquidationRewardConfig(PerpdexStructs.LiquidationRewardConfig calldata value) external;\\n\\n    function setProtocolFeeRatio(uint24 value) external;\\n\\n    function setMarketStatus(address market, PerpdexStructs.MarketStatus status) external;\\n\\n    // dry run getters\\n\\n    function previewTrade(PreviewTradeParams calldata params) external view returns (uint256 oppositeAmount);\\n\\n    function maxTrade(MaxTradeParams calldata params) external view returns (uint256 amount);\\n\\n    // default getters\\n\\n    function accountInfos(address trader)\\n        external\\n        view\\n        returns (PerpdexStructs.VaultInfo memory, uint8 limitOrderCount);\\n\\n    function insuranceFundInfo() external view returns (uint256 balance, uint256 liquidationRewardBalance);\\n\\n    function protocolInfo() external view returns (uint256 protocolFee);\\n\\n    function settlementToken() external view returns (address);\\n\\n    function quoteDecimals() external view returns (uint8);\\n\\n    function maxMarketsPerAccount() external view returns (uint8);\\n\\n    function imRatio() external view returns (uint24);\\n\\n    function mmRatio() external view returns (uint24);\\n\\n    function liquidationRewardConfig() external view returns (uint24 rewardRatio, uint16 smoothEmaTime);\\n\\n    function protocolFeeRatio() external view returns (uint24);\\n\\n    function marketStatuses(address market) external view returns (PerpdexStructs.MarketStatus status);\\n\\n    // getters not covered by default getters\\n\\n    function getTakerInfo(address trader, address market) external view returns (PerpdexStructs.TakerInfo memory);\\n\\n    function getMakerInfo(address trader, address market) external view returns (PerpdexStructs.MakerInfo memory);\\n\\n    function getAccountMarkets(address trader) external view returns (address[] memory);\\n\\n    function getLimitOrderInfo(address trader, address market)\\n        external\\n        view\\n        returns (\\n            uint40 askRoot,\\n            uint40 bidRoot,\\n            uint256 totalBaseAsk,\\n            uint256 totalBaseBid\\n        );\\n\\n    function getLimitOrderIds(\\n        address trader,\\n        address market,\\n        bool isBid\\n    ) external view returns (uint40[] memory);\\n\\n    // convenient getters\\n\\n    function getTotalAccountValue(address trader) external view returns (int256);\\n\\n    function getPositionShare(address trader, address market) external view returns (int256);\\n\\n    function getPositionNotional(address trader, address market) external view returns (int256);\\n\\n    function getTotalPositionNotional(address trader) external view returns (uint256);\\n\\n    function getOpenPositionShare(address trader, address market) external view returns (uint256);\\n\\n    function getOpenPositionNotional(address trader, address market) external view returns (uint256);\\n\\n    function getTotalOpenPositionNotional(address trader) external view returns (uint256);\\n\\n    function hasEnoughMaintenanceMargin(address trader) external view returns (bool);\\n\\n    function hasEnoughInitialMargin(address trader) external view returns (bool);\\n\\n    function isLiquidationFree(address trader) external view returns (bool);\\n\\n    function getLimitOrderSummaries(\\n        address trader,\\n        address market,\\n        bool isBid\\n    ) external view returns (PerpdexStructs.LimitOrderSummary[] memory);\\n}\\n\",\"keccak256\":\"0x083fb5d3bcc8fd9564c7dee93ccbd4e4846a3294e882326507cc3e45445adb1f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IPerpdexMarketMinimum.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\ninterface IPerpdexMarketMinimum {\\n    struct SwapResponse {\\n        uint256 oppositeAmount;\\n        uint256 basePartial;\\n        uint256 quotePartial;\\n        uint40 partialOrderId;\\n    }\\n\\n    function swap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        bool isLiquidation\\n    ) external returns (SwapResponse memory response);\\n\\n    function addLiquidity(uint256 baseShare, uint256 quoteBalance)\\n        external\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function removeLiquidity(uint256 liquidity) external returns (uint256 baseShare, uint256 quoteBalance);\\n\\n    function createLimitOrder(\\n        bool isBid,\\n        uint256 baseShare,\\n        uint256 priceX96,\\n        bool ignorePostOnlyCheck\\n    ) external returns (uint40 orderId);\\n\\n    function cancelLimitOrder(bool isBid, uint40 orderId) external;\\n\\n    // getters\\n\\n    function previewSwap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        bool isLiquidation\\n    ) external view returns (uint256);\\n\\n    function maxSwap(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        bool isLiquidation\\n    ) external view returns (uint256 amount);\\n\\n    function maxSwapByPrice(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 priceX96\\n    ) external view returns (uint256 amount);\\n\\n    function exchange() external view returns (address);\\n\\n    function getShareMarkPriceX96() external view returns (uint256);\\n\\n    function getLiquidityValue(uint256 liquidity) external view returns (uint256 baseShare, uint256 quoteBalance);\\n\\n    function getLiquidityDeleveraged(\\n        uint256 liquidity,\\n        uint256 cumBasePerLiquidityX96,\\n        uint256 cumQuotePerLiquidityX96\\n    ) external view returns (int256, int256);\\n\\n    function getCumDeleveragedPerLiquidityX96() external view returns (uint256, uint256);\\n\\n    function baseBalancePerShareX96() external view returns (uint256);\\n\\n    function getLimitOrderInfo(bool isBid, uint40 orderId) external view returns (uint256 base, uint256 priceX96);\\n\\n    function getLimitOrderExecution(bool isBid, uint40 orderId)\\n        external\\n        view\\n        returns (\\n            uint48 executionId,\\n            uint256 executedBase,\\n            uint256 executedQuote\\n        );\\n}\\n\",\"keccak256\":\"0x19a14a525eb7c493cd35d59a2f951af7a86a8a336116af1159cfefdf6e7884a8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/AccountLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\n\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { IPerpdexMarketMinimum } from \\\"../interfaces/IPerpdexMarketMinimum.sol\\\";\\nimport { PerpdexStructs } from \\\"./PerpdexStructs.sol\\\";\\nimport { AccountPreviewLibrary } from \\\"./AccountPreviewLibrary.sol\\\";\\n\\n// https://help.ftx.com/hc/en-us/articles/360024780511-Complete-Futures-Specs\\nlibrary AccountLibrary {\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    struct CalcMarketResponse {\\n        int256 baseShare;\\n        uint256 baseSharePool;\\n        uint256 baseShareAsk;\\n        uint256 baseShareBid;\\n        int256 quoteBalance;\\n        uint256 quoteBalancePool;\\n        int256 positionNotional;\\n        uint256 openPositionShare;\\n        uint256 openPositionNotional;\\n        int256 positionValue;\\n        int256 realizedPnl;\\n    }\\n\\n    struct CalcTotalResponse {\\n        int256 accountValue;\\n        int256 collateralBalance;\\n        uint256 totalPositionNotional;\\n        uint256 totalOpenPositionNotional;\\n        bool isLiquidationFree;\\n    }\\n\\n    function addToTakerBalance(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address market,\\n        int256 baseShare,\\n        int256 quoteBalance,\\n        int256 quoteFee,\\n        uint8 maxMarketsPerAccount\\n    ) external returns (int256 realizedPnl) {\\n        (accountInfo.takerInfos[market], realizedPnl) = AccountPreviewLibrary.previewAddToTakerBalance(\\n            accountInfo.takerInfos[market],\\n            baseShare,\\n            quoteBalance,\\n            quoteFee\\n        );\\n        accountInfo.vaultInfo.collateralBalance += realizedPnl;\\n        updateMarkets(accountInfo, market, maxMarketsPerAccount);\\n    }\\n\\n    function updateMarkets(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address market,\\n        uint8 maxMarketsPerAccount\\n    ) public {\\n        bool enabled =\\n            accountInfo.takerInfos[market].baseBalanceShare != 0 ||\\n                accountInfo.makerInfos[market].liquidity != 0 ||\\n                accountInfo.limitOrderInfos[market].ask.root != 0 ||\\n                accountInfo.limitOrderInfos[market].bid.root != 0;\\n\\n        _setMarketEnabled(accountInfo, market, maxMarketsPerAccount, enabled);\\n    }\\n\\n    function closeMarket(PerpdexStructs.AccountInfo storage accountInfo, address market) external {\\n        require(_marketExists(accountInfo, market), \\\"AL_CM: market not exist\\\");\\n        CalcMarketResponse memory response = _calcMarket(accountInfo, market);\\n        accountInfo.vaultInfo.collateralBalance += response.positionValue + response.realizedPnl;\\n        _setMarketEnabled(accountInfo, market, 0, false);\\n    }\\n\\n    function getTakerInfo(PerpdexStructs.AccountInfo storage accountInfo, address market)\\n        external\\n        view\\n        returns (PerpdexStructs.TakerInfo memory takerInfo)\\n    {\\n        (AccountPreviewLibrary.Execution[] memory executions, , ) =\\n            AccountPreviewLibrary.getLimitOrderExecutions(accountInfo, market);\\n        (takerInfo, , , ) = AccountPreviewLibrary.previewSettleLimitOrders(accountInfo, market, executions);\\n    }\\n\\n    function getCollateralBalance(PerpdexStructs.AccountInfo storage accountInfo) external view returns (int256) {\\n        return _calcTotal(accountInfo).collateralBalance;\\n    }\\n\\n    function getTotalAccountValue(PerpdexStructs.AccountInfo storage accountInfo) external view returns (int256) {\\n        return _calcTotal(accountInfo).accountValue;\\n    }\\n\\n    function getPositionShare(PerpdexStructs.AccountInfo storage accountInfo, address market)\\n        external\\n        view\\n        returns (int256)\\n    {\\n        return _calcMarket(accountInfo, market).baseShare;\\n    }\\n\\n    function getPositionNotional(PerpdexStructs.AccountInfo storage accountInfo, address market)\\n        external\\n        view\\n        returns (int256)\\n    {\\n        return _calcMarket(accountInfo, market).positionNotional;\\n    }\\n\\n    function getTotalPositionNotional(PerpdexStructs.AccountInfo storage accountInfo) external view returns (uint256) {\\n        return _calcTotal(accountInfo).totalPositionNotional;\\n    }\\n\\n    function getOpenPositionShare(PerpdexStructs.AccountInfo storage accountInfo, address market)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _calcMarket(accountInfo, market).openPositionShare;\\n    }\\n\\n    function getOpenPositionNotional(PerpdexStructs.AccountInfo storage accountInfo, address market)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _calcMarket(accountInfo, market).openPositionNotional;\\n    }\\n\\n    function getTotalOpenPositionNotional(PerpdexStructs.AccountInfo storage accountInfo)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _calcTotal(accountInfo).totalOpenPositionNotional;\\n    }\\n\\n    function hasEnoughMaintenanceMargin(PerpdexStructs.AccountInfo storage accountInfo, uint24 mmRatio)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        CalcTotalResponse memory response = _calcTotal(accountInfo);\\n        return response.accountValue.mul(1e6) >= response.totalPositionNotional.mul(mmRatio).toInt256();\\n    }\\n\\n    // always true when hasEnoughMaintenanceMargin is true\\n    function hasEnoughInitialMargin(PerpdexStructs.AccountInfo storage accountInfo, uint24 imRatio)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        CalcTotalResponse memory response = _calcTotal(accountInfo);\\n        return\\n            response.accountValue.min(response.collateralBalance).mul(1e6) >=\\n            response.totalOpenPositionNotional.mul(imRatio).toInt256() ||\\n            response.isLiquidationFree;\\n    }\\n\\n    function isLiquidationFree(PerpdexStructs.AccountInfo storage accountInfo) external view returns (bool) {\\n        return _calcTotal(accountInfo).isLiquidationFree;\\n    }\\n\\n    function _setMarketEnabled(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address market,\\n        uint8 maxMarketsPerAccount,\\n        bool enabled\\n    ) private {\\n        address[] storage markets = accountInfo.markets;\\n        uint256 length = markets.length;\\n\\n        for (uint256 i = 0; i < length; ++i) {\\n            if (markets[i] == market) {\\n                if (!enabled) {\\n                    markets[i] = markets[length - 1];\\n                    markets.pop();\\n                }\\n                return;\\n            }\\n        }\\n\\n        if (!enabled) return;\\n\\n        require(length + 1 <= maxMarketsPerAccount, \\\"AL_UP: too many markets\\\");\\n        markets.push(market);\\n    }\\n\\n    function _calcMarket(PerpdexStructs.AccountInfo storage accountInfo, address market)\\n        private\\n        view\\n        returns (CalcMarketResponse memory response)\\n    {\\n        PerpdexStructs.MakerInfo storage makerInfo = accountInfo.makerInfos[market];\\n        PerpdexStructs.TakerInfo memory takerInfo;\\n        (AccountPreviewLibrary.Execution[] memory executions, , ) =\\n            AccountPreviewLibrary.getLimitOrderExecutions(accountInfo, market);\\n\\n        uint256 totalExecutedBaseAsk;\\n        uint256 totalExecutedBaseBid;\\n        (takerInfo, response.realizedPnl, totalExecutedBaseAsk, totalExecutedBaseBid) = AccountPreviewLibrary\\n            .previewSettleLimitOrders(accountInfo, market, executions);\\n\\n        response.baseShare = takerInfo.baseBalanceShare;\\n        response.quoteBalance = takerInfo.quoteBalance;\\n\\n        uint256 totalOrderBaseAsk;\\n        uint256 totalOrderBaseBid;\\n        if (makerInfo.liquidity != 0) {\\n            (uint256 poolBaseShare, uint256 poolQuoteBalance) =\\n                IPerpdexMarketMinimum(market).getLiquidityValue(makerInfo.liquidity);\\n            (int256 deleveragedBaseShare, int256 deleveragedQuoteBalance) =\\n                IPerpdexMarketMinimum(market).getLiquidityDeleveraged(\\n                    makerInfo.liquidity,\\n                    makerInfo.cumBaseSharePerLiquidityX96,\\n                    makerInfo.cumQuotePerLiquidityX96\\n                );\\n            response.baseSharePool = poolBaseShare;\\n            response.baseShare = response.baseShare.add(deleveragedBaseShare).add(response.baseSharePool.toInt256());\\n            response.quoteBalancePool = poolQuoteBalance;\\n            response.quoteBalance = response.quoteBalance.add(deleveragedQuoteBalance).add(\\n                response.quoteBalancePool.toInt256()\\n            );\\n            totalOrderBaseAsk = poolBaseShare;\\n            totalOrderBaseBid = poolBaseShare;\\n        }\\n\\n        PerpdexStructs.LimitOrderInfo storage limitOrderInfo = accountInfo.limitOrderInfos[market];\\n        response.baseShareAsk = limitOrderInfo.totalBaseAsk - totalExecutedBaseAsk;\\n        response.baseShareBid = limitOrderInfo.totalBaseBid - totalExecutedBaseBid;\\n        totalOrderBaseAsk += response.baseShareAsk;\\n        totalOrderBaseBid += response.baseShareBid;\\n        response.openPositionShare = Math.max(\\n            (response.baseShare - totalOrderBaseAsk.toInt256()).abs(),\\n            (response.baseShare + totalOrderBaseBid.toInt256()).abs()\\n        );\\n\\n        if (response.openPositionShare != 0) {\\n            uint256 sharePriceX96 = IPerpdexMarketMinimum(market).getShareMarkPriceX96();\\n            response.openPositionNotional = Math.mulDiv(response.openPositionShare, sharePriceX96, FixedPoint96.Q96);\\n\\n            if (response.baseShare != 0) {\\n                response.positionNotional = response.baseShare.mulDiv(sharePriceX96.toInt256(), FixedPoint96.Q96);\\n                response.positionValue = response.positionValue.add(response.positionNotional);\\n            }\\n        }\\n\\n        response.positionValue = response.positionValue.add(response.quoteBalance);\\n    }\\n\\n    function _calcTotal(PerpdexStructs.AccountInfo storage accountInfo)\\n        private\\n        view\\n        returns (CalcTotalResponse memory response)\\n    {\\n        response.collateralBalance = accountInfo.vaultInfo.collateralBalance;\\n        response.isLiquidationFree = true;\\n        int256 quoteBalanceWithoutPool;\\n\\n        address[] storage markets = accountInfo.markets;\\n        uint256 length = markets.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            address market = markets[i];\\n\\n            CalcMarketResponse memory marketResponse = _calcMarket(accountInfo, market);\\n\\n            response.accountValue = response.accountValue.add(marketResponse.positionValue);\\n            response.collateralBalance = response.collateralBalance.add(marketResponse.realizedPnl);\\n            response.totalPositionNotional = response.totalPositionNotional.add(marketResponse.positionNotional.abs());\\n            response.totalOpenPositionNotional = response.totalOpenPositionNotional.add(\\n                marketResponse.openPositionNotional\\n            );\\n\\n            response.isLiquidationFree =\\n                response.isLiquidationFree &&\\n                marketResponse.baseShare >= marketResponse.baseShareAsk.add(marketResponse.baseSharePool).toInt256() &&\\n                marketResponse.baseShareBid == 0;\\n            quoteBalanceWithoutPool = quoteBalanceWithoutPool.add(\\n                marketResponse.quoteBalance - marketResponse.quoteBalancePool.toInt256()\\n            );\\n        }\\n        response.accountValue += response.collateralBalance;\\n        response.isLiquidationFree =\\n            response.isLiquidationFree &&\\n            quoteBalanceWithoutPool + response.collateralBalance >= 0;\\n    }\\n\\n    function _marketExists(PerpdexStructs.AccountInfo storage accountInfo, address market) private view returns (bool) {\\n        address[] storage markets = accountInfo.markets;\\n        uint256 length = markets.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            if (markets[i] == market) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x65aa9dece7a1b052d96d174cf258e8c7148a301bb319072a71081366c264cab8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/AccountPreviewLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { IPerpdexMarketMinimum } from \\\"../interfaces/IPerpdexMarketMinimum.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { PerpdexStructs } from \\\"./PerpdexStructs.sol\\\";\\nimport {\\n    BokkyPooBahsRedBlackTreeLibrary as RBTreeLibrary\\n} from \\\"../../deps/BokkyPooBahsRedBlackTreeLibrary/contracts/BokkyPooBahsRedBlackTreeLibrary.sol\\\";\\n\\n// This is a technical library to avoid circular references between libraries\\nlibrary AccountPreviewLibrary {\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n    using RBTreeLibrary for RBTreeLibrary.Tree;\\n\\n    struct Execution {\\n        int256 executedBase;\\n        int256 executedQuote;\\n    }\\n\\n    function getLimitOrderExecutions(PerpdexStructs.AccountInfo storage accountInfo, address market)\\n        internal\\n        view\\n        returns (\\n            Execution[] memory executions,\\n            uint40 executedLastAskOrderId,\\n            uint40 executedLastBidOrderId\\n        )\\n    {\\n        PerpdexStructs.LimitOrderInfo storage limitOrderInfo = accountInfo.limitOrderInfos[market];\\n\\n        uint40 ask = limitOrderInfo.ask.first();\\n        uint40 bid = limitOrderInfo.bid.first();\\n        uint256 executionIdAsk;\\n        uint256 executedBaseAsk;\\n        uint256 executedQuoteAsk;\\n        uint256 executionIdBid;\\n        uint256 executedBaseBid;\\n        uint256 executedQuoteBid;\\n        if (ask != 0) {\\n            (executionIdAsk, executedBaseAsk, executedQuoteAsk) = IPerpdexMarketMinimum(market).getLimitOrderExecution(\\n                false,\\n                ask\\n            );\\n            if (executionIdAsk == 0) {\\n                ask = 0;\\n            }\\n        }\\n        if (bid != 0) {\\n            (executionIdBid, executedBaseBid, executedQuoteBid) = IPerpdexMarketMinimum(market).getLimitOrderExecution(\\n                true,\\n                bid\\n            );\\n            if (executionIdBid == 0) {\\n                bid = 0;\\n            }\\n        }\\n\\n        // Combine the ask and bid and process from the one with the smallest executionId.\\n        // Ask and bid are already sorted and can be processed like merge sort.\\n        Execution[256] memory executions2;\\n        uint256 executionCount;\\n        while (ask != 0 || bid != 0) {\\n            if (ask != 0 && (bid == 0 || executionIdAsk < executionIdBid)) {\\n                executions2[executionCount] = Execution({\\n                    executedBase: executedBaseAsk.neg256(),\\n                    executedQuote: executedQuoteAsk.toInt256()\\n                });\\n                ++executionCount;\\n\\n                uint40 nextAsk = limitOrderInfo.ask.next(ask);\\n                if (nextAsk != 0) {\\n                    (executionIdAsk, executedBaseAsk, executedQuoteAsk) = IPerpdexMarketMinimum(market)\\n                        .getLimitOrderExecution(false, nextAsk);\\n                }\\n                if (executionIdAsk == 0 || nextAsk == 0) {\\n                    executedLastAskOrderId = ask;\\n                    ask = 0;\\n                } else {\\n                    ask = nextAsk;\\n                }\\n            } else {\\n                executions2[executionCount] = Execution({\\n                    executedBase: executedBaseBid.toInt256(),\\n                    executedQuote: executedQuoteBid.neg256()\\n                });\\n                ++executionCount;\\n\\n                uint40 nextBid = limitOrderInfo.bid.next(bid);\\n                if (nextBid != 0) {\\n                    (executionIdBid, executedBaseBid, executedQuoteBid) = IPerpdexMarketMinimum(market)\\n                        .getLimitOrderExecution(true, nextBid);\\n                }\\n                if (executionIdBid == 0 || nextBid == 0) {\\n                    executedLastBidOrderId = bid;\\n                    bid = 0;\\n                } else {\\n                    bid = nextBid;\\n                }\\n            }\\n        }\\n\\n        executions = new Execution[](executionCount);\\n        for (uint256 i = 0; i < executionCount; i++) {\\n            executions[i] = executions2[i];\\n        }\\n    }\\n\\n    function previewSettleLimitOrders(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address market,\\n        Execution[] memory executions\\n    )\\n        internal\\n        view\\n        returns (\\n            PerpdexStructs.TakerInfo memory takerInfo,\\n            int256 realizedPnl,\\n            uint256 totalExecutedBaseAsk,\\n            uint256 totalExecutedBaseBid\\n        )\\n    {\\n        takerInfo = accountInfo.takerInfos[market];\\n\\n        uint256 length = executions.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            int256 realizedPnl2;\\n            (takerInfo, realizedPnl2) = previewAddToTakerBalance(\\n                takerInfo,\\n                executions[i].executedBase,\\n                executions[i].executedQuote,\\n                0\\n            );\\n            realizedPnl += realizedPnl2;\\n            if (executions[i].executedBase >= 0) {\\n                totalExecutedBaseBid += executions[i].executedBase.abs();\\n            } else {\\n                totalExecutedBaseAsk += executions[i].executedBase.abs();\\n            }\\n        }\\n    }\\n\\n    function previewAddToTakerBalance(\\n        PerpdexStructs.TakerInfo memory takerInfo,\\n        int256 baseShare,\\n        int256 quoteBalance,\\n        int256 quoteFee\\n    ) internal pure returns (PerpdexStructs.TakerInfo memory resultTakerInfo, int256 realizedPnl) {\\n        if (baseShare != 0 || quoteBalance != 0) {\\n            if (baseShare.sign() * quoteBalance.sign() != -1) {\\n                // ignore invalid input\\n                return (takerInfo, 0);\\n            }\\n            if (takerInfo.baseBalanceShare.sign() * baseShare.sign() == -1) {\\n                uint256 baseAbs = baseShare.abs();\\n                uint256 takerBaseAbs = takerInfo.baseBalanceShare.abs();\\n\\n                if (baseAbs <= takerBaseAbs) {\\n                    int256 reducedOpenNotional = takerInfo.quoteBalance.mulDiv(baseAbs.toInt256(), takerBaseAbs);\\n                    realizedPnl = quoteBalance.add(reducedOpenNotional);\\n                } else {\\n                    int256 closedPositionNotional = quoteBalance.mulDiv(takerBaseAbs.toInt256(), baseAbs);\\n                    realizedPnl = takerInfo.quoteBalance.add(closedPositionNotional);\\n                }\\n            }\\n        }\\n        realizedPnl = realizedPnl.add(quoteFee);\\n\\n        int256 newBaseBalanceShare = takerInfo.baseBalanceShare.add(baseShare);\\n        int256 newQuoteBalance = takerInfo.quoteBalance.add(quoteBalance).add(quoteFee).sub(realizedPnl);\\n        if (\\n            !((newBaseBalanceShare == 0 && newQuoteBalance == 0) ||\\n                newBaseBalanceShare.sign() * newQuoteBalance.sign() == -1)\\n        ) {\\n            // never occur. ignore\\n            return (takerInfo, 0);\\n        }\\n\\n        resultTakerInfo.baseBalanceShare = newBaseBalanceShare;\\n        resultTakerInfo.quoteBalance = newQuoteBalance;\\n    }\\n}\\n\",\"keccak256\":\"0x7e41927e84f7150f4e5f34cc8239aa6670ce514f6015664430f8e6f8c71bd6c7\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/MakerLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { IPerpdexMarketMinimum } from \\\"../interfaces/IPerpdexMarketMinimum.sol\\\";\\nimport { PerpdexStructs } from \\\"./PerpdexStructs.sol\\\";\\nimport { AccountLibrary } from \\\"./AccountLibrary.sol\\\";\\n\\nlibrary MakerLibrary {\\n    using PerpMath for int256;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    struct AddLiquidityParams {\\n        address market;\\n        uint256 base;\\n        uint256 quote;\\n        uint256 minBase;\\n        uint256 minQuote;\\n        uint24 imRatio;\\n        uint8 maxMarketsPerAccount;\\n    }\\n\\n    struct AddLiquidityResponse {\\n        uint256 base;\\n        uint256 quote;\\n        uint256 liquidity;\\n    }\\n\\n    struct RemoveLiquidityParams {\\n        address market;\\n        uint256 liquidity;\\n        uint256 minBase;\\n        uint256 minQuote;\\n        uint24 mmRatio;\\n        uint8 maxMarketsPerAccount;\\n        bool isSelf;\\n    }\\n\\n    struct RemoveLiquidityResponse {\\n        uint256 base;\\n        uint256 quote;\\n        int256 takerBase;\\n        int256 takerQuote;\\n        int256 realizedPnl;\\n        bool isLiquidation;\\n    }\\n\\n    function addLiquidity(PerpdexStructs.AccountInfo storage accountInfo, AddLiquidityParams memory params)\\n        external\\n        returns (AddLiquidityResponse memory response)\\n    {\\n        PerpdexStructs.MakerInfo storage makerInfo = accountInfo.makerInfos[params.market];\\n\\n        // retrieve before addLiquidity\\n        (uint256 cumBasePerLiquidityX96, uint256 cumQuotePerLiquidityX96) =\\n            IPerpdexMarketMinimum(params.market).getCumDeleveragedPerLiquidityX96();\\n\\n        (response.base, response.quote, response.liquidity) = IPerpdexMarketMinimum(params.market).addLiquidity(\\n            params.base,\\n            params.quote\\n        );\\n\\n        require(response.base >= params.minBase, \\\"ML_AL: too small output base\\\");\\n        require(response.quote >= params.minQuote, \\\"ML_AL: too small output quote\\\");\\n\\n        uint256 liquidityBefore = makerInfo.liquidity;\\n        makerInfo.liquidity = liquidityBefore.add(response.liquidity);\\n        {\\n            makerInfo.cumBaseSharePerLiquidityX96 = _blendCumPerLiquidity(\\n                liquidityBefore,\\n                response.liquidity,\\n                response.base,\\n                makerInfo.cumBaseSharePerLiquidityX96,\\n                cumBasePerLiquidityX96\\n            );\\n            makerInfo.cumQuotePerLiquidityX96 = _blendCumPerLiquidity(\\n                liquidityBefore,\\n                response.liquidity,\\n                response.quote,\\n                makerInfo.cumQuotePerLiquidityX96,\\n                cumQuotePerLiquidityX96\\n            );\\n        }\\n\\n        AccountLibrary.updateMarkets(accountInfo, params.market, params.maxMarketsPerAccount);\\n\\n        require(AccountLibrary.hasEnoughInitialMargin(accountInfo, params.imRatio), \\\"ML_AL: not enough im\\\");\\n    }\\n\\n    // difficult to calculate without error\\n    // underestimate the value to maintain the liquidation free condition\\n    // the error will be a burden to the insurance fund\\n    // the error is much smaller than the gas fee, so it is impossible to attack\\n    function _blendCumPerLiquidity(\\n        uint256 liquidityBefore,\\n        uint256 addedLiquidity,\\n        uint256 addedToken,\\n        uint256 cumBefore,\\n        uint256 cumAfter\\n    ) private pure returns (uint256) {\\n        uint256 liquidityAfter = liquidityBefore.add(addedLiquidity);\\n        cumAfter = cumAfter.add(Math.mulDiv(addedToken, FixedPoint96.Q96, addedLiquidity));\\n\\n        return\\n            Math.mulDiv(cumBefore, liquidityBefore, liquidityAfter).add(\\n                Math.mulDiv(cumAfter, addedLiquidity, liquidityAfter)\\n            );\\n    }\\n\\n    function removeLiquidity(PerpdexStructs.AccountInfo storage accountInfo, RemoveLiquidityParams memory params)\\n        external\\n        returns (RemoveLiquidityResponse memory response)\\n    {\\n        response.isLiquidation = !AccountLibrary.hasEnoughMaintenanceMargin(accountInfo, params.mmRatio);\\n\\n        if (!params.isSelf) {\\n            require(response.isLiquidation, \\\"ML_RL: enough mm\\\");\\n        }\\n\\n        uint256 shareMarkPriceBeforeX96;\\n        {\\n            PerpdexStructs.MakerInfo storage makerInfo = accountInfo.makerInfos[params.market];\\n            // retrieve before removeLiquidity\\n            (response.takerBase, response.takerQuote) = IPerpdexMarketMinimum(params.market).getLiquidityDeleveraged(\\n                params.liquidity,\\n                makerInfo.cumBaseSharePerLiquidityX96,\\n                makerInfo.cumQuotePerLiquidityX96\\n            );\\n\\n            shareMarkPriceBeforeX96 = IPerpdexMarketMinimum(params.market).getShareMarkPriceX96();\\n        }\\n\\n        {\\n            (response.base, response.quote) = IPerpdexMarketMinimum(params.market).removeLiquidity(params.liquidity);\\n\\n            require(response.base >= params.minBase, \\\"ML_RL: too small output base\\\");\\n            require(response.quote >= params.minQuote, \\\"ML_RL: too small output base\\\");\\n\\n            response.takerBase = response.takerBase.add(response.base.toInt256());\\n            response.takerQuote = response.takerQuote.add(response.quote.toInt256());\\n\\n            PerpdexStructs.MakerInfo storage makerInfo = accountInfo.makerInfos[params.market];\\n            makerInfo.liquidity = makerInfo.liquidity.sub(params.liquidity);\\n        }\\n\\n        {\\n            int256 takerQuoteCalculatedAtCurrentPrice =\\n                -response.takerBase.mulDiv(shareMarkPriceBeforeX96.toInt256(), FixedPoint96.Q96);\\n\\n            // AccountLibrary.updateMarkets called\\n            response.realizedPnl = AccountLibrary.addToTakerBalance(\\n                accountInfo,\\n                params.market,\\n                response.takerBase,\\n                takerQuoteCalculatedAtCurrentPrice,\\n                response.takerQuote.sub(takerQuoteCalculatedAtCurrentPrice),\\n                params.maxMarketsPerAccount\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6b5d8c0d4cda5511cb670df5d1c1aefd0d52d0e0820f64311cc7b351a72e6994\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/MakerOrderBookLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { IPerpdexMarketMinimum } from \\\"../interfaces/IPerpdexMarketMinimum.sol\\\";\\nimport { PerpdexStructs } from \\\"./PerpdexStructs.sol\\\";\\nimport { AccountLibrary } from \\\"./AccountLibrary.sol\\\";\\nimport { AccountPreviewLibrary } from \\\"./AccountPreviewLibrary.sol\\\";\\nimport {\\n    BokkyPooBahsRedBlackTreeLibrary as RBTreeLibrary\\n} from \\\"../../deps/BokkyPooBahsRedBlackTreeLibrary/contracts/BokkyPooBahsRedBlackTreeLibrary.sol\\\";\\n\\nlibrary MakerOrderBookLibrary {\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n    using RBTreeLibrary for RBTreeLibrary.Tree;\\n\\n    struct CreateLimitOrderParams {\\n        address market;\\n        uint256 base;\\n        uint256 priceX96;\\n        bool isBid;\\n        uint24 imRatio;\\n        uint8 maxMarketsPerAccount;\\n        uint8 maxOrdersPerAccount;\\n        bool ignorePostOnlyCheck;\\n    }\\n\\n    struct CancelLimitOrderParams {\\n        address market;\\n        uint40 orderId;\\n        bool isBid;\\n        uint24 mmRatio;\\n        bool isSelf;\\n        uint8 maxMarketsPerAccount;\\n    }\\n\\n    struct SettleLimitOrdersLocalVars {\\n        uint40 executedLastAskOrderId;\\n        uint40 executedLastBidOrderId;\\n        uint256 executionLength;\\n        uint256 totalExecutedBaseAsk;\\n        uint256 totalExecutedBaseBid;\\n        PerpdexStructs.TakerInfo prevTakerInfo;\\n    }\\n\\n    struct SettleLimitOrdersResponse {\\n        int256 base;\\n        int256 quote;\\n        int256 realizedPnl;\\n    }\\n\\n    function createLimitOrder(PerpdexStructs.AccountInfo storage accountInfo, CreateLimitOrderParams memory params)\\n        public\\n        returns (uint40 orderId)\\n    {\\n        require(accountInfo.limitOrderCount < params.maxOrdersPerAccount, \\\"MOBL_CLO: max order count\\\");\\n        orderId = IPerpdexMarketMinimum(params.market).createLimitOrder(\\n            params.isBid,\\n            params.base,\\n            params.priceX96,\\n            params.ignorePostOnlyCheck\\n        );\\n\\n        PerpdexStructs.LimitOrderInfo storage limitOrderInfo = accountInfo.limitOrderInfos[params.market];\\n        uint256 slot = _getSlot(limitOrderInfo);\\n        if (params.isBid) {\\n            limitOrderInfo.bid.insert(orderId, _makeUserData(params.priceX96), _lessThanBid, _aggregate, slot);\\n            limitOrderInfo.totalBaseBid += params.base;\\n        } else {\\n            limitOrderInfo.ask.insert(orderId, _makeUserData(params.priceX96), _lessThanAsk, _aggregate, slot);\\n            limitOrderInfo.totalBaseAsk += params.base;\\n        }\\n        accountInfo.limitOrderCount += 1;\\n\\n        AccountLibrary.updateMarkets(accountInfo, params.market, params.maxMarketsPerAccount);\\n\\n        require(AccountLibrary.hasEnoughInitialMargin(accountInfo, params.imRatio), \\\"MOBL_CLO: not enough im\\\");\\n    }\\n\\n    function cancelLimitOrder(PerpdexStructs.AccountInfo storage accountInfo, CancelLimitOrderParams memory params)\\n        public\\n        returns (bool isLiquidation)\\n    {\\n        isLiquidation = !AccountLibrary.hasEnoughMaintenanceMargin(accountInfo, params.mmRatio);\\n\\n        if (!params.isSelf) {\\n            require(isLiquidation, \\\"MOBL_CLO: enough mm\\\");\\n        }\\n\\n        (uint256 base, ) = IPerpdexMarketMinimum(params.market).getLimitOrderInfo(params.isBid, params.orderId);\\n        IPerpdexMarketMinimum(params.market).cancelLimitOrder(params.isBid, params.orderId);\\n\\n        PerpdexStructs.LimitOrderInfo storage limitOrderInfo = accountInfo.limitOrderInfos[params.market];\\n        if (params.isBid) {\\n            limitOrderInfo.totalBaseBid -= base;\\n            limitOrderInfo.bid.remove(params.orderId, _aggregate, 0);\\n        } else {\\n            limitOrderInfo.totalBaseAsk -= base;\\n            limitOrderInfo.ask.remove(params.orderId, _aggregate, 0);\\n        }\\n        accountInfo.limitOrderCount -= 1;\\n\\n        AccountLibrary.updateMarkets(accountInfo, params.market, params.maxMarketsPerAccount);\\n    }\\n\\n    function settleLimitOrders(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address market,\\n        uint8 maxMarketsPerAccount\\n    ) external returns (SettleLimitOrdersResponse memory response) {\\n        PerpdexStructs.LimitOrderInfo storage limitOrderInfo = accountInfo.limitOrderInfos[market];\\n        SettleLimitOrdersLocalVars memory vars;\\n        AccountPreviewLibrary.Execution[] memory executions;\\n        (executions, vars.executedLastAskOrderId, vars.executedLastBidOrderId) = AccountPreviewLibrary\\n            .getLimitOrderExecutions(accountInfo, market);\\n        vars.executionLength = executions.length;\\n        if (vars.executionLength == 0) return response;\\n\\n        {\\n            uint256 slot = _getSlot(limitOrderInfo);\\n            if (vars.executedLastAskOrderId != 0) {\\n                limitOrderInfo.ask.removeLeft(\\n                    vars.executedLastAskOrderId,\\n                    _lessThanAsk,\\n                    _aggregate,\\n                    _subtreeRemoved,\\n                    slot\\n                );\\n            }\\n            if (vars.executedLastBidOrderId != 0) {\\n                limitOrderInfo.bid.removeLeft(\\n                    vars.executedLastBidOrderId,\\n                    _lessThanBid,\\n                    _aggregate,\\n                    _subtreeRemoved,\\n                    slot\\n                );\\n            }\\n        }\\n\\n        vars.prevTakerInfo = accountInfo.takerInfos[market];\\n        (\\n            accountInfo.takerInfos[market],\\n            response.realizedPnl,\\n            vars.totalExecutedBaseAsk,\\n            vars.totalExecutedBaseBid\\n        ) = AccountPreviewLibrary.previewSettleLimitOrders(accountInfo, market, executions);\\n\\n        response.base = accountInfo.takerInfos[market].baseBalanceShare - vars.prevTakerInfo.baseBalanceShare;\\n        response.quote = accountInfo.takerInfos[market].quoteBalance - vars.prevTakerInfo.quoteBalance;\\n\\n        limitOrderInfo.totalBaseAsk -= vars.totalExecutedBaseAsk;\\n        limitOrderInfo.totalBaseBid -= vars.totalExecutedBaseBid;\\n        accountInfo.limitOrderCount -= vars.executionLength.toUint8();\\n        accountInfo.vaultInfo.collateralBalance += response.realizedPnl;\\n        AccountLibrary.updateMarkets(accountInfo, market, maxMarketsPerAccount);\\n    }\\n\\n    function processPartialExecution(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address market,\\n        bool isBaseToQuote,\\n        uint8 maxMarketsPerAccount,\\n        IPerpdexMarketMinimum.SwapResponse memory rawResponse\\n    ) external returns (int256 realizedPnl) {\\n        PerpdexStructs.LimitOrderInfo storage limitOrderInfo = accountInfo.limitOrderInfos[market];\\n        if (isBaseToQuote) {\\n            limitOrderInfo.totalBaseBid -= rawResponse.basePartial;\\n        } else {\\n            limitOrderInfo.totalBaseAsk -= rawResponse.basePartial;\\n        }\\n        realizedPnl = AccountLibrary.addToTakerBalance(\\n            accountInfo,\\n            market,\\n            isBaseToQuote ? rawResponse.basePartial.toInt256() : rawResponse.basePartial.neg256(),\\n            isBaseToQuote ? rawResponse.quotePartial.neg256() : rawResponse.quotePartial.toInt256(),\\n            0,\\n            maxMarketsPerAccount\\n        );\\n    }\\n\\n    function getLimitOrderIds(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address market,\\n        bool isBid\\n    ) public view returns (uint40[] memory result) {\\n        PerpdexStructs.LimitOrderInfo storage limitOrderInfo = accountInfo.limitOrderInfos[market];\\n        RBTreeLibrary.Tree storage tree = isBid ? limitOrderInfo.bid : limitOrderInfo.ask;\\n        uint40[256] memory orderIds;\\n        uint256 orderCount;\\n        uint40 key = tree.first();\\n        while (key != 0) {\\n            orderIds[orderCount] = key;\\n            ++orderCount;\\n            key = tree.next(key);\\n        }\\n        result = new uint40[](orderCount);\\n        for (uint256 i = 0; i < orderCount; ++i) {\\n            result[i] = orderIds[i];\\n        }\\n    }\\n\\n    function getLimitOrderSummaries(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address market,\\n        bool isBid\\n    ) external view returns (PerpdexStructs.LimitOrderSummary[] memory result) {\\n        uint40[] memory orderIds = getLimitOrderIds(accountInfo, market, isBid);\\n        uint256 length = orderIds.length;\\n        PerpdexStructs.LimitOrderSummary[256] memory summaries;\\n        uint256 summaryCount;\\n        {\\n            uint256 i;\\n            while (i < length) {\\n                (uint48 executionId, , ) = IPerpdexMarketMinimum(market).getLimitOrderExecution(isBid, orderIds[i]);\\n                if (executionId == 0) break;\\n                ++i;\\n            }\\n            while (i < length) {\\n                summaries[summaryCount].orderId = orderIds[i];\\n                (summaries[summaryCount].base, summaries[summaryCount].priceX96) = IPerpdexMarketMinimum(market)\\n                    .getLimitOrderInfo(isBid, orderIds[i]);\\n                ++summaryCount;\\n                ++i;\\n            }\\n        }\\n        result = new PerpdexStructs.LimitOrderSummary[](summaryCount);\\n        for (uint256 i = 0; i < summaryCount; ++i) {\\n            result[i] = summaries[i];\\n        }\\n    }\\n\\n    function _makeUserData(uint256 priceX96) private pure returns (uint128) {\\n        return priceX96.toUint128();\\n    }\\n\\n    function _userDataToPriceX96(uint128 userData) private pure returns (uint128) {\\n        return userData;\\n    }\\n\\n    function _lessThan(\\n        RBTreeLibrary.Tree storage tree,\\n        bool isBid,\\n        uint40 key0,\\n        uint40 key1\\n    ) private view returns (bool) {\\n        uint128 price0 = _userDataToPriceX96(tree.nodes[key0].userData);\\n        uint128 price1 = _userDataToPriceX96(tree.nodes[key1].userData);\\n        if (price0 == price1) {\\n            return key0 < key1; // time priority\\n        }\\n        // price priority\\n        return isBid ? price0 > price1 : price0 < price1;\\n    }\\n\\n    function _lessThanAsk(\\n        uint40 key0,\\n        uint40 key1,\\n        uint256 slot\\n    ) private view returns (bool) {\\n        PerpdexStructs.LimitOrderInfo storage info = _getLimitOrderInfoFromSlot(slot);\\n        return _lessThan(info.ask, false, key0, key1);\\n    }\\n\\n    function _lessThanBid(\\n        uint40 key0,\\n        uint40 key1,\\n        uint256 slot\\n    ) private view returns (bool) {\\n        PerpdexStructs.LimitOrderInfo storage info = _getLimitOrderInfoFromSlot(slot);\\n        return _lessThan(info.bid, true, key0, key1);\\n    }\\n\\n    function _aggregate(uint40, uint256) private pure returns (bool) {\\n        return true;\\n    }\\n\\n    function _subtreeRemoved(uint40, uint256) private pure {}\\n\\n    function _getSlot(PerpdexStructs.LimitOrderInfo storage d) private pure returns (uint256 slot) {\\n        assembly {\\n            slot := d.slot\\n        }\\n    }\\n\\n    function _getLimitOrderInfoFromSlot(uint256 slot) private pure returns (PerpdexStructs.LimitOrderInfo storage d) {\\n        assembly {\\n            d.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55c7ff1530f70acfef5ba07df72299c20cd8cd7bc52b6f6ac51707ea3db37edc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PerpMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\n\\nlibrary PerpMath {\\n    using SafeCast for int256;\\n    using SignedSafeMath for int256;\\n    using SafeMath for uint256;\\n\\n    function formatSqrtPriceX96ToPriceX96(uint160 sqrtPriceX96) internal pure returns (uint256) {\\n        return Math.mulDiv(sqrtPriceX96, sqrtPriceX96, FixedPoint96.Q96);\\n    }\\n\\n    function formatX10_18ToX96(uint256 valueX10_18) internal pure returns (uint256) {\\n        return Math.mulDiv(valueX10_18, FixedPoint96.Q96, 1 ether);\\n    }\\n\\n    function formatX96ToX10_18(uint256 valueX96) internal pure returns (uint256) {\\n        return Math.mulDiv(valueX96, 1 ether, FixedPoint96.Q96);\\n    }\\n\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function abs(int256 value) internal pure returns (uint256) {\\n        return value >= 0 ? value.toUint256() : neg256(value).toUint256();\\n    }\\n\\n    function neg256(int256 a) internal pure returns (int256) {\\n        require(a > -2**255, \\\"PerpMath: inversion overflow\\\");\\n        return -a;\\n    }\\n\\n    function neg256(uint256 a) internal pure returns (int256) {\\n        return -SafeCast.toInt256(a);\\n    }\\n\\n    function divBy10_18(int256 value) internal pure returns (int256) {\\n        // no overflow here\\n        return value / (1 ether);\\n    }\\n\\n    function divBy10_18(uint256 value) internal pure returns (uint256) {\\n        // no overflow here\\n        return value / (1 ether);\\n    }\\n\\n    function subRatio(uint24 a, uint24 b) internal pure returns (uint24) {\\n        require(b <= a, \\\"PerpMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    function mulRatio(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return Math.mulDiv(value, ratio, 1e6);\\n    }\\n\\n    function mulRatioRoundingUp(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return Math.mulDiv(value, ratio, 1e6, Math.Rounding.Up);\\n    }\\n\\n    function divRatio(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return Math.mulDiv(value, 1e6, ratio);\\n    }\\n\\n    function divRatioRoundingUp(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return Math.mulDiv(value, 1e6, ratio, Math.Rounding.Up);\\n    }\\n\\n    /// @param denominator cannot be 0 and is checked in Math.mulDiv()\\n    function mulDiv(\\n        int256 a,\\n        int256 b,\\n        uint256 denominator\\n    ) internal pure returns (int256 result) {\\n        uint256 unsignedA = a < 0 ? uint256(neg256(a)) : uint256(a);\\n        uint256 unsignedB = b < 0 ? uint256(neg256(b)) : uint256(b);\\n        bool negative = ((a < 0 && b > 0) || (a > 0 && b < 0)) ? true : false;\\n\\n        uint256 unsignedResult = Math.mulDiv(unsignedA, unsignedB, denominator);\\n\\n        result = negative ? neg256(unsignedResult) : SafeCast.toInt256(unsignedResult);\\n\\n        return result;\\n    }\\n\\n    function sign(int256 value) internal pure returns (int256) {\\n        return value > 0 ? int256(1) : (value < 0 ? int256(-1) : int256(0));\\n    }\\n}\\n\",\"keccak256\":\"0x8fb9c73930e8037da0e08fd3e3972821749739bd5ffe8fd1980dd84c3d40043e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PerpdexStructs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\n\\nimport {\\n    BokkyPooBahsRedBlackTreeLibrary as RBTreeLibrary\\n} from \\\"../../deps/BokkyPooBahsRedBlackTreeLibrary/contracts/BokkyPooBahsRedBlackTreeLibrary.sol\\\";\\n\\nlibrary PerpdexStructs {\\n    enum LimitOrderType { Normal, PostOnly, Ioc }\\n    enum MarketStatus { NotAllowed, Open, Closed }\\n\\n    struct TakerInfo {\\n        int256 baseBalanceShare;\\n        int256 quoteBalance;\\n    }\\n\\n    struct MakerInfo {\\n        uint256 liquidity;\\n        uint256 cumBaseSharePerLiquidityX96;\\n        uint256 cumQuotePerLiquidityX96;\\n    }\\n\\n    struct LimitOrderInfo {\\n        RBTreeLibrary.Tree ask;\\n        RBTreeLibrary.Tree bid;\\n        uint256 totalBaseAsk;\\n        uint256 totalBaseBid;\\n    }\\n\\n    struct VaultInfo {\\n        int256 collateralBalance;\\n    }\\n\\n    struct AccountInfo {\\n        // market\\n        mapping(address => TakerInfo) takerInfos;\\n        // market\\n        mapping(address => MakerInfo) makerInfos;\\n        // market\\n        mapping(address => LimitOrderInfo) limitOrderInfos;\\n        VaultInfo vaultInfo;\\n        address[] markets;\\n        uint8 limitOrderCount;\\n    }\\n\\n    struct InsuranceFundInfo {\\n        uint256 balance; // for easy calculation\\n        uint256 liquidationRewardBalance;\\n    }\\n\\n    struct ProtocolInfo {\\n        uint256 protocolFee;\\n    }\\n\\n    struct LiquidationRewardConfig {\\n        uint24 rewardRatio;\\n        uint16 smoothEmaTime;\\n    }\\n\\n    struct LimitOrderSummary {\\n        uint40 orderId;\\n        uint256 base;\\n        uint256 priceX96;\\n    }\\n}\\n\",\"keccak256\":\"0xa364101dce6ddc02cb47a7f9bb510d4448d47e7bf52770a17a3f970bac3ba6e6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/TakerLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { IPerpdexMarketMinimum } from \\\"../interfaces/IPerpdexMarketMinimum.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { PerpdexStructs } from \\\"./PerpdexStructs.sol\\\";\\nimport { AccountLibrary } from \\\"./AccountLibrary.sol\\\";\\nimport { AccountPreviewLibrary } from \\\"./AccountPreviewLibrary.sol\\\";\\n\\nlibrary TakerLibrary {\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    struct TradeParams {\\n        address market;\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n        uint256 amount;\\n        uint256 oppositeAmountBound;\\n        uint24 mmRatio;\\n        uint24 imRatio;\\n        uint8 maxMarketsPerAccount;\\n        uint24 protocolFeeRatio;\\n        bool isSelf;\\n        PerpdexStructs.LiquidationRewardConfig liquidationRewardConfig;\\n    }\\n\\n    struct PreviewTradeParams {\\n        address market;\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n        uint256 amount;\\n        uint256 oppositeAmountBound;\\n        uint24 mmRatio;\\n        uint24 protocolFeeRatio;\\n        bool isSelf;\\n    }\\n\\n    struct TradeResponse {\\n        int256 base;\\n        int256 quote;\\n        int256 realizedPnl;\\n        uint256 protocolFee;\\n        uint256 liquidationPenalty;\\n        uint256 liquidationReward;\\n        uint256 insuranceFundReward;\\n        bool isLiquidation;\\n        IPerpdexMarketMinimum.SwapResponse rawResponse;\\n    }\\n\\n    // to avoid stack too deep\\n    struct DoSwapParams {\\n        address market;\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n        uint256 amount;\\n        uint256 oppositeAmountBound;\\n        uint8 maxMarketsPerAccount;\\n        uint24 protocolFeeRatio;\\n        bool isLiquidation;\\n    }\\n\\n    function trade(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        PerpdexStructs.VaultInfo storage liquidatorVaultInfo,\\n        PerpdexStructs.InsuranceFundInfo storage insuranceFundInfo,\\n        PerpdexStructs.ProtocolInfo storage protocolInfo,\\n        TradeParams memory params\\n    ) internal returns (TradeResponse memory response) {\\n        response.isLiquidation = _validateTrade(accountInfo, params.market, params.isSelf, params.mmRatio, false);\\n\\n        int256 takerBaseBefore = accountInfo.takerInfos[params.market].baseBalanceShare;\\n\\n        (response.base, response.quote, response.realizedPnl, response.protocolFee, response.rawResponse) = _doSwap(\\n            accountInfo,\\n            protocolInfo,\\n            DoSwapParams({\\n                market: params.market,\\n                isBaseToQuote: params.isBaseToQuote,\\n                isExactInput: params.isExactInput,\\n                amount: params.amount,\\n                oppositeAmountBound: params.oppositeAmountBound,\\n                maxMarketsPerAccount: params.maxMarketsPerAccount,\\n                protocolFeeRatio: params.protocolFeeRatio,\\n                isLiquidation: response.isLiquidation\\n            })\\n        );\\n\\n        bool isOpen = (takerBaseBefore.add(response.base)).sign() * response.base.sign() > 0;\\n\\n        if (response.isLiquidation) {\\n            require(!isOpen, \\\"TL_OP: no open when liquidation\\\");\\n\\n            (\\n                response.liquidationPenalty,\\n                response.liquidationReward,\\n                response.insuranceFundReward\\n            ) = processLiquidationReward(\\n                accountInfo.vaultInfo,\\n                liquidatorVaultInfo,\\n                insuranceFundInfo,\\n                params.mmRatio,\\n                params.liquidationRewardConfig,\\n                response.quote.abs()\\n            );\\n        }\\n\\n        if (isOpen) {\\n            require(AccountLibrary.hasEnoughInitialMargin(accountInfo, params.imRatio), \\\"TL_OP: not enough im\\\");\\n        }\\n    }\\n\\n    // Even if trade reverts, it may not revert.\\n    // Attempting to match reverts makes the implementation too complicated\\n    // ignored checks when liquidation:\\n    // - initial margin\\n    // - close only\\n    // - maker and limit order existence\\n    function previewTrade(PerpdexStructs.AccountInfo storage accountInfo, PreviewTradeParams memory params)\\n        internal\\n        view\\n        returns (uint256 oppositeAmount)\\n    {\\n        bool isLiquidation = _validateTrade(accountInfo, params.market, params.isSelf, params.mmRatio, true);\\n\\n        oppositeAmount;\\n        if (params.protocolFeeRatio == 0) {\\n            oppositeAmount = IPerpdexMarketMinimum(params.market).previewSwap(\\n                params.isBaseToQuote,\\n                params.isExactInput,\\n                params.amount,\\n                isLiquidation\\n            );\\n        } else {\\n            (oppositeAmount, ) = previewSwapWithProtocolFee(\\n                params.market,\\n                params.isBaseToQuote,\\n                params.isExactInput,\\n                params.amount,\\n                params.protocolFeeRatio,\\n                isLiquidation\\n            );\\n        }\\n        validateSlippage(params.isExactInput, oppositeAmount, params.oppositeAmountBound);\\n    }\\n\\n    // ignored checks when liquidation:\\n    // - initial margin\\n    // - close only\\n    // - maker and limit order existence\\n    function maxTrade(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address market,\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint24 mmRatio,\\n        uint24 protocolFeeRatio,\\n        bool isSelf\\n    ) internal view returns (uint256 amount) {\\n        bool isLiquidation = !AccountLibrary.hasEnoughMaintenanceMargin(accountInfo, mmRatio);\\n\\n        if (!isSelf && !isLiquidation) {\\n            return 0;\\n        }\\n\\n        if (protocolFeeRatio == 0) {\\n            amount = IPerpdexMarketMinimum(market).maxSwap(isBaseToQuote, isExactInput, isLiquidation);\\n        } else {\\n            amount = maxSwapWithProtocolFee(market, isBaseToQuote, isExactInput, protocolFeeRatio, isLiquidation);\\n        }\\n    }\\n\\n    function _doSwap(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        PerpdexStructs.ProtocolInfo storage protocolInfo,\\n        DoSwapParams memory params\\n    )\\n        private\\n        returns (\\n            int256 base,\\n            int256 quote,\\n            int256 realizedPnl,\\n            uint256 protocolFee,\\n            IPerpdexMarketMinimum.SwapResponse memory rawResponse\\n        )\\n    {\\n        uint256 oppositeAmount;\\n\\n        if (params.protocolFeeRatio > 0) {\\n            (oppositeAmount, protocolFee, rawResponse) = swapWithProtocolFee(\\n                protocolInfo,\\n                params.market,\\n                params.isBaseToQuote,\\n                params.isExactInput,\\n                params.amount,\\n                params.protocolFeeRatio,\\n                params.isLiquidation\\n            );\\n        } else {\\n            rawResponse = IPerpdexMarketMinimum(params.market).swap(\\n                params.isBaseToQuote,\\n                params.isExactInput,\\n                params.amount,\\n                params.isLiquidation\\n            );\\n            oppositeAmount = rawResponse.oppositeAmount;\\n        }\\n        validateSlippage(params.isExactInput, oppositeAmount, params.oppositeAmountBound);\\n\\n        (base, quote) = swapResponseToBaseQuote(\\n            params.isBaseToQuote,\\n            params.isExactInput,\\n            params.amount,\\n            oppositeAmount\\n        );\\n        realizedPnl = AccountLibrary.addToTakerBalance(\\n            accountInfo,\\n            params.market,\\n            base,\\n            quote,\\n            0,\\n            params.maxMarketsPerAccount\\n        );\\n    }\\n\\n    function swapWithProtocolFee(\\n        PerpdexStructs.ProtocolInfo storage protocolInfo,\\n        address market,\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        uint24 protocolFeeRatio,\\n        bool isLiquidation\\n    )\\n        internal\\n        returns (\\n            uint256 oppositeAmount,\\n            uint256 protocolFee,\\n            IPerpdexMarketMinimum.SwapResponse memory rawResponse\\n        )\\n    {\\n        if (isExactInput) {\\n            if (isBaseToQuote) {\\n                rawResponse = IPerpdexMarketMinimum(market).swap(isBaseToQuote, isExactInput, amount, isLiquidation);\\n                oppositeAmount = rawResponse.oppositeAmount;\\n                protocolFee = oppositeAmount.mulRatio(protocolFeeRatio);\\n                oppositeAmount = oppositeAmount.sub(protocolFee);\\n            } else {\\n                protocolFee = amount.mulRatio(protocolFeeRatio);\\n                rawResponse = IPerpdexMarketMinimum(market).swap(\\n                    isBaseToQuote,\\n                    isExactInput,\\n                    amount.sub(protocolFee),\\n                    isLiquidation\\n                );\\n                oppositeAmount = rawResponse.oppositeAmount;\\n            }\\n        } else {\\n            if (isBaseToQuote) {\\n                protocolFee = amount.divRatio(PerpMath.subRatio(1e6, protocolFeeRatio)).sub(amount);\\n                rawResponse = IPerpdexMarketMinimum(market).swap(\\n                    isBaseToQuote,\\n                    isExactInput,\\n                    amount.add(protocolFee),\\n                    isLiquidation\\n                );\\n                oppositeAmount = rawResponse.oppositeAmount;\\n            } else {\\n                rawResponse = IPerpdexMarketMinimum(market).swap(isBaseToQuote, isExactInput, amount, isLiquidation);\\n                uint256 oppositeAmountWithoutFee = rawResponse.oppositeAmount;\\n                oppositeAmount = oppositeAmountWithoutFee.divRatio(PerpMath.subRatio(1e6, protocolFeeRatio));\\n                protocolFee = oppositeAmount.sub(oppositeAmountWithoutFee);\\n            }\\n        }\\n\\n        protocolInfo.protocolFee = protocolInfo.protocolFee.add(protocolFee);\\n    }\\n\\n    function processLiquidationReward(\\n        PerpdexStructs.VaultInfo storage vaultInfo,\\n        PerpdexStructs.VaultInfo storage liquidatorVaultInfo,\\n        PerpdexStructs.InsuranceFundInfo storage insuranceFundInfo,\\n        uint24 mmRatio,\\n        PerpdexStructs.LiquidationRewardConfig memory liquidationRewardConfig,\\n        uint256 exchangedQuote\\n    )\\n        internal\\n        returns (\\n            uint256 penalty,\\n            uint256 liquidationReward,\\n            uint256 insuranceFundReward\\n        )\\n    {\\n        penalty = exchangedQuote.mulRatio(mmRatio);\\n        liquidationReward = penalty.mulRatio(liquidationRewardConfig.rewardRatio);\\n        insuranceFundReward = penalty.sub(liquidationReward);\\n\\n        (insuranceFundInfo.liquidationRewardBalance, liquidationReward) = _smoothLiquidationReward(\\n            insuranceFundInfo.liquidationRewardBalance,\\n            liquidationReward,\\n            liquidationRewardConfig.smoothEmaTime\\n        );\\n\\n        vaultInfo.collateralBalance -= penalty.toInt256();\\n        liquidatorVaultInfo.collateralBalance += liquidationReward.toInt256();\\n        insuranceFundInfo.balance += insuranceFundReward;\\n    }\\n\\n    function _smoothLiquidationReward(\\n        uint256 rewardBalance,\\n        uint256 reward,\\n        uint24 emaTime\\n    ) private pure returns (uint256 outputRewardBalance, uint256 outputReward) {\\n        rewardBalance = rewardBalance.add(reward);\\n        outputReward = rewardBalance.div(emaTime);\\n        outputRewardBalance = rewardBalance.sub(outputReward);\\n    }\\n\\n    function previewSwapWithProtocolFee(\\n        address market,\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        uint24 protocolFeeRatio,\\n        bool isLiquidation\\n    ) internal view returns (uint256 oppositeAmount, uint256 protocolFee) {\\n        if (isExactInput) {\\n            if (isBaseToQuote) {\\n                oppositeAmount = IPerpdexMarketMinimum(market).previewSwap(\\n                    isBaseToQuote,\\n                    isExactInput,\\n                    amount,\\n                    isLiquidation\\n                );\\n                protocolFee = oppositeAmount.mulRatio(protocolFeeRatio);\\n                oppositeAmount = oppositeAmount.sub(protocolFee);\\n            } else {\\n                protocolFee = amount.mulRatio(protocolFeeRatio);\\n                oppositeAmount = IPerpdexMarketMinimum(market).previewSwap(\\n                    isBaseToQuote,\\n                    isExactInput,\\n                    amount.sub(protocolFee),\\n                    isLiquidation\\n                );\\n            }\\n        } else {\\n            if (isBaseToQuote) {\\n                protocolFee = amount.divRatio(PerpMath.subRatio(1e6, protocolFeeRatio)).sub(amount);\\n                oppositeAmount = IPerpdexMarketMinimum(market).previewSwap(\\n                    isBaseToQuote,\\n                    isExactInput,\\n                    amount.add(protocolFee),\\n                    isLiquidation\\n                );\\n            } else {\\n                uint256 oppositeAmountWithoutFee =\\n                    IPerpdexMarketMinimum(market).previewSwap(isBaseToQuote, isExactInput, amount, isLiquidation);\\n                oppositeAmount = oppositeAmountWithoutFee.divRatio(PerpMath.subRatio(1e6, protocolFeeRatio));\\n                protocolFee = oppositeAmount.sub(oppositeAmountWithoutFee);\\n            }\\n        }\\n    }\\n\\n    function maxSwapWithProtocolFee(\\n        address market,\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint24 protocolFeeRatio,\\n        bool isLiquidation\\n    ) internal view returns (uint256 amount) {\\n        amount = IPerpdexMarketMinimum(market).maxSwap(isBaseToQuote, isExactInput, isLiquidation);\\n\\n        if (isExactInput) {\\n            if (isBaseToQuote) {} else {\\n                amount = amount.divRatio(PerpMath.subRatio(1e6, protocolFeeRatio));\\n            }\\n        } else {\\n            if (isBaseToQuote) {\\n                amount = amount.mulRatio(PerpMath.subRatio(1e6, protocolFeeRatio));\\n            } else {}\\n        }\\n    }\\n\\n    function validateSlippage(\\n        bool isExactInput,\\n        uint256 oppositeAmount,\\n        uint256 oppositeAmountBound\\n    ) internal pure {\\n        if (isExactInput) {\\n            require(oppositeAmount >= oppositeAmountBound, \\\"TL_VS: too small opposite amount\\\");\\n        } else {\\n            require(oppositeAmount <= oppositeAmountBound, \\\"TL_VS: too large opposite amount\\\");\\n        }\\n    }\\n\\n    function swapResponseToBaseQuote(\\n        bool isBaseToQuote,\\n        bool isExactInput,\\n        uint256 amount,\\n        uint256 oppositeAmount\\n    ) internal pure returns (int256, int256) {\\n        if (isExactInput) {\\n            if (isBaseToQuote) {\\n                return (amount.neg256(), oppositeAmount.toInt256());\\n            } else {\\n                return (oppositeAmount.toInt256(), amount.neg256());\\n            }\\n        } else {\\n            if (isBaseToQuote) {\\n                return (oppositeAmount.neg256(), amount.toInt256());\\n            } else {\\n                return (amount.toInt256(), oppositeAmount.neg256());\\n            }\\n        }\\n    }\\n\\n    function _validateTrade(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        address market,\\n        bool isSelf,\\n        uint24 mmRatio,\\n        bool ignoreMakerOrderBookExistence\\n    ) private view returns (bool isLiquidation) {\\n        isLiquidation = !AccountLibrary.hasEnoughMaintenanceMargin(accountInfo, mmRatio);\\n\\n        if (!isSelf) {\\n            require(isLiquidation, \\\"TL_VT: enough mm\\\");\\n        }\\n\\n        if (!ignoreMakerOrderBookExistence && isLiquidation) {\\n            require(accountInfo.makerInfos[market].liquidity == 0, \\\"TL_VT: no maker when liquidation\\\");\\n            require(accountInfo.limitOrderInfos[market].ask.root == 0, \\\"TL_VT: no ask when liquidation\\\");\\n            require(accountInfo.limitOrderInfos[market].bid.root == 0, \\\"TL_VT: no bid when liquidation\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7eb262685a88027e61e76371db2e98e2f39c6617ca6d2398175661965239e06\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/VaultLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { IERC20Metadata } from \\\"../interfaces/IERC20Metadata.sol\\\";\\nimport { AccountLibrary } from \\\"./AccountLibrary.sol\\\";\\nimport { PerpdexStructs } from \\\"./PerpdexStructs.sol\\\";\\n\\nlibrary VaultLibrary {\\n    using PerpMath for int256;\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    struct DepositParams {\\n        address settlementToken;\\n        uint256 amount;\\n        address from;\\n    }\\n\\n    struct WithdrawParams {\\n        address settlementToken;\\n        uint256 amount;\\n        address payable to;\\n        uint24 imRatio;\\n    }\\n\\n    function compensate(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        PerpdexStructs.InsuranceFundInfo storage insuranceFundInfo\\n    ) external returns (uint256 compensation) {\\n        if (accountInfo.markets.length != 0) return 0;\\n        if (accountInfo.vaultInfo.collateralBalance >= 0) return 0;\\n        compensation = Math.min((-accountInfo.vaultInfo.collateralBalance).toUint256(), insuranceFundInfo.balance);\\n        accountInfo.vaultInfo.collateralBalance += compensation.toInt256();\\n        insuranceFundInfo.balance -= compensation;\\n    }\\n\\n    function deposit(PerpdexStructs.AccountInfo storage accountInfo, DepositParams memory params) external {\\n        require(params.amount > 0, \\\"VL_D: zero amount\\\");\\n        _transferTokenIn(params.settlementToken, params.from, params.amount);\\n        uint256 collateralAmount =\\n            _toCollateralAmount(params.amount, IERC20Metadata(params.settlementToken).decimals());\\n        accountInfo.vaultInfo.collateralBalance += collateralAmount.toInt256();\\n    }\\n\\n    function depositEth(PerpdexStructs.AccountInfo storage accountInfo, uint256 amount) external {\\n        require(amount > 0, \\\"VL_DE: zero amount\\\");\\n        accountInfo.vaultInfo.collateralBalance += amount.toInt256();\\n    }\\n\\n    function withdraw(PerpdexStructs.AccountInfo storage accountInfo, WithdrawParams memory params) external {\\n        require(params.amount > 0, \\\"VL_W: zero amount\\\");\\n\\n        uint256 collateralAmount =\\n            params.settlementToken == address(0)\\n                ? params.amount\\n                : _toCollateralAmount(params.amount, IERC20Metadata(params.settlementToken).decimals());\\n        accountInfo.vaultInfo.collateralBalance -= collateralAmount.toInt256();\\n\\n        require(AccountLibrary.hasEnoughInitialMargin(accountInfo, params.imRatio), \\\"VL_W: not enough initial margin\\\");\\n\\n        if (params.settlementToken == address(0)) {\\n            params.to.transfer(params.amount);\\n        } else {\\n            SafeERC20.safeTransfer(IERC20(params.settlementToken), params.to, params.amount);\\n        }\\n    }\\n\\n    function transferProtocolFee(\\n        PerpdexStructs.AccountInfo storage accountInfo,\\n        PerpdexStructs.ProtocolInfo storage protocolInfo,\\n        uint256 amount\\n    ) external {\\n        accountInfo.vaultInfo.collateralBalance += amount.toInt256();\\n        protocolInfo.protocolFee -= amount;\\n    }\\n\\n    function _transferTokenIn(\\n        address token,\\n        address from,\\n        uint256 amount\\n    ) private {\\n        // check for deflationary tokens by assuring balances before and after transferring to be the same\\n        uint256 balanceBefore = IERC20Metadata(token).balanceOf(address(this));\\n        SafeERC20.safeTransferFrom(IERC20(token), from, address(this), amount);\\n        require(\\n            (IERC20Metadata(token).balanceOf(address(this)).sub(balanceBefore)) == amount,\\n            \\\"VL_TTI: inconsistent balance\\\"\\n        );\\n    }\\n\\n    function _toCollateralAmount(uint256 amount, uint8 tokenDecimals) private pure returns (uint256) {\\n        int256 decimalsDiff = int256(18).sub(uint256(tokenDecimals).toInt256());\\n        uint256 decimalsDiffAbs = decimalsDiff.abs();\\n        require(decimalsDiffAbs <= 77, \\\"VL_TCA: too large decimals diff\\\");\\n        return decimalsDiff >= 0 ? amount.mul(10**decimalsDiffAbs) : amount.div(10**decimalsDiffAbs);\\n    }\\n}\\n\",\"keccak256\":\"0x138f71b6a6b5a9eb9e2779c17179e906192faf2eefab62212b1f33c5437ce187\",\"license\":\"GPL-3.0-or-later\"},\"contracts/test/DebugPerpdexExchange.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport { PerpdexExchange } from \\\"../PerpdexExchange.sol\\\";\\n\\ncontract DebugPerpdexExchange is PerpdexExchange {\\n    uint256 private constant _RINKEBY_CHAIN_ID = 4;\\n    uint256 private constant _MUMBAI_CHAIN_ID = 80001;\\n    uint256 private constant _SHIBUYA_CHAIN_ID = 81;\\n    // https://v2-docs.zksync.io/dev/zksync-v2/temp-limits.html#temporarily-simulated-by-constant-values\\n    uint256 private constant _ZKSYNC2_TESTNET_CHAIN_ID = 0;\\n    uint256 private constant _ARBITRUM_RINKEBY_CHAIN_ID = 421611;\\n    uint256 private constant _OPTIMISM_KOVAN_CHAIN_ID = 69;\\n    uint256 private constant _HARDHAT_CHAIN_ID = 31337;\\n\\n    constructor(address settlementTokenArg) PerpdexExchange(msg.sender, settlementTokenArg, new address[](0)) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        require(\\n            chainId == _RINKEBY_CHAIN_ID ||\\n                chainId == _MUMBAI_CHAIN_ID ||\\n                chainId == _SHIBUYA_CHAIN_ID ||\\n                chainId == _ZKSYNC2_TESTNET_CHAIN_ID ||\\n                chainId == _ARBITRUM_RINKEBY_CHAIN_ID ||\\n                chainId == _OPTIMISM_KOVAN_CHAIN_ID ||\\n                chainId == _HARDHAT_CHAIN_ID,\\n            \\\"DPE_C: testnet only\\\"\\n        );\\n    }\\n\\n    function setCollateralBalance(address trader, int256 balance) external {\\n        accountInfos[trader].vaultInfo.collateralBalance = balance;\\n    }\\n}\\n\",\"keccak256\":\"0x200ae4e5eb614ad8200511b777b21cba76a5d9ef2014ba71be3a0678bf92d7cd\",\"license\":\"GPL-3.0-or-later\"},\"deps/BokkyPooBahsRedBlackTreeLibrary/contracts/BokkyPooBahsRedBlackTreeLibrary.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's Red-Black Tree Library v1.0-pre-release-a\\n//\\n// A Solidity Red-Black Tree binary search library to store and access a sorted\\n// list of unsigned integer data. The Red-Black algorithm rebalances the binary\\n// search tree, resulting in O(log n) insert, remove and search time (and ~gas)\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsRedBlackTreeLibrary\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2020. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary BokkyPooBahsRedBlackTreeLibrary {\\n    struct Node {\\n        uint40 parent;\\n        uint40 left;\\n        uint40 right;\\n        bool red;\\n        uint128 userData; // use freely. this is for gas efficiency\\n    }\\n\\n    struct Tree {\\n        uint40 root;\\n        mapping(uint40 => Node) nodes;\\n    }\\n\\n    uint40 private constant EMPTY = 0;\\n\\n    function first(Tree storage self) internal view returns (uint40 _key) {\\n        _key = self.root;\\n        if (_key != EMPTY) {\\n            _key = treeMinimum(self, self.root);\\n        }\\n    }\\n\\n    function last(Tree storage self) internal view returns (uint40 _key) {\\n        _key = self.root;\\n        if (_key != EMPTY) {\\n            _key = treeMaximum(self, self.root);\\n        }\\n    }\\n\\n    function next(Tree storage self, uint40 target)\\n        internal\\n        view\\n        returns (uint40 cursor)\\n    {\\n        require(target != EMPTY, \\\"RBTL_N: target is empty\\\");\\n        if (self.nodes[target].right != EMPTY) {\\n            cursor = treeMinimum(self, self.nodes[target].right);\\n        } else {\\n            cursor = self.nodes[target].parent;\\n            while (cursor != EMPTY && target == self.nodes[cursor].right) {\\n                target = cursor;\\n                cursor = self.nodes[cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function prev(Tree storage self, uint40 target)\\n        internal\\n        view\\n        returns (uint40 cursor)\\n    {\\n        require(target != EMPTY, \\\"RBTL_P: target is empty\\\");\\n        if (self.nodes[target].left != EMPTY) {\\n            cursor = treeMaximum(self, self.nodes[target].left);\\n        } else {\\n            cursor = self.nodes[target].parent;\\n            while (cursor != EMPTY && target == self.nodes[cursor].left) {\\n                target = cursor;\\n                cursor = self.nodes[cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function exists(Tree storage self, uint40 key)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return\\n            (key != EMPTY) &&\\n            ((key == self.root) || (self.nodes[key].parent != EMPTY));\\n    }\\n\\n    function isEmpty(uint40 key) internal pure returns (bool) {\\n        return key == EMPTY;\\n    }\\n\\n    function getEmpty() internal pure returns (uint256) {\\n        return EMPTY;\\n    }\\n\\n    function getNode(Tree storage self, uint40 key)\\n        internal\\n        view\\n        returns (\\n            uint40 _returnKey,\\n            uint40 _parent,\\n            uint40 _left,\\n            uint40 _right,\\n            bool _red\\n        )\\n    {\\n        require(exists(self, key), \\\"RBTL_GN: key not exist\\\");\\n        return (\\n            key,\\n            self.nodes[key].parent,\\n            self.nodes[key].left,\\n            self.nodes[key].right,\\n            self.nodes[key].red\\n        );\\n    }\\n\\n    function insert(\\n        Tree storage self,\\n        uint40 key,\\n        uint128 userData,\\n        function(uint40, uint40, uint256) view returns (bool) lessThan,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) internal {\\n        require(key != EMPTY, \\\"RBTL_I: key is empty\\\");\\n        require(!exists(self, key), \\\"RBTL_I: key already exists\\\");\\n        uint40 cursor = EMPTY;\\n        uint40 probe = self.root;\\n        self.nodes[key] = Node({\\n            parent: EMPTY,\\n            left: EMPTY,\\n            right: EMPTY,\\n            red: true,\\n            userData: userData\\n        });\\n        while (probe != EMPTY) {\\n            cursor = probe;\\n            if (lessThan(key, probe, data)) {\\n                probe = self.nodes[probe].left;\\n            } else {\\n                probe = self.nodes[probe].right;\\n            }\\n        }\\n        self.nodes[key].parent = cursor;\\n        if (cursor == EMPTY) {\\n            self.root = key;\\n        } else if (lessThan(key, cursor, data)) {\\n            self.nodes[cursor].left = key;\\n        } else {\\n            self.nodes[cursor].right = key;\\n        }\\n        aggregateRecursively(self, key, aggregate, data);\\n        insertFixup(self, key, aggregate, data);\\n    }\\n\\n    function remove(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) internal {\\n        require(key != EMPTY, \\\"RBTL_R: key is empty\\\");\\n        require(exists(self, key), \\\"RBTL_R: key not exist\\\");\\n        uint40 probe;\\n        uint40 cursor;\\n        if (self.nodes[key].left == EMPTY || self.nodes[key].right == EMPTY) {\\n            cursor = key;\\n        } else {\\n            cursor = self.nodes[key].right;\\n            while (self.nodes[cursor].left != EMPTY) {\\n                cursor = self.nodes[cursor].left;\\n            }\\n        }\\n        if (self.nodes[cursor].left != EMPTY) {\\n            probe = self.nodes[cursor].left;\\n        } else {\\n            probe = self.nodes[cursor].right;\\n        }\\n        uint40 yParent = self.nodes[cursor].parent;\\n        self.nodes[probe].parent = yParent;\\n        if (yParent != EMPTY) {\\n            if (cursor == self.nodes[yParent].left) {\\n                self.nodes[yParent].left = probe;\\n            } else {\\n                self.nodes[yParent].right = probe;\\n            }\\n        } else {\\n            self.root = probe;\\n        }\\n        bool doFixup = !self.nodes[cursor].red;\\n        if (cursor != key) {\\n            replaceParent(self, cursor, key);\\n            self.nodes[cursor].left = self.nodes[key].left;\\n            self.nodes[self.nodes[cursor].left].parent = cursor;\\n            self.nodes[cursor].right = self.nodes[key].right;\\n            self.nodes[self.nodes[cursor].right].parent = cursor;\\n            self.nodes[cursor].red = self.nodes[key].red;\\n            (cursor, key) = (key, cursor);\\n            aggregateRecursively(self, key, aggregate, data);\\n        }\\n        if (doFixup) {\\n            removeFixup(self, probe, aggregate, data);\\n        }\\n        aggregateRecursively(self, yParent, aggregate, data);\\n\\n        // Fixed a bug that caused the parent of empty nodes to be non-zero.\\n        // TODO: Fix it the right way.\\n        if (probe == EMPTY) {\\n            self.nodes[probe].parent = EMPTY;\\n        }\\n    }\\n\\n    // https://arxiv.org/pdf/1602.02120.pdf\\n    // changes from original\\n    // - handle empty\\n    // - handle parent\\n    // - change root to black\\n\\n    // to avoid stack too deep\\n    struct JoinParams {\\n        uint40 left;\\n        uint40 key;\\n        uint40 right;\\n        uint8 leftBlackHeight;\\n        uint8 rightBlackHeight;\\n        uint256 data;\\n    }\\n\\n    // destructive func\\n    function joinRight(\\n        Tree storage self,\\n        JoinParams memory params,\\n        function(uint40, uint256) returns (bool) aggregate\\n    ) private returns (uint40, uint8) {\\n        if (\\n            !self.nodes[params.left].red &&\\n            params.leftBlackHeight == params.rightBlackHeight\\n        ) {\\n            self.nodes[params.key].red = true;\\n            self.nodes[params.key].left = params.left;\\n            self.nodes[params.key].right = params.right;\\n            aggregate(params.key, params.data);\\n            return (params.key, params.leftBlackHeight);\\n        }\\n\\n        (uint40 t, ) = joinRight(\\n            self,\\n            JoinParams({\\n                left: self.nodes[params.left].right,\\n                key: params.key,\\n                right: params.right,\\n                leftBlackHeight: params.leftBlackHeight -\\n                    (self.nodes[params.left].red ? 0 : 1),\\n                rightBlackHeight: params.rightBlackHeight,\\n                data: params.data\\n            }),\\n            aggregate\\n        );\\n        self.nodes[params.left].right = t;\\n        self.nodes[params.left].parent = EMPTY;\\n        aggregate(params.left, params.data);\\n\\n        if (\\n            !self.nodes[params.left].red &&\\n            self.nodes[t].red &&\\n            self.nodes[self.nodes[t].right].red\\n        ) {\\n            self.nodes[self.nodes[t].right].red = false;\\n            rotateLeft(self, params.left, aggregate, params.data);\\n            return (t, params.leftBlackHeight);\\n            //            return (self.nodes[params.left].parent, tBlackHeight + 1); // TODO: replace with t\\n        }\\n        return (params.left, params.leftBlackHeight);\\n        //        return (params.left, tBlackHeight + (self.nodes[params.left].red ? 0 : 1));\\n    }\\n\\n    // destructive func\\n    function joinLeft(\\n        Tree storage self,\\n        JoinParams memory params,\\n        function(uint40, uint256) returns (bool) aggregate\\n    ) internal returns (uint40 resultKey) {\\n        if (\\n            !self.nodes[params.right].red &&\\n            params.leftBlackHeight == params.rightBlackHeight\\n        ) {\\n            self.nodes[params.key].red = true;\\n            self.nodes[params.key].left = params.left;\\n            self.nodes[params.key].right = params.right;\\n            if (params.left != EMPTY) {\\n                self.nodes[params.left].parent = params.key;\\n            }\\n            if (params.right != EMPTY) {\\n                self.nodes[params.right].parent = params.key;\\n            }\\n            aggregate(params.key, params.data);\\n            return params.key;\\n        }\\n\\n        uint40 t = joinLeft(\\n            self,\\n            JoinParams({\\n                left: params.left,\\n                key: params.key,\\n                right: self.nodes[params.right].left,\\n                leftBlackHeight: params.leftBlackHeight,\\n                rightBlackHeight: params.rightBlackHeight -\\n                    (self.nodes[params.right].red ? 0 : 1),\\n                data: params.data\\n            }),\\n            aggregate\\n        );\\n        self.nodes[params.right].left = t;\\n        self.nodes[params.right].parent = EMPTY;\\n        if (t != EMPTY) {\\n            self.nodes[t].parent = params.right;\\n        }\\n        aggregate(params.right, params.data);\\n\\n        if (\\n            !self.nodes[params.right].red &&\\n            self.nodes[t].red &&\\n            self.nodes[self.nodes[t].left].red\\n        ) {\\n            self.nodes[self.nodes[t].left].red = false;\\n            rotateRight(self, params.right, aggregate, params.data);\\n            return t;\\n        }\\n        return params.right;\\n    }\\n\\n    // destructive func\\n    function join(\\n        Tree storage self,\\n        uint40 left,\\n        uint40 key,\\n        uint40 right,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint8 leftBlackHeight,\\n        uint8 rightBlackHeight,\\n        uint256 data\\n    ) private returns (uint40 t, uint8 tBlackHeight) {\\n        if (leftBlackHeight > rightBlackHeight) {\\n            (t, tBlackHeight) = joinRight(\\n                self,\\n                JoinParams({\\n                    left: left,\\n                    key: key,\\n                    right: right,\\n                    leftBlackHeight: leftBlackHeight,\\n                    rightBlackHeight: rightBlackHeight,\\n                    data: data\\n                }),\\n                aggregate\\n            );\\n            tBlackHeight = leftBlackHeight;\\n            if (self.nodes[t].red && self.nodes[self.nodes[t].right].red) {\\n                self.nodes[t].red = false;\\n                tBlackHeight += 1;\\n            }\\n        } else if (leftBlackHeight < rightBlackHeight) {\\n            t = joinLeft(\\n                self,\\n                JoinParams({\\n                    left: left,\\n                    key: key,\\n                    right: right,\\n                    leftBlackHeight: leftBlackHeight,\\n                    rightBlackHeight: rightBlackHeight,\\n                    data: data\\n                }),\\n                aggregate\\n            );\\n            tBlackHeight = rightBlackHeight;\\n            if (self.nodes[t].red && self.nodes[self.nodes[t].left].red) {\\n                self.nodes[t].red = false;\\n                tBlackHeight += 1;\\n            }\\n        } else {\\n            bool red = !self.nodes[left].red && !self.nodes[right].red;\\n            self.nodes[key].red = red;\\n            self.nodes[key].left = left;\\n            self.nodes[key].right = right;\\n            aggregate(key, data);\\n            (t, tBlackHeight) = (key, leftBlackHeight + (red ? 0 : 1));\\n        }\\n    }\\n\\n    struct SplitParams {\\n        uint40 t;\\n        uint40 key;\\n        uint8 blackHeight;\\n        uint256 data;\\n    }\\n\\n    // destructive func\\n    function splitRight(\\n        Tree storage self,\\n        SplitParams memory params,\\n        function(uint40, uint40, uint256) returns (bool) lessThan,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        function(uint40, uint256) subtreeRemoved\\n    ) private returns (uint40 resultKey, uint8 resultBlackHeight) {\\n        if (params.t == EMPTY) return (EMPTY, params.blackHeight);\\n        params.blackHeight -= (self.nodes[params.t].red ? 0 : 1);\\n        if (params.key == params.t) {\\n            subtreeRemoved(params.t, params.data);\\n            return (self.nodes[params.t].right, params.blackHeight);\\n        }\\n        if (lessThan(params.key, params.t, params.data)) {\\n            (uint40 r, uint8 rBlackHeight) = splitRight(\\n                self,\\n                SplitParams({\\n                    t: self.nodes[params.t].left,\\n                    key: params.key,\\n                    blackHeight: params.blackHeight,\\n                    data: params.data\\n                }),\\n                lessThan,\\n                aggregate,\\n                subtreeRemoved\\n            );\\n            return\\n                join(\\n                    self,\\n                    r,\\n                    params.t,\\n                    self.nodes[params.t].right,\\n                    aggregate,\\n                    rBlackHeight,\\n                    params.blackHeight,\\n                    params.data\\n                );\\n        } else {\\n            subtreeRemoved(params.t, params.data);\\n            return\\n                splitRight(\\n                    self,\\n                    SplitParams({\\n                        t: self.nodes[params.t].right,\\n                        key: params.key,\\n                        blackHeight: params.blackHeight,\\n                        data: params.data\\n                    }),\\n                    lessThan,\\n                    aggregate,\\n                    subtreeRemoved\\n                );\\n        }\\n    }\\n\\n    function removeLeft(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint40, uint256) returns (bool) lessThan,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        function(uint40, uint256) subtreeRemoved,\\n        uint256 data\\n    ) internal {\\n        require(key != EMPTY, \\\"RBTL_RL: key is empty\\\");\\n        require(exists(self, key), \\\"RBTL_RL: key not exist\\\");\\n        (self.root, ) = splitRight(\\n            self,\\n            SplitParams({t: self.root, key: key, blackHeight: 128, data: data}),\\n            lessThan,\\n            aggregate,\\n            subtreeRemoved\\n        );\\n        self.nodes[self.root].parent = EMPTY;\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function aggregateRecursively(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) internal {\\n        while (key != EMPTY) {\\n            if (aggregate(key, data)) return;\\n            key = self.nodes[key].parent;\\n        }\\n    }\\n\\n    function treeMinimum(Tree storage self, uint40 key)\\n        private\\n        view\\n        returns (uint40)\\n    {\\n        while (self.nodes[key].left != EMPTY) {\\n            key = self.nodes[key].left;\\n        }\\n        return key;\\n    }\\n\\n    function treeMaximum(Tree storage self, uint40 key)\\n        private\\n        view\\n        returns (uint40)\\n    {\\n        while (self.nodes[key].right != EMPTY) {\\n            key = self.nodes[key].right;\\n        }\\n        return key;\\n    }\\n\\n    function rotateLeft(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) private {\\n        uint40 cursor = self.nodes[key].right;\\n        uint40 keyParent = self.nodes[key].parent;\\n        uint40 cursorLeft = self.nodes[cursor].left;\\n        self.nodes[key].right = cursorLeft;\\n        if (cursorLeft != EMPTY) {\\n            self.nodes[cursorLeft].parent = key;\\n        }\\n        self.nodes[cursor].parent = keyParent;\\n        if (keyParent == EMPTY) {\\n            self.root = cursor;\\n        } else if (key == self.nodes[keyParent].left) {\\n            self.nodes[keyParent].left = cursor;\\n        } else {\\n            self.nodes[keyParent].right = cursor;\\n        }\\n        self.nodes[cursor].left = key;\\n        self.nodes[key].parent = cursor;\\n        aggregate(key, data);\\n        aggregate(cursor, data);\\n    }\\n\\n    function rotateRight(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) private {\\n        uint40 cursor = self.nodes[key].left;\\n        uint40 keyParent = self.nodes[key].parent;\\n        uint40 cursorRight = self.nodes[cursor].right;\\n        self.nodes[key].left = cursorRight;\\n        if (cursorRight != EMPTY) {\\n            self.nodes[cursorRight].parent = key;\\n        }\\n        self.nodes[cursor].parent = keyParent;\\n        if (keyParent == EMPTY) {\\n            self.root = cursor;\\n        } else if (key == self.nodes[keyParent].right) {\\n            self.nodes[keyParent].right = cursor;\\n        } else {\\n            self.nodes[keyParent].left = cursor;\\n        }\\n        self.nodes[cursor].right = key;\\n        self.nodes[key].parent = cursor;\\n        aggregate(key, data);\\n        aggregate(cursor, data);\\n    }\\n\\n    function insertFixup(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) private {\\n        uint40 cursor;\\n        while (key != self.root && self.nodes[self.nodes[key].parent].red) {\\n            uint40 keyParent = self.nodes[key].parent;\\n            if (keyParent == self.nodes[self.nodes[keyParent].parent].left) {\\n                cursor = self.nodes[self.nodes[keyParent].parent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    key = self.nodes[keyParent].parent;\\n                } else {\\n                    if (key == self.nodes[keyParent].right) {\\n                        key = keyParent;\\n                        rotateLeft(self, key, aggregate, data);\\n                    }\\n                    keyParent = self.nodes[key].parent;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    rotateRight(\\n                        self,\\n                        self.nodes[keyParent].parent,\\n                        aggregate,\\n                        data\\n                    );\\n                }\\n            } else {\\n                cursor = self.nodes[self.nodes[keyParent].parent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    key = self.nodes[keyParent].parent;\\n                } else {\\n                    if (key == self.nodes[keyParent].left) {\\n                        key = keyParent;\\n                        rotateRight(self, key, aggregate, data);\\n                    }\\n                    keyParent = self.nodes[key].parent;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    rotateLeft(\\n                        self,\\n                        self.nodes[keyParent].parent,\\n                        aggregate,\\n                        data\\n                    );\\n                }\\n            }\\n        }\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function replaceParent(\\n        Tree storage self,\\n        uint40 a,\\n        uint40 b\\n    ) private {\\n        uint40 bParent = self.nodes[b].parent;\\n        self.nodes[a].parent = bParent;\\n        if (bParent == EMPTY) {\\n            self.root = a;\\n        } else {\\n            if (b == self.nodes[bParent].left) {\\n                self.nodes[bParent].left = a;\\n            } else {\\n                self.nodes[bParent].right = a;\\n            }\\n        }\\n    }\\n\\n    function removeFixup(\\n        Tree storage self,\\n        uint40 key,\\n        function(uint40, uint256) returns (bool) aggregate,\\n        uint256 data\\n    ) private {\\n        uint40 cursor;\\n        while (key != self.root && !self.nodes[key].red) {\\n            uint40 keyParent = self.nodes[key].parent;\\n            if (key == self.nodes[keyParent].left) {\\n                cursor = self.nodes[keyParent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[keyParent].red = true;\\n                    rotateLeft(self, keyParent, aggregate, data);\\n                    cursor = self.nodes[keyParent].right;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].left].red &&\\n                    !self.nodes[self.nodes[cursor].right].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    key = keyParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].right].red) {\\n                        self.nodes[self.nodes[cursor].left].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateRight(self, cursor, aggregate, data);\\n                        cursor = self.nodes[keyParent].right;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[keyParent].red;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[cursor].right].red = false;\\n                    rotateLeft(self, keyParent, aggregate, data);\\n                    key = self.root;\\n                }\\n            } else {\\n                cursor = self.nodes[keyParent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[keyParent].red = true;\\n                    rotateRight(self, keyParent, aggregate, data);\\n                    cursor = self.nodes[keyParent].left;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].right].red &&\\n                    !self.nodes[self.nodes[cursor].left].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    key = keyParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].left].red) {\\n                        self.nodes[self.nodes[cursor].right].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateLeft(self, cursor, aggregate, data);\\n                        cursor = self.nodes[keyParent].left;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[keyParent].red;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[cursor].left].red = false;\\n                    rotateRight(self, keyParent, aggregate, data);\\n                    key = self.root;\\n                }\\n            }\\n        }\\n        self.nodes[key].red = false;\\n    }\\n}\\n// ----------------------------------------------------------------------------\\n// End - BokkyPooBah's Red-Black Tree Library\\n// ----------------------------------------------------------------------------\\n\",\"keccak256\":\"0xcd1e5d70b48e4c611fd4b863d8413eb8000db92c875f0a2ccb60b7c374e03d7f\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106102d55760003560e01c80638da5cb5b1161017b578063c9ca7b18116100d7578063e671be1711610085578063e671be1714610b09578063ec6cca8414610b29578063ef21b7e814610b49578063f0e9ea9614610b86578063f2fde38b14610bc9578063f652b52714610be9578063fed4063214610c0357600080fd5b8063c9ca7b18146109e7578063ca5b721e14610a07578063cffe855614610a27578063d11102c514610a47578063d1ce35e314610a74578063ddad7e9714610a94578063dfe1cb9214610ace57600080fd5b80639f044f31116101345780639f044f31146108d2578063a616c66c146108f5578063ac3732b41461092a578063ac9650d81461094a578063b53c512514610977578063b6b55f25146109b9578063c66fa8e6146109cc57600080fd5b80638da5cb5b146107e65780638ec992941461080457806393420cf41461082457806394887af71461083b578063996fbf94146108825780639dce9e19146108a257600080fd5b80633a92105111610235578063715018a6116101e3578063715018a61461064857806373f625011461065d5780637a27d9f61461067d5780637b9e618d146106a05780637c88490a146106d457806387cad0bf146106f457806388060d8b1461075457600080fd5b80633a921051146105665780633d46396a146105865780633fd1e2bd146105a65780634b4aa735146105bb5780634ebd6bb4146105db5780635ddd1650146105fb5780636e838bad1461062857600080fd5b80632d67669c116102925780632d67669c146103c05780632e1a7d4d146103e05780632e784343146104005780632f60a151146104845780632fd99bf4146104ba57806331e60ddf1461051957806333ff15771461054657600080fd5b8063030ee0cb146102da5780630674fa41146102fc5780630729e07a1461032f57806318f8c0cd1461034f5780631a8e22e6146103805780632703ee85146103a0575b600080fd5b3480156102e657600080fd5b506102fa6102f53660046151bf565b610c23565b005b34801561030857600080fd5b5061031c6103173660046151f7565b610cb1565b6040519081526020015b60405180910390f35b34801561033b57600080fd5b506102fa61034a366004615214565b610d45565b34801561035b57600080fd5b5060075461036e90610100900460ff1681565b60405160ff9091168152602001610326565b34801561038c57600080fd5b506102fa61039b3660046151f7565b611085565b3480156103ac57600080fd5b5061031c6103bb3660046151f7565b611150565b3480156103cc57600080fd5b5061031c6103db3660046152a8565b6111a1565b3480156103ec57600080fd5b506102fa6103fb36600461533f565b61124d565b34801561040c57600080fd5b5061046961041b366004615358565b604080518082018252600080825260209182018190526001600160a01b0394851681526002825282812093909416845291825291829020825180840190935280548352600101549082015290565b60408051825181526020928301519281019290925201610326565b34801561049057600080fd5b506007546104a69062010000900462ffffff1681565b60405162ffffff9091168152602001610326565b3480156104c657600080fd5b506105016104d53660046153a4565b60066020908152600093845260408085208252928452828420905282529020546001600160a01b031681565b6040516001600160a01b039091168152602001610326565b34801561052557600080fd5b506105396105343660046153ef565b6113bc565b604051610326919061542f565b34801561055257600080fd5b5061031c610561366004615358565b61146c565b34801561057257600080fd5b5061031c6105813660046151f7565b61150f565b34801561059257600080fd5b506102fa6105a136600461533f565b611560565b3480156105b257600080fd5b5061036e601281565b3480156105c757600080fd5b5061031c6105d63660046151f7565b61165f565b3480156105e757600080fd5b506104696105f6366004615358565b6116b0565b34801561060757600080fd5b5061061b6106163660046153ef565b61175a565b604051610326919061547a565b34801561063457600080fd5b506102fa6106433660046154eb565b611800565b34801561065457600080fd5b506102fa61192c565b34801561066957600080fd5b506102fa6106783660046151bf565b611940565b34801561068957600080fd5b506007546104a690600160401b900462ffffff1681565b3480156106ac57600080fd5b506105017f000000000000000000000000000000000000000000000000000000000000000081565b3480156106e057600080fd5b5061031c6106ef366004615358565b6119b1565b34801561070057600080fd5b5061073c61070f3660046151f7565b60026020908152600091825260409182902082519182019092526003820154815260059091015460ff1682565b604080519251835260ff909116602083015201610326565b34801561076057600080fd5b506107bd61076f366004615358565b6001600160a01b03918216600090815260026020818152604080842094909516835292810190925291909120805491810154600482015460059092015464ffffffffff938416949390911692565b6040805164ffffffffff9586168152949093166020850152918301526060820152608001610326565b3480156107f257600080fd5b506001546001600160a01b0316610501565b34801561081057600080fd5b506102fa61081f366004615515565b611a13565b34801561083057600080fd5b5060055461031c9081565b34801561084757600080fd5b506008546108649062ffffff8116906301000000900461ffff1682565b6040805162ffffff909316835261ffff909116602083015201610326565b34801561088e57600080fd5b5061031c61089d366004615358565b611a55565b3480156108ae57600080fd5b506108c26108bd3660046151f7565b611ab7565b6040519015158152602001610326565b3480156108de57600080fd5b506007546104a690600160281b900462ffffff1681565b34801561090157600080fd5b50610915610910366004615555565b611b5a565b60408051928352602083019190915201610326565b34801561093657600080fd5b506102fa610945366004615571565b611e2b565b34801561095657600080fd5b5061096a610965366004615583565b611f8c565b6040516103269190615647565b34801561098357600080fd5b50610997610992366004615358565b612080565b6040805182518152602080840151908201529181015190820152606001610326565b6102fa6109c736600461533f565b6120f4565b3480156109d857600080fd5b50600354600454610915919082565b3480156109f357600080fd5b506102fa610a023660046154eb565b6124b1565b348015610a1357600080fd5b5061031c610a22366004615358565b6125d9565b348015610a3357600080fd5b5061031c610a423660046156bb565b61263b565b348015610a5357600080fd5b50610a67610a623660046151f7565b612753565b60405161032691906156d7565b348015610a8057600080fd5b506102fa610a8f3660046154eb565b6127cc565b348015610aa057600080fd5b506102fa610aaf366004615718565b6001600160a01b03909116600090815260026020526040902060030155565b348015610ada57600080fd5b50610aee610ae9366004615555565b61289e565b60408051938452602084019290925290820152606001610326565b348015610b1557600080fd5b5061031c610b243660046156bb565b612b49565b348015610b3557600080fd5b506108c2610b443660046151f7565b612bbd565b348015610b5557600080fd5b50610b79610b643660046151f7565b60096020526000908152604090205460ff1681565b6040516103269190615778565b348015610b9257600080fd5b50610ba6610ba1366004615555565b612c22565b6040805164ffffffffff9094168452602084019290925290820152606001610326565b348015610bd557600080fd5b506102fa610be43660046151f7565b61307a565b348015610bf557600080fd5b5060075461036e9060ff1681565b348015610c0f57600080fd5b506108c2610c1e3660046151f7565b6130f3565b610c2b613151565b600260005403610c565760405162461bcd60e51b8152600401610c4d9061578b565b60405180910390fd5b60026000556007805461ff00191661010060ff8416908102919091179091556040519081527fa1c52f9241e2609b5e6bd1b508707a109021d174cc16f3b16215c457d4bbddfa906020015b60405180910390a1506001600055565b6001600160a01b038116600090815260026020526040808220905163d73fd34160e01b8152600481019190915273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__9063d73fd341906024015b602060405180830381865af4158015610d1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3f91906157c2565b92915050565b600260005403610d675760405162461bcd60e51b8152600401610c4d9061578b565b60026000556060810135610d7a816131ab565b610d8760208301836151f7565b610d90816131ed565b6000600681610da260208701876151f7565b6001600160a01b03166001600160a01b031681526020019081526020016000206000856020016020810190610dd791906157db565b1515151581526020019081526020016000206000856040016020810190610dfe91906157f8565b64ffffffffff1681526020810191909152604001600020546001600160a01b0316905080610e685760405162461bcd60e51b8152602060048201526017602482015276141157d0d313ce881bdc99195c881b9bdd08195e1a5cdd604a1b6044820152606401610c4d565b610e7181613263565b6001600160a01b0381166000908152600260209081526040808320815160c0810190925273__$20e084fd68fd7ab4ec93efaca84ca46fc4$__92637ae9aeb292908190610ec0908b018b6151f7565b6001600160a01b03168152602001610ede60608b0160408c016157f8565b64ffffffffff168152602001896020016020810190610efd91906157db565b15158152600754600160281b900462ffffff166020820152604001336001600160a01b0390811688821614825260075460ff9081166020938401526040805160e088901b6001600160e01b03191681526004810196909652845190921660248601529183015164ffffffffff16604485015282015115156064840152606082015162ffffff1660848401526080820151151560a484015260a0909101511660c482015260e401602060405180830381865af4158015610fc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe49190615815565b905080610ff2576000610ff4565b335b6001600160a01b031661100a60208701876151f7565b6001600160a01b039081169084167f4de6bf440f231c89a9a5151794265a35b57c248083faeae83678c9259a7dd12361104960408a0160208b016157db565b61105960608b0160408c016157f8565b60408051921515835264ffffffffff90911660208301520160405180910390a450506001600055505050565b6002600054036110a75760405162461bcd60e51b8152600401610c4d9061578b565b6002600055806110b6816132cc565b336110c081613263565b6001600160a01b03818116600090815260026020526040908190209051630530e4fd60e41b81526004810191909152908416602482015273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__9063530e4fd09060440160006040518083038186803b15801561112e57600080fd5b505af4158015611142573d6000803e3d6000fd5b505060016000555050505050565b6001600160a01b03811660009081526002602052604080822090516344ae957f60e11b8152600481019190915273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__9063895d2afe90602401610cfe565b600060016020808401516001600160a01b031660009081526009909152604090205460ff1660028111156111d7576111d7615744565b146111e457506000919050565b81516040808401516001600160a01b038084166000818152600260209081529490209387015160608801516080890151600754959661124596909593949293919262ffffff600160281b8304811693600160401b9093041691891614613348565b949350505050565b60026000540361126f5760405162461bcd60e51b8152600401610c4d9061578b565b60026000553361127e81613263565b6001600160a01b0381811660008181526002602090815260409182902082516080810184527f00000000000000000000000000000000000000000000000000000000000000008616815291820187815282840194855260075462010000900462ffffff908116606085019081529451638b72b4c760e01b815260048101939093529251861660248301525160448201529251909316606483015251909116608482015273__$2adfba613814486128a81a7b4ccb98752b$__90638b72b4c79060a40160006040518083038186803b15801561135857600080fd5b505af415801561136c573d6000803e3d6000fd5b50505050806001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5836040516113ab91815260200190565b60405180910390a250506001600055565b6001600160a01b0383811660009081526002602052604090819020905163733242af60e11b815260048101919091529083166024820152811515604482015260609073__$20e084fd68fd7ab4ec93efaca84ca46fc4$__9063e664855e90606401600060405180830381865af415801561143a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114629190810190615855565b90505b9392505050565b6001600160a01b0382166000908152600260205260408082209051632de9906b60e11b815273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__91635bd320d6916114ce919086906004019182526001600160a01b0316602082015260400190565b602060405180830381865af41580156114eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146591906157c2565b6001600160a01b0381166000908152600260205260408082209051631caf045760e31b8152600481019190915273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__9063e57822b890602401610cfe565b611568613151565b60026000540361158a5760405162461bcd60e51b8152600401610c4d9061578b565b60026000553361159981613263565b6001600160a01b0381166000908152600260205260409081902090516333a4aff760e21b81526004810191909152600560248201526044810183905273__$2adfba613814486128a81a7b4ccb98752b$__9063ce92bfdc9060640160006040518083038186803b15801561160c57600080fd5b505af4158015611620573d6000803e3d6000fd5b50505050806001600160a01b03167f0880b0e717a57f3b5cbd3fc19396ae3c8cdee5c624c9289477869c38014c8495836040516113ab91815260200190565b6001600160a01b03811660009081526002602052604080822090516367dd27b160e01b8152600481019190915273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__906367dd27b190602401610cfe565b60408051808201909152600080825260208201526001600160a01b0383811660009081526002602052604090819020905163195bd60760e31b81526004810191909152908316602482015273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__9063cadeb038906044016040805180830381865af4158015611736573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146591906158e8565b6001600160a01b03838116600090815260026020526040908190209051632e9e3b9360e11b815260048101919091529083166024820152811515604482015260609073__$20e084fd68fd7ab4ec93efaca84ca46fc4$__90635d3c772690606401600060405180830381865af41580156117d8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114629190810190615936565b611808613151565b60026000540361182a5760405162461bcd60e51b8152600401610c4d9061578b565b6002600055620f424062ffffff82161061187a5760405162461bcd60e51b815260206004820152601160248201527050455f5349523a20746f6f206c6172676560781b6044820152606401610c4d565b60075462ffffff600160281b909104811690821610156118dc5760405162461bcd60e51b815260206004820152601c60248201527f50455f5349523a20736d616c6c6572207468616e206d6d526174696f000000006044820152606401610c4d565b6007805464ffffff000019166201000062ffffff8416908102919091179091556040519081527f04f9c1a24c6543f4b91577d82af28fb7ef6d7b9fe46acd0e5c36ef17073b94e690602001610ca1565b611934613151565b61193e6000613495565b565b611948613151565b60026000540361196a5760405162461bcd60e51b8152600401610c4d9061578b565b60026000556007805460ff191660ff83169081179091556040519081527fa7b4760b38e2a630f3073fcd5119972cbf81bd50e3761f86534a69661caf811090602001610ca1565b6001600160a01b038216600090815260026020526040808220905163af77d70760e01b815273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__9163af77d707916114ce919086906004019182526001600160a01b0316602082015260400190565b611a1b613151565b600260005403611a3d5760405162461bcd60e51b8152600401610c4d9061578b565b6002600055611a4c82826134e7565b50506001600055565b6001600160a01b0382166000908152600260205260408082209051630d832e2160e31b815273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__91636c197108916114ce919086906004019182526001600160a01b0316602082015260400190565b6001600160a01b0381166000908152600260205260408082206007549151633c7e525f60e01b81526004810191909152600160281b90910462ffffff16602482015273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__90633c7e525f906044015b602060405180830381865af4158015611b36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3f9190615815565b600080600260005403611b7f5760405162461bcd60e51b8152600401610c4d9061578b565b600260005560a0830135611b92816131ab565b611ba260408501602086016151f7565b611bab816131ed565b611bc0611bbb60208701876151f7565b613263565b600073__$0d082d4f68cd76e21bd5ff3b4c3f93bd83$__639b6bfbdf600283611bec60208b018b6151f7565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518060e001604052808a6020016020810190611c2a91906151f7565b6001600160a01b0316815260408b81013560208301526060808d0135918301919091526080808d013591830191909152600754600160281b810462ffffff169183019190915260ff1660a082015260c001336001600160a01b0316611c9260208d018d6151f7565b6001600160a01b03908116919091149091526040805160e086901b6001600160e01b031916815260048101949094528251909116602484015260208201516044840152810151606483015260608101516084830152608081015162ffffff1660a483015260a081015160ff1660c483015260c00151151560e48201526101040160c060405180830381865af4158015611d2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5391906159f0565b9050611d6560408701602088016151f7565b6001600160a01b0316611d7b60208801886151f7565b6001600160a01b03167f6412738c4a8b04483cde318a630d4c268654a7ebd52c9ef2c516e5e8520a4fd88360a00151611db5576000611db7565b335b84516020808701516040808901516060808b01516080808d015185516001600160a01b039a909a168a5296890197909752878401949094528f830135908701529385019390935260a084015260c0830152519081900360e00190a38051602090910151600160005590969095509350505050565b611e33613151565b600260005403611e555760405162461bcd60e51b8152600401610c4d9061578b565b6002600055620f4240611e6b60208301836154eb565b62ffffff1610611ebd5760405162461bcd60e51b815260206004820152601f60248201527f50455f534c52433a20746f6f206c617267652072657761726420726174696f006044820152606401610c4d565b6000611ecf6040830160208401615a7f565b61ffff1611611f205760405162461bcd60e51b815260206004820152601960248201527f50455f534c52433a20656d612074696d65206973207a65726f000000000000006044820152606401610c4d565b806008611f2d8282615a9c565b507f1185c4964ca5cd3d88d5dfbc1fb65b84d5533e3354f3b2163e8e1c0f35bca0e19050611f5e60208301836154eb565b611f6e6040840160208501615a7f565b6040805162ffffff909316835261ffff909116602083015201610ca1565b6060816001600160401b03811115611fa657611fa661522c565b604051908082528060200260200182016040528015611fd957816020015b6060815260200190600190039081611fc45790505b50905060005b828110156120795761204930858584818110611ffd57611ffd615aea565b905060200281019061200f9190615b00565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506137bc92505050565b82828151811061205b5761205b615aea565b6020026020010181905250808061207190615b63565b915050611fdf565b5092915050565b6120a460405180606001604052806000815260200160008152602001600081525090565b506001600160a01b03808316600090815260026020818152604080842094861684526001948501825292839020835160608101855281548152948101549185019190915201549082015292915050565b6002600054036121165760405162461bcd60e51b8152600401610c4d9061578b565b60026000553361212581613263565b6001600160a01b038116600090815260026020526040808220905163218be9d560e11b815260048101919091526003602482015273__$2adfba613814486128a81a7b4ccb98752b$__90634317d3aa90604401602060405180830381865af4158015612195573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b991906157c2565b9050801561220557816001600160a01b03167f02637aab023322fc124131f556858082be212382f69cdec79efddcbfbc5c0205826040516121fc91815260200190565b60405180910390a25b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166123425782156122795760405162461bcd60e51b815260206004820152601560248201527450455f443a20616d6f756e74206e6f74207a65726f60581b6044820152606401610c4d565b6001600160a01b038216600090815260026020526040908190209051624d1ed560e11b8152600481019190915234602482015273__$2adfba613814486128a81a7b4ccb98752b$__90629a3daa9060440160006040518083038186803b1580156122e257600080fd5b505af41580156122f6573d6000803e3d6000fd5b50505050816001600160a01b03167f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c43460405161233591815260200190565b60405180910390a26124a7565b34156123905760405162461bcd60e51b815260206004820152601860248201527f50455f443a206d73672e76616c7565206e6f74207a65726f00000000000000006044820152606401610c4d565b6001600160a01b0382811660008181526002602090815260409182902082516060810184527f0000000000000000000000000000000000000000000000000000000000000000861681529182018881528284019485529251631faeb67360e31b81526004810191909152905184166024820152905160448201529051909116606482015273__$2adfba613814486128a81a7b4ccb98752b$__9063fd75b3989060840160006040518083038186803b15801561244b57600080fd5b505af415801561245f573d6000803e3d6000fd5b50505050816001600160a01b03167f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c48460405161249e91815260200190565b60405180910390a25b5050600160005550565b6124b9613151565b6002600054036124db5760405162461bcd60e51b8152600401610c4d9061578b565b600260005560075462ffffff62010000909104811690821611156125415760405162461bcd60e51b815260206004820152601b60248201527f50455f534d523a20626967676572207468616e20696d526174696f00000000006044820152606401610c4d565b60008162ffffff16116125855760405162461bcd60e51b815260206004820152600c60248201526b50455f534d523a207a65726f60a01b6044820152606401610c4d565b6007805467ffffff00000000001916600160281b62ffffff8416908102919091179091556040519081527ffbd0bf17b9833a130f5baeccbfc586acefc75be8ad5bb114f448e412adc4c05b90602001610ca1565b6001600160a01b0382166000908152600260205260408082209051632691409160e01b815273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__916326914091916114ce919086906004019182526001600160a01b0316602082015260400190565b600061264d60408301602084016151f7565b612656816131ed565b600061266560208501856151f7565b9050600061267960608601604087016151f7565b905061274a60026000846001600160a01b03166001600160a01b031681526020019081526020016000206040518061010001604052808860200160208101906126c291906151f7565b6001600160a01b031681526020016126e060808a0160608b016157db565b151581526020016126f760a08a0160808b016157db565b1515815260a0808a0135602083015260c08a0135604083015260075462ffffff600160281b820481166060850152600160401b9091041660808301526001600160a01b03878116908716149101526137e1565b95945050505050565b6001600160a01b0381166000908152600260209081526040918290206004018054835181840281018401909452808452606093928301828280156127c057602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116127a2575b50505050509050919050565b6127d4613151565b6002600054036127f65760405162461bcd60e51b8152600401610c4d9061578b565b600260005561271062ffffff821611156128475760405162461bcd60e51b815260206004820152601260248201527150455f535046523a20746f6f206c6172676560701b6044820152606401610c4d565b600780546affffff00000000000000001916600160401b62ffffff8416908102919091179091556040519081527f68c41b7a5c12c4d9cbb99ec284bf647922a75f379a90694e3ad65574f4ff944d90602001610ca1565b60008060006002600054036128c55760405162461bcd60e51b8152600401610c4d9061578b565b600260005560a08401356128d8816131ab565b6128e560208601866151f7565b6128ee816131ed565b336128f881613263565b6001600160a01b0381166000908152600260209081526040808320815160e0810190925273__$0d082d4f68cd76e21bd5ff3b4c3f93bd83$__926360e361e092908190612947908e018e6151f7565b6001600160a01b0316815260208d810135908201526040808e0135818301526060808f0135908301526080808f01359083015260075462ffffff6201000082041660a084015260ff1660c090920191909152516001600160e01b031960e085901b168152612a1a92919060040160006101008201905083825260018060a01b038351166020830152602083015160408301526040830151606083015260608301516080830152608083015160a083015262ffffff60a08401511660c083015260ff60c08401511660e08301529392505050565b606060405180830381865af4158015612a37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a5b9190615b7c565b6001600160a01b038316600090815260026020908152604082209293509091600101908290612a8c908c018c6151f7565b6001600160a01b031681526020808201929092526040016000209150612ab4908a018a6151f7565b82516020808501516040808701516001870154600288015483519687529486019390935290840152606083015260808201526001600160a01b03918216918516907fea3191ffbe2f62bfd724ee8d971b15ff9b7994e3a9169dc4c60443be3e4a43c49060a00160405180910390a38160000151826020015183604001519750975097505050505b505060016000559193909250565b6000600260005403612b6d5760405162461bcd60e51b8152600401610c4d9061578b565b600260005560c0820135612b80816131ab565b612b9060408401602085016151f7565b612b99816131ed565b612bb0612bab36869003860186615bb8565b6138e0565b6001600055949350505050565b6001600160a01b0381166000908152600260205260408082206007549151634d3a1f3d60e11b815260048101919091526201000090910462ffffff16602482015273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__90639a743e7a90604401611b19565b6000806000600260005403612c495760405162461bcd60e51b8152600401610c4d9061578b565b60026000556080840135612c5c816131ab565b612c6960208601866151f7565b612c72816131ed565b336001612c8560c0890160a08a01615c5f565b6002811115612c9657612c96615744565b14612dcd576000612cad6040890160208a016157db565b1590506000612cbf60208a018a6151f7565b6040516366a61ffb60e01b815283151560048201819052602482015260608b013560448201526001600160a01b0391909116906366a61ffb90606401602060405180830381865afa158015612d18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d3c91906157c2565b9050612d4c818a60400135613d2c565b96508615612dca57612dc76040518060e00160405280856001600160a01b031681526020018b6000016020810190612d8491906151f7565b6001600160a01b031681526020018415158152602001841515815260200189815260200184612db557600019612db8565b60005b815260200160008152506138e0565b95505b50505b8487604001351480612dff57506002612dec60c0890160a08a01615c5f565b6002811115612dfd57612dfd615744565b145b15612e0e576000955050612b3b565b612e1781613263565b6001600160a01b0381166000908152600260209081526040918290208251610100810190935273__$20e084fd68fd7ab4ec93efaca84ca46fc4$__9263d34e48d4928190612e67908d018d6151f7565b6001600160a01b03168152602001612e838a60408e0135615c7c565b81526020018b6060013581526020018b6020016020810190612ea591906157db565b1515815260075462ffffff62010000820416602083015260ff80821660408401526101009091041660608201526080016000612ee760c08e0160a08f01615c5f565b6002811115612ef857612ef8615744565b1490526040516001600160e01b031960e085901b168152612f1d929190600401615c8f565b602060405180830381865af4158015612f3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f5e9190615d11565b95508060066000612f7260208b018b6151f7565b6001600160a01b03166001600160a01b031681526020019081526020016000206000896020016020810190612fa791906157db565b151581526020808201929092526040908101600090812064ffffffffff8b16825283522080546001600160a01b0319166001600160a01b039390931692909217909155612ff6908801886151f7565b6001600160a01b039081169082167f8ee9f54c945bff2a9eeec6044c0cf26c827fe5f224920cc0f9b82f8f5c9537af61303560408b0160208c016157db565b60408b013560608c013561304f60c08e0160a08f01615c5f565b8c8c60405161306396959493929190615d2e565b60405180910390a350505060016000559193909250565b613082613151565b6001600160a01b0381166130e75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c4d565b6130f081613495565b50565b6001600160a01b03811660009081526002602052604080822090516210164360e11b8152600481019190915273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__9062202c8690602401611b19565b6001600160a01b03163b151590565b6001546001600160a01b0316331461193e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610c4d565b804211156130f05760405162461bcd60e51b815260206004820152600f60248201526e50455f43443a20746f6f206c61746560881b6044820152606401610c4d565b60016001600160a01b03821660009081526009602052604090205460ff16600281111561321c5761321c615744565b146130f05760405162461bcd60e51b81526020600482015260176024820152762822afa1a6a79d1036b0b935b2ba103737ba1037b832b760491b6044820152606401610c4d565b6001600160a01b038116600090815260026020526040902060040180545b80156132c75761329081615d72565b90506132c2838383815481106132a8576132a8615aea565b6000918252602090912001546001600160a01b0316613d42565b613281565b505050565b60026001600160a01b03821660009081526009602052604090205460ff1660028111156132fb576132fb615744565b146130f05760405162461bcd60e51b815260206004820152601960248201527f50455f434d433a206d61726b6574206e6f7420636c6f736564000000000000006044820152606401610c4d565b604051633c7e525f60e01b81526004810188905262ffffff84166024820152600090819073__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__90633c7e525f90604401602060405180830381865af41580156133a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133cc9190615815565b159050821580156133db575080155b156133ea57600091505061348a565b8362ffffff166000036134785760405163e8fa204f60e01b81528715156004820152861515602482015281151560448201526001600160a01b0389169063e8fa204f90606401602060405180830381865afa15801561344d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061347191906157c2565b9150613488565b6134858888888785613e6b565b91505b505b979650505050505050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8060028111156134f9576134f9615744565b6001600160a01b03831660009081526009602052604090205460ff16600281111561352657613526615744565b0361352f575050565b600181600281111561354357613543615744565b036136d9576001600160a01b0382163b61359f5760405162461bcd60e51b815260206004820152601f60248201527f50455f53494d413a206d61726b6574206164647265737320696e76616c6964006044820152606401610c4d565b306001600160a01b0316826001600160a01b031663d2f7265a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156135e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061360b9190615d89565b6001600160a01b0316146136615760405162461bcd60e51b815260206004820152601b60248201527f50455f53494d413a20646966666572656e742065786368616e676500000000006044820152606401610c4d565b6001600160a01b03821660009081526009602052604081205460ff16600281111561368e5761368e615744565b146136d45760405162461bcd60e51b8152602060048201526016602482015275141157d4d253504e881b585c9ad95d0818db1bdcd95960521b6044820152606401610c4d565b61373d565b60028160028111156136ed576136ed615744565b036136fb576136d4826131ed565b60405162461bcd60e51b815260206004820152601760248201527650455f53494d413a20696e76616c69642073746174757360481b6044820152606401610c4d565b6001600160a01b0382166000908152600960205260409020805482919060ff1916600183600281111561377257613772615744565b0217905550816001600160a01b03167f74254d01f8ce923659c1e8739f33585649bc64b648a0382f22174528e5da382e826040516137b09190615778565b60405180910390a25050565b60606114658383604051806060016040528060278152602001615f9160279139613f30565b6000806137fe8484600001518560e001518660a00151600161400d565b90508260c0015162ffffff166000036138a757825160208401516040808601516060870151915162de853760e31b8152921515600484015215156024830152604482015282151560648201526001600160a01b03909116906306f429b890608401602060405180830381865afa15801561387c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138a091906157c2565b91506138cd565b6138c983600001518460200151856040015186606001518760c0015186614230565b5091505b612079836040015183856080015161446e565b60006138ef8260000151613263565b60006138fa83614514565b90508061010001516060015164ffffffffff16600014613adb57602080840180516001600160a01b039081166000908152600684526040808220818901511515835285528082206101008701516060015164ffffffffff1683529094529290922054905191169061396c908290613d42565b6001600160a01b03818116600090815260026020908152604080832088830151898301516007546101008a01518551632d4c09e360e11b815260048101959095529290971660248401521515604483015260ff9095166064820152845160848201529184015160a483015283015160c482015260609092015164ffffffffff1660e48301529073__$20e084fd68fd7ab4ec93efaca84ca46fc4$__90635a9813c69061010401602060405180830381865af4158015613a2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a5391906157c2565b905084602001516001600160a01b0316826001600160a01b03167f6a44f7a15d600604cd07ab787ae45c22908a25bcc8a24e951f297a4ff4885ccc8760400151866101000151602001518761010001516040015186604051613ad09493929190931515845260208401929092526040830152606082015260800190565b60405180910390a350505b600083602001516001600160a01b0316639482de1a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613b1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b4391906157c2565b9050600084602001516001600160a01b0316638ee8fe5d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613b89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bad91906157c2565b90508260e0015115613c8157336001600160a01b031685602001516001600160a01b031686600001516001600160a01b03167f7c3978559b662b8adf839d43cce2ec6ab7db3fdc995575e4576acc9e0628985d866000015187602001518860400151896060015189898c608001518d60a001518e60c00151604051613c7499989796959493929190988952602089019790975260408801959095526060870193909352608086019190915260a085015260c084015260e08301526101008201526101200190565b60405180910390a4613cfc565b60208086015186518551868401516040808901516060808b0151835195865297850193909352908301528101939093526080830185905260a083018490526001600160a01b03918216929116907fe386a40c070a1424ae709b98c27e64993228f777c6294ef7149cf0ee42ef46e89060c00160405180910390a35b846040015115158560600151151514613d1f578251613d1a9061460b565b61274a565b61274a836020015161460b565b6000818310613d3b5781611465565b5090919050565b6001600160a01b038281166000908152600260205260408082206007549151637bb8754b60e11b81526004810191909152928416602484015260ff1660448301529073__$20e084fd68fd7ab4ec93efaca84ca46fc4$__9063f770ea9690606401606060405180830381865af4158015613dc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613de49190615b7c565b8051909150151580613df95750602081015115155b80613e075750604081015115155b156132c75780516020808301516040808501518151948552928401919091528201526001600160a01b0380841691908516907f6b5fa0b84481e8650541048bcfc70b68c11e1e8234750aa74d18c8e98ac9a2ba9060600160405180910390a3505050565b60405163e8fa204f60e01b81528415156004820152831515602482015281151560448201526000906001600160a01b0387169063e8fa204f90606401602060405180830381865afa158015613ec4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ee891906157c2565b90508315613f13578461274a57613f0c613f05620f424085614634565b829061469a565b905061274a565b841561274a57613f0c613f29620f424085614634565b82906146af565b60606001600160a01b0384163b613f985760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610c4d565b600080856001600160a01b031685604051613fb39190615da6565b600060405180830381855af49150503d8060008114613fee576040519150601f19603f3d011682016040523d82523d6000602084013e613ff3565b606091505b50915091506140038282866146c4565b9695505050505050565b604051633c7e525f60e01b81526004810186905262ffffff8316602482015260009073__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__90633c7e525f90604401602060405180830381865af415801561406b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061408f9190615815565b159050836140d757806140d75760405162461bcd60e51b815260206004820152601060248201526f544c5f56543a20656e6f756768206d6d60801b6044820152606401610c4d565b811580156140e25750805b1561274a576001600160a01b03851660009081526001870160205260409020541561414f5760405162461bcd60e51b815260206004820181905260248201527f544c5f56543a206e6f206d616b6572207768656e206c69717569646174696f6e6044820152606401610c4d565b6001600160a01b038516600090815260028701602052604090205464ffffffffff16156141be5760405162461bcd60e51b815260206004820152601e60248201527f544c5f56543a206e6f2061736b207768656e206c69717569646174696f6e00006044820152606401610c4d565b6001600160a01b038516600090815260028088016020526040909120015464ffffffffff161561274a5760405162461bcd60e51b815260206004820152601e60248201527f544c5f56543a206e6f20626964207768656e206c69717569646174696f6e00006044820152606401610c4d565b600080851561437a5786156142de5760405162de853760e31b8152871515600482015286151560248201526044810186905283151560648201526001600160a01b038916906306f429b890608401602060405180830381865afa15801561429b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142bf91906157c2565b91506142cb82856146af565b90506142d782826146fd565b9150614463565b6142e885856146af565b90506001600160a01b0388166306f429b8888861430589866146fd565b6040516001600160e01b031960e086901b1681529215156004840152901515602483015260448201528515156064820152608401602060405180830381865afa158015614356573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142d791906157c2565b86156143be576143a18561439b614394620f424088614634565b889061469a565b906146fd565b90506001600160a01b0388166306f429b888886143058986614709565b60405162de853760e31b8152871515600482015286151560248201526044810186905283151560648201526000906001600160a01b038a16906306f429b890608401602060405180830381865afa15801561441d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061444191906157c2565b9050614453613f05620f424087614634565b925061445f83826146fd565b9150505b965096945050505050565b82156144c457808210156132c75760405162461bcd60e51b815260206004820181905260248201527f544c5f56533a20746f6f20736d616c6c206f70706f7369746520616d6f756e746044820152606401610c4d565b808211156132c75760405162461bcd60e51b815260206004820181905260248201527f544c5f56533a20746f6f206c61726765206f70706f7369746520616d6f756e746044820152606401610c4d565b61451c61513d565b81516001600160a01b03908116600090815260026020908152604080832033808552938290208251610160810184528489015187168152838901511515818601526060808a01511515828601526080808b01519183019190915260a0808b01519183019190915260075462ffffff600160281b8204811692840192909252620100008104821660c084015260ff811660e0840152600160401b90048116610100830152895190971690951461012086015282518084019093526008549586168352630100000090950461ffff1692820192909252610140830152610d3f92909160039182019190600590614715565b60008082121561462b5761462661462183614981565b6149df565b610d3f565b610d3f826149df565b60008262ffffff168262ffffff1611156146905760405162461bcd60e51b815260206004820152601e60248201527f506572704d6174683a207375627472616374696f6e206f766572666c6f7700006044820152606401610c4d565b6114658284615dc2565b600061146583620f42408462ffffff16614a35565b6000611465838362ffffff16620f4240614a35565b606083156146d3575081611465565b8251156146e35782518084602001fd5b8160405162461bcd60e51b8152600401610c4d9190615dde565b60006114658284615c7c565b60006114658284615df1565b61471d61513d565b6147388683600001518461012001518560a00151600061400d565b151560e080830191825283516001600160a01b03908116600090815260208a8152604091829020548251610100808201855289519095168152828901511515928101929092528288015115159282019290925260608088015190820152608080880151908201528684015160ff1660a08201529186015162ffffff1660c083015292511515918101919091526147d19088908690614ae4565b61010087015260608601526040850152602084015280835260009081906147f790614cbc565b845161480d90614808908690614ce4565b614cbc565b6148179190615e04565b1390508260e00151156148a85780156148725760405162461bcd60e51b815260206004820152601f60248201527f544c5f4f503a206e6f206f70656e207768656e206c69717569646174696f6e006044820152606401610c4d565b6148988860030188888760a00151886101400151614893896020015161460b565b614cf0565b60c086015260a085015260808401525b80156149765760c0840151604051634d3a1f3d60e11b8152600481018a905262ffffff909116602482015273__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$__90639a743e7a90604401602060405180830381865af415801561490f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149339190615815565b6149765760405162461bcd60e51b8152602060048201526014602482015273544c5f4f503a206e6f7420656e6f75676820696d60601b6044820152606401610c4d565b505095945050505050565b6000600160ff1b82136149d65760405162461bcd60e51b815260206004820152601c60248201527f506572704d6174683a20696e76657273696f6e206f766572666c6f77000000006044820152606401610c4d565b610d3f82615e89565b600080821215614a315760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f7369746976656044820152606401610c4d565b5090565b6000808060001985870985870292508281108382030391505080600003614a6f57838281614a6557614a65615ea5565b0492505050611465565b808411614a7b57600080fd5b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b600080600080614af2615190565b60c086015160009062ffffff1615614b3757614b2b88886000015189602001518a604001518b606001518c60c001518d60e00151614da7565b90945092509050614bd6565b865160208801516040808a015160608b015160e08c015192516380796d5560e01b8152931515600485015290151560248401526044830152151560648201526001600160a01b03909116906380796d55906084016080604051808303816000875af1158015614baa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614bce9190615ebb565b805190925090505b614be9876040015182896080015161446e565b614c0187602001518860400151896060015184615010565b885160a08a01516040516397ec610160e01b8152600481018e90526001600160a01b03909216602483015260448201849052606482018390526000608483015260ff1660a4820152919750955073__$d5b0dec45940a7a1291c9da6fe7c8bb2e1$",
  "libraries": {
    "AccountLibrary": "0x4e365c6E629d08E48dD5e6bAE2BA55BF0Bf95f77",
    "MakerLibrary": "0xc5a60D8Ef87e146e3F82f0231F1A98735992d821",
    "MakerOrderBookLibrary": "0xe5302D9086511023Cd13b23220Ef1Ea5395F99EC",
    "VaultLibrary": "0xB8065D806ebbbBB0941E8e2789F09f1B477497bb"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "multicall(bytes[])": {
        "details": "Receives and executes a batch of function calls on this contract."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 925,
        "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 550,
        "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6209,
        "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
        "label": "accountInfos",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(AccountInfo)16909_storage)"
      },
      {
        "astId": 6212,
        "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
        "label": "insuranceFundInfo",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(InsuranceFundInfo)16914_storage"
      },
      {
        "astId": 6215,
        "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
        "label": "protocolInfo",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(ProtocolInfo)16917_storage"
      },
      {
        "astId": 6223,
        "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
        "label": "orderIdToTrader",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_bool,t_mapping(t_uint40,t_address)))"
      },
      {
        "astId": 6231,
        "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
        "label": "maxMarketsPerAccount",
        "offset": 0,
        "slot": "7",
        "type": "t_uint8"
      },
      {
        "astId": 6234,
        "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
        "label": "maxOrdersPerAccount",
        "offset": 1,
        "slot": "7",
        "type": "t_uint8"
      },
      {
        "astId": 6237,
        "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
        "label": "imRatio",
        "offset": 2,
        "slot": "7",
        "type": "t_uint24"
      },
      {
        "astId": 6240,
        "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
        "label": "mmRatio",
        "offset": 5,
        "slot": "7",
        "type": "t_uint24"
      },
      {
        "astId": 6243,
        "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
        "label": "protocolFeeRatio",
        "offset": 8,
        "slot": "7",
        "type": "t_uint24"
      },
      {
        "astId": 6251,
        "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
        "label": "liquidationRewardConfig",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(LiquidationRewardConfig)16922_storage"
      },
      {
        "astId": 6256,
        "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
        "label": "marketStatuses",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_enum(MarketStatus)16859)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(MarketStatus)16859": {
        "encoding": "inplace",
        "label": "enum PerpdexStructs.MarketStatus",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_enum(MarketStatus)16859)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum PerpdexStructs.MarketStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(MarketStatus)16859"
      },
      "t_mapping(t_address,t_mapping(t_bool,t_mapping(t_uint40,t_address)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bool => mapping(uint40 => address)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bool,t_mapping(t_uint40,t_address))"
      },
      "t_mapping(t_address,t_struct(AccountInfo)16909_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PerpdexStructs.AccountInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(AccountInfo)16909_storage"
      },
      "t_mapping(t_address,t_struct(LimitOrderInfo)16882_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PerpdexStructs.LimitOrderInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(LimitOrderInfo)16882_storage"
      },
      "t_mapping(t_address,t_struct(MakerInfo)16871_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PerpdexStructs.MakerInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(MakerInfo)16871_storage"
      },
      "t_mapping(t_address,t_struct(TakerInfo)16864_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PerpdexStructs.TakerInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TakerInfo)16864_storage"
      },
      "t_mapping(t_bool,t_mapping(t_uint40,t_address))": {
        "encoding": "mapping",
        "key": "t_bool",
        "label": "mapping(bool => mapping(uint40 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint40,t_address)"
      },
      "t_mapping(t_uint40,t_address)": {
        "encoding": "mapping",
        "key": "t_uint40",
        "label": "mapping(uint40 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint40,t_struct(Node)22036_storage)": {
        "encoding": "mapping",
        "key": "t_uint40",
        "label": "mapping(uint40 => struct BokkyPooBahsRedBlackTreeLibrary.Node)",
        "numberOfBytes": "32",
        "value": "t_struct(Node)22036_storage"
      },
      "t_struct(AccountInfo)16909_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.AccountInfo",
        "members": [
          {
            "astId": 16890,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "takerInfos",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_struct(TakerInfo)16864_storage)"
          },
          {
            "astId": 16895,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "makerInfos",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_struct(MakerInfo)16871_storage)"
          },
          {
            "astId": 16900,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "limitOrderInfos",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_struct(LimitOrderInfo)16882_storage)"
          },
          {
            "astId": 16903,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "vaultInfo",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(VaultInfo)16885_storage"
          },
          {
            "astId": 16906,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "markets",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 16908,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "limitOrderCount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(InsuranceFundInfo)16914_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.InsuranceFundInfo",
        "members": [
          {
            "astId": 16911,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16913,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "liquidationRewardBalance",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(LimitOrderInfo)16882_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.LimitOrderInfo",
        "members": [
          {
            "astId": 16874,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "ask",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Tree)22044_storage"
          },
          {
            "astId": 16877,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "bid",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Tree)22044_storage"
          },
          {
            "astId": 16879,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "totalBaseAsk",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 16881,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "totalBaseBid",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(LiquidationRewardConfig)16922_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.LiquidationRewardConfig",
        "members": [
          {
            "astId": 16919,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "rewardRatio",
            "offset": 0,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 16921,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "smoothEmaTime",
            "offset": 3,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(MakerInfo)16871_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.MakerInfo",
        "members": [
          {
            "astId": 16866,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "liquidity",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16868,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "cumBaseSharePerLiquidityX96",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 16870,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "cumQuotePerLiquidityX96",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Node)22036_storage": {
        "encoding": "inplace",
        "label": "struct BokkyPooBahsRedBlackTreeLibrary.Node",
        "members": [
          {
            "astId": 22027,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "parent",
            "offset": 0,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 22029,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "left",
            "offset": 5,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 22031,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "right",
            "offset": 10,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 22033,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "red",
            "offset": 15,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 22035,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "userData",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ProtocolInfo)16917_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.ProtocolInfo",
        "members": [
          {
            "astId": 16916,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "protocolFee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TakerInfo)16864_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.TakerInfo",
        "members": [
          {
            "astId": 16861,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "baseBalanceShare",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 16863,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "quoteBalance",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Tree)22044_storage": {
        "encoding": "inplace",
        "label": "struct BokkyPooBahsRedBlackTreeLibrary.Tree",
        "members": [
          {
            "astId": 22038,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "root",
            "offset": 0,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 22043,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "nodes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint40,t_struct(Node)22036_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(VaultInfo)16885_storage": {
        "encoding": "inplace",
        "label": "struct PerpdexStructs.VaultInfo",
        "members": [
          {
            "astId": 16884,
            "contract": "contracts/test/DebugPerpdexExchange.sol:DebugPerpdexExchange",
            "label": "collateralBalance",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}